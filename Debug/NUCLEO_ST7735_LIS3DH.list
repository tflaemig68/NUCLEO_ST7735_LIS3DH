
NUCLEO_ST7735_LIS3DH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f74  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003388  08008118  08008118  00018118  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b4a0  0800b4a0  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  0800b4a0  0800b4a0  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b4a0  0800b4a0  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b4a0  0800b4a0  0001b4a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b4a4  0800b4a4  0001b4a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800b4a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000058  200001f0  0800b698  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000248  0800b698  00020248  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000059c1  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001241  00000000  00000000  00025be1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000568  00000000  00000000  00026e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00011283  00000000  00000000  00027390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00005d70  00000000  00000000  00038613  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00057437  00000000  00000000  0003e383  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  000957ba  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 000004a8  00000000  00000000  00095810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000027b4  00000000  00000000  00095cb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080080fc 	.word	0x080080fc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	080080fc 	.word	0x080080fc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <commandList>:
static uint16_t _fg = ST7735_GREEN;
static uint16_t _bg = ST7735_BLACK;

// Companion code to the above tables.  Reads and issues
// a series of LCD commands stored in PROGMEM byte array.
static void commandList(const uint8_t *addr) {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
	uint8_t  numCommands, numArgs;
	uint16_t ms;

	numCommands = *addr++;   // Number of commands to follow
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	1c5a      	adds	r2, r3, #1
 8000c64:	607a      	str	r2, [r7, #4]
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	73fb      	strb	r3, [r7, #15]
	while(numCommands--) {                 // For each command...
 8000c6a:	e033      	b.n	8000cd4 <commandList+0x7c>
		lcd7735_sendCmd(*addr++); //   Read, issue command
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	1c5a      	adds	r2, r3, #1
 8000c70:	607a      	str	r2, [r7, #4]
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	4618      	mov	r0, r3
 8000c76:	f001 fa65 	bl	8002144 <lcd7735_sendCmd>
		numArgs  = *addr++;    //   Number of args to follow
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	1c5a      	adds	r2, r3, #1
 8000c7e:	607a      	str	r2, [r7, #4]
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	73bb      	strb	r3, [r7, #14]
		ms       = numArgs & DELAY;          //   If hibit set, delay follows args
 8000c84:	7bbb      	ldrb	r3, [r7, #14]
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c8c:	81bb      	strh	r3, [r7, #12]
		numArgs &= ~DELAY;                   //   Mask out delay bit
 8000c8e:	7bbb      	ldrb	r3, [r7, #14]
 8000c90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000c94:	73bb      	strb	r3, [r7, #14]
		while(numArgs--) {                   //   For each argument...
 8000c96:	e006      	b.n	8000ca6 <commandList+0x4e>
			lcd7735_sendData(*addr++);  //     Read, issue argument
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	1c5a      	adds	r2, r3, #1
 8000c9c:	607a      	str	r2, [r7, #4]
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f001 fa63 	bl	800216c <lcd7735_sendData>
		while(numArgs--) {                   //   For each argument...
 8000ca6:	7bbb      	ldrb	r3, [r7, #14]
 8000ca8:	1e5a      	subs	r2, r3, #1
 8000caa:	73ba      	strb	r2, [r7, #14]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d1f3      	bne.n	8000c98 <commandList+0x40>
		}

		if(ms) {
 8000cb0:	89bb      	ldrh	r3, [r7, #12]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d00e      	beq.n	8000cd4 <commandList+0x7c>
			ms = *addr++; // Read post-command delay time (ms)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	1c5a      	adds	r2, r3, #1
 8000cba:	607a      	str	r2, [r7, #4]
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	81bb      	strh	r3, [r7, #12]
			if(ms == 255) ms = 500;     // If 255, delay for 500 ms
 8000cc0:	89bb      	ldrh	r3, [r7, #12]
 8000cc2:	2bff      	cmp	r3, #255	; 0xff
 8000cc4:	d102      	bne.n	8000ccc <commandList+0x74>
 8000cc6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000cca:	81bb      	strh	r3, [r7, #12]
			delay_ms(ms);
 8000ccc:	89bb      	ldrh	r3, [r7, #12]
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f001 fa0c 	bl	80020ec <delay_ms>
	while(numCommands--) {                 // For each command...
 8000cd4:	7bfb      	ldrb	r3, [r7, #15]
 8000cd6:	1e5a      	subs	r2, r3, #1
 8000cd8:	73fa      	strb	r2, [r7, #15]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d1c6      	bne.n	8000c6c <commandList+0x14>
		}
	}
}
 8000cde:	bf00      	nop
 8000ce0:	bf00      	nop
 8000ce2:	3710      	adds	r7, #16
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <commonInit>:

// Initialization code common to both 'B' and 'R' type displays
static void commonInit(const uint8_t *cmdList) {
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
	// toggle RST low to reset; CS low so it'll listen to us
	ST7735_CS0;
 8000cf0:	2106      	movs	r1, #6
 8000cf2:	480c      	ldr	r0, [pc, #48]	; (8000d24 <commonInit+0x3c>)
 8000cf4:	f002 fca6 	bl	8003644 <gpioResetPin>
	lcd7735_sendCmd(ST7735_SWRESET);
	delay_ms(500);
#else
	//ST7735_RST1;
	//delay_ms(500);
	ST7735_RST0;
 8000cf8:	2109      	movs	r1, #9
 8000cfa:	480b      	ldr	r0, [pc, #44]	; (8000d28 <commonInit+0x40>)
 8000cfc:	f002 fca2 	bl	8003644 <gpioResetPin>
	delay_ms(50);  //default value 500
 8000d00:	2032      	movs	r0, #50	; 0x32
 8000d02:	f001 f9f3 	bl	80020ec <delay_ms>
	ST7735_RST1;
 8000d06:	2109      	movs	r1, #9
 8000d08:	4807      	ldr	r0, [pc, #28]	; (8000d28 <commonInit+0x40>)
 8000d0a:	f002 fc70 	bl	80035ee <gpioSetPin>
	//delay_ms(500);
#endif    
	if(cmdList) commandList(cmdList);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d002      	beq.n	8000d1a <commonInit+0x32>
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	f7ff ff9f 	bl	8000c58 <commandList>
}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40020400 	.word	0x40020400
 8000d28:	40020000 	.word	0x40020000

08000d2c <lcd7735_initR>:
	commonInit(Bcmd);
}


// Initialization for ST7735R screens (green or red tabs)
void lcd7735_initR(uint8_t options) {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	71fb      	strb	r3, [r7, #7]
	delay_ms(50);
 8000d36:	2032      	movs	r0, #50	; 0x32
 8000d38:	f001 f9d8 	bl	80020ec <delay_ms>
	commonInit(Rcmd1);
 8000d3c:	4811      	ldr	r0, [pc, #68]	; (8000d84 <lcd7735_initR+0x58>)
 8000d3e:	f7ff ffd3 	bl	8000ce8 <commonInit>
	if(options == INITR_GREENTAB) {
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d109      	bne.n	8000d5c <lcd7735_initR+0x30>
		commandList(Rcmd2green);
 8000d48:	480f      	ldr	r0, [pc, #60]	; (8000d88 <lcd7735_initR+0x5c>)
 8000d4a:	f7ff ff85 	bl	8000c58 <commandList>
		colstart = 2;
 8000d4e:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <lcd7735_initR+0x60>)
 8000d50:	2202      	movs	r2, #2
 8000d52:	601a      	str	r2, [r3, #0]
		rowstart = 1;
 8000d54:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <lcd7735_initR+0x64>)
 8000d56:	2201      	movs	r2, #1
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	e002      	b.n	8000d62 <lcd7735_initR+0x36>
	} else {
		// colstart, rowstart left at default '0' values
		commandList(Rcmd2red);
 8000d5c:	480d      	ldr	r0, [pc, #52]	; (8000d94 <lcd7735_initR+0x68>)
 8000d5e:	f7ff ff7b 	bl	8000c58 <commandList>
	}
	commandList(Rcmd3);
 8000d62:	480d      	ldr	r0, [pc, #52]	; (8000d98 <lcd7735_initR+0x6c>)
 8000d64:	f7ff ff78 	bl	8000c58 <commandList>

	// if black, change MADCTL color filter
	if (options == INITR_BLACKTAB) {
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	2b02      	cmp	r3, #2
 8000d6c:	d105      	bne.n	8000d7a <lcd7735_initR+0x4e>
		lcd7735_sendCmd(ST7735_MADCTL);
 8000d6e:	2036      	movs	r0, #54	; 0x36
 8000d70:	f001 f9e8 	bl	8002144 <lcd7735_sendCmd>
		lcd7735_sendData(0xC0);
 8000d74:	20c0      	movs	r0, #192	; 0xc0
 8000d76:	f001 f9f9 	bl	800216c <lcd7735_sendData>
	}

	//  tabcolor = options;
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	080099a8 	.word	0x080099a8
 8000d88:	080099e4 	.word	0x080099e4
 8000d8c:	2000020c 	.word	0x2000020c
 8000d90:	20000210 	.word	0x20000210
 8000d94:	080099f4 	.word	0x080099f4
 8000d98:	08009a04 	.word	0x08009a04

08000d9c <lcd7735_setAddrWindow>:


void lcd7735_setAddrWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8000d9c:	b590      	push	{r4, r7, lr}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4604      	mov	r4, r0
 8000da4:	4608      	mov	r0, r1
 8000da6:	4611      	mov	r1, r2
 8000da8:	461a      	mov	r2, r3
 8000daa:	4623      	mov	r3, r4
 8000dac:	71fb      	strb	r3, [r7, #7]
 8000dae:	4603      	mov	r3, r0
 8000db0:	71bb      	strb	r3, [r7, #6]
 8000db2:	460b      	mov	r3, r1
 8000db4:	717b      	strb	r3, [r7, #5]
 8000db6:	4613      	mov	r3, r2
 8000db8:	713b      	strb	r3, [r7, #4]
	lcd7735_sendCmd(ST7735_CASET);		// Column addr set
 8000dba:	202a      	movs	r0, #42	; 0x2a
 8000dbc:	f001 f9c2 	bl	8002144 <lcd7735_sendCmd>
	lcd7735_sendData(0x00);
 8000dc0:	2000      	movs	r0, #0
 8000dc2:	f001 f9d3 	bl	800216c <lcd7735_sendData>
	lcd7735_sendData(x0+colstart);     // XSTART 
 8000dc6:	4b1b      	ldr	r3, [pc, #108]	; (8000e34 <lcd7735_setAddrWindow+0x98>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	b2da      	uxtb	r2, r3
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
 8000dce:	4413      	add	r3, r2
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f001 f9ca 	bl	800216c <lcd7735_sendData>
	lcd7735_sendData(0x00);
 8000dd8:	2000      	movs	r0, #0
 8000dda:	f001 f9c7 	bl	800216c <lcd7735_sendData>
	lcd7735_sendData(x1+colstart);     // XEND
 8000dde:	4b15      	ldr	r3, [pc, #84]	; (8000e34 <lcd7735_setAddrWindow+0x98>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	b2da      	uxtb	r2, r3
 8000de4:	797b      	ldrb	r3, [r7, #5]
 8000de6:	4413      	add	r3, r2
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	4618      	mov	r0, r3
 8000dec:	f001 f9be 	bl	800216c <lcd7735_sendData>

	lcd7735_sendCmd(ST7735_RASET); // Row addr set
 8000df0:	202b      	movs	r0, #43	; 0x2b
 8000df2:	f001 f9a7 	bl	8002144 <lcd7735_sendCmd>
	lcd7735_sendData(0x00);
 8000df6:	2000      	movs	r0, #0
 8000df8:	f001 f9b8 	bl	800216c <lcd7735_sendData>
	lcd7735_sendData(y0+rowstart);     // YSTART
 8000dfc:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <lcd7735_setAddrWindow+0x9c>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	b2da      	uxtb	r2, r3
 8000e02:	79bb      	ldrb	r3, [r7, #6]
 8000e04:	4413      	add	r3, r2
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f001 f9af 	bl	800216c <lcd7735_sendData>
	lcd7735_sendData(0x00);
 8000e0e:	2000      	movs	r0, #0
 8000e10:	f001 f9ac 	bl	800216c <lcd7735_sendData>
	lcd7735_sendData(y1+rowstart);     // YEND
 8000e14:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <lcd7735_setAddrWindow+0x9c>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	b2da      	uxtb	r2, r3
 8000e1a:	793b      	ldrb	r3, [r7, #4]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	4618      	mov	r0, r3
 8000e22:	f001 f9a3 	bl	800216c <lcd7735_sendData>

	lcd7735_sendCmd(ST7735_RAMWR); // write to RAM
 8000e26:	202c      	movs	r0, #44	; 0x2c
 8000e28:	f001 f98c 	bl	8002144 <lcd7735_sendCmd>
}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd90      	pop	{r4, r7, pc}
 8000e34:	2000020c 	.word	0x2000020c
 8000e38:	20000210 	.word	0x20000210

08000e3c <lcd7735_pushColor>:
void lcd7735_pushColor(uint16_t color) {
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	80fb      	strh	r3, [r7, #6]
	ST7735_DC1;
 8000e46:	2107      	movs	r1, #7
 8000e48:	4809      	ldr	r0, [pc, #36]	; (8000e70 <lcd7735_pushColor+0x34>)
 8000e4a:	f002 fbd0 	bl	80035ee <gpioSetPin>
	putpix(color);
 8000e4e:	88fb      	ldrh	r3, [r7, #6]
 8000e50:	0a1b      	lsrs	r3, r3, #8
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	4618      	mov	r0, r3
 8000e58:	f001 f960 	bl	800211c <lcd7735_senddata>
 8000e5c:	88fb      	ldrh	r3, [r7, #6]
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	4618      	mov	r0, r3
 8000e62:	f001 f95b 	bl	800211c <lcd7735_senddata>
}
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40020800 	.word	0x40020800

08000e74 <lcd7735_drawPixel>:

// draw color pixel on screen
void lcd7735_drawPixel(int16_t x, int16_t y, uint16_t color) {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	80fb      	strh	r3, [r7, #6]
 8000e7e:	460b      	mov	r3, r1
 8000e80:	80bb      	strh	r3, [r7, #4]
 8000e82:	4613      	mov	r3, r2
 8000e84:	807b      	strh	r3, [r7, #2]

	if((x < 0) ||(x >= _width) || (y < 0) || (y >= _height)) return;
 8000e86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	db22      	blt.n	8000ed4 <lcd7735_drawPixel+0x60>
 8000e8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e92:	4a12      	ldr	r2, [pc, #72]	; (8000edc <lcd7735_drawPixel+0x68>)
 8000e94:	8812      	ldrh	r2, [r2, #0]
 8000e96:	4293      	cmp	r3, r2
 8000e98:	da1c      	bge.n	8000ed4 <lcd7735_drawPixel+0x60>
 8000e9a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	db18      	blt.n	8000ed4 <lcd7735_drawPixel+0x60>
 8000ea2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000ea6:	4a0e      	ldr	r2, [pc, #56]	; (8000ee0 <lcd7735_drawPixel+0x6c>)
 8000ea8:	8812      	ldrh	r2, [r2, #0]
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	da12      	bge.n	8000ed4 <lcd7735_drawPixel+0x60>

	lcd7735_setAddrWindow(x,y,x+1,y+1);
 8000eae:	88fb      	ldrh	r3, [r7, #6]
 8000eb0:	b2d8      	uxtb	r0, r3
 8000eb2:	88bb      	ldrh	r3, [r7, #4]
 8000eb4:	b2d9      	uxtb	r1, r3
 8000eb6:	88fb      	ldrh	r3, [r7, #6]
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	3301      	adds	r3, #1
 8000ebc:	b2da      	uxtb	r2, r3
 8000ebe:	88bb      	ldrh	r3, [r7, #4]
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	f7ff ff69 	bl	8000d9c <lcd7735_setAddrWindow>
	lcd7735_pushColor(color);
 8000eca:	887b      	ldrh	r3, [r7, #2]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff ffb5 	bl	8000e3c <lcd7735_pushColor>
 8000ed2:	e000      	b.n	8000ed6 <lcd7735_drawPixel+0x62>
	if((x < 0) ||(x >= _width) || (y < 0) || (y >= _height)) return;
 8000ed4:	bf00      	nop
}
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20000000 	.word	0x20000000
 8000ee0:	20000002 	.word	0x20000002

08000ee4 <lcd7735_fillRect>:

// fill a rectangle
void lcd7735_fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {	
 8000ee4:	b590      	push	{r4, r7, lr}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4604      	mov	r4, r0
 8000eec:	4608      	mov	r0, r1
 8000eee:	4611      	mov	r1, r2
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	4623      	mov	r3, r4
 8000ef4:	80fb      	strh	r3, [r7, #6]
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	80bb      	strh	r3, [r7, #4]
 8000efa:	460b      	mov	r3, r1
 8000efc:	807b      	strh	r3, [r7, #2]
 8000efe:	4613      	mov	r3, r2
 8000f00:	803b      	strh	r3, [r7, #0]
	// rudimentary clipping (drawChar w/big text requires this)
	if((x >= _width) || (y >= _height)) return;
 8000f02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f06:	4a37      	ldr	r2, [pc, #220]	; (8000fe4 <lcd7735_fillRect+0x100>)
 8000f08:	8812      	ldrh	r2, [r2, #0]
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	da65      	bge.n	8000fda <lcd7735_fillRect+0xf6>
 8000f0e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f12:	4a35      	ldr	r2, [pc, #212]	; (8000fe8 <lcd7735_fillRect+0x104>)
 8000f14:	8812      	ldrh	r2, [r2, #0]
 8000f16:	4293      	cmp	r3, r2
 8000f18:	da5f      	bge.n	8000fda <lcd7735_fillRect+0xf6>
	if((x + w - 1) >= _width)  w = _width  - x;
 8000f1a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000f1e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000f22:	4413      	add	r3, r2
 8000f24:	4a2f      	ldr	r2, [pc, #188]	; (8000fe4 <lcd7735_fillRect+0x100>)
 8000f26:	8812      	ldrh	r2, [r2, #0]
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	dd05      	ble.n	8000f38 <lcd7735_fillRect+0x54>
 8000f2c:	4b2d      	ldr	r3, [pc, #180]	; (8000fe4 <lcd7735_fillRect+0x100>)
 8000f2e:	881a      	ldrh	r2, [r3, #0]
 8000f30:	88fb      	ldrh	r3, [r7, #6]
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= _height) h = _height - y;
 8000f38:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000f3c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000f40:	4413      	add	r3, r2
 8000f42:	4a29      	ldr	r2, [pc, #164]	; (8000fe8 <lcd7735_fillRect+0x104>)
 8000f44:	8812      	ldrh	r2, [r2, #0]
 8000f46:	4293      	cmp	r3, r2
 8000f48:	dd05      	ble.n	8000f56 <lcd7735_fillRect+0x72>
 8000f4a:	4b27      	ldr	r3, [pc, #156]	; (8000fe8 <lcd7735_fillRect+0x104>)
 8000f4c:	881a      	ldrh	r2, [r3, #0]
 8000f4e:	88bb      	ldrh	r3, [r7, #4]
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	b29b      	uxth	r3, r3
 8000f54:	803b      	strh	r3, [r7, #0]

	lcd7735_setAddrWindow(x, y, x+w-1, y+h-1);
 8000f56:	88fb      	ldrh	r3, [r7, #6]
 8000f58:	b2d8      	uxtb	r0, r3
 8000f5a:	88bb      	ldrh	r3, [r7, #4]
 8000f5c:	b2d9      	uxtb	r1, r3
 8000f5e:	88fb      	ldrh	r3, [r7, #6]
 8000f60:	b2da      	uxtb	r2, r3
 8000f62:	887b      	ldrh	r3, [r7, #2]
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	4413      	add	r3, r2
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	b2dc      	uxtb	r4, r3
 8000f6e:	88bb      	ldrh	r3, [r7, #4]
 8000f70:	b2da      	uxtb	r2, r3
 8000f72:	883b      	ldrh	r3, [r7, #0]
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	4413      	add	r3, r2
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	4622      	mov	r2, r4
 8000f80:	f7ff ff0c 	bl	8000d9c <lcd7735_setAddrWindow>

	ST7735_DC1;
 8000f84:	2107      	movs	r1, #7
 8000f86:	4819      	ldr	r0, [pc, #100]	; (8000fec <lcd7735_fillRect+0x108>)
 8000f88:	f002 fb31 	bl	80035ee <gpioSetPin>
	for(y=h; y>0; y--) {
 8000f8c:	883b      	ldrh	r3, [r7, #0]
 8000f8e:	80bb      	strh	r3, [r7, #4]
 8000f90:	e01e      	b.n	8000fd0 <lcd7735_fillRect+0xec>
		for(x=w; x>0; x--) {
 8000f92:	887b      	ldrh	r3, [r7, #2]
 8000f94:	80fb      	strh	r3, [r7, #6]
 8000f96:	e011      	b.n	8000fbc <lcd7735_fillRect+0xd8>
			putpix(color);
 8000f98:	8b3b      	ldrh	r3, [r7, #24]
 8000f9a:	0a1b      	lsrs	r3, r3, #8
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f001 f8bb 	bl	800211c <lcd7735_senddata>
 8000fa6:	8b3b      	ldrh	r3, [r7, #24]
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	4618      	mov	r0, r3
 8000fac:	f001 f8b6 	bl	800211c <lcd7735_senddata>
		for(x=w; x>0; x--) {
 8000fb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fb4:	b29b      	uxth	r3, r3
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	80fb      	strh	r3, [r7, #6]
 8000fbc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	dce9      	bgt.n	8000f98 <lcd7735_fillRect+0xb4>
	for(y=h; y>0; y--) {
 8000fc4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	80bb      	strh	r3, [r7, #4]
 8000fd0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	dcdc      	bgt.n	8000f92 <lcd7735_fillRect+0xae>
 8000fd8:	e000      	b.n	8000fdc <lcd7735_fillRect+0xf8>
	if((x >= _width) || (y >= _height)) return;
 8000fda:	bf00      	nop
		}
	}
}
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd90      	pop	{r4, r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000000 	.word	0x20000000
 8000fe8:	20000002 	.word	0x20000002
 8000fec:	40020800 	.word	0x40020800

08000ff0 <lcd7735_drawFastVLine>:
//
// for optimize code size if graphics features not need
//
#ifndef ONLY_TERMINAL_EMULATOR

void lcd7735_drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 8000ff0:	b590      	push	{r4, r7, lr}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4604      	mov	r4, r0
 8000ff8:	4608      	mov	r0, r1
 8000ffa:	4611      	mov	r1, r2
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	4623      	mov	r3, r4
 8001000:	80fb      	strh	r3, [r7, #6]
 8001002:	4603      	mov	r3, r0
 8001004:	80bb      	strh	r3, [r7, #4]
 8001006:	460b      	mov	r3, r1
 8001008:	807b      	strh	r3, [r7, #2]
 800100a:	4613      	mov	r3, r2
 800100c:	803b      	strh	r3, [r7, #0]
	// Rudimentary clipping
	if((x >= _width) || (y >= _height)) return;
 800100e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001012:	4a24      	ldr	r2, [pc, #144]	; (80010a4 <lcd7735_drawFastVLine+0xb4>)
 8001014:	8812      	ldrh	r2, [r2, #0]
 8001016:	4293      	cmp	r3, r2
 8001018:	da3f      	bge.n	800109a <lcd7735_drawFastVLine+0xaa>
 800101a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800101e:	4a22      	ldr	r2, [pc, #136]	; (80010a8 <lcd7735_drawFastVLine+0xb8>)
 8001020:	8812      	ldrh	r2, [r2, #0]
 8001022:	4293      	cmp	r3, r2
 8001024:	da39      	bge.n	800109a <lcd7735_drawFastVLine+0xaa>
	if((y+h-1) >= _height) h = _height-y;
 8001026:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800102a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800102e:	4413      	add	r3, r2
 8001030:	4a1d      	ldr	r2, [pc, #116]	; (80010a8 <lcd7735_drawFastVLine+0xb8>)
 8001032:	8812      	ldrh	r2, [r2, #0]
 8001034:	4293      	cmp	r3, r2
 8001036:	dd05      	ble.n	8001044 <lcd7735_drawFastVLine+0x54>
 8001038:	4b1b      	ldr	r3, [pc, #108]	; (80010a8 <lcd7735_drawFastVLine+0xb8>)
 800103a:	881a      	ldrh	r2, [r3, #0]
 800103c:	88bb      	ldrh	r3, [r7, #4]
 800103e:	1ad3      	subs	r3, r2, r3
 8001040:	b29b      	uxth	r3, r3
 8001042:	807b      	strh	r3, [r7, #2]
	lcd7735_setAddrWindow(x, y, x, y+h-1);
 8001044:	88fb      	ldrh	r3, [r7, #6]
 8001046:	b2d8      	uxtb	r0, r3
 8001048:	88bb      	ldrh	r3, [r7, #4]
 800104a:	b2d9      	uxtb	r1, r3
 800104c:	88fb      	ldrh	r3, [r7, #6]
 800104e:	b2dc      	uxtb	r4, r3
 8001050:	88bb      	ldrh	r3, [r7, #4]
 8001052:	b2da      	uxtb	r2, r3
 8001054:	887b      	ldrh	r3, [r7, #2]
 8001056:	b2db      	uxtb	r3, r3
 8001058:	4413      	add	r3, r2
 800105a:	b2db      	uxtb	r3, r3
 800105c:	3b01      	subs	r3, #1
 800105e:	b2db      	uxtb	r3, r3
 8001060:	4622      	mov	r2, r4
 8001062:	f7ff fe9b 	bl	8000d9c <lcd7735_setAddrWindow>

	ST7735_DC1;
 8001066:	2107      	movs	r1, #7
 8001068:	4810      	ldr	r0, [pc, #64]	; (80010ac <lcd7735_drawFastVLine+0xbc>)
 800106a:	f002 fac0 	bl	80035ee <gpioSetPin>
	while (h--) {
 800106e:	e00b      	b.n	8001088 <lcd7735_drawFastVLine+0x98>
		putpix(color);
 8001070:	883b      	ldrh	r3, [r7, #0]
 8001072:	0a1b      	lsrs	r3, r3, #8
 8001074:	b29b      	uxth	r3, r3
 8001076:	b2db      	uxtb	r3, r3
 8001078:	4618      	mov	r0, r3
 800107a:	f001 f84f 	bl	800211c <lcd7735_senddata>
 800107e:	883b      	ldrh	r3, [r7, #0]
 8001080:	b2db      	uxtb	r3, r3
 8001082:	4618      	mov	r0, r3
 8001084:	f001 f84a 	bl	800211c <lcd7735_senddata>
	while (h--) {
 8001088:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800108c:	b29a      	uxth	r2, r3
 800108e:	3a01      	subs	r2, #1
 8001090:	b292      	uxth	r2, r2
 8001092:	807a      	strh	r2, [r7, #2]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d1eb      	bne.n	8001070 <lcd7735_drawFastVLine+0x80>
 8001098:	e000      	b.n	800109c <lcd7735_drawFastVLine+0xac>
	if((x >= _width) || (y >= _height)) return;
 800109a:	bf00      	nop
	}
}
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd90      	pop	{r4, r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000000 	.word	0x20000000
 80010a8:	20000002 	.word	0x20000002
 80010ac:	40020800 	.word	0x40020800

080010b0 <lcd7735_drawFastHLine>:

void lcd7735_drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
 80010b0:	b590      	push	{r4, r7, lr}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4604      	mov	r4, r0
 80010b8:	4608      	mov	r0, r1
 80010ba:	4611      	mov	r1, r2
 80010bc:	461a      	mov	r2, r3
 80010be:	4623      	mov	r3, r4
 80010c0:	80fb      	strh	r3, [r7, #6]
 80010c2:	4603      	mov	r3, r0
 80010c4:	80bb      	strh	r3, [r7, #4]
 80010c6:	460b      	mov	r3, r1
 80010c8:	807b      	strh	r3, [r7, #2]
 80010ca:	4613      	mov	r3, r2
 80010cc:	803b      	strh	r3, [r7, #0]
	// Rudimentary clipping
	if((x >= _width) || (y >= _height)) return;
 80010ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010d2:	4a23      	ldr	r2, [pc, #140]	; (8001160 <lcd7735_drawFastHLine+0xb0>)
 80010d4:	8812      	ldrh	r2, [r2, #0]
 80010d6:	4293      	cmp	r3, r2
 80010d8:	da3e      	bge.n	8001158 <lcd7735_drawFastHLine+0xa8>
 80010da:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80010de:	4a21      	ldr	r2, [pc, #132]	; (8001164 <lcd7735_drawFastHLine+0xb4>)
 80010e0:	8812      	ldrh	r2, [r2, #0]
 80010e2:	4293      	cmp	r3, r2
 80010e4:	da38      	bge.n	8001158 <lcd7735_drawFastHLine+0xa8>
	if((x+w-1) >= _width)  w = _width-x;
 80010e6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80010ea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80010ee:	4413      	add	r3, r2
 80010f0:	4a1b      	ldr	r2, [pc, #108]	; (8001160 <lcd7735_drawFastHLine+0xb0>)
 80010f2:	8812      	ldrh	r2, [r2, #0]
 80010f4:	4293      	cmp	r3, r2
 80010f6:	dd05      	ble.n	8001104 <lcd7735_drawFastHLine+0x54>
 80010f8:	4b19      	ldr	r3, [pc, #100]	; (8001160 <lcd7735_drawFastHLine+0xb0>)
 80010fa:	881a      	ldrh	r2, [r3, #0]
 80010fc:	88fb      	ldrh	r3, [r7, #6]
 80010fe:	1ad3      	subs	r3, r2, r3
 8001100:	b29b      	uxth	r3, r3
 8001102:	807b      	strh	r3, [r7, #2]
	lcd7735_setAddrWindow(x, y, x+w-1, y);
 8001104:	88fb      	ldrh	r3, [r7, #6]
 8001106:	b2d8      	uxtb	r0, r3
 8001108:	88bb      	ldrh	r3, [r7, #4]
 800110a:	b2d9      	uxtb	r1, r3
 800110c:	88fb      	ldrh	r3, [r7, #6]
 800110e:	b2da      	uxtb	r2, r3
 8001110:	887b      	ldrh	r3, [r7, #2]
 8001112:	b2db      	uxtb	r3, r3
 8001114:	4413      	add	r3, r2
 8001116:	b2db      	uxtb	r3, r3
 8001118:	3b01      	subs	r3, #1
 800111a:	b2da      	uxtb	r2, r3
 800111c:	88bb      	ldrh	r3, [r7, #4]
 800111e:	b2db      	uxtb	r3, r3
 8001120:	f7ff fe3c 	bl	8000d9c <lcd7735_setAddrWindow>

	ST7735_DC1;
 8001124:	2107      	movs	r1, #7
 8001126:	4810      	ldr	r0, [pc, #64]	; (8001168 <lcd7735_drawFastHLine+0xb8>)
 8001128:	f002 fa61 	bl	80035ee <gpioSetPin>
	while (w--) {
 800112c:	e00b      	b.n	8001146 <lcd7735_drawFastHLine+0x96>
		putpix(color);
 800112e:	883b      	ldrh	r3, [r7, #0]
 8001130:	0a1b      	lsrs	r3, r3, #8
 8001132:	b29b      	uxth	r3, r3
 8001134:	b2db      	uxtb	r3, r3
 8001136:	4618      	mov	r0, r3
 8001138:	f000 fff0 	bl	800211c <lcd7735_senddata>
 800113c:	883b      	ldrh	r3, [r7, #0]
 800113e:	b2db      	uxtb	r3, r3
 8001140:	4618      	mov	r0, r3
 8001142:	f000 ffeb 	bl	800211c <lcd7735_senddata>
	while (w--) {
 8001146:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800114a:	b29a      	uxth	r2, r3
 800114c:	3a01      	subs	r2, #1
 800114e:	b292      	uxth	r2, r2
 8001150:	807a      	strh	r2, [r7, #2]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d1eb      	bne.n	800112e <lcd7735_drawFastHLine+0x7e>
 8001156:	e000      	b.n	800115a <lcd7735_drawFastHLine+0xaa>
	if((x >= _width) || (y >= _height)) return;
 8001158:	bf00      	nop
	}
}
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	bd90      	pop	{r4, r7, pc}
 8001160:	20000000 	.word	0x20000000
 8001164:	20000002 	.word	0x20000002
 8001168:	40020800 	.word	0x40020800

0800116c <lcd7735_drawFastLine>:

void lcd7735_drawFastLine(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, uint16_t color) {
 800116c:	b590      	push	{r4, r7, lr}
 800116e:	b089      	sub	sp, #36	; 0x24
 8001170:	af02      	add	r7, sp, #8
 8001172:	4604      	mov	r4, r0
 8001174:	4608      	mov	r0, r1
 8001176:	4611      	mov	r1, r2
 8001178:	461a      	mov	r2, r3
 800117a:	4623      	mov	r3, r4
 800117c:	71fb      	strb	r3, [r7, #7]
 800117e:	4603      	mov	r3, r0
 8001180:	71bb      	strb	r3, [r7, #6]
 8001182:	460b      	mov	r3, r1
 8001184:	717b      	strb	r3, [r7, #5]
 8001186:	4613      	mov	r3, r2
 8001188:	713b      	strb	r3, [r7, #4]
	signed char   dx, dy, sx, sy;
	unsigned char  x,  y, mdx, mdy, l;

	if (x1==x2) {
 800118a:	79fa      	ldrb	r2, [r7, #7]
 800118c:	797b      	ldrb	r3, [r7, #5]
 800118e:	429a      	cmp	r2, r3
 8001190:	d10d      	bne.n	80011ae <lcd7735_drawFastLine+0x42>
		lcd7735_fillRect(x1,y1, x1,y2, color);
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	b218      	sxth	r0, r3
 8001196:	79bb      	ldrb	r3, [r7, #6]
 8001198:	b219      	sxth	r1, r3
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	b21a      	sxth	r2, r3
 800119e:	793b      	ldrb	r3, [r7, #4]
 80011a0:	b21c      	sxth	r4, r3
 80011a2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80011a4:	9300      	str	r3, [sp, #0]
 80011a6:	4623      	mov	r3, r4
 80011a8:	f7ff fe9c 	bl	8000ee4 <lcd7735_fillRect>
		return;
 80011ac:	e0b2      	b.n	8001314 <lcd7735_drawFastLine+0x1a8>
	}

	if (y1==y2) {
 80011ae:	79ba      	ldrb	r2, [r7, #6]
 80011b0:	793b      	ldrb	r3, [r7, #4]
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d10d      	bne.n	80011d2 <lcd7735_drawFastLine+0x66>
		lcd7735_fillRect(x1,y1, x2,y1, color);
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	b218      	sxth	r0, r3
 80011ba:	79bb      	ldrb	r3, [r7, #6]
 80011bc:	b219      	sxth	r1, r3
 80011be:	797b      	ldrb	r3, [r7, #5]
 80011c0:	b21a      	sxth	r2, r3
 80011c2:	79bb      	ldrb	r3, [r7, #6]
 80011c4:	b21c      	sxth	r4, r3
 80011c6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80011c8:	9300      	str	r3, [sp, #0]
 80011ca:	4623      	mov	r3, r4
 80011cc:	f7ff fe8a 	bl	8000ee4 <lcd7735_fillRect>
		return;
 80011d0:	e0a0      	b.n	8001314 <lcd7735_drawFastLine+0x1a8>
	}

	dx=x2-x1; dy=y2-y1;
 80011d2:	797a      	ldrb	r2, [r7, #5]
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	743b      	strb	r3, [r7, #16]
 80011dc:	793a      	ldrb	r2, [r7, #4]
 80011de:	79bb      	ldrb	r3, [r7, #6]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	73fb      	strb	r3, [r7, #15]

	if (dx>=0) { mdx=dx; sx=1; } else { mdx=x1-x2; sx=-1; }
 80011e6:	f997 3010 	ldrsb.w	r3, [r7, #16]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	db04      	blt.n	80011f8 <lcd7735_drawFastLine+0x8c>
 80011ee:	7c3b      	ldrb	r3, [r7, #16]
 80011f0:	74fb      	strb	r3, [r7, #19]
 80011f2:	2301      	movs	r3, #1
 80011f4:	75fb      	strb	r3, [r7, #23]
 80011f6:	e005      	b.n	8001204 <lcd7735_drawFastLine+0x98>
 80011f8:	79fa      	ldrb	r2, [r7, #7]
 80011fa:	797b      	ldrb	r3, [r7, #5]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	74fb      	strb	r3, [r7, #19]
 8001200:	23ff      	movs	r3, #255	; 0xff
 8001202:	75fb      	strb	r3, [r7, #23]
	if (dy>=0) { mdy=dy; sy=1; } else { mdy=y1-y2; sy=-1; }
 8001204:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001208:	2b00      	cmp	r3, #0
 800120a:	db04      	blt.n	8001216 <lcd7735_drawFastLine+0xaa>
 800120c:	7bfb      	ldrb	r3, [r7, #15]
 800120e:	74bb      	strb	r3, [r7, #18]
 8001210:	2301      	movs	r3, #1
 8001212:	75bb      	strb	r3, [r7, #22]
 8001214:	e005      	b.n	8001222 <lcd7735_drawFastLine+0xb6>
 8001216:	79ba      	ldrb	r2, [r7, #6]
 8001218:	793b      	ldrb	r3, [r7, #4]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	74bb      	strb	r3, [r7, #18]
 800121e:	23ff      	movs	r3, #255	; 0xff
 8001220:	75bb      	strb	r3, [r7, #22]

	x=x1; y=y1;
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	757b      	strb	r3, [r7, #21]
 8001226:	79bb      	ldrb	r3, [r7, #6]
 8001228:	753b      	strb	r3, [r7, #20]

	if (mdx>=mdy) {
 800122a:	7cfa      	ldrb	r2, [r7, #19]
 800122c:	7cbb      	ldrb	r3, [r7, #18]
 800122e:	429a      	cmp	r2, r3
 8001230:	d334      	bcc.n	800129c <lcd7735_drawFastLine+0x130>
		l=mdx;
 8001232:	7cfb      	ldrb	r3, [r7, #19]
 8001234:	747b      	strb	r3, [r7, #17]
		while (l>0) {
 8001236:	e02d      	b.n	8001294 <lcd7735_drawFastLine+0x128>
			if (dy>0) { y=y1+mdy*(x-x1)/mdx; }
 8001238:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800123c:	2b00      	cmp	r3, #0
 800123e:	dd0d      	ble.n	800125c <lcd7735_drawFastLine+0xf0>
 8001240:	7cbb      	ldrb	r3, [r7, #18]
 8001242:	7d79      	ldrb	r1, [r7, #21]
 8001244:	79fa      	ldrb	r2, [r7, #7]
 8001246:	1a8a      	subs	r2, r1, r2
 8001248:	fb03 f202 	mul.w	r2, r3, r2
 800124c:	7cfb      	ldrb	r3, [r7, #19]
 800124e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001252:	b2da      	uxtb	r2, r3
 8001254:	79bb      	ldrb	r3, [r7, #6]
 8001256:	4413      	add	r3, r2
 8001258:	753b      	strb	r3, [r7, #20]
 800125a:	e00c      	b.n	8001276 <lcd7735_drawFastLine+0x10a>
			else { y=y1-mdy*(x-x1)/mdx; }
 800125c:	7cbb      	ldrb	r3, [r7, #18]
 800125e:	7d79      	ldrb	r1, [r7, #21]
 8001260:	79fa      	ldrb	r2, [r7, #7]
 8001262:	1a8a      	subs	r2, r1, r2
 8001264:	fb03 f202 	mul.w	r2, r3, r2
 8001268:	7cfb      	ldrb	r3, [r7, #19]
 800126a:	fb92 f3f3 	sdiv	r3, r2, r3
 800126e:	b2db      	uxtb	r3, r3
 8001270:	79ba      	ldrb	r2, [r7, #6]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	753b      	strb	r3, [r7, #20]
			lcd7735_drawPixel(x,y,color);
 8001276:	7d7b      	ldrb	r3, [r7, #21]
 8001278:	b21b      	sxth	r3, r3
 800127a:	7d3a      	ldrb	r2, [r7, #20]
 800127c:	b211      	sxth	r1, r2
 800127e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff fdf7 	bl	8000e74 <lcd7735_drawPixel>
			x=x+sx;
 8001286:	7dfa      	ldrb	r2, [r7, #23]
 8001288:	7d7b      	ldrb	r3, [r7, #21]
 800128a:	4413      	add	r3, r2
 800128c:	757b      	strb	r3, [r7, #21]
			l-=2;
 800128e:	7c7b      	ldrb	r3, [r7, #17]
 8001290:	3b02      	subs	r3, #2
 8001292:	747b      	strb	r3, [r7, #17]
		while (l>0) {
 8001294:	7c7b      	ldrb	r3, [r7, #17]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1ce      	bne.n	8001238 <lcd7735_drawFastLine+0xcc>
 800129a:	e033      	b.n	8001304 <lcd7735_drawFastLine+0x198>
		}
	} else {
		l=mdy;
 800129c:	7cbb      	ldrb	r3, [r7, #18]
 800129e:	747b      	strb	r3, [r7, #17]
		while (l>0) {
 80012a0:	e02d      	b.n	80012fe <lcd7735_drawFastLine+0x192>
			if (dy>0) { x=x1+((mdx*(y-y1))/mdy); }
 80012a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	dd0d      	ble.n	80012c6 <lcd7735_drawFastLine+0x15a>
 80012aa:	7cfb      	ldrb	r3, [r7, #19]
 80012ac:	7d39      	ldrb	r1, [r7, #20]
 80012ae:	79ba      	ldrb	r2, [r7, #6]
 80012b0:	1a8a      	subs	r2, r1, r2
 80012b2:	fb03 f202 	mul.w	r2, r3, r2
 80012b6:	7cbb      	ldrb	r3, [r7, #18]
 80012b8:	fb92 f3f3 	sdiv	r3, r2, r3
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	4413      	add	r3, r2
 80012c2:	757b      	strb	r3, [r7, #21]
 80012c4:	e00c      	b.n	80012e0 <lcd7735_drawFastLine+0x174>
			else { x=x1+((mdx*(y1-y))/mdy); }
 80012c6:	7cfb      	ldrb	r3, [r7, #19]
 80012c8:	79b9      	ldrb	r1, [r7, #6]
 80012ca:	7d3a      	ldrb	r2, [r7, #20]
 80012cc:	1a8a      	subs	r2, r1, r2
 80012ce:	fb03 f202 	mul.w	r2, r3, r2
 80012d2:	7cbb      	ldrb	r3, [r7, #18]
 80012d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	4413      	add	r3, r2
 80012de:	757b      	strb	r3, [r7, #21]
			lcd7735_drawPixel(x,y,color);
 80012e0:	7d7b      	ldrb	r3, [r7, #21]
 80012e2:	b21b      	sxth	r3, r3
 80012e4:	7d3a      	ldrb	r2, [r7, #20]
 80012e6:	b211      	sxth	r1, r2
 80012e8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff fdc2 	bl	8000e74 <lcd7735_drawPixel>
			y=y+sy;
 80012f0:	7dba      	ldrb	r2, [r7, #22]
 80012f2:	7d3b      	ldrb	r3, [r7, #20]
 80012f4:	4413      	add	r3, r2
 80012f6:	753b      	strb	r3, [r7, #20]
			l-=2;
 80012f8:	7c7b      	ldrb	r3, [r7, #17]
 80012fa:	3b02      	subs	r3, #2
 80012fc:	747b      	strb	r3, [r7, #17]
		while (l>0) {
 80012fe:	7c7b      	ldrb	r3, [r7, #17]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d1ce      	bne.n	80012a2 <lcd7735_drawFastLine+0x136>
		}
	}
	lcd7735_drawPixel(x2, y2, color);
 8001304:	797b      	ldrb	r3, [r7, #5]
 8001306:	b21b      	sxth	r3, r3
 8001308:	793a      	ldrb	r2, [r7, #4]
 800130a:	b211      	sxth	r1, r2
 800130c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff fdb0 	bl	8000e74 <lcd7735_drawPixel>
}
 8001314:	371c      	adds	r7, #28
 8001316:	46bd      	mov	sp, r7
 8001318:	bd90      	pop	{r4, r7, pc}

0800131a <lcd7735_drawRect>:

void lcd7735_drawRect(uint8_t x1,uint8_t y1,uint8_t x2,uint8_t y2, uint16_t color) {
 800131a:	b590      	push	{r4, r7, lr}
 800131c:	b083      	sub	sp, #12
 800131e:	af00      	add	r7, sp, #0
 8001320:	4604      	mov	r4, r0
 8001322:	4608      	mov	r0, r1
 8001324:	4611      	mov	r1, r2
 8001326:	461a      	mov	r2, r3
 8001328:	4623      	mov	r3, r4
 800132a:	71fb      	strb	r3, [r7, #7]
 800132c:	4603      	mov	r3, r0
 800132e:	71bb      	strb	r3, [r7, #6]
 8001330:	460b      	mov	r3, r1
 8001332:	717b      	strb	r3, [r7, #5]
 8001334:	4613      	mov	r3, r2
 8001336:	713b      	strb	r3, [r7, #4]
	lcd7735_drawFastHLine(x1,y1,x2-x1, color);
 8001338:	79fb      	ldrb	r3, [r7, #7]
 800133a:	b218      	sxth	r0, r3
 800133c:	79bb      	ldrb	r3, [r7, #6]
 800133e:	b219      	sxth	r1, r3
 8001340:	797b      	ldrb	r3, [r7, #5]
 8001342:	b29a      	uxth	r2, r3
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	b29b      	uxth	r3, r3
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	b29b      	uxth	r3, r3
 800134c:	b21a      	sxth	r2, r3
 800134e:	8b3b      	ldrh	r3, [r7, #24]
 8001350:	f7ff feae 	bl	80010b0 <lcd7735_drawFastHLine>
	lcd7735_drawFastVLine(x2,y1,y2-y1, color);
 8001354:	797b      	ldrb	r3, [r7, #5]
 8001356:	b218      	sxth	r0, r3
 8001358:	79bb      	ldrb	r3, [r7, #6]
 800135a:	b219      	sxth	r1, r3
 800135c:	793b      	ldrb	r3, [r7, #4]
 800135e:	b29a      	uxth	r2, r3
 8001360:	79bb      	ldrb	r3, [r7, #6]
 8001362:	b29b      	uxth	r3, r3
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	b29b      	uxth	r3, r3
 8001368:	b21a      	sxth	r2, r3
 800136a:	8b3b      	ldrh	r3, [r7, #24]
 800136c:	f7ff fe40 	bl	8000ff0 <lcd7735_drawFastVLine>
	lcd7735_drawFastHLine(x1,y2,x2-x1, color);
 8001370:	79fb      	ldrb	r3, [r7, #7]
 8001372:	b218      	sxth	r0, r3
 8001374:	793b      	ldrb	r3, [r7, #4]
 8001376:	b219      	sxth	r1, r3
 8001378:	797b      	ldrb	r3, [r7, #5]
 800137a:	b29a      	uxth	r2, r3
 800137c:	79fb      	ldrb	r3, [r7, #7]
 800137e:	b29b      	uxth	r3, r3
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	b29b      	uxth	r3, r3
 8001384:	b21a      	sxth	r2, r3
 8001386:	8b3b      	ldrh	r3, [r7, #24]
 8001388:	f7ff fe92 	bl	80010b0 <lcd7735_drawFastHLine>
	lcd7735_drawFastVLine(x1,y1,y2-y1, color);
 800138c:	79fb      	ldrb	r3, [r7, #7]
 800138e:	b218      	sxth	r0, r3
 8001390:	79bb      	ldrb	r3, [r7, #6]
 8001392:	b219      	sxth	r1, r3
 8001394:	793b      	ldrb	r3, [r7, #4]
 8001396:	b29a      	uxth	r2, r3
 8001398:	79bb      	ldrb	r3, [r7, #6]
 800139a:	b29b      	uxth	r3, r3
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	b29b      	uxth	r3, r3
 80013a0:	b21a      	sxth	r2, r3
 80013a2:	8b3b      	ldrh	r3, [r7, #24]
 80013a4:	f7ff fe24 	bl	8000ff0 <lcd7735_drawFastVLine>
}
 80013a8:	bf00      	nop
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd90      	pop	{r4, r7, pc}

080013b0 <lcd7735_drawCircle>:

void lcd7735_drawCircle(int16_t x, int16_t y, int radius, uint16_t color) {
 80013b0:	b590      	push	{r4, r7, lr}
 80013b2:	b08b      	sub	sp, #44	; 0x2c
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60ba      	str	r2, [r7, #8]
 80013b8:	461a      	mov	r2, r3
 80013ba:	4603      	mov	r3, r0
 80013bc:	81fb      	strh	r3, [r7, #14]
 80013be:	460b      	mov	r3, r1
 80013c0:	81bb      	strh	r3, [r7, #12]
 80013c2:	4613      	mov	r3, r2
 80013c4:	80fb      	strh	r3, [r7, #6]
	int f = 1 - radius;
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	f1c3 0301 	rsb	r3, r3, #1
 80013cc:	627b      	str	r3, [r7, #36]	; 0x24
	int ddF_x = 1;
 80013ce:	2301      	movs	r3, #1
 80013d0:	623b      	str	r3, [r7, #32]
	int ddF_y = -2 * radius;
 80013d2:	68ba      	ldr	r2, [r7, #8]
 80013d4:	4613      	mov	r3, r2
 80013d6:	07db      	lsls	r3, r3, #31
 80013d8:	1a9b      	subs	r3, r3, r2
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	61fb      	str	r3, [r7, #28]
	int x1 = 0;
 80013de:	2300      	movs	r3, #0
 80013e0:	61bb      	str	r3, [r7, #24]
	int y1 = radius;
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	617b      	str	r3, [r7, #20]

	lcd7735_setAddrWindow(x, y + radius, x, y + radius);
 80013e6:	89fb      	ldrh	r3, [r7, #14]
 80013e8:	b2d8      	uxtb	r0, r3
 80013ea:	89bb      	ldrh	r3, [r7, #12]
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	4413      	add	r3, r2
 80013f4:	b2d9      	uxtb	r1, r3
 80013f6:	89fb      	ldrh	r3, [r7, #14]
 80013f8:	b2dc      	uxtb	r4, r3
 80013fa:	89bb      	ldrh	r3, [r7, #12]
 80013fc:	b2da      	uxtb	r2, r3
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	b2db      	uxtb	r3, r3
 8001402:	4413      	add	r3, r2
 8001404:	b2db      	uxtb	r3, r3
 8001406:	4622      	mov	r2, r4
 8001408:	f7ff fcc8 	bl	8000d9c <lcd7735_setAddrWindow>
	lcd7735_pushColor(color);
 800140c:	88fb      	ldrh	r3, [r7, #6]
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff fd14 	bl	8000e3c <lcd7735_pushColor>
	lcd7735_setAddrWindow(x, y - radius, x, y - radius);
 8001414:	89fb      	ldrh	r3, [r7, #14]
 8001416:	b2d8      	uxtb	r0, r3
 8001418:	89bb      	ldrh	r3, [r7, #12]
 800141a:	b2da      	uxtb	r2, r3
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	b2db      	uxtb	r3, r3
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	b2d9      	uxtb	r1, r3
 8001424:	89fb      	ldrh	r3, [r7, #14]
 8001426:	b2dc      	uxtb	r4, r3
 8001428:	89bb      	ldrh	r3, [r7, #12]
 800142a:	b2da      	uxtb	r2, r3
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	b2db      	uxtb	r3, r3
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	b2db      	uxtb	r3, r3
 8001434:	4622      	mov	r2, r4
 8001436:	f7ff fcb1 	bl	8000d9c <lcd7735_setAddrWindow>
	lcd7735_pushColor(color);
 800143a:	88fb      	ldrh	r3, [r7, #6]
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff fcfd 	bl	8000e3c <lcd7735_pushColor>
	lcd7735_setAddrWindow(x + radius, y, x + radius, y);
 8001442:	89fb      	ldrh	r3, [r7, #14]
 8001444:	b2da      	uxtb	r2, r3
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	b2db      	uxtb	r3, r3
 800144a:	4413      	add	r3, r2
 800144c:	b2d8      	uxtb	r0, r3
 800144e:	89bb      	ldrh	r3, [r7, #12]
 8001450:	b2d9      	uxtb	r1, r3
 8001452:	89fb      	ldrh	r3, [r7, #14]
 8001454:	b2da      	uxtb	r2, r3
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	b2db      	uxtb	r3, r3
 800145a:	4413      	add	r3, r2
 800145c:	b2da      	uxtb	r2, r3
 800145e:	89bb      	ldrh	r3, [r7, #12]
 8001460:	b2db      	uxtb	r3, r3
 8001462:	f7ff fc9b 	bl	8000d9c <lcd7735_setAddrWindow>
	lcd7735_pushColor(color);
 8001466:	88fb      	ldrh	r3, [r7, #6]
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff fce7 	bl	8000e3c <lcd7735_pushColor>
	lcd7735_setAddrWindow(x - radius, y, x - radius, y);
 800146e:	89fb      	ldrh	r3, [r7, #14]
 8001470:	b2da      	uxtb	r2, r3
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	b2db      	uxtb	r3, r3
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	b2d8      	uxtb	r0, r3
 800147a:	89bb      	ldrh	r3, [r7, #12]
 800147c:	b2d9      	uxtb	r1, r3
 800147e:	89fb      	ldrh	r3, [r7, #14]
 8001480:	b2da      	uxtb	r2, r3
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	b2db      	uxtb	r3, r3
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	b2da      	uxtb	r2, r3
 800148a:	89bb      	ldrh	r3, [r7, #12]
 800148c:	b2db      	uxtb	r3, r3
 800148e:	f7ff fc85 	bl	8000d9c <lcd7735_setAddrWindow>
	lcd7735_pushColor(color);
 8001492:	88fb      	ldrh	r3, [r7, #6]
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff fcd1 	bl	8000e3c <lcd7735_pushColor>
	while(x1 < y1) {
 800149a:	e10e      	b.n	80016ba <lcd7735_drawCircle+0x30a>
		if(f >= 0) 
 800149c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149e:	2b00      	cmp	r3, #0
 80014a0:	db09      	blt.n	80014b6 <lcd7735_drawCircle+0x106>
		{
			y1--;
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	3b01      	subs	r3, #1
 80014a6:	617b      	str	r3, [r7, #20]
			ddF_y += 2;
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	3302      	adds	r3, #2
 80014ac:	61fb      	str	r3, [r7, #28]
			f += ddF_y;
 80014ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	4413      	add	r3, r2
 80014b4:	627b      	str	r3, [r7, #36]	; 0x24
		}
		x1++;
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	3301      	adds	r3, #1
 80014ba:	61bb      	str	r3, [r7, #24]
		ddF_x += 2;
 80014bc:	6a3b      	ldr	r3, [r7, #32]
 80014be:	3302      	adds	r3, #2
 80014c0:	623b      	str	r3, [r7, #32]
		f += ddF_x;    
 80014c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014c4:	6a3b      	ldr	r3, [r7, #32]
 80014c6:	4413      	add	r3, r2
 80014c8:	627b      	str	r3, [r7, #36]	; 0x24
		lcd7735_setAddrWindow(x + x1, y + y1, x + x1, y + y1);
 80014ca:	89fb      	ldrh	r3, [r7, #14]
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	4413      	add	r3, r2
 80014d4:	b2d8      	uxtb	r0, r3
 80014d6:	89bb      	ldrh	r3, [r7, #12]
 80014d8:	b2da      	uxtb	r2, r3
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	4413      	add	r3, r2
 80014e0:	b2d9      	uxtb	r1, r3
 80014e2:	89fb      	ldrh	r3, [r7, #14]
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	4413      	add	r3, r2
 80014ec:	b2dc      	uxtb	r4, r3
 80014ee:	89bb      	ldrh	r3, [r7, #12]
 80014f0:	b2da      	uxtb	r2, r3
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	4413      	add	r3, r2
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	4622      	mov	r2, r4
 80014fc:	f7ff fc4e 	bl	8000d9c <lcd7735_setAddrWindow>
		lcd7735_pushColor(color);
 8001500:	88fb      	ldrh	r3, [r7, #6]
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff fc9a 	bl	8000e3c <lcd7735_pushColor>
		lcd7735_setAddrWindow(x - x1, y + y1, x - x1, y + y1);
 8001508:	89fb      	ldrh	r3, [r7, #14]
 800150a:	b2da      	uxtb	r2, r3
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	b2db      	uxtb	r3, r3
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	b2d8      	uxtb	r0, r3
 8001514:	89bb      	ldrh	r3, [r7, #12]
 8001516:	b2da      	uxtb	r2, r3
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	b2db      	uxtb	r3, r3
 800151c:	4413      	add	r3, r2
 800151e:	b2d9      	uxtb	r1, r3
 8001520:	89fb      	ldrh	r3, [r7, #14]
 8001522:	b2da      	uxtb	r2, r3
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	b2db      	uxtb	r3, r3
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	b2dc      	uxtb	r4, r3
 800152c:	89bb      	ldrh	r3, [r7, #12]
 800152e:	b2da      	uxtb	r2, r3
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	b2db      	uxtb	r3, r3
 8001534:	4413      	add	r3, r2
 8001536:	b2db      	uxtb	r3, r3
 8001538:	4622      	mov	r2, r4
 800153a:	f7ff fc2f 	bl	8000d9c <lcd7735_setAddrWindow>
		lcd7735_pushColor(color);
 800153e:	88fb      	ldrh	r3, [r7, #6]
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff fc7b 	bl	8000e3c <lcd7735_pushColor>
		lcd7735_setAddrWindow(x + x1, y - y1, x + x1, y - y1);
 8001546:	89fb      	ldrh	r3, [r7, #14]
 8001548:	b2da      	uxtb	r2, r3
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	b2db      	uxtb	r3, r3
 800154e:	4413      	add	r3, r2
 8001550:	b2d8      	uxtb	r0, r3
 8001552:	89bb      	ldrh	r3, [r7, #12]
 8001554:	b2da      	uxtb	r2, r3
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	b2db      	uxtb	r3, r3
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	b2d9      	uxtb	r1, r3
 800155e:	89fb      	ldrh	r3, [r7, #14]
 8001560:	b2da      	uxtb	r2, r3
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	b2db      	uxtb	r3, r3
 8001566:	4413      	add	r3, r2
 8001568:	b2dc      	uxtb	r4, r3
 800156a:	89bb      	ldrh	r3, [r7, #12]
 800156c:	b2da      	uxtb	r2, r3
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	b2db      	uxtb	r3, r3
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	b2db      	uxtb	r3, r3
 8001576:	4622      	mov	r2, r4
 8001578:	f7ff fc10 	bl	8000d9c <lcd7735_setAddrWindow>
		lcd7735_pushColor(color);
 800157c:	88fb      	ldrh	r3, [r7, #6]
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff fc5c 	bl	8000e3c <lcd7735_pushColor>
		lcd7735_setAddrWindow(x - x1, y - y1, x - x1, y - y1);
 8001584:	89fb      	ldrh	r3, [r7, #14]
 8001586:	b2da      	uxtb	r2, r3
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	b2db      	uxtb	r3, r3
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	b2d8      	uxtb	r0, r3
 8001590:	89bb      	ldrh	r3, [r7, #12]
 8001592:	b2da      	uxtb	r2, r3
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	b2db      	uxtb	r3, r3
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	b2d9      	uxtb	r1, r3
 800159c:	89fb      	ldrh	r3, [r7, #14]
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	b2dc      	uxtb	r4, r3
 80015a8:	89bb      	ldrh	r3, [r7, #12]
 80015aa:	b2da      	uxtb	r2, r3
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	4622      	mov	r2, r4
 80015b6:	f7ff fbf1 	bl	8000d9c <lcd7735_setAddrWindow>
		lcd7735_pushColor(color);
 80015ba:	88fb      	ldrh	r3, [r7, #6]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff fc3d 	bl	8000e3c <lcd7735_pushColor>
		lcd7735_setAddrWindow(x + y1, y + x1, x + y1, y + x1);
 80015c2:	89fb      	ldrh	r3, [r7, #14]
 80015c4:	b2da      	uxtb	r2, r3
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	4413      	add	r3, r2
 80015cc:	b2d8      	uxtb	r0, r3
 80015ce:	89bb      	ldrh	r3, [r7, #12]
 80015d0:	b2da      	uxtb	r2, r3
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	4413      	add	r3, r2
 80015d8:	b2d9      	uxtb	r1, r3
 80015da:	89fb      	ldrh	r3, [r7, #14]
 80015dc:	b2da      	uxtb	r2, r3
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	4413      	add	r3, r2
 80015e4:	b2dc      	uxtb	r4, r3
 80015e6:	89bb      	ldrh	r3, [r7, #12]
 80015e8:	b2da      	uxtb	r2, r3
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	4413      	add	r3, r2
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	4622      	mov	r2, r4
 80015f4:	f7ff fbd2 	bl	8000d9c <lcd7735_setAddrWindow>
		lcd7735_pushColor(color);
 80015f8:	88fb      	ldrh	r3, [r7, #6]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff fc1e 	bl	8000e3c <lcd7735_pushColor>
		lcd7735_setAddrWindow(x - y1, y + x1, x - y1, y + x1);
 8001600:	89fb      	ldrh	r3, [r7, #14]
 8001602:	b2da      	uxtb	r2, r3
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	b2db      	uxtb	r3, r3
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	b2d8      	uxtb	r0, r3
 800160c:	89bb      	ldrh	r3, [r7, #12]
 800160e:	b2da      	uxtb	r2, r3
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	b2db      	uxtb	r3, r3
 8001614:	4413      	add	r3, r2
 8001616:	b2d9      	uxtb	r1, r3
 8001618:	89fb      	ldrh	r3, [r7, #14]
 800161a:	b2da      	uxtb	r2, r3
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	b2db      	uxtb	r3, r3
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	b2dc      	uxtb	r4, r3
 8001624:	89bb      	ldrh	r3, [r7, #12]
 8001626:	b2da      	uxtb	r2, r3
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	b2db      	uxtb	r3, r3
 800162c:	4413      	add	r3, r2
 800162e:	b2db      	uxtb	r3, r3
 8001630:	4622      	mov	r2, r4
 8001632:	f7ff fbb3 	bl	8000d9c <lcd7735_setAddrWindow>
		lcd7735_pushColor(color);
 8001636:	88fb      	ldrh	r3, [r7, #6]
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff fbff 	bl	8000e3c <lcd7735_pushColor>
		lcd7735_setAddrWindow(x + y1, y - x1, x + y1, y - x1);
 800163e:	89fb      	ldrh	r3, [r7, #14]
 8001640:	b2da      	uxtb	r2, r3
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	b2db      	uxtb	r3, r3
 8001646:	4413      	add	r3, r2
 8001648:	b2d8      	uxtb	r0, r3
 800164a:	89bb      	ldrh	r3, [r7, #12]
 800164c:	b2da      	uxtb	r2, r3
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	b2db      	uxtb	r3, r3
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	b2d9      	uxtb	r1, r3
 8001656:	89fb      	ldrh	r3, [r7, #14]
 8001658:	b2da      	uxtb	r2, r3
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	b2db      	uxtb	r3, r3
 800165e:	4413      	add	r3, r2
 8001660:	b2dc      	uxtb	r4, r3
 8001662:	89bb      	ldrh	r3, [r7, #12]
 8001664:	b2da      	uxtb	r2, r3
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	b2db      	uxtb	r3, r3
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	b2db      	uxtb	r3, r3
 800166e:	4622      	mov	r2, r4
 8001670:	f7ff fb94 	bl	8000d9c <lcd7735_setAddrWindow>
		lcd7735_pushColor(color);
 8001674:	88fb      	ldrh	r3, [r7, #6]
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff fbe0 	bl	8000e3c <lcd7735_pushColor>
		lcd7735_setAddrWindow(x - y1, y - x1, x - y1, y - x1);
 800167c:	89fb      	ldrh	r3, [r7, #14]
 800167e:	b2da      	uxtb	r2, r3
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	b2db      	uxtb	r3, r3
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	b2d8      	uxtb	r0, r3
 8001688:	89bb      	ldrh	r3, [r7, #12]
 800168a:	b2da      	uxtb	r2, r3
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	b2db      	uxtb	r3, r3
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	b2d9      	uxtb	r1, r3
 8001694:	89fb      	ldrh	r3, [r7, #14]
 8001696:	b2da      	uxtb	r2, r3
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	b2db      	uxtb	r3, r3
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	b2dc      	uxtb	r4, r3
 80016a0:	89bb      	ldrh	r3, [r7, #12]
 80016a2:	b2da      	uxtb	r2, r3
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	4622      	mov	r2, r4
 80016ae:	f7ff fb75 	bl	8000d9c <lcd7735_setAddrWindow>
		lcd7735_pushColor(color);
 80016b2:	88fb      	ldrh	r3, [r7, #6]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff fbc1 	bl	8000e3c <lcd7735_pushColor>
	while(x1 < y1) {
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	429a      	cmp	r2, r3
 80016c0:	f6ff aeec 	blt.w	800149c <lcd7735_drawCircle+0xec>
	}
}
 80016c4:	bf00      	nop
 80016c6:	bf00      	nop
 80016c8:	372c      	adds	r7, #44	; 0x2c
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd90      	pop	{r4, r7, pc}

080016ce <lcd7735_fillCircle>:

void lcd7735_fillCircle(int16_t x, int16_t y, int radius, uint16_t color) {
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b086      	sub	sp, #24
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	60ba      	str	r2, [r7, #8]
 80016d6:	461a      	mov	r2, r3
 80016d8:	4603      	mov	r3, r0
 80016da:	81fb      	strh	r3, [r7, #14]
 80016dc:	460b      	mov	r3, r1
 80016de:	81bb      	strh	r3, [r7, #12]
 80016e0:	4613      	mov	r3, r2
 80016e2:	80fb      	strh	r3, [r7, #6]
	int x1,y1;
	for(y1=-radius; y1<=0; y1++) 
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	425b      	negs	r3, r3
 80016e8:	613b      	str	r3, [r7, #16]
 80016ea:	e047      	b.n	800177c <lcd7735_fillCircle+0xae>
		for(x1=-radius; x1<=0; x1++)
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	425b      	negs	r3, r3
 80016f0:	617b      	str	r3, [r7, #20]
 80016f2:	e03d      	b.n	8001770 <lcd7735_fillCircle+0xa2>
			if(x1*x1+y1*y1 <= radius*radius) {
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	fb03 f203 	mul.w	r2, r3, r3
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	fb03 f303 	mul.w	r3, r3, r3
 8001700:	441a      	add	r2, r3
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	fb03 f303 	mul.w	r3, r3, r3
 8001708:	429a      	cmp	r2, r3
 800170a:	dc2e      	bgt.n	800176a <lcd7735_fillCircle+0x9c>
				lcd7735_drawFastHLine(x+x1, y+y1, 2*(-x1), color);
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	b29a      	uxth	r2, r3
 8001710:	89fb      	ldrh	r3, [r7, #14]
 8001712:	4413      	add	r3, r2
 8001714:	b29b      	uxth	r3, r3
 8001716:	b218      	sxth	r0, r3
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	b29a      	uxth	r2, r3
 800171c:	89bb      	ldrh	r3, [r7, #12]
 800171e:	4413      	add	r3, r2
 8001720:	b29b      	uxth	r3, r3
 8001722:	b219      	sxth	r1, r3
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	b29b      	uxth	r3, r3
 8001728:	461a      	mov	r2, r3
 800172a:	03d2      	lsls	r2, r2, #15
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	b29b      	uxth	r3, r3
 8001732:	b21a      	sxth	r2, r3
 8001734:	88fb      	ldrh	r3, [r7, #6]
 8001736:	f7ff fcbb 	bl	80010b0 <lcd7735_drawFastHLine>
				lcd7735_drawFastHLine(x+x1, y-y1, 2*(-x1), color);
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	b29a      	uxth	r2, r3
 800173e:	89fb      	ldrh	r3, [r7, #14]
 8001740:	4413      	add	r3, r2
 8001742:	b29b      	uxth	r3, r3
 8001744:	b218      	sxth	r0, r3
 8001746:	89ba      	ldrh	r2, [r7, #12]
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	b29b      	uxth	r3, r3
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	b29b      	uxth	r3, r3
 8001750:	b219      	sxth	r1, r3
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	b29b      	uxth	r3, r3
 8001756:	461a      	mov	r2, r3
 8001758:	03d2      	lsls	r2, r2, #15
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	b29b      	uxth	r3, r3
 8001760:	b21a      	sxth	r2, r3
 8001762:	88fb      	ldrh	r3, [r7, #6]
 8001764:	f7ff fca4 	bl	80010b0 <lcd7735_drawFastHLine>
				break;
 8001768:	e005      	b.n	8001776 <lcd7735_fillCircle+0xa8>
		for(x1=-radius; x1<=0; x1++)
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	3301      	adds	r3, #1
 800176e:	617b      	str	r3, [r7, #20]
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	2b00      	cmp	r3, #0
 8001774:	ddbe      	ble.n	80016f4 <lcd7735_fillCircle+0x26>
	for(y1=-radius; y1<=0; y1++) 
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	3301      	adds	r3, #1
 800177a:	613b      	str	r3, [r7, #16]
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	2b00      	cmp	r3, #0
 8001780:	ddb4      	ble.n	80016ec <lcd7735_fillCircle+0x1e>
			}
}
 8001782:	bf00      	nop
 8001784:	bf00      	nop
 8001786:	3718      	adds	r7, #24
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <lcd7735_drawBitmap>:

void lcd7735_drawBitmap(int x, int y, int sx, int sy, bitmapdatatype data, int scale) {
 800178c:	b590      	push	{r4, r7, lr}
 800178e:	b08b      	sub	sp, #44	; 0x2c
 8001790:	af00      	add	r7, sp, #0
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	607a      	str	r2, [r7, #4]
 8001798:	603b      	str	r3, [r7, #0]
	int tx, ty, tc, tsx, tsy;

	if (scale==1) {
 800179a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800179c:	2b01      	cmp	r3, #1
 800179e:	f040 8095 	bne.w	80018cc <lcd7735_drawBitmap+0x140>
		if (orientation == PORTRAIT || orientation == PORTRAIT_FLIP)
 80017a2:	4b82      	ldr	r3, [pc, #520]	; (80019ac <lcd7735_drawBitmap+0x220>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d003      	beq.n	80017b2 <lcd7735_drawBitmap+0x26>
 80017aa:	4b80      	ldr	r3, [pc, #512]	; (80019ac <lcd7735_drawBitmap+0x220>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d13c      	bne.n	800182c <lcd7735_drawBitmap+0xa0>
		{
			lcd7735_setAddrWindow(x, y, x+sx-1, y+sy-1);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	b2d8      	uxtb	r0, r3
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	b2d9      	uxtb	r1, r3
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	4413      	add	r3, r2
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	3b01      	subs	r3, #1
 80017c8:	b2dc      	uxtb	r4, r3
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	b2da      	uxtb	r2, r3
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	4413      	add	r3, r2
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	3b01      	subs	r3, #1
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	4622      	mov	r2, r4
 80017dc:	f7ff fade 	bl	8000d9c <lcd7735_setAddrWindow>
			ST7735_DC1;
 80017e0:	2107      	movs	r1, #7
 80017e2:	4873      	ldr	r0, [pc, #460]	; (80019b0 <lcd7735_drawBitmap+0x224>)
 80017e4:	f001 ff03 	bl	80035ee <gpioSetPin>
			for (tc=0; tc<(sx*sy); tc++)
 80017e8:	2300      	movs	r3, #0
 80017ea:	61fb      	str	r3, [r7, #28]
 80017ec:	e016      	b.n	800181c <lcd7735_drawBitmap+0x90>
				putpix(data[tc]);
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80017f4:	4413      	add	r3, r2
 80017f6:	881b      	ldrh	r3, [r3, #0]
 80017f8:	0a1b      	lsrs	r3, r3, #8
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	4618      	mov	r0, r3
 8001800:	f000 fc8c 	bl	800211c <lcd7735_senddata>
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800180a:	4413      	add	r3, r2
 800180c:	881b      	ldrh	r3, [r3, #0]
 800180e:	b2db      	uxtb	r3, r3
 8001810:	4618      	mov	r0, r3
 8001812:	f000 fc83 	bl	800211c <lcd7735_senddata>
			for (tc=0; tc<(sx*sy); tc++)
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	3301      	adds	r3, #1
 800181a:	61fb      	str	r3, [r7, #28]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	683a      	ldr	r2, [r7, #0]
 8001820:	fb02 f303 	mul.w	r3, r2, r3
 8001824:	69fa      	ldr	r2, [r7, #28]
 8001826:	429a      	cmp	r2, r3
 8001828:	dbe1      	blt.n	80017ee <lcd7735_drawBitmap+0x62>
		if (orientation == PORTRAIT || orientation == PORTRAIT_FLIP)
 800182a:	e123      	b.n	8001a74 <lcd7735_drawBitmap+0x2e8>
		} else {
			for (ty=0; ty<sy; ty++) {
 800182c:	2300      	movs	r3, #0
 800182e:	623b      	str	r3, [r7, #32]
 8001830:	e047      	b.n	80018c2 <lcd7735_drawBitmap+0x136>
				lcd7735_setAddrWindow(x, y+ty, x+sx-1, y+ty);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	b2d8      	uxtb	r0, r3
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	b2da      	uxtb	r2, r3
 800183a:	6a3b      	ldr	r3, [r7, #32]
 800183c:	b2db      	uxtb	r3, r3
 800183e:	4413      	add	r3, r2
 8001840:	b2d9      	uxtb	r1, r3
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	b2da      	uxtb	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	b2db      	uxtb	r3, r3
 800184a:	4413      	add	r3, r2
 800184c:	b2db      	uxtb	r3, r3
 800184e:	3b01      	subs	r3, #1
 8001850:	b2dc      	uxtb	r4, r3
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	b2da      	uxtb	r2, r3
 8001856:	6a3b      	ldr	r3, [r7, #32]
 8001858:	b2db      	uxtb	r3, r3
 800185a:	4413      	add	r3, r2
 800185c:	b2db      	uxtb	r3, r3
 800185e:	4622      	mov	r2, r4
 8001860:	f7ff fa9c 	bl	8000d9c <lcd7735_setAddrWindow>
				ST7735_DC1;
 8001864:	2107      	movs	r1, #7
 8001866:	4852      	ldr	r0, [pc, #328]	; (80019b0 <lcd7735_drawBitmap+0x224>)
 8001868:	f001 fec1 	bl	80035ee <gpioSetPin>
				for (tx=sx-1; tx>=0; tx--)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	3b01      	subs	r3, #1
 8001870:	627b      	str	r3, [r7, #36]	; 0x24
 8001872:	e020      	b.n	80018b6 <lcd7735_drawBitmap+0x12a>
					putpix(data[(ty*sx)+tx]);
 8001874:	6a3b      	ldr	r3, [r7, #32]
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	fb03 f202 	mul.w	r2, r3, r2
 800187c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187e:	4413      	add	r3, r2
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001884:	4413      	add	r3, r2
 8001886:	881b      	ldrh	r3, [r3, #0]
 8001888:	0a1b      	lsrs	r3, r3, #8
 800188a:	b29b      	uxth	r3, r3
 800188c:	b2db      	uxtb	r3, r3
 800188e:	4618      	mov	r0, r3
 8001890:	f000 fc44 	bl	800211c <lcd7735_senddata>
 8001894:	6a3b      	ldr	r3, [r7, #32]
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	fb03 f202 	mul.w	r2, r3, r2
 800189c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189e:	4413      	add	r3, r2
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80018a4:	4413      	add	r3, r2
 80018a6:	881b      	ldrh	r3, [r3, #0]
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	4618      	mov	r0, r3
 80018ac:	f000 fc36 	bl	800211c <lcd7735_senddata>
				for (tx=sx-1; tx>=0; tx--)
 80018b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b2:	3b01      	subs	r3, #1
 80018b4:	627b      	str	r3, [r7, #36]	; 0x24
 80018b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	dadb      	bge.n	8001874 <lcd7735_drawBitmap+0xe8>
			for (ty=0; ty<sy; ty++) {
 80018bc:	6a3b      	ldr	r3, [r7, #32]
 80018be:	3301      	adds	r3, #1
 80018c0:	623b      	str	r3, [r7, #32]
 80018c2:	6a3a      	ldr	r2, [r7, #32]
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	dbb3      	blt.n	8001832 <lcd7735_drawBitmap+0xa6>
					}
				}
			}
		}
	}
}
 80018ca:	e0d3      	b.n	8001a74 <lcd7735_drawBitmap+0x2e8>
		if (orientation == PORTRAIT || orientation == PORTRAIT_FLIP) {
 80018cc:	4b37      	ldr	r3, [pc, #220]	; (80019ac <lcd7735_drawBitmap+0x220>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d003      	beq.n	80018dc <lcd7735_drawBitmap+0x150>
 80018d4:	4b35      	ldr	r3, [pc, #212]	; (80019ac <lcd7735_drawBitmap+0x220>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d161      	bne.n	80019a0 <lcd7735_drawBitmap+0x214>
			for (ty=0; ty<sy; ty++) {
 80018dc:	2300      	movs	r3, #0
 80018de:	623b      	str	r3, [r7, #32]
 80018e0:	e059      	b.n	8001996 <lcd7735_drawBitmap+0x20a>
				lcd7735_setAddrWindow(x, y+(ty*scale), x+((sx*scale)-1), y+(ty*scale)+scale);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	b2d8      	uxtb	r0, r3
 80018e6:	6a3b      	ldr	r3, [r7, #32]
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	fb12 f303 	smulbb	r3, r2, r3
 80018f2:	b2da      	uxtb	r2, r3
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	4413      	add	r3, r2
 80018fa:	b2d9      	uxtb	r1, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	b2da      	uxtb	r2, r3
 8001900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001902:	b2db      	uxtb	r3, r3
 8001904:	fb12 f303 	smulbb	r3, r2, r3
 8001908:	b2da      	uxtb	r2, r3
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	b2db      	uxtb	r3, r3
 800190e:	4413      	add	r3, r2
 8001910:	b2db      	uxtb	r3, r3
 8001912:	3b01      	subs	r3, #1
 8001914:	b2dc      	uxtb	r4, r3
 8001916:	6a3b      	ldr	r3, [r7, #32]
 8001918:	b2da      	uxtb	r2, r3
 800191a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800191c:	b2db      	uxtb	r3, r3
 800191e:	fb12 f303 	smulbb	r3, r2, r3
 8001922:	b2da      	uxtb	r2, r3
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	b2db      	uxtb	r3, r3
 8001928:	4413      	add	r3, r2
 800192a:	b2da      	uxtb	r2, r3
 800192c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800192e:	b2db      	uxtb	r3, r3
 8001930:	4413      	add	r3, r2
 8001932:	b2db      	uxtb	r3, r3
 8001934:	4622      	mov	r2, r4
 8001936:	f7ff fa31 	bl	8000d9c <lcd7735_setAddrWindow>
				for (tsy=0; tsy<scale; tsy++)
 800193a:	2300      	movs	r3, #0
 800193c:	617b      	str	r3, [r7, #20]
 800193e:	e023      	b.n	8001988 <lcd7735_drawBitmap+0x1fc>
					for (tx=0; tx<sx; tx++) {
 8001940:	2300      	movs	r3, #0
 8001942:	627b      	str	r3, [r7, #36]	; 0x24
 8001944:	e019      	b.n	800197a <lcd7735_drawBitmap+0x1ee>
						for (tsx=0; tsx<scale; tsx++)
 8001946:	2300      	movs	r3, #0
 8001948:	61bb      	str	r3, [r7, #24]
 800194a:	e00f      	b.n	800196c <lcd7735_drawBitmap+0x1e0>
							lcd7735_pushColor(data[(ty*sx)+tx]);
 800194c:	6a3b      	ldr	r3, [r7, #32]
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	fb03 f202 	mul.w	r2, r3, r2
 8001954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001956:	4413      	add	r3, r2
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800195c:	4413      	add	r3, r2
 800195e:	881b      	ldrh	r3, [r3, #0]
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff fa6b 	bl	8000e3c <lcd7735_pushColor>
						for (tsx=0; tsx<scale; tsx++)
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	3301      	adds	r3, #1
 800196a:	61bb      	str	r3, [r7, #24]
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001970:	429a      	cmp	r2, r3
 8001972:	dbeb      	blt.n	800194c <lcd7735_drawBitmap+0x1c0>
					for (tx=0; tx<sx; tx++) {
 8001974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001976:	3301      	adds	r3, #1
 8001978:	627b      	str	r3, [r7, #36]	; 0x24
 800197a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	429a      	cmp	r2, r3
 8001980:	dbe1      	blt.n	8001946 <lcd7735_drawBitmap+0x1ba>
				for (tsy=0; tsy<scale; tsy++)
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	3301      	adds	r3, #1
 8001986:	617b      	str	r3, [r7, #20]
 8001988:	697a      	ldr	r2, [r7, #20]
 800198a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800198c:	429a      	cmp	r2, r3
 800198e:	dbd7      	blt.n	8001940 <lcd7735_drawBitmap+0x1b4>
			for (ty=0; ty<sy; ty++) {
 8001990:	6a3b      	ldr	r3, [r7, #32]
 8001992:	3301      	adds	r3, #1
 8001994:	623b      	str	r3, [r7, #32]
 8001996:	6a3a      	ldr	r2, [r7, #32]
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	429a      	cmp	r2, r3
 800199c:	dba1      	blt.n	80018e2 <lcd7735_drawBitmap+0x156>
		if (orientation == PORTRAIT || orientation == PORTRAIT_FLIP) {
 800199e:	e069      	b.n	8001a74 <lcd7735_drawBitmap+0x2e8>
			for (ty=0; ty<sy; ty++) {
 80019a0:	2300      	movs	r3, #0
 80019a2:	623b      	str	r3, [r7, #32]
 80019a4:	e061      	b.n	8001a6a <lcd7735_drawBitmap+0x2de>
				for (tsy=0; tsy<scale; tsy++) {
 80019a6:	2300      	movs	r3, #0
 80019a8:	617b      	str	r3, [r7, #20]
 80019aa:	e057      	b.n	8001a5c <lcd7735_drawBitmap+0x2d0>
 80019ac:	20000214 	.word	0x20000214
 80019b0:	40020800 	.word	0x40020800
					lcd7735_setAddrWindow(x, y+(ty*scale)+tsy, x+((sx*scale)-1), y+(ty*scale)+tsy);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	b2d8      	uxtb	r0, r3
 80019b8:	6a3b      	ldr	r3, [r7, #32]
 80019ba:	b2da      	uxtb	r2, r3
 80019bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	fb12 f303 	smulbb	r3, r2, r3
 80019c4:	b2da      	uxtb	r2, r3
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	4413      	add	r3, r2
 80019cc:	b2da      	uxtb	r2, r3
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	4413      	add	r3, r2
 80019d4:	b2d9      	uxtb	r1, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	b2da      	uxtb	r2, r3
 80019da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	fb12 f303 	smulbb	r3, r2, r3
 80019e2:	b2da      	uxtb	r2, r3
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	4413      	add	r3, r2
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	3b01      	subs	r3, #1
 80019ee:	b2dc      	uxtb	r4, r3
 80019f0:	6a3b      	ldr	r3, [r7, #32]
 80019f2:	b2da      	uxtb	r2, r3
 80019f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	fb12 f303 	smulbb	r3, r2, r3
 80019fc:	b2da      	uxtb	r2, r3
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	4413      	add	r3, r2
 8001a04:	b2da      	uxtb	r2, r3
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	4413      	add	r3, r2
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	4622      	mov	r2, r4
 8001a10:	f7ff f9c4 	bl	8000d9c <lcd7735_setAddrWindow>
					for (tx=sx-1; tx>=0; tx--) {
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	3b01      	subs	r3, #1
 8001a18:	627b      	str	r3, [r7, #36]	; 0x24
 8001a1a:	e019      	b.n	8001a50 <lcd7735_drawBitmap+0x2c4>
						for (tsx=0; tsx<scale; tsx++)
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	61bb      	str	r3, [r7, #24]
 8001a20:	e00f      	b.n	8001a42 <lcd7735_drawBitmap+0x2b6>
							lcd7735_pushColor(data[(ty*sx)+tx]);
 8001a22:	6a3b      	ldr	r3, [r7, #32]
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	fb03 f202 	mul.w	r2, r3, r2
 8001a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2c:	4413      	add	r3, r2
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001a32:	4413      	add	r3, r2
 8001a34:	881b      	ldrh	r3, [r3, #0]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff fa00 	bl	8000e3c <lcd7735_pushColor>
						for (tsx=0; tsx<scale; tsx++)
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	61bb      	str	r3, [r7, #24]
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a46:	429a      	cmp	r2, r3
 8001a48:	dbeb      	blt.n	8001a22 <lcd7735_drawBitmap+0x296>
					for (tx=sx-1; tx>=0; tx--) {
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	dae2      	bge.n	8001a1c <lcd7735_drawBitmap+0x290>
				for (tsy=0; tsy<scale; tsy++) {
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	617b      	str	r3, [r7, #20]
 8001a5c:	697a      	ldr	r2, [r7, #20]
 8001a5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a60:	429a      	cmp	r2, r3
 8001a62:	dba7      	blt.n	80019b4 <lcd7735_drawBitmap+0x228>
			for (ty=0; ty<sy; ty++) {
 8001a64:	6a3b      	ldr	r3, [r7, #32]
 8001a66:	3301      	adds	r3, #1
 8001a68:	623b      	str	r3, [r7, #32]
 8001a6a:	6a3a      	ldr	r2, [r7, #32]
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	db99      	blt.n	80019a6 <lcd7735_drawBitmap+0x21a>
}
 8001a72:	e7ff      	b.n	8001a74 <lcd7735_drawBitmap+0x2e8>
 8001a74:	bf00      	nop
 8001a76:	372c      	adds	r7, #44	; 0x2c
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd90      	pop	{r4, r7, pc}

08001a7c <lcd7735_setFont>:
				lcd7735_pushColor(data[(ty*sx)+tx]);
			}
	}
}

void lcd7735_setFont(uint8_t* font) {
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
	cfont.font=font;
 8001a84:	4a0d      	ldr	r2, [pc, #52]	; (8001abc <lcd7735_setFont+0x40>)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6013      	str	r3, [r2, #0]
	cfont.x_size=font[0];
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	781a      	ldrb	r2, [r3, #0]
 8001a8e:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <lcd7735_setFont+0x40>)
 8001a90:	711a      	strb	r2, [r3, #4]
	cfont.y_size=font[1];
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	785a      	ldrb	r2, [r3, #1]
 8001a96:	4b09      	ldr	r3, [pc, #36]	; (8001abc <lcd7735_setFont+0x40>)
 8001a98:	715a      	strb	r2, [r3, #5]
	cfont.offset=font[2];
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	789a      	ldrb	r2, [r3, #2]
 8001a9e:	4b07      	ldr	r3, [pc, #28]	; (8001abc <lcd7735_setFont+0x40>)
 8001aa0:	719a      	strb	r2, [r3, #6]
	cfont.numchars=font[3];
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	3303      	adds	r3, #3
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	b29a      	uxth	r2, r3
 8001aaa:	4b04      	ldr	r3, [pc, #16]	; (8001abc <lcd7735_setFont+0x40>)
 8001aac:	811a      	strh	r2, [r3, #8]
}
 8001aae:	bf00      	nop
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	20000218 	.word	0x20000218

08001ac0 <printChar>:

void printChar(uint8_t c, int x, int y) {
 8001ac0:	b590      	push	{r4, r7, lr}
 8001ac2:	b089      	sub	sp, #36	; 0x24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	60b9      	str	r1, [r7, #8]
 8001aca:	607a      	str	r2, [r7, #4]
 8001acc:	73fb      	strb	r3, [r7, #15]
	uint8_t i,ch,fz;
	uint16_t j;
	uint16_t temp; 
	int zz;

	if( cfont.x_size < 8 ) 
 8001ace:	4b74      	ldr	r3, [pc, #464]	; (8001ca0 <printChar+0x1e0>)
 8001ad0:	791b      	ldrb	r3, [r3, #4]
 8001ad2:	2b07      	cmp	r3, #7
 8001ad4:	d803      	bhi.n	8001ade <printChar+0x1e>
		fz = cfont.x_size;
 8001ad6:	4b72      	ldr	r3, [pc, #456]	; (8001ca0 <printChar+0x1e0>)
 8001ad8:	791b      	ldrb	r3, [r3, #4]
 8001ada:	77bb      	strb	r3, [r7, #30]
 8001adc:	e003      	b.n	8001ae6 <printChar+0x26>
	else
		fz = cfont.x_size/8;
 8001ade:	4b70      	ldr	r3, [pc, #448]	; (8001ca0 <printChar+0x1e0>)
 8001ae0:	791b      	ldrb	r3, [r3, #4]
 8001ae2:	08db      	lsrs	r3, r3, #3
 8001ae4:	77bb      	strb	r3, [r7, #30]
	if (!_transparent) {
 8001ae6:	4b6f      	ldr	r3, [pc, #444]	; (8001ca4 <printChar+0x1e4>)
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d15e      	bne.n	8001bac <printChar+0xec>
		lcd7735_setAddrWindow(x,y,x+cfont.x_size-1,y+cfont.y_size-1);
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	b2d8      	uxtb	r0, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	b2d9      	uxtb	r1, r3
 8001af6:	4b6a      	ldr	r3, [pc, #424]	; (8001ca0 <printChar+0x1e0>)
 8001af8:	791a      	ldrb	r2, [r3, #4]
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	4413      	add	r3, r2
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	3b01      	subs	r3, #1
 8001b04:	b2dc      	uxtb	r4, r3
 8001b06:	4b66      	ldr	r3, [pc, #408]	; (8001ca0 <printChar+0x1e0>)
 8001b08:	795a      	ldrb	r2, [r3, #5]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	4413      	add	r3, r2
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	3b01      	subs	r3, #1
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	4622      	mov	r2, r4
 8001b18:	f7ff f940 	bl	8000d9c <lcd7735_setAddrWindow>

		temp=((c-cfont.offset)*((fz)*cfont.y_size))+4;
 8001b1c:	7bfb      	ldrb	r3, [r7, #15]
 8001b1e:	4a60      	ldr	r2, [pc, #384]	; (8001ca0 <printChar+0x1e0>)
 8001b20:	7992      	ldrb	r2, [r2, #6]
 8001b22:	1a9b      	subs	r3, r3, r2
 8001b24:	b29a      	uxth	r2, r3
 8001b26:	7fbb      	ldrb	r3, [r7, #30]
 8001b28:	b299      	uxth	r1, r3
 8001b2a:	4b5d      	ldr	r3, [pc, #372]	; (8001ca0 <printChar+0x1e0>)
 8001b2c:	795b      	ldrb	r3, [r3, #5]
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	fb11 f303 	smulbb	r3, r1, r3
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	fb12 f303 	smulbb	r3, r2, r3
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	3304      	adds	r3, #4
 8001b3e:	837b      	strh	r3, [r7, #26]
		for(j=0;j<((fz)*cfont.y_size);j++) {
 8001b40:	2300      	movs	r3, #0
 8001b42:	83bb      	strh	r3, [r7, #28]
 8001b44:	e029      	b.n	8001b9a <printChar+0xda>
			ch = cfont.font[temp];
 8001b46:	4b56      	ldr	r3, [pc, #344]	; (8001ca0 <printChar+0x1e0>)
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	8b7b      	ldrh	r3, [r7, #26]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	74fb      	strb	r3, [r7, #19]
			for(i=0;i<8;i++) {   
 8001b52:	2300      	movs	r3, #0
 8001b54:	77fb      	strb	r3, [r7, #31]
 8001b56:	e017      	b.n	8001b88 <printChar+0xc8>
				if((ch&(1<<(7-i)))!=0)   
 8001b58:	7cfa      	ldrb	r2, [r7, #19]
 8001b5a:	7ffb      	ldrb	r3, [r7, #31]
 8001b5c:	f1c3 0307 	rsb	r3, r3, #7
 8001b60:	fa42 f303 	asr.w	r3, r2, r3
 8001b64:	f003 0301 	and.w	r3, r3, #1
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d005      	beq.n	8001b78 <printChar+0xb8>
				{
					lcd7735_pushColor(_fg);
 8001b6c:	4b4e      	ldr	r3, [pc, #312]	; (8001ca8 <printChar+0x1e8>)
 8001b6e:	881b      	ldrh	r3, [r3, #0]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff f963 	bl	8000e3c <lcd7735_pushColor>
 8001b76:	e004      	b.n	8001b82 <printChar+0xc2>
				} 
				else
				{
					lcd7735_pushColor(_bg);
 8001b78:	4b4c      	ldr	r3, [pc, #304]	; (8001cac <printChar+0x1ec>)
 8001b7a:	881b      	ldrh	r3, [r3, #0]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff f95d 	bl	8000e3c <lcd7735_pushColor>
			for(i=0;i<8;i++) {   
 8001b82:	7ffb      	ldrb	r3, [r7, #31]
 8001b84:	3301      	adds	r3, #1
 8001b86:	77fb      	strb	r3, [r7, #31]
 8001b88:	7ffb      	ldrb	r3, [r7, #31]
 8001b8a:	2b07      	cmp	r3, #7
 8001b8c:	d9e4      	bls.n	8001b58 <printChar+0x98>
				}   
			}
			temp++;
 8001b8e:	8b7b      	ldrh	r3, [r7, #26]
 8001b90:	3301      	adds	r3, #1
 8001b92:	837b      	strh	r3, [r7, #26]
		for(j=0;j<((fz)*cfont.y_size);j++) {
 8001b94:	8bbb      	ldrh	r3, [r7, #28]
 8001b96:	3301      	adds	r3, #1
 8001b98:	83bb      	strh	r3, [r7, #28]
 8001b9a:	8bba      	ldrh	r2, [r7, #28]
 8001b9c:	7fbb      	ldrb	r3, [r7, #30]
 8001b9e:	4940      	ldr	r1, [pc, #256]	; (8001ca0 <printChar+0x1e0>)
 8001ba0:	7949      	ldrb	r1, [r1, #5]
 8001ba2:	fb01 f303 	mul.w	r3, r1, r3
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	dbcd      	blt.n	8001b46 <printChar+0x86>
				}
			}
			temp+=(fz);
		}
	}
}
 8001baa:	e075      	b.n	8001c98 <printChar+0x1d8>
		temp=((c-cfont.offset)*((fz)*cfont.y_size))+4;
 8001bac:	7bfb      	ldrb	r3, [r7, #15]
 8001bae:	4a3c      	ldr	r2, [pc, #240]	; (8001ca0 <printChar+0x1e0>)
 8001bb0:	7992      	ldrb	r2, [r2, #6]
 8001bb2:	1a9b      	subs	r3, r3, r2
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	7fbb      	ldrb	r3, [r7, #30]
 8001bb8:	b299      	uxth	r1, r3
 8001bba:	4b39      	ldr	r3, [pc, #228]	; (8001ca0 <printChar+0x1e0>)
 8001bbc:	795b      	ldrb	r3, [r3, #5]
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	fb11 f303 	smulbb	r3, r1, r3
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	fb12 f303 	smulbb	r3, r2, r3
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	3304      	adds	r3, #4
 8001bce:	837b      	strh	r3, [r7, #26]
		for(j=0;j<cfont.y_size;j++) 
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	83bb      	strh	r3, [r7, #28]
 8001bd4:	e05a      	b.n	8001c8c <printChar+0x1cc>
			for (zz=0; zz<(fz); zz++)
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	617b      	str	r3, [r7, #20]
 8001bda:	e04b      	b.n	8001c74 <printChar+0x1b4>
				ch = cfont.font[temp+zz]; 
 8001bdc:	4b30      	ldr	r3, [pc, #192]	; (8001ca0 <printChar+0x1e0>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	8b79      	ldrh	r1, [r7, #26]
 8001be2:	697a      	ldr	r2, [r7, #20]
 8001be4:	440a      	add	r2, r1
 8001be6:	4413      	add	r3, r2
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	74fb      	strb	r3, [r7, #19]
				for(i=0;i<8;i++)
 8001bec:	2300      	movs	r3, #0
 8001bee:	77fb      	strb	r3, [r7, #31]
 8001bf0:	e03a      	b.n	8001c68 <printChar+0x1a8>
					lcd7735_setAddrWindow(x+i+(zz*8),y+j,x+i+(zz*8)+1,y+j+1);
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	7ffb      	ldrb	r3, [r7, #31]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	b2da      	uxtb	r2, r3
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	00db      	lsls	r3, r3, #3
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	4413      	add	r3, r2
 8001c06:	b2d8      	uxtb	r0, r3
 8001c08:	8bbb      	ldrh	r3, [r7, #28]
 8001c0a:	b2da      	uxtb	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	4413      	add	r3, r2
 8001c12:	b2d9      	uxtb	r1, r3
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	b2da      	uxtb	r2, r3
 8001c18:	7ffb      	ldrb	r3, [r7, #31]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	b2da      	uxtb	r2, r3
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	4413      	add	r3, r2
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	b2dc      	uxtb	r4, r3
 8001c2e:	8bbb      	ldrh	r3, [r7, #28]
 8001c30:	b2da      	uxtb	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	4413      	add	r3, r2
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	4622      	mov	r2, r4
 8001c40:	f7ff f8ac 	bl	8000d9c <lcd7735_setAddrWindow>
					if((ch&(1<<(7-i)))!=0)   
 8001c44:	7cfa      	ldrb	r2, [r7, #19]
 8001c46:	7ffb      	ldrb	r3, [r7, #31]
 8001c48:	f1c3 0307 	rsb	r3, r3, #7
 8001c4c:	fa42 f303 	asr.w	r3, r2, r3
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d004      	beq.n	8001c62 <printChar+0x1a2>
						lcd7735_pushColor(_fg);
 8001c58:	4b13      	ldr	r3, [pc, #76]	; (8001ca8 <printChar+0x1e8>)
 8001c5a:	881b      	ldrh	r3, [r3, #0]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff f8ed 	bl	8000e3c <lcd7735_pushColor>
				for(i=0;i<8;i++)
 8001c62:	7ffb      	ldrb	r3, [r7, #31]
 8001c64:	3301      	adds	r3, #1
 8001c66:	77fb      	strb	r3, [r7, #31]
 8001c68:	7ffb      	ldrb	r3, [r7, #31]
 8001c6a:	2b07      	cmp	r3, #7
 8001c6c:	d9c1      	bls.n	8001bf2 <printChar+0x132>
			for (zz=0; zz<(fz); zz++)
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	3301      	adds	r3, #1
 8001c72:	617b      	str	r3, [r7, #20]
 8001c74:	7fbb      	ldrb	r3, [r7, #30]
 8001c76:	697a      	ldr	r2, [r7, #20]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	dbaf      	blt.n	8001bdc <printChar+0x11c>
			temp+=(fz);
 8001c7c:	7fbb      	ldrb	r3, [r7, #30]
 8001c7e:	b29a      	uxth	r2, r3
 8001c80:	8b7b      	ldrh	r3, [r7, #26]
 8001c82:	4413      	add	r3, r2
 8001c84:	837b      	strh	r3, [r7, #26]
		for(j=0;j<cfont.y_size;j++) 
 8001c86:	8bbb      	ldrh	r3, [r7, #28]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	83bb      	strh	r3, [r7, #28]
 8001c8c:	4b04      	ldr	r3, [pc, #16]	; (8001ca0 <printChar+0x1e0>)
 8001c8e:	795b      	ldrb	r3, [r3, #5]
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	8bba      	ldrh	r2, [r7, #28]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d39e      	bcc.n	8001bd6 <printChar+0x116>
}
 8001c98:	bf00      	nop
 8001c9a:	3724      	adds	r7, #36	; 0x24
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd90      	pop	{r4, r7, pc}
 8001ca0:	20000218 	.word	0x20000218
 8001ca4:	20000224 	.word	0x20000224
 8001ca8:	20000004 	.word	0x20000004
 8001cac:	20000226 	.word	0x20000226

08001cb0 <rotateChar>:

void rotateChar(uint8_t c, int x, int y, int pos, int deg) {
 8001cb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cb4:	b08e      	sub	sp, #56	; 0x38
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
 8001cbc:	603b      	str	r3, [r7, #0]
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	73fb      	strb	r3, [r7, #15]
	uint8_t i,j,ch,fz;
	uint16_t temp; 
	int newx,newy;
	double radian = deg*0.0175;
 8001cc2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001cc4:	f7fe fc36 	bl	8000534 <__aeabi_i2d>
 8001cc8:	a395      	add	r3, pc, #596	; (adr r3, 8001f20 <rotateChar+0x270>)
 8001cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cce:	f7fe fc9b 	bl	8000608 <__aeabi_dmul>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	e9c7 2308 	strd	r2, r3, [r7, #32]
	int zz;

	if( cfont.x_size < 8 ) 
 8001cda:	4b8d      	ldr	r3, [pc, #564]	; (8001f10 <rotateChar+0x260>)
 8001cdc:	791b      	ldrb	r3, [r3, #4]
 8001cde:	2b07      	cmp	r3, #7
 8001ce0:	d804      	bhi.n	8001cec <rotateChar+0x3c>
		fz = cfont.x_size;
 8001ce2:	4b8b      	ldr	r3, [pc, #556]	; (8001f10 <rotateChar+0x260>)
 8001ce4:	791b      	ldrb	r3, [r3, #4]
 8001ce6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8001cea:	e004      	b.n	8001cf6 <rotateChar+0x46>
	else
		fz = cfont.x_size/8;	
 8001cec:	4b88      	ldr	r3, [pc, #544]	; (8001f10 <rotateChar+0x260>)
 8001cee:	791b      	ldrb	r3, [r3, #4]
 8001cf0:	08db      	lsrs	r3, r3, #3
 8001cf2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	temp=((c-cfont.offset)*((fz)*cfont.y_size))+4;
 8001cf6:	7bfb      	ldrb	r3, [r7, #15]
 8001cf8:	4a85      	ldr	r2, [pc, #532]	; (8001f10 <rotateChar+0x260>)
 8001cfa:	7992      	ldrb	r2, [r2, #6]
 8001cfc:	1a9b      	subs	r3, r3, r2
 8001cfe:	b29a      	uxth	r2, r3
 8001d00:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001d04:	b299      	uxth	r1, r3
 8001d06:	4b82      	ldr	r3, [pc, #520]	; (8001f10 <rotateChar+0x260>)
 8001d08:	795b      	ldrb	r3, [r3, #5]
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	fb11 f303 	smulbb	r3, r1, r3
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	fb12 f303 	smulbb	r3, r2, r3
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	3304      	adds	r3, #4
 8001d1a:	867b      	strh	r3, [r7, #50]	; 0x32
	for(j=0;j<cfont.y_size;j++) {
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001d22:	e0e6      	b.n	8001ef2 <rotateChar+0x242>
		for (zz=0; zz<(fz); zz++) {
 8001d24:	2300      	movs	r3, #0
 8001d26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d28:	e0d2      	b.n	8001ed0 <rotateChar+0x220>
			ch = cfont.font[temp+zz]; 
 8001d2a:	4b79      	ldr	r3, [pc, #484]	; (8001f10 <rotateChar+0x260>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 8001d30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d32:	440a      	add	r2, r1
 8001d34:	4413      	add	r3, r2
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	77fb      	strb	r3, [r7, #31]
			for(i=0;i<8;i++) {   
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001d40:	e0be      	b.n	8001ec0 <rotateChar+0x210>
				newx=x+(((i+(zz*8)+(pos*cfont.x_size))*cos(radian))-((j)*sin(radian)));
 8001d42:	68b8      	ldr	r0, [r7, #8]
 8001d44:	f7fe fbf6 	bl	8000534 <__aeabi_i2d>
 8001d48:	4604      	mov	r4, r0
 8001d4a:	460d      	mov	r5, r1
 8001d4c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	441a      	add	r2, r3
 8001d56:	4b6e      	ldr	r3, [pc, #440]	; (8001f10 <rotateChar+0x260>)
 8001d58:	791b      	ldrb	r3, [r3, #4]
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	fb01 f303 	mul.w	r3, r1, r3
 8001d62:	4413      	add	r3, r2
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7fe fbe5 	bl	8000534 <__aeabi_i2d>
 8001d6a:	4680      	mov	r8, r0
 8001d6c:	4689      	mov	r9, r1
 8001d6e:	ed97 0b08 	vldr	d0, [r7, #32]
 8001d72:	f005 f8dd 	bl	8006f30 <cos>
 8001d76:	ec53 2b10 	vmov	r2, r3, d0
 8001d7a:	4640      	mov	r0, r8
 8001d7c:	4649      	mov	r1, r9
 8001d7e:	f7fe fc43 	bl	8000608 <__aeabi_dmul>
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	4692      	mov	sl, r2
 8001d88:	469b      	mov	fp, r3
 8001d8a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7fe fbd0 	bl	8000534 <__aeabi_i2d>
 8001d94:	4680      	mov	r8, r0
 8001d96:	4689      	mov	r9, r1
 8001d98:	ed97 0b08 	vldr	d0, [r7, #32]
 8001d9c:	f005 f96c 	bl	8007078 <sin>
 8001da0:	ec53 2b10 	vmov	r2, r3, d0
 8001da4:	4640      	mov	r0, r8
 8001da6:	4649      	mov	r1, r9
 8001da8:	f7fe fc2e 	bl	8000608 <__aeabi_dmul>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	4650      	mov	r0, sl
 8001db2:	4659      	mov	r1, fp
 8001db4:	f7fe fa70 	bl	8000298 <__aeabi_dsub>
 8001db8:	4602      	mov	r2, r0
 8001dba:	460b      	mov	r3, r1
 8001dbc:	4620      	mov	r0, r4
 8001dbe:	4629      	mov	r1, r5
 8001dc0:	f7fe fa6c 	bl	800029c <__adddf3>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	4610      	mov	r0, r2
 8001dca:	4619      	mov	r1, r3
 8001dcc:	f7fe fecc 	bl	8000b68 <__aeabi_d2iz>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	61bb      	str	r3, [r7, #24]
				newy=y+(((j)*cos(radian))+((i+(zz*8)+(pos*cfont.x_size))*sin(radian)));
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f7fe fbad 	bl	8000534 <__aeabi_i2d>
 8001dda:	4604      	mov	r4, r0
 8001ddc:	460d      	mov	r5, r1
 8001dde:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7fe fba6 	bl	8000534 <__aeabi_i2d>
 8001de8:	4680      	mov	r8, r0
 8001dea:	4689      	mov	r9, r1
 8001dec:	ed97 0b08 	vldr	d0, [r7, #32]
 8001df0:	f005 f89e 	bl	8006f30 <cos>
 8001df4:	ec53 2b10 	vmov	r2, r3, d0
 8001df8:	4640      	mov	r0, r8
 8001dfa:	4649      	mov	r1, r9
 8001dfc:	f7fe fc04 	bl	8000608 <__aeabi_dmul>
 8001e00:	4602      	mov	r2, r0
 8001e02:	460b      	mov	r3, r1
 8001e04:	4692      	mov	sl, r2
 8001e06:	469b      	mov	fp, r3
 8001e08:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e0e:	00db      	lsls	r3, r3, #3
 8001e10:	441a      	add	r2, r3
 8001e12:	4b3f      	ldr	r3, [pc, #252]	; (8001f10 <rotateChar+0x260>)
 8001e14:	791b      	ldrb	r3, [r3, #4]
 8001e16:	4619      	mov	r1, r3
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	fb01 f303 	mul.w	r3, r1, r3
 8001e1e:	4413      	add	r3, r2
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7fe fb87 	bl	8000534 <__aeabi_i2d>
 8001e26:	4680      	mov	r8, r0
 8001e28:	4689      	mov	r9, r1
 8001e2a:	ed97 0b08 	vldr	d0, [r7, #32]
 8001e2e:	f005 f923 	bl	8007078 <sin>
 8001e32:	ec53 2b10 	vmov	r2, r3, d0
 8001e36:	4640      	mov	r0, r8
 8001e38:	4649      	mov	r1, r9
 8001e3a:	f7fe fbe5 	bl	8000608 <__aeabi_dmul>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	460b      	mov	r3, r1
 8001e42:	4650      	mov	r0, sl
 8001e44:	4659      	mov	r1, fp
 8001e46:	f7fe fa29 	bl	800029c <__adddf3>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	4620      	mov	r0, r4
 8001e50:	4629      	mov	r1, r5
 8001e52:	f7fe fa23 	bl	800029c <__adddf3>
 8001e56:	4602      	mov	r2, r0
 8001e58:	460b      	mov	r3, r1
 8001e5a:	4610      	mov	r0, r2
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	f7fe fe83 	bl	8000b68 <__aeabi_d2iz>
 8001e62:	4603      	mov	r3, r0
 8001e64:	617b      	str	r3, [r7, #20]

				lcd7735_setAddrWindow(newx,newy,newx+1,newy+1);
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	b2d8      	uxtb	r0, r3
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	b2d9      	uxtb	r1, r3
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	3301      	adds	r3, #1
 8001e74:	b2da      	uxtb	r2, r3
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	f7fe ff8d 	bl	8000d9c <lcd7735_setAddrWindow>

				if((ch&(1<<(7-i)))!=0) {
 8001e82:	7ffa      	ldrb	r2, [r7, #31]
 8001e84:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001e88:	f1c3 0307 	rsb	r3, r3, #7
 8001e8c:	fa42 f303 	asr.w	r3, r2, r3
 8001e90:	f003 0301 	and.w	r3, r3, #1
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d005      	beq.n	8001ea4 <rotateChar+0x1f4>
					lcd7735_pushColor(_fg);
 8001e98:	4b1e      	ldr	r3, [pc, #120]	; (8001f14 <rotateChar+0x264>)
 8001e9a:	881b      	ldrh	r3, [r3, #0]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7fe ffcd 	bl	8000e3c <lcd7735_pushColor>
 8001ea2:	e008      	b.n	8001eb6 <rotateChar+0x206>
				} else  {
					if (!_transparent)
 8001ea4:	4b1c      	ldr	r3, [pc, #112]	; (8001f18 <rotateChar+0x268>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d104      	bne.n	8001eb6 <rotateChar+0x206>
						lcd7735_pushColor(_bg);
 8001eac:	4b1b      	ldr	r3, [pc, #108]	; (8001f1c <rotateChar+0x26c>)
 8001eae:	881b      	ldrh	r3, [r3, #0]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7fe ffc3 	bl	8000e3c <lcd7735_pushColor>
			for(i=0;i<8;i++) {   
 8001eb6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001eba:	3301      	adds	r3, #1
 8001ebc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001ec0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001ec4:	2b07      	cmp	r3, #7
 8001ec6:	f67f af3c 	bls.w	8001d42 <rotateChar+0x92>
		for (zz=0; zz<(fz); zz++) {
 8001eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ecc:	3301      	adds	r3, #1
 8001ece:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ed0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001ed4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	f6ff af27 	blt.w	8001d2a <rotateChar+0x7a>
				}   
			}
		}
		temp+=(fz);
 8001edc:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001ee0:	b29a      	uxth	r2, r3
 8001ee2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001ee4:	4413      	add	r3, r2
 8001ee6:	867b      	strh	r3, [r7, #50]	; 0x32
	for(j=0;j<cfont.y_size;j++) {
 8001ee8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001eec:	3301      	adds	r3, #1
 8001eee:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001ef2:	4b07      	ldr	r3, [pc, #28]	; (8001f10 <rotateChar+0x260>)
 8001ef4:	795b      	ldrb	r3, [r3, #5]
 8001ef6:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8001efa:	429a      	cmp	r2, r3
 8001efc:	f4ff af12 	bcc.w	8001d24 <rotateChar+0x74>
	}
}
 8001f00:	bf00      	nop
 8001f02:	bf00      	nop
 8001f04:	3738      	adds	r7, #56	; 0x38
 8001f06:	46bd      	mov	sp, r7
 8001f08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f0c:	f3af 8000 	nop.w
 8001f10:	20000218 	.word	0x20000218
 8001f14:	20000004 	.word	0x20000004
 8001f18:	20000224 	.word	0x20000224
 8001f1c:	20000226 	.word	0x20000226
 8001f20:	1eb851ec 	.word	0x1eb851ec
 8001f24:	3f91eb85 	.word	0x3f91eb85

08001f28 <lcd7735_print>:

void lcd7735_print(char *st, int x, int y, int deg) {
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b088      	sub	sp, #32
 8001f2c:	af02      	add	r7, sp, #8
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	607a      	str	r2, [r7, #4]
 8001f34:	603b      	str	r3, [r7, #0]
	int stl, i;

	stl = strlen(st);
 8001f36:	68f8      	ldr	r0, [r7, #12]
 8001f38:	f7fe f952 	bl	80001e0 <strlen>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	613b      	str	r3, [r7, #16]

	if (x==RIGHT)
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	f113 0f02 	cmn.w	r3, #2
 8001f46:	d10a      	bne.n	8001f5e <lcd7735_print+0x36>
		x=(_width+1)-(stl*cfont.x_size);
 8001f48:	4b25      	ldr	r3, [pc, #148]	; (8001fe0 <lcd7735_print+0xb8>)
 8001f4a:	881b      	ldrh	r3, [r3, #0]
 8001f4c:	1c5a      	adds	r2, r3, #1
 8001f4e:	4b25      	ldr	r3, [pc, #148]	; (8001fe4 <lcd7735_print+0xbc>)
 8001f50:	791b      	ldrb	r3, [r3, #4]
 8001f52:	4619      	mov	r1, r3
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	fb01 f303 	mul.w	r3, r1, r3
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	60bb      	str	r3, [r7, #8]
	if (x==CENTER)
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f64:	d10d      	bne.n	8001f82 <lcd7735_print+0x5a>
		x=((_height+1)-(stl*cfont.x_size))/2;
 8001f66:	4b20      	ldr	r3, [pc, #128]	; (8001fe8 <lcd7735_print+0xc0>)
 8001f68:	881b      	ldrh	r3, [r3, #0]
 8001f6a:	1c5a      	adds	r2, r3, #1
 8001f6c:	4b1d      	ldr	r3, [pc, #116]	; (8001fe4 <lcd7735_print+0xbc>)
 8001f6e:	791b      	ldrb	r3, [r3, #4]
 8001f70:	4619      	mov	r1, r3
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	fb01 f303 	mul.w	r3, r1, r3
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	0fda      	lsrs	r2, r3, #31
 8001f7c:	4413      	add	r3, r2
 8001f7e:	105b      	asrs	r3, r3, #1
 8001f80:	60bb      	str	r3, [r7, #8]

	for (i=0; i<stl; i++)
 8001f82:	2300      	movs	r3, #0
 8001f84:	617b      	str	r3, [r7, #20]
 8001f86:	e021      	b.n	8001fcc <lcd7735_print+0xa4>
		if (deg==0)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d110      	bne.n	8001fb0 <lcd7735_print+0x88>
			printChar(*st++, x + (i*(cfont.x_size)), y);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	1c5a      	adds	r2, r3, #1
 8001f92:	60fa      	str	r2, [r7, #12]
 8001f94:	7818      	ldrb	r0, [r3, #0]
 8001f96:	4b13      	ldr	r3, [pc, #76]	; (8001fe4 <lcd7735_print+0xbc>)
 8001f98:	791b      	ldrb	r3, [r3, #4]
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	fb03 f202 	mul.w	r2, r3, r2
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	4619      	mov	r1, r3
 8001faa:	f7ff fd89 	bl	8001ac0 <printChar>
 8001fae:	e00a      	b.n	8001fc6 <lcd7735_print+0x9e>
		else
			rotateChar(*st++, x, y, i, deg);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	1c5a      	adds	r2, r3, #1
 8001fb4:	60fa      	str	r2, [r7, #12]
 8001fb6:	7818      	ldrb	r0, [r3, #0]
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	9300      	str	r3, [sp, #0]
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	68b9      	ldr	r1, [r7, #8]
 8001fc2:	f7ff fe75 	bl	8001cb0 <rotateChar>
	for (i=0; i<stl; i++)
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	617b      	str	r3, [r7, #20]
 8001fcc:	697a      	ldr	r2, [r7, #20]
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	dbd9      	blt.n	8001f88 <lcd7735_print+0x60>
}
 8001fd4:	bf00      	nop
 8001fd6:	bf00      	nop
 8001fd8:	3718      	adds	r7, #24
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	20000000 	.word	0x20000000
 8001fe4:	20000218 	.word	0x20000218
 8001fe8:	20000002 	.word	0x20000002

08001fec <lcd7735_fillScreen>:
*********************************************************************
*********************** Service functions ***************************
*********************************************************************
*********************************************************************/

void lcd7735_fillScreen(uint16_t color) {
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af02      	add	r7, sp, #8
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	80fb      	strh	r3, [r7, #6]
	lcd7735_fillRect(0, 0,  _width, _height, color);
 8001ff6:	4b08      	ldr	r3, [pc, #32]	; (8002018 <lcd7735_fillScreen+0x2c>)
 8001ff8:	881b      	ldrh	r3, [r3, #0]
 8001ffa:	b21a      	sxth	r2, r3
 8001ffc:	4b07      	ldr	r3, [pc, #28]	; (800201c <lcd7735_fillScreen+0x30>)
 8001ffe:	881b      	ldrh	r3, [r3, #0]
 8002000:	b219      	sxth	r1, r3
 8002002:	88fb      	ldrh	r3, [r7, #6]
 8002004:	9300      	str	r3, [sp, #0]
 8002006:	460b      	mov	r3, r1
 8002008:	2100      	movs	r1, #0
 800200a:	2000      	movs	r0, #0
 800200c:	f7fe ff6a 	bl	8000ee4 <lcd7735_fillRect>
}
 8002010:	bf00      	nop
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	20000000 	.word	0x20000000
 800201c:	20000002 	.word	0x20000002

08002020 <lcd7735_setRotation>:
// Pass 8-bit (each) R,G,B, get back 16-bit packed color
uint16_t lcd7735_Color565(uint8_t r, uint8_t g, uint8_t b) {
	return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | (b >> 3);
}

void lcd7735_setRotation(uint8_t m) {
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	71fb      	strb	r3, [r7, #7]
	uint8_t rotation = m % 4; // can't be higher than 3
 800202a:	79fb      	ldrb	r3, [r7, #7]
 800202c:	f003 0303 	and.w	r3, r3, #3
 8002030:	73fb      	strb	r3, [r7, #15]

	lcd7735_sendCmd(ST7735_MADCTL);
 8002032:	2036      	movs	r0, #54	; 0x36
 8002034:	f000 f886 	bl	8002144 <lcd7735_sendCmd>
	switch (rotation) {
 8002038:	7bfb      	ldrb	r3, [r7, #15]
 800203a:	2b03      	cmp	r3, #3
 800203c:	d836      	bhi.n	80020ac <lcd7735_setRotation+0x8c>
 800203e:	a201      	add	r2, pc, #4	; (adr r2, 8002044 <lcd7735_setRotation+0x24>)
 8002040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002044:	08002055 	.word	0x08002055
 8002048:	08002069 	.word	0x08002069
 800204c:	0800207d 	.word	0x0800207d
 8002050:	08002091 	.word	0x08002091
   case PORTRAIT:
	   lcd7735_sendData(MADCTL_MX | MADCTL_MY | MADCTL_RGB);
 8002054:	20c0      	movs	r0, #192	; 0xc0
 8002056:	f000 f889 	bl	800216c <lcd7735_sendData>
	   _width  = ST7735_TFTWIDTH;
 800205a:	4b16      	ldr	r3, [pc, #88]	; (80020b4 <lcd7735_setRotation+0x94>)
 800205c:	2280      	movs	r2, #128	; 0x80
 800205e:	801a      	strh	r2, [r3, #0]
	   _height = ST7735_TFTHEIGHT;
 8002060:	4b15      	ldr	r3, [pc, #84]	; (80020b8 <lcd7735_setRotation+0x98>)
 8002062:	22a0      	movs	r2, #160	; 0xa0
 8002064:	801a      	strh	r2, [r3, #0]
	   break;
 8002066:	e01d      	b.n	80020a4 <lcd7735_setRotation+0x84>
   case LANDSCAPE:
	   lcd7735_sendData(MADCTL_MY | MADCTL_MV | MADCTL_RGB);
 8002068:	20a0      	movs	r0, #160	; 0xa0
 800206a:	f000 f87f 	bl	800216c <lcd7735_sendData>
	   _width  = ST7735_TFTHEIGHT;
 800206e:	4b11      	ldr	r3, [pc, #68]	; (80020b4 <lcd7735_setRotation+0x94>)
 8002070:	22a0      	movs	r2, #160	; 0xa0
 8002072:	801a      	strh	r2, [r3, #0]
	   _height = ST7735_TFTWIDTH;
 8002074:	4b10      	ldr	r3, [pc, #64]	; (80020b8 <lcd7735_setRotation+0x98>)
 8002076:	2280      	movs	r2, #128	; 0x80
 8002078:	801a      	strh	r2, [r3, #0]
	   break;
 800207a:	e013      	b.n	80020a4 <lcd7735_setRotation+0x84>
   case PORTRAIT_FLIP:
	   lcd7735_sendData(MADCTL_RGB);
 800207c:	2000      	movs	r0, #0
 800207e:	f000 f875 	bl	800216c <lcd7735_sendData>
	   _width  = ST7735_TFTWIDTH;
 8002082:	4b0c      	ldr	r3, [pc, #48]	; (80020b4 <lcd7735_setRotation+0x94>)
 8002084:	2280      	movs	r2, #128	; 0x80
 8002086:	801a      	strh	r2, [r3, #0]
	   _height = ST7735_TFTHEIGHT;
 8002088:	4b0b      	ldr	r3, [pc, #44]	; (80020b8 <lcd7735_setRotation+0x98>)
 800208a:	22a0      	movs	r2, #160	; 0xa0
 800208c:	801a      	strh	r2, [r3, #0]
	   break;
 800208e:	e009      	b.n	80020a4 <lcd7735_setRotation+0x84>
   case LANDSCAPE_FLIP:
	   lcd7735_sendData(MADCTL_MX | MADCTL_MV | MADCTL_RGB);
 8002090:	2060      	movs	r0, #96	; 0x60
 8002092:	f000 f86b 	bl	800216c <lcd7735_sendData>
	   _width  = ST7735_TFTHEIGHT;
 8002096:	4b07      	ldr	r3, [pc, #28]	; (80020b4 <lcd7735_setRotation+0x94>)
 8002098:	22a0      	movs	r2, #160	; 0xa0
 800209a:	801a      	strh	r2, [r3, #0]
	   _height = ST7735_TFTWIDTH;
 800209c:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <lcd7735_setRotation+0x98>)
 800209e:	2280      	movs	r2, #128	; 0x80
 80020a0:	801a      	strh	r2, [r3, #0]
	   break;
 80020a2:	bf00      	nop
   default:
	   return;
	}
	orientation = m;
 80020a4:	4a05      	ldr	r2, [pc, #20]	; (80020bc <lcd7735_setRotation+0x9c>)
 80020a6:	79fb      	ldrb	r3, [r7, #7]
 80020a8:	7013      	strb	r3, [r2, #0]
 80020aa:	e000      	b.n	80020ae <lcd7735_setRotation+0x8e>
	   return;
 80020ac:	bf00      	nop
}
 80020ae:	3710      	adds	r7, #16
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	20000000 	.word	0x20000000
 80020b8:	20000002 	.word	0x20000002
 80020bc:	20000214 	.word	0x20000214

080020c0 <lcd7735_invertDisplay>:

void lcd7735_invertDisplay(const uint8_t mode) {
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	71fb      	strb	r3, [r7, #7]
	if( mode == INVERT_ON ) lcd7735_sendCmd(ST7735_INVON);
 80020ca:	79fb      	ldrb	r3, [r7, #7]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d103      	bne.n	80020d8 <lcd7735_invertDisplay+0x18>
 80020d0:	2021      	movs	r0, #33	; 0x21
 80020d2:	f000 f837 	bl	8002144 <lcd7735_sendCmd>
	else if( mode == INVERT_OFF ) lcd7735_sendCmd(ST7735_INVOFF);
}
 80020d6:	e005      	b.n	80020e4 <lcd7735_invertDisplay+0x24>
	else if( mode == INVERT_OFF ) lcd7735_sendCmd(ST7735_INVOFF);
 80020d8:	79fb      	ldrb	r3, [r7, #7]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d102      	bne.n	80020e4 <lcd7735_invertDisplay+0x24>
 80020de:	2020      	movs	r0, #32
 80020e0:	f000 f830 	bl	8002144 <lcd7735_sendCmd>
}
 80020e4:	bf00      	nop
 80020e6:	3708      	adds	r7, #8
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <delay_ms>:
#include <mcalSPI.h>
#include "hw_config.h"

static SPI_TypeDef  *spi  = SPI1;

void delay_ms(uint32_t delay_value) {
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
    //TimingDelay = delay_value;
	LED_blue_on;			// for Debug only
 80020f4:	210a      	movs	r1, #10
 80020f6:	4807      	ldr	r0, [pc, #28]	; (8002114 <delay_ms+0x28>)
 80020f8:	f001 faa4 	bl	8003644 <gpioResetPin>
	systickDelay(&ST7735_Timer, delay_value);
 80020fc:	6879      	ldr	r1, [r7, #4]
 80020fe:	4806      	ldr	r0, [pc, #24]	; (8002118 <delay_ms+0x2c>)
 8002100:	f002 f808 	bl	8004114 <systickDelay>
	LED_blue_off;			//for Debug only
 8002104:	210a      	movs	r1, #10
 8002106:	4803      	ldr	r0, [pc, #12]	; (8002114 <delay_ms+0x28>)
 8002108:	f001 fa71 	bl	80035ee <gpioSetPin>
}
 800210c:	bf00      	nop
 800210e:	3708      	adds	r7, #8
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	40020400 	.word	0x40020400
 8002118:	20000230 	.word	0x20000230

0800211c <lcd7735_senddata>:

// Send byte via SPI to controller
void lcd7735_senddata(const uint8_t data)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	4603      	mov	r3, r0
 8002124:	71fb      	strb	r3, [r7, #7]
	spiWriteByte(spi, ST7735_CS_PORT, ST7735_CS, data);
 8002126:	4b05      	ldr	r3, [pc, #20]	; (800213c <lcd7735_senddata+0x20>)
 8002128:	6818      	ldr	r0, [r3, #0]
 800212a:	79fb      	ldrb	r3, [r7, #7]
 800212c:	2206      	movs	r2, #6
 800212e:	4904      	ldr	r1, [pc, #16]	; (8002140 <lcd7735_senddata+0x24>)
 8002130:	f001 fdf1 	bl	8003d16 <spiWriteByte>
}
 8002134:	bf00      	nop
 8002136:	3708      	adds	r7, #8
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	20000008 	.word	0x20000008
 8002140:	40020400 	.word	0x40020400

08002144 <lcd7735_sendCmd>:
	spiWriteWord(spi, ST7735_CS_PORT, ST7735_CS, data);
}

// Send control command to controller
void lcd7735_sendCmd(const uint8_t cmd)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	4603      	mov	r3, r0
 800214c:	71fb      	strb	r3, [r7, #7]
	ST7735_DC0;
 800214e:	2107      	movs	r1, #7
 8002150:	4805      	ldr	r0, [pc, #20]	; (8002168 <lcd7735_sendCmd+0x24>)
 8002152:	f001 fa77 	bl	8003644 <gpioResetPin>
    lcd7735_senddata(cmd);
 8002156:	79fb      	ldrb	r3, [r7, #7]
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff ffdf 	bl	800211c <lcd7735_senddata>
}
 800215e:	bf00      	nop
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	40020800 	.word	0x40020800

0800216c <lcd7735_sendData>:

// Send parameters o command to controller
void lcd7735_sendData(const uint8_t data)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	4603      	mov	r3, r0
 8002174:	71fb      	strb	r3, [r7, #7]
    ST7735_DC1;
 8002176:	2107      	movs	r1, #7
 8002178:	4805      	ldr	r0, [pc, #20]	; (8002190 <lcd7735_sendData+0x24>)
 800217a:	f001 fa38 	bl	80035ee <gpioSetPin>
    lcd7735_senddata(data);
 800217e:	79fb      	ldrb	r3, [r7, #7]
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff ffcb 	bl	800211c <lcd7735_senddata>
}
 8002186:	bf00      	nop
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	40020800 	.word	0x40020800

08002194 <lcd7735_setup>:

// Init hardware
void lcd7735_setup(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af04      	add	r7, sp, #16
    // Configuration LED Pin
    gpioSelectPort(LED_GPIO);
 800219a:	4843      	ldr	r0, [pc, #268]	; (80022a8 <lcd7735_setup+0x114>)
 800219c:	f001 f978 	bl	8003490 <gpioSelectPort>
    gpioSelectPinMode(LED_GPIO, LED_red, OUTPUT);
 80021a0:	2201      	movs	r2, #1
 80021a2:	2103      	movs	r1, #3
 80021a4:	4840      	ldr	r0, [pc, #256]	; (80022a8 <lcd7735_setup+0x114>)
 80021a6:	f001 f9d7 	bl	8003558 <gpioSelectPinMode>
    gpioSetOutputType(LED_GPIO, LED_red	, PUSHPULL);
 80021aa:	2200      	movs	r2, #0
 80021ac:	2103      	movs	r1, #3
 80021ae:	483e      	ldr	r0, [pc, #248]	; (80022a8 <lcd7735_setup+0x114>)
 80021b0:	f001 fadd 	bl	800376e <gpioSetOutputType>
    gpioSelectPushPullMode(LED_GPIO, LED_red, PULLUP);
 80021b4:	2201      	movs	r2, #1
 80021b6:	2103      	movs	r1, #3
 80021b8:	483b      	ldr	r0, [pc, #236]	; (80022a8 <lcd7735_setup+0x114>)
 80021ba:	f001 fb21 	bl	8003800 <gpioSelectPushPullMode>
    LED_red_off;
 80021be:	2103      	movs	r1, #3
 80021c0:	4839      	ldr	r0, [pc, #228]	; (80022a8 <lcd7735_setup+0x114>)
 80021c2:	f001 fa14 	bl	80035ee <gpioSetPin>

    gpioSelectPinMode(LED_GPIO, LED_green, OUTPUT);
 80021c6:	2201      	movs	r2, #1
 80021c8:	2104      	movs	r1, #4
 80021ca:	4837      	ldr	r0, [pc, #220]	; (80022a8 <lcd7735_setup+0x114>)
 80021cc:	f001 f9c4 	bl	8003558 <gpioSelectPinMode>
    gpioSetOutputType(LED_GPIO, LED_green, PUSHPULL);
 80021d0:	2200      	movs	r2, #0
 80021d2:	2104      	movs	r1, #4
 80021d4:	4834      	ldr	r0, [pc, #208]	; (80022a8 <lcd7735_setup+0x114>)
 80021d6:	f001 faca 	bl	800376e <gpioSetOutputType>
    gpioSelectPushPullMode(LED_GPIO, LED_green, PULLUP);
 80021da:	2201      	movs	r2, #1
 80021dc:	2104      	movs	r1, #4
 80021de:	4832      	ldr	r0, [pc, #200]	; (80022a8 <lcd7735_setup+0x114>)
 80021e0:	f001 fb0e 	bl	8003800 <gpioSelectPushPullMode>
    LED_green_off;
 80021e4:	2104      	movs	r1, #4
 80021e6:	4830      	ldr	r0, [pc, #192]	; (80022a8 <lcd7735_setup+0x114>)
 80021e8:	f001 fa01 	bl	80035ee <gpioSetPin>

    gpioSelectPinMode(LED_GPIO, LED_blue, OUTPUT);
 80021ec:	2201      	movs	r2, #1
 80021ee:	210a      	movs	r1, #10
 80021f0:	482d      	ldr	r0, [pc, #180]	; (80022a8 <lcd7735_setup+0x114>)
 80021f2:	f001 f9b1 	bl	8003558 <gpioSelectPinMode>
    gpioSetOutputType(LED_GPIO, LED_blue, PUSHPULL);
 80021f6:	2200      	movs	r2, #0
 80021f8:	210a      	movs	r1, #10
 80021fa:	482b      	ldr	r0, [pc, #172]	; (80022a8 <lcd7735_setup+0x114>)
 80021fc:	f001 fab7 	bl	800376e <gpioSetOutputType>
    gpioSelectPushPullMode(LED_GPIO, LED_blue, PULLUP);
 8002200:	2201      	movs	r2, #1
 8002202:	210a      	movs	r1, #10
 8002204:	4828      	ldr	r0, [pc, #160]	; (80022a8 <lcd7735_setup+0x114>)
 8002206:	f001 fafb 	bl	8003800 <gpioSelectPushPullMode>
    LED_blue_off;
 800220a:	210a      	movs	r1, #10
 800220c:	4826      	ldr	r0, [pc, #152]	; (80022a8 <lcd7735_setup+0x114>)
 800220e:	f001 f9ee 	bl	80035ee <gpioSetPin>
    /* Declartion of SPI & IO Pins für ST7735-Port
     *
     *
     */

    gpioSelectPort(ST7735_RST_PORT);
 8002212:	4826      	ldr	r0, [pc, #152]	; (80022ac <lcd7735_setup+0x118>)
 8002214:	f001 f93c 	bl	8003490 <gpioSelectPort>
    gpioSelectPinMode(ST7735_RST_PORT, ST7735_RST, OUTPUT);		// RESET
 8002218:	2201      	movs	r2, #1
 800221a:	2109      	movs	r1, #9
 800221c:	4823      	ldr	r0, [pc, #140]	; (80022ac <lcd7735_setup+0x118>)
 800221e:	f001 f99b 	bl	8003558 <gpioSelectPinMode>
    gpioSelectPort(ST7735_DC_PORT);
 8002222:	4823      	ldr	r0, [pc, #140]	; (80022b0 <lcd7735_setup+0x11c>)
 8002224:	f001 f934 	bl	8003490 <gpioSelectPort>
    gpioSelectPinMode(ST7735_DC_PORT, ST7735_DC, OUTPUT);		// DATA/Command
 8002228:	2201      	movs	r2, #1
 800222a:	2107      	movs	r1, #7
 800222c:	4820      	ldr	r0, [pc, #128]	; (80022b0 <lcd7735_setup+0x11c>)
 800222e:	f001 f993 	bl	8003558 <gpioSelectPinMode>

    gpioInitPort(ST7735_CS_PORT);
 8002232:	481d      	ldr	r0, [pc, #116]	; (80022a8 <lcd7735_setup+0x114>)
 8002234:	f001 f8ca 	bl	80033cc <gpioInitPort>
    gpioSelectPinMode(ST7735_CS_PORT,ST7735_CS, OUTPUT);        // CS
 8002238:	2201      	movs	r2, #1
 800223a:	2106      	movs	r1, #6
 800223c:	481a      	ldr	r0, [pc, #104]	; (80022a8 <lcd7735_setup+0x114>)
 800223e:	f001 f98b 	bl	8003558 <gpioSelectPinMode>
    gpioSelectPushPullMode(ST7735_CS_PORT, ST7735_CS, PULLUP);
 8002242:	2201      	movs	r2, #1
 8002244:	2106      	movs	r1, #6
 8002246:	4818      	ldr	r0, [pc, #96]	; (80022a8 <lcd7735_setup+0x114>)
 8002248:	f001 fada 	bl	8003800 <gpioSelectPushPullMode>

    gpioInitPort(ST7735_SPI_PORT);
 800224c:	4817      	ldr	r0, [pc, #92]	; (80022ac <lcd7735_setup+0x118>)
 800224e:	f001 f8bd 	bl	80033cc <gpioInitPort>
    gpioSelectPinMode(ST7735_SPI_PORT, ST7735_CLK, ALTFUNC);     // SPI1 Clock
 8002252:	2202      	movs	r2, #2
 8002254:	2105      	movs	r1, #5
 8002256:	4815      	ldr	r0, [pc, #84]	; (80022ac <lcd7735_setup+0x118>)
 8002258:	f001 f97e 	bl	8003558 <gpioSelectPinMode>
    gpioSelectAltFunc(ST7735_SPI_PORT, ST7735_CLK, AF5);
 800225c:	2205      	movs	r2, #5
 800225e:	2105      	movs	r1, #5
 8002260:	4812      	ldr	r0, [pc, #72]	; (80022ac <lcd7735_setup+0x118>)
 8002262:	f001 fa1b 	bl	800369c <gpioSelectAltFunc>
    gpioSelectPinMode(ST7735_SPI_PORT, ST7735_MOSI, ALTFUNC);    // SPI1 MOSI
 8002266:	2202      	movs	r2, #2
 8002268:	2107      	movs	r1, #7
 800226a:	4810      	ldr	r0, [pc, #64]	; (80022ac <lcd7735_setup+0x118>)
 800226c:	f001 f974 	bl	8003558 <gpioSelectPinMode>
    gpioSelectAltFunc(ST7735_SPI_PORT, ST7735_MOSI, AF5);
 8002270:	2205      	movs	r2, #5
 8002272:	2107      	movs	r1, #7
 8002274:	480d      	ldr	r0, [pc, #52]	; (80022ac <lcd7735_setup+0x118>)
 8002276:	f001 fa11 	bl	800369c <gpioSelectAltFunc>

    // Init SPI1
    spiSelectSPI(spi);
 800227a:	4b0e      	ldr	r3, [pc, #56]	; (80022b4 <lcd7735_setup+0x120>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f001 fcee 	bl	8003c60 <spiSelectSPI>

    spiInitSPI(spi, CLK_DIV_16, SPI_DATA_8_BIT, SSM_ON, SSI_LVL_HIGH, MASTER, SPI_PHASE_EDGE_1, SPI_IDLE_LOW);
 8002284:	4b0b      	ldr	r3, [pc, #44]	; (80022b4 <lcd7735_setup+0x120>)
 8002286:	6818      	ldr	r0, [r3, #0]
 8002288:	2300      	movs	r3, #0
 800228a:	9303      	str	r3, [sp, #12]
 800228c:	2300      	movs	r3, #0
 800228e:	9302      	str	r3, [sp, #8]
 8002290:	2300      	movs	r3, #0
 8002292:	9301      	str	r3, [sp, #4]
 8002294:	2301      	movs	r3, #1
 8002296:	9300      	str	r3, [sp, #0]
 8002298:	2301      	movs	r3, #1
 800229a:	2200      	movs	r2, #0
 800229c:	2103      	movs	r1, #3
 800229e:	f001 fbf1 	bl	8003a84 <spiInitSPI>

}
 80022a2:	bf00      	nop
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40020400 	.word	0x40020400
 80022ac:	40020000 	.word	0x40020000
 80022b0:	40020800 	.word	0x40020800
 80022b4:	20000008 	.word	0x20000008

080022b8 <LIS3DH_init_spi>:
	#define spiOUTxyz 	0xE8
static SPI_TypeDef  *spi  = SPI1;


void LIS3DH_init_spi(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af04      	add	r7, sp, #16
	gpioInitPort(LIS3DH_CS_PORT);
 80022be:	4824      	ldr	r0, [pc, #144]	; (8002350 <LIS3DH_init_spi+0x98>)
 80022c0:	f001 f884 	bl	80033cc <gpioInitPort>
	gpioSelectPinMode(LIS3DH_CS_PORT,LIS3DH_CS, OUTPUT);        // CS
 80022c4:	2201      	movs	r2, #1
 80022c6:	2108      	movs	r1, #8
 80022c8:	4821      	ldr	r0, [pc, #132]	; (8002350 <LIS3DH_init_spi+0x98>)
 80022ca:	f001 f945 	bl	8003558 <gpioSelectPinMode>
	gpioSelectPushPullMode(LIS3DH_CS_PORT, LIS3DH_CS, PULLUP);
 80022ce:	2201      	movs	r2, #1
 80022d0:	2108      	movs	r1, #8
 80022d2:	481f      	ldr	r0, [pc, #124]	; (8002350 <LIS3DH_init_spi+0x98>)
 80022d4:	f001 fa94 	bl	8003800 <gpioSelectPushPullMode>
	LIS3DH_CS1;
 80022d8:	2108      	movs	r1, #8
 80022da:	481d      	ldr	r0, [pc, #116]	; (8002350 <LIS3DH_init_spi+0x98>)
 80022dc:	f001 f987 	bl	80035ee <gpioSetPin>

	gpioInitPort(LIS3DH_SPI_PORT);
 80022e0:	481b      	ldr	r0, [pc, #108]	; (8002350 <LIS3DH_init_spi+0x98>)
 80022e2:	f001 f873 	bl	80033cc <gpioInitPort>
	gpioSelectPinMode(LIS3DH_SPI_PORT, LIS3DH_CLK, ALTFUNC);     // SPI1 Clock
 80022e6:	2202      	movs	r2, #2
 80022e8:	2105      	movs	r1, #5
 80022ea:	4819      	ldr	r0, [pc, #100]	; (8002350 <LIS3DH_init_spi+0x98>)
 80022ec:	f001 f934 	bl	8003558 <gpioSelectPinMode>
	gpioSelectAltFunc(LIS3DH_SPI_PORT, LIS3DH_CLK, AF5);
 80022f0:	2205      	movs	r2, #5
 80022f2:	2105      	movs	r1, #5
 80022f4:	4816      	ldr	r0, [pc, #88]	; (8002350 <LIS3DH_init_spi+0x98>)
 80022f6:	f001 f9d1 	bl	800369c <gpioSelectAltFunc>
	gpioSelectPinMode(LIS3DH_SPI_PORT, LIS3DH_MOSI, ALTFUNC);    // SPI1 MOSI
 80022fa:	2202      	movs	r2, #2
 80022fc:	2107      	movs	r1, #7
 80022fe:	4814      	ldr	r0, [pc, #80]	; (8002350 <LIS3DH_init_spi+0x98>)
 8002300:	f001 f92a 	bl	8003558 <gpioSelectPinMode>
	gpioSelectAltFunc(LIS3DH_SPI_PORT, LIS3DH_MOSI, AF5);
 8002304:	2205      	movs	r2, #5
 8002306:	2107      	movs	r1, #7
 8002308:	4811      	ldr	r0, [pc, #68]	; (8002350 <LIS3DH_init_spi+0x98>)
 800230a:	f001 f9c7 	bl	800369c <gpioSelectAltFunc>
	gpioSelectPinMode(LIS3DH_SPI_PORT, LIS3DH_MISO, ALTFUNC);    // SPI1 MISO
 800230e:	2202      	movs	r2, #2
 8002310:	2106      	movs	r1, #6
 8002312:	480f      	ldr	r0, [pc, #60]	; (8002350 <LIS3DH_init_spi+0x98>)
 8002314:	f001 f920 	bl	8003558 <gpioSelectPinMode>
	gpioSelectAltFunc(LIS3DH_SPI_PORT, LIS3DH_MISO, AF5);
 8002318:	2205      	movs	r2, #5
 800231a:	2106      	movs	r1, #6
 800231c:	480c      	ldr	r0, [pc, #48]	; (8002350 <LIS3DH_init_spi+0x98>)
 800231e:	f001 f9bd 	bl	800369c <gpioSelectAltFunc>
	// Init SPI1
	spiSelectSPI(spi);
 8002322:	4b0c      	ldr	r3, [pc, #48]	; (8002354 <LIS3DH_init_spi+0x9c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4618      	mov	r0, r3
 8002328:	f001 fc9a 	bl	8003c60 <spiSelectSPI>
	spiInitSPI(spi, CLK_DIV_16, SPI_DATA_8_BIT, SSM_ON, SSI_LVL_HIGH, MASTER, SPI_PHASE_EDGE_2, SPI_IDLE_HIGH);
 800232c:	4b09      	ldr	r3, [pc, #36]	; (8002354 <LIS3DH_init_spi+0x9c>)
 800232e:	6818      	ldr	r0, [r3, #0]
 8002330:	2301      	movs	r3, #1
 8002332:	9303      	str	r3, [sp, #12]
 8002334:	2301      	movs	r3, #1
 8002336:	9302      	str	r3, [sp, #8]
 8002338:	2300      	movs	r3, #0
 800233a:	9301      	str	r3, [sp, #4]
 800233c:	2301      	movs	r3, #1
 800233e:	9300      	str	r3, [sp, #0]
 8002340:	2301      	movs	r3, #1
 8002342:	2200      	movs	r2, #0
 8002344:	2103      	movs	r1, #3
 8002346:	f001 fb9d 	bl	8003a84 <spiInitSPI>

}
 800234a:	bf00      	nop
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40020000 	.word	0x40020000
 8002354:	2000000c 	.word	0x2000000c

08002358 <spiLIS3DH_senddata>:


// Send byte via SPI to controller
void spiLIS3DH_senddata(uint8_t reg, uint8_t data)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af02      	add	r7, sp, #8
 800235e:	4603      	mov	r3, r0
 8002360:	460a      	mov	r2, r1
 8002362:	71fb      	strb	r3, [r7, #7]
 8002364:	4613      	mov	r3, r2
 8002366:	71bb      	strb	r3, [r7, #6]
	spiSendData(spi, LIS3DH_CS_PORT, LIS3DH_CS, reg, data);
 8002368:	4b06      	ldr	r3, [pc, #24]	; (8002384 <spiLIS3DH_senddata+0x2c>)
 800236a:	6818      	ldr	r0, [r3, #0]
 800236c:	79fa      	ldrb	r2, [r7, #7]
 800236e:	79bb      	ldrb	r3, [r7, #6]
 8002370:	9300      	str	r3, [sp, #0]
 8002372:	4613      	mov	r3, r2
 8002374:	2208      	movs	r2, #8
 8002376:	4904      	ldr	r1, [pc, #16]	; (8002388 <spiLIS3DH_senddata+0x30>)
 8002378:	f001 fd38 	bl	8003dec <spiSendData>
}
 800237c:	bf00      	nop
 800237e:	3708      	adds	r7, #8
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	2000000c 	.word	0x2000000c
 8002388:	40020000 	.word	0x40020000

0800238c <LIS3DH_presCheck>:
}

*/

int8_t LIS3DH_presCheck()
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af02      	add	r7, sp, #8
	uint8_t ret[2];
	//ret[1] = spiLIS3DH_getRegData(DummyReg|spiRead))

	spiReadRegBurst(spi, LIS3DH_CS_PORT, LIS3DH_CS, (DummyReg|spiRead), ret, 2);
 8002392:	4b0a      	ldr	r3, [pc, #40]	; (80023bc <LIS3DH_presCheck+0x30>)
 8002394:	6818      	ldr	r0, [r3, #0]
 8002396:	2302      	movs	r3, #2
 8002398:	9301      	str	r3, [sp, #4]
 800239a:	1d3b      	adds	r3, r7, #4
 800239c:	9300      	str	r3, [sp, #0]
 800239e:	238f      	movs	r3, #143	; 0x8f
 80023a0:	2208      	movs	r2, #8
 80023a2:	4907      	ldr	r1, [pc, #28]	; (80023c0 <LIS3DH_presCheck+0x34>)
 80023a4:	f001 fd6c 	bl	8003e80 <spiReadRegBurst>

	if (dummyVal == ret[1])
 80023a8:	797b      	ldrb	r3, [r7, #5]
 80023aa:	2b33      	cmp	r3, #51	; 0x33
 80023ac:	d101      	bne.n	80023b2 <LIS3DH_presCheck+0x26>
	{return 1;}
 80023ae:	2301      	movs	r3, #1
 80023b0:	e000      	b.n	80023b4 <LIS3DH_presCheck+0x28>
	else
	{return 0;}
 80023b2:	2300      	movs	r3, #0

}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3708      	adds	r7, #8
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	2000000c 	.word	0x2000000c
 80023c0:	40020000 	.word	0x40020000

080023c4 <spiLIS3DH_init>:


int8_t spiLIS3DH_init(int8_t restart)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	4603      	mov	r3, r0
 80023cc:	71fb      	strb	r3, [r7, #7]
	#define stepStart -7
	static int8_t step = stepStart ;

	if ((restart != 0) && (step == stepStart))  {step = stepStart+1;}
 80023ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d008      	beq.n	80023e8 <spiLIS3DH_init+0x24>
 80023d6:	4b35      	ldr	r3, [pc, #212]	; (80024ac <spiLIS3DH_init+0xe8>)
 80023d8:	f993 3000 	ldrsb.w	r3, [r3]
 80023dc:	f113 0f07 	cmn.w	r3, #7
 80023e0:	d102      	bne.n	80023e8 <spiLIS3DH_init+0x24>
 80023e2:	4b32      	ldr	r3, [pc, #200]	; (80024ac <spiLIS3DH_init+0xe8>)
 80023e4:	22fa      	movs	r2, #250	; 0xfa
 80023e6:	701a      	strb	r2, [r3, #0]
	switch (step)
 80023e8:	4b30      	ldr	r3, [pc, #192]	; (80024ac <spiLIS3DH_init+0xe8>)
 80023ea:	f993 3000 	ldrsb.w	r3, [r3]
 80023ee:	3307      	adds	r3, #7
 80023f0:	2b06      	cmp	r3, #6
 80023f2:	d851      	bhi.n	8002498 <spiLIS3DH_init+0xd4>
 80023f4:	a201      	add	r2, pc, #4	; (adr r2, 80023fc <spiLIS3DH_init+0x38>)
 80023f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023fa:	bf00      	nop
 80023fc:	08002419 	.word	0x08002419
 8002400:	08002425 	.word	0x08002425
 8002404:	0800243b 	.word	0x0800243b
 8002408:	0800244b 	.word	0x0800244b
 800240c:	0800245b 	.word	0x0800245b
 8002410:	0800246b 	.word	0x0800246b
 8002414:	08002489 	.word	0x08002489
	{
		case -7:
		{
			LIS3DH_init_spi();
 8002418:	f7ff ff4e 	bl	80022b8 <LIS3DH_init_spi>
			step = -6;
 800241c:	4b23      	ldr	r3, [pc, #140]	; (80024ac <spiLIS3DH_init+0xe8>)
 800241e:	22fa      	movs	r2, #250	; 0xfa
 8002420:	701a      	strb	r2, [r3, #0]
			break;
 8002422:	e03c      	b.n	800249e <spiLIS3DH_init+0xda>
		}
		case -6:
		{
			//ret = LIS3DH_presCheck();
			if (1 == LIS3DH_presCheck())
 8002424:	f7ff ffb2 	bl	800238c <LIS3DH_presCheck>
 8002428:	4603      	mov	r3, r0
 800242a:	2b01      	cmp	r3, #1
 800242c:	d103      	bne.n	8002436 <spiLIS3DH_init+0x72>
			{
				step = -5;
 800242e:	4b1f      	ldr	r3, [pc, #124]	; (80024ac <spiLIS3DH_init+0xe8>)
 8002430:	22fb      	movs	r2, #251	; 0xfb
 8002432:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				return 1;		//1 = failure
			}
			break;
 8002434:	e033      	b.n	800249e <spiLIS3DH_init+0xda>
				return 1;		//1 = failure
 8002436:	2301      	movs	r3, #1
 8002438:	e034      	b.n	80024a4 <spiLIS3DH_init+0xe0>
		}
		case -5:
		{
			spiLIS3DH_senddata(CtrlReg5,   0b10000000); // reboot memory content
 800243a:	2180      	movs	r1, #128	; 0x80
 800243c:	2024      	movs	r0, #36	; 0x24
 800243e:	f7ff ff8b 	bl	8002358 <spiLIS3DH_senddata>
			step = -4;
 8002442:	4b1a      	ldr	r3, [pc, #104]	; (80024ac <spiLIS3DH_init+0xe8>)
 8002444:	22fc      	movs	r2, #252	; 0xfc
 8002446:	701a      	strb	r2, [r3, #0]
			break;
 8002448:	e029      	b.n	800249e <spiLIS3DH_init+0xda>
		}
		case -4:
		{
			spiLIS3DH_senddata(CtrlReg4,   0b10001100); // BDU BLE FS1 FS0 HR ST1 ST0 SIM
 800244a:	218c      	movs	r1, #140	; 0x8c
 800244c:	2023      	movs	r0, #35	; 0x23
 800244e:	f7ff ff83 	bl	8002358 <spiLIS3DH_senddata>
			step = -3;
 8002452:	4b16      	ldr	r3, [pc, #88]	; (80024ac <spiLIS3DH_init+0xe8>)
 8002454:	22fd      	movs	r2, #253	; 0xfd
 8002456:	701a      	strb	r2, [r3, #0]
			break;
 8002458:	e021      	b.n	800249e <spiLIS3DH_init+0xda>
		}
		case -3:
		{
			spiLIS3DH_senddata(CtrlReg1,  (uint8_t) 0b10010111); //
 800245a:	2197      	movs	r1, #151	; 0x97
 800245c:	2020      	movs	r0, #32
 800245e:	f7ff ff7b 	bl	8002358 <spiLIS3DH_senddata>
			step = -2;
 8002462:	4b12      	ldr	r3, [pc, #72]	; (80024ac <spiLIS3DH_init+0xe8>)
 8002464:	22fe      	movs	r2, #254	; 0xfe
 8002466:	701a      	strb	r2, [r3, #0]
			break;
 8002468:	e019      	b.n	800249e <spiLIS3DH_init+0xda>
		}
		case -2:
		{
			uint8_t LIS3DH_Reg4 = 0b10001000;			// BDU BLE FS1 FS0 HR ST1 ST0 SIM
 800246a:	2388      	movs	r3, #136	; 0x88
 800246c:	73fb      	strb	r3, [r7, #15]
#ifdef XYZopt
			LIS3DH_Reg4 |=        0b01000000;			// enable to switch High and Low Byte order. special Hint: High Byte first for a fast read sequence to array of int16
 800246e:	7bfb      	ldrb	r3, [r7, #15]
 8002470:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002474:	73fb      	strb	r3, [r7, #15]
#endif
			spiLIS3DH_senddata(CtrlReg4,  LIS3DH_Reg4); // BDU BLE FS1 FS0 HR ST1 ST0 SIM
 8002476:	7bfb      	ldrb	r3, [r7, #15]
 8002478:	4619      	mov	r1, r3
 800247a:	2023      	movs	r0, #35	; 0x23
 800247c:	f7ff ff6c 	bl	8002358 <spiLIS3DH_senddata>
			step = -1;
 8002480:	4b0a      	ldr	r3, [pc, #40]	; (80024ac <spiLIS3DH_init+0xe8>)
 8002482:	22ff      	movs	r2, #255	; 0xff
 8002484:	701a      	strb	r2, [r3, #0]
			break;
 8002486:	e00a      	b.n	800249e <spiLIS3DH_init+0xda>
		}
		case -1:
		{
			spiLIS3DH_senddata(ADCConfReg,(uint8_t) 0b11000000); // ADC Temp 0 0 0 0 0 0
 8002488:	21c0      	movs	r1, #192	; 0xc0
 800248a:	201f      	movs	r0, #31
 800248c:	f7ff ff64 	bl	8002358 <spiLIS3DH_senddata>

			step = 0;
 8002490:	4b06      	ldr	r3, [pc, #24]	; (80024ac <spiLIS3DH_init+0xe8>)
 8002492:	2200      	movs	r2, #0
 8002494:	701a      	strb	r2, [r3, #0]
			break;
 8002496:	e002      	b.n	800249e <spiLIS3DH_init+0xda>
		}
		default:
		{
			step = -7;
 8002498:	4b04      	ldr	r3, [pc, #16]	; (80024ac <spiLIS3DH_init+0xe8>)
 800249a:	22f9      	movs	r2, #249	; 0xf9
 800249c:	701a      	strb	r2, [r3, #0]
		}
	}
	return step;
 800249e:	4b03      	ldr	r3, [pc, #12]	; (80024ac <spiLIS3DH_init+0xe8>)
 80024a0:	f993 3000 	ldrsb.w	r3, [r3]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3710      	adds	r7, #16
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	20000010 	.word	0x20000010

080024b0 <spiLIS3DH_XYZ>:


#ifdef XYZopt
int8_t spiLIS3DH_XYZ(int16_t *xyz, int8_t enable_Temp)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af02      	add	r7, sp, #8
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	460b      	mov	r3, r1
 80024ba:	70fb      	strb	r3, [r7, #3]
	int8_t Temp[2] = {0,0};
 80024bc:	2300      	movs	r3, #0
 80024be:	81bb      	strh	r3, [r7, #12]
	if (enable_Temp)
 80024c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d00b      	beq.n	80024e0 <spiLIS3DH_XYZ+0x30>
	{
		spiReadRegBurst(spi, LIS3DH_CS_PORT, LIS3DH_CS, (ADC3Temp|spiRead), (uint8_t *) Temp, 2);
 80024c8:	4b0e      	ldr	r3, [pc, #56]	; (8002504 <spiLIS3DH_XYZ+0x54>)
 80024ca:	6818      	ldr	r0, [r3, #0]
 80024cc:	2302      	movs	r3, #2
 80024ce:	9301      	str	r3, [sp, #4]
 80024d0:	f107 030c 	add.w	r3, r7, #12
 80024d4:	9300      	str	r3, [sp, #0]
 80024d6:	238c      	movs	r3, #140	; 0x8c
 80024d8:	2208      	movs	r2, #8
 80024da:	490b      	ldr	r1, [pc, #44]	; (8002508 <spiLIS3DH_XYZ+0x58>)
 80024dc:	f001 fcd0 	bl	8003e80 <spiReadRegBurst>
	}
	spiReadRegBurst(spi, LIS3DH_CS_PORT, LIS3DH_CS, spiOUTxyz,(uint8_t *) xyz, 6);
 80024e0:	4b08      	ldr	r3, [pc, #32]	; (8002504 <spiLIS3DH_XYZ+0x54>)
 80024e2:	6818      	ldr	r0, [r3, #0]
 80024e4:	2306      	movs	r3, #6
 80024e6:	9301      	str	r3, [sp, #4]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	9300      	str	r3, [sp, #0]
 80024ec:	23e8      	movs	r3, #232	; 0xe8
 80024ee:	2208      	movs	r2, #8
 80024f0:	4905      	ldr	r1, [pc, #20]	; (8002508 <spiLIS3DH_XYZ+0x58>)
 80024f2:	f001 fcc5 	bl	8003e80 <spiReadRegBurst>

	return Temp[1];
 80024f6:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3710      	adds	r7, #16
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	2000000c 	.word	0x2000000c
 8002508:	40020000 	.word	0x40020000

0800250c <main>:
int8_t test_graphics(void);



int main(void)
{
 800250c:	b5b0      	push	{r4, r5, r7, lr}
 800250e:	b0a6      	sub	sp, #152	; 0x98
 8002510:	af00      	add	r7, sp, #0
	int testmode = 2;				// start with SPI and present test
 8002512:	2302      	movs	r3, #2
 8002514:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	int stepSPI  = 1;				// first Status SPI
 8002518:	2301      	movs	r3, #1
 800251a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	int8_t ret;



	const float _pi=3.141;
 800251e:	4bc1      	ldr	r3, [pc, #772]	; (8002824 <main+0x318>)
 8002520:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
#define aDots 6							// Count of Dots for alpha line
#define bDots 12

	const int16_t a_midxyl[3] = {30,40,14};			// alpha circle xpos, ypos ,length
	const int16_t b_midxyl[3] = {100,40,38};		// beta circle xpos, ypos ,length
	const uint16_t aColor = ST7735_YELLOW;
 8002524:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002528:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
	const uint16_t bColor = ST7735_MAGENTA; ;
 800252c:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8002530:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c

	int16_t j, XYa[2][aDots], XYb[2][bDots];								// aDots Wertepaare für Winkeldarstellung alpha
	float xgrad, ygrad;

	// Variables for Oszi Function
	int16_t timepos = 0;
 8002534:	2300      	movs	r3, #0
 8002536:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
	const int16_t oszi[3] = {90,28,159};			//oszi ypos-Zero Level, y-amplitude, t_lenght
	const uint16_t osziColor = ST7735_GREY;
 800253a:	f641 1323 	movw	r3, #6435	; 0x1923
 800253e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

	//  	unsigned int r = 0;

    // Dies ist das Array, das die Adressen aller Timer-Variablen enthaelt.
       // Auch die Groesse des Arrays wird berechnet.
       uint32_t *timerList[] = { &Timer1, &ST7735_Timer /*, weitere Timer */ };
 8002542:	4ab9      	ldr	r2, [pc, #740]	; (8002828 <main+0x31c>)
 8002544:	463b      	mov	r3, r7
 8002546:	e892 0003 	ldmia.w	r2, {r0, r1}
 800254a:	e883 0003 	stmia.w	r3, {r0, r1}
       size_t    arraySize = sizeof(timerList)/sizeof(timerList[0]);
 800254e:	2302      	movs	r3, #2
 8002550:	677b      	str	r3, [r7, #116]	; 0x74


    // Initialisiert den Systick-Timer
    systickInit(SYSTICK_1MS);
 8002552:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002556:	f001 fd5b 	bl	8004010 <systickInit>
    systickSetMillis(&Timer1, 200);
 800255a:	21c8      	movs	r1, #200	; 0xc8
 800255c:	48b3      	ldr	r0, [pc, #716]	; (800282c <main+0x320>)
 800255e:	f001 fd49 	bl	8003ff4 <systickSetMillis>

    lcd7735_setup();
 8002562:	f7ff fe17 	bl	8002194 <lcd7735_setup>
    LED_red_on;
 8002566:	2103      	movs	r1, #3
 8002568:	48b1      	ldr	r0, [pc, #708]	; (8002830 <main+0x324>)
 800256a:	f001 f86b 	bl	8003644 <gpioResetPin>
    lcd7735_initR(INITR_REDTAB);
 800256e:	2001      	movs	r0, #1
 8002570:	f7fe fbdc 	bl	8000d2c <lcd7735_initR>
    lcd7735_setRotation(LANDSCAPE);
 8002574:	2001      	movs	r0, #1
 8002576:	f7ff fd53 	bl	8002020 <lcd7735_setRotation>
    //lcd7735_init_screen((uint8_t *)&SmallFont[0],ST7735_GREEN,ST7735_BLACK,LANDSCAPE); // not OK
    lcd7735_setFont((uint8_t *)&SmallFont[0]);
 800257a:	48ae      	ldr	r0, [pc, #696]	; (8002834 <main+0x328>)
 800257c:	f7ff fa7e 	bl	8001a7c <lcd7735_setFont>
    LED_red_off;
 8002580:	2103      	movs	r1, #3
 8002582:	48ab      	ldr	r0, [pc, #684]	; (8002830 <main+0x324>)
 8002584:	f001 f833 	bl	80035ee <gpioSetPin>
    lcd7735_fillScreen(ST7735_BLACK);
 8002588:	2000      	movs	r0, #0
 800258a:	f7ff fd2f 	bl	8001fec <lcd7735_fillScreen>
    while (1)
    {
	   if (true == timerTrigger)
 800258e:	4baa      	ldr	r3, [pc, #680]	; (8002838 <main+0x32c>)
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d006      	beq.n	80025a4 <main+0x98>
	   {
			systickUpdateTimerList((uint32_t *) timerList, arraySize);
 8002596:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002598:	b2da      	uxtb	r2, r3
 800259a:	463b      	mov	r3, r7
 800259c:	4611      	mov	r1, r2
 800259e:	4618      	mov	r0, r3
 80025a0:	f001 fd8e 	bl	80040c0 <systickUpdateTimerList>
	   }

	   if (isSystickExpired(Timer1))
 80025a4:	4ba1      	ldr	r3, [pc, #644]	; (800282c <main+0x320>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f001 fd53 	bl	8004054 <isSystickExpired>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d0ec      	beq.n	800258e <main+0x82>
	   {
		   LED_green_off;
 80025b4:	2104      	movs	r1, #4
 80025b6:	489e      	ldr	r0, [pc, #632]	; (8002830 <main+0x324>)
 80025b8:	f001 f819 	bl	80035ee <gpioSetPin>
		   systickSetTicktime(&Timer1, TaskTime);
 80025bc:	4b9f      	ldr	r3, [pc, #636]	; (800283c <main+0x330>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4619      	mov	r1, r3
 80025c2:	489a      	ldr	r0, [pc, #616]	; (800282c <main+0x320>)
 80025c4:	f001 fd38 	bl	8004038 <systickSetTicktime>
		   switch (testmode)
 80025c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d004      	beq.n	80025da <main+0xce>
 80025d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d00d      	beq.n	80025f4 <main+0xe8>
 80025d8:	e35b      	b.n	8002c92 <main+0x786>
		   {
		   	   case 1:
				{
					if (test_graphics() <= 0)
 80025da:	f000 fb69 	bl	8002cb0 <test_graphics>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	f300 835a 	bgt.w	8002c9a <main+0x78e>
					{
						testmode = 2;
 80025e6:	2302      	movs	r3, #2
 80025e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
						TaskTime = 70;
 80025ec:	4b93      	ldr	r3, [pc, #588]	; (800283c <main+0x330>)
 80025ee:	2246      	movs	r2, #70	; 0x46
 80025f0:	601a      	str	r2, [r3, #0]
					}
				break;
 80025f2:	e352      	b.n	8002c9a <main+0x78e>
 80025f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d004      	beq.n	8002606 <main+0xfa>
 80025fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002600:	2b02      	cmp	r3, #2
 8002602:	d02c      	beq.n	800265e <main+0x152>
 8002604:	e33f      	b.n	8002c86 <main+0x77a>
				{
					switch (stepSPI)
					{
						case 1:
						{
							ret = spiLIS3DH_init(0);
 8002606:	2000      	movs	r0, #0
 8002608:	f7ff fedc 	bl	80023c4 <spiLIS3DH_init>
 800260c:	4603      	mov	r3, r0
 800260e:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
							if (ret > 0)										// no LIS3DH Sensor present
 8002612:	f997 3059 	ldrsb.w	r3, [r7, #89]	; 0x59
 8002616:	2b00      	cmp	r3, #0
 8002618:	dd0f      	ble.n	800263a <main+0x12e>
							{
								lcd7735_print("LIS3DH not Present ",0,0,0);
 800261a:	2300      	movs	r3, #0
 800261c:	2200      	movs	r2, #0
 800261e:	2100      	movs	r1, #0
 8002620:	4887      	ldr	r0, [pc, #540]	; (8002840 <main+0x334>)
 8002622:	f7ff fc81 	bl	8001f28 <lcd7735_print>
								TaskTime = 500;
 8002626:	4b85      	ldr	r3, [pc, #532]	; (800283c <main+0x330>)
 8002628:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800262c:	601a      	str	r2, [r3, #0]
								testmode = 1;
 800262e:	2301      	movs	r3, #1
 8002630:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
								stepSPI = 1;
 8002634:	2301      	movs	r3, #1
 8002636:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
							}
							if (ret == 0)										// LIS3DH init-procedure finished
 800263a:	f997 3059 	ldrsb.w	r3, [r7, #89]	; 0x59
 800263e:	2b00      	cmp	r3, #0
 8002640:	f040 8325 	bne.w	8002c8e <main+0x782>
							{
								lcd7735_print("(C)23Fl SPI LIS3DH ",0,0,0);
 8002644:	2300      	movs	r3, #0
 8002646:	2200      	movs	r2, #0
 8002648:	2100      	movs	r1, #0
 800264a:	487e      	ldr	r0, [pc, #504]	; (8002844 <main+0x338>)
 800264c:	f7ff fc6c 	bl	8001f28 <lcd7735_print>
								TaskTime = 70;									// Tasktime for display 70ms
 8002650:	4b7a      	ldr	r3, [pc, #488]	; (800283c <main+0x330>)
 8002652:	2246      	movs	r2, #70	; 0x46
 8002654:	601a      	str	r2, [r3, #0]
								stepSPI = 2;
 8002656:	2302      	movs	r3, #2
 8002658:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
							}
							break;
 800265c:	e317      	b.n	8002c8e <main+0x782>

						}
						case 2:
						{
							LED_blue_on;
 800265e:	210a      	movs	r1, #10
 8002660:	4873      	ldr	r0, [pc, #460]	; (8002830 <main+0x324>)
 8002662:	f000 ffef 	bl	8003644 <gpioResetPin>
#ifdef NumOut
							int8_t Temp = spiLIS3DH_XYZ(XYZ_raw,1);
							//Temp = spiLIS3DH_Temp();
#else
							spiLIS3DH_XYZ(XYZ_raw,0);
 8002666:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800266a:	2100      	movs	r1, #0
 800266c:	4618      	mov	r0, r3
 800266e:	f7ff ff1f 	bl	80024b0 <spiLIS3DH_XYZ>
#endif

							X = (float) XYZ_raw[0]/160;  //Skalierung 10mg/digit at +-2g
 8002672:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8002676:	ee07 3a90 	vmov	s15, r3
 800267a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800267e:	eddf 6a72 	vldr	s13, [pc, #456]	; 8002848 <main+0x33c>
 8002682:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002686:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
							Y = (float) XYZ_raw[1]/160;
 800268a:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800268e:	ee07 3a90 	vmov	s15, r3
 8002692:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002696:	eddf 6a6c 	vldr	s13, [pc, #432]	; 8002848 <main+0x33c>
 800269a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800269e:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
							Z = (float) XYZ_raw[2]/160;
 80026a2:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 80026a6:	ee07 3a90 	vmov	s15, r3
 80026aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026ae:	eddf 6a66 	vldr	s13, [pc, #408]	; 8002848 <main+0x33c>
 80026b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026b6:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
#ifdef NumOut
							sprintf(strOut, "%+2i X%+4i Y%+4i Z%+4i",Temp,(int)X,(int)Y,(int)Z);
							lcd7735_print((char *)strOut,0,110,0);
#endif
							alpha = atan(X/Z);
 80026ba:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 80026be:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80026c2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80026c6:	ee16 0a90 	vmov	r0, s13
 80026ca:	f7fd ff45 	bl	8000558 <__aeabi_f2d>
 80026ce:	4602      	mov	r2, r0
 80026d0:	460b      	mov	r3, r1
 80026d2:	ec43 2b10 	vmov	d0, r2, r3
 80026d6:	f004 fa8b 	bl	8006bf0 <atan>
 80026da:	ec53 2b10 	vmov	r2, r3, d0
 80026de:	4610      	mov	r0, r2
 80026e0:	4619      	mov	r1, r3
 80026e2:	f7fe fa69 	bl	8000bb8 <__aeabi_d2f>
 80026e6:	4603      	mov	r3, r0
 80026e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
							if (Z<0)
 80026ec:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80026f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026f8:	d517      	bpl.n	800272a <main+0x21e>
							{
								if (X<0)  {alpha -=_pi;}
 80026fa:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80026fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002706:	d508      	bpl.n	800271a <main+0x20e>
 8002708:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 800270c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002710:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002714:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
 8002718:	e007      	b.n	800272a <main+0x21e>
								else {alpha +=_pi;}
 800271a:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 800271e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002722:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002726:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
							}

							beta = atan(Y/Z);
 800272a:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 800272e:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8002732:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002736:	ee16 0a90 	vmov	r0, s13
 800273a:	f7fd ff0d 	bl	8000558 <__aeabi_f2d>
 800273e:	4602      	mov	r2, r0
 8002740:	460b      	mov	r3, r1
 8002742:	ec43 2b10 	vmov	d0, r2, r3
 8002746:	f004 fa53 	bl	8006bf0 <atan>
 800274a:	ec53 2b10 	vmov	r2, r3, d0
 800274e:	4610      	mov	r0, r2
 8002750:	4619      	mov	r1, r3
 8002752:	f7fe fa31 	bl	8000bb8 <__aeabi_d2f>
 8002756:	4603      	mov	r3, r0
 8002758:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
							if (Z<0)
 800275c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8002760:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002768:	d517      	bpl.n	800279a <main+0x28e>
							{
								if (Y<0)  {beta -=_pi;}
 800276a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800276e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002776:	d508      	bpl.n	800278a <main+0x27e>
 8002778:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800277c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002780:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002784:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
 8002788:	e007      	b.n	800279a <main+0x28e>
								else {beta +=_pi;}
 800278a:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800278e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002792:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002796:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
#ifdef NumOut
							sprintf(strOut, "al:%+4i be:%+4i", (int)(alpha*rad2deg), (int)(beta*rad2deg));
							lcd7735_print((char *)strOut,0,80,0);
#else

							xgrad = cos(alpha)*a_midxyl[2];
 800279a:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800279e:	f7fd fedb 	bl	8000558 <__aeabi_f2d>
 80027a2:	4602      	mov	r2, r0
 80027a4:	460b      	mov	r3, r1
 80027a6:	ec43 2b10 	vmov	d0, r2, r3
 80027aa:	f004 fbc1 	bl	8006f30 <cos>
 80027ae:	ec55 4b10 	vmov	r4, r5, d0
 80027b2:	4b26      	ldr	r3, [pc, #152]	; (800284c <main+0x340>)
 80027b4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7fd febb 	bl	8000534 <__aeabi_i2d>
 80027be:	4602      	mov	r2, r0
 80027c0:	460b      	mov	r3, r1
 80027c2:	4620      	mov	r0, r4
 80027c4:	4629      	mov	r1, r5
 80027c6:	f7fd ff1f 	bl	8000608 <__aeabi_dmul>
 80027ca:	4602      	mov	r2, r0
 80027cc:	460b      	mov	r3, r1
 80027ce:	4610      	mov	r0, r2
 80027d0:	4619      	mov	r1, r3
 80027d2:	f7fe f9f1 	bl	8000bb8 <__aeabi_d2f>
 80027d6:	4603      	mov	r3, r0
 80027d8:	667b      	str	r3, [r7, #100]	; 0x64
							ygrad = sin(alpha)*a_midxyl[2];
 80027da:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80027de:	f7fd febb 	bl	8000558 <__aeabi_f2d>
 80027e2:	4602      	mov	r2, r0
 80027e4:	460b      	mov	r3, r1
 80027e6:	ec43 2b10 	vmov	d0, r2, r3
 80027ea:	f004 fc45 	bl	8007078 <sin>
 80027ee:	ec55 4b10 	vmov	r4, r5, d0
 80027f2:	4b16      	ldr	r3, [pc, #88]	; (800284c <main+0x340>)
 80027f4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7fd fe9b 	bl	8000534 <__aeabi_i2d>
 80027fe:	4602      	mov	r2, r0
 8002800:	460b      	mov	r3, r1
 8002802:	4620      	mov	r0, r4
 8002804:	4629      	mov	r1, r5
 8002806:	f7fd feff 	bl	8000608 <__aeabi_dmul>
 800280a:	4602      	mov	r2, r0
 800280c:	460b      	mov	r3, r1
 800280e:	4610      	mov	r0, r2
 8002810:	4619      	mov	r1, r3
 8002812:	f7fe f9d1 	bl	8000bb8 <__aeabi_d2f>
 8002816:	4603      	mov	r3, r0
 8002818:	663b      	str	r3, [r7, #96]	; 0x60
							for (j = 0; j<aDots; j++ )
 800281a:	2300      	movs	r3, #0
 800281c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 8002820:	e0ab      	b.n	800297a <main+0x46e>
 8002822:	bf00      	nop
 8002824:	40490625 	.word	0x40490625
 8002828:	08008140 	.word	0x08008140
 800282c:	2000022c 	.word	0x2000022c
 8002830:	40020400 	.word	0x40020400
 8002834:	08008178 	.word	0x08008178
 8002838:	20000228 	.word	0x20000228
 800283c:	20000014 	.word	0x20000014
 8002840:	08008118 	.word	0x08008118
 8002844:	0800812c 	.word	0x0800812c
 8002848:	43200000 	.word	0x43200000
 800284c:	0800ae80 	.word	0x0800ae80
							{
								lcd7735_drawPixel(XYa[0][j],XYa[1][j],ST7735_BLACK);
 8002850:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	3398      	adds	r3, #152	; 0x98
 8002858:	443b      	add	r3, r7
 800285a:	f933 0c60 	ldrsh.w	r0, [r3, #-96]
 800285e:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8002862:	3306      	adds	r3, #6
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	3398      	adds	r3, #152	; 0x98
 8002868:	443b      	add	r3, r7
 800286a:	f933 3c60 	ldrsh.w	r3, [r3, #-96]
 800286e:	2200      	movs	r2, #0
 8002870:	4619      	mov	r1, r3
 8002872:	f7fe faff 	bl	8000e74 <lcd7735_drawPixel>
								XYa[0][j] = lround(a_midxyl[0] + xgrad*(2*j - (float)aDots+1)/(aDots-1));			//(aDots-1) da j nur bis aDost -1 läuft
 8002876:	4be5      	ldr	r3, [pc, #916]	; (8002c0c <main+0x700>)
 8002878:	f9b3 3000 	ldrsh.w	r3, [r3]
 800287c:	ee07 3a90 	vmov	s15, r3
 8002880:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002884:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	ee07 3a90 	vmov	s15, r3
 800288e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002892:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8002896:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800289a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800289e:	ee77 6aa6 	vadd.f32	s13, s15, s13
 80028a2:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80028a6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80028aa:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 80028ae:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80028b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028b6:	ee17 0a90 	vmov	r0, s15
 80028ba:	f7fd fe4d 	bl	8000558 <__aeabi_f2d>
 80028be:	4602      	mov	r2, r0
 80028c0:	460b      	mov	r3, r1
 80028c2:	ec43 2b10 	vmov	d0, r2, r3
 80028c6:	f004 fb90 	bl	8006fea <lround>
 80028ca:	4602      	mov	r2, r0
 80028cc:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 80028d0:	b212      	sxth	r2, r2
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	3398      	adds	r3, #152	; 0x98
 80028d6:	443b      	add	r3, r7
 80028d8:	f823 2c60 	strh.w	r2, [r3, #-96]
								XYa[1][j] = lround(a_midxyl[1] + ygrad*(2*j - (float)aDots+1)/(aDots-1));
 80028dc:	4bcb      	ldr	r3, [pc, #812]	; (8002c0c <main+0x700>)
 80028de:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80028e2:	ee07 3a90 	vmov	s15, r3
 80028e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028ea:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	ee07 3a90 	vmov	s15, r3
 80028f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028f8:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 80028fc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002900:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002904:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8002908:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800290c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002910:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 8002914:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002918:	ee77 7a27 	vadd.f32	s15, s14, s15
 800291c:	ee17 0a90 	vmov	r0, s15
 8002920:	f7fd fe1a 	bl	8000558 <__aeabi_f2d>
 8002924:	4602      	mov	r2, r0
 8002926:	460b      	mov	r3, r1
 8002928:	ec43 2b10 	vmov	d0, r2, r3
 800292c:	f004 fb5d 	bl	8006fea <lround>
 8002930:	4602      	mov	r2, r0
 8002932:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8002936:	b212      	sxth	r2, r2
 8002938:	3306      	adds	r3, #6
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	3398      	adds	r3, #152	; 0x98
 800293e:	443b      	add	r3, r7
 8002940:	f823 2c60 	strh.w	r2, [r3, #-96]
								lcd7735_drawPixel(XYa[0][j],XYa[1][j],aColor);
 8002944:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	3398      	adds	r3, #152	; 0x98
 800294c:	443b      	add	r3, r7
 800294e:	f933 0c60 	ldrsh.w	r0, [r3, #-96]
 8002952:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8002956:	3306      	adds	r3, #6
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	3398      	adds	r3, #152	; 0x98
 800295c:	443b      	add	r3, r7
 800295e:	f933 3c60 	ldrsh.w	r3, [r3, #-96]
 8002962:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8002966:	4619      	mov	r1, r3
 8002968:	f7fe fa84 	bl	8000e74 <lcd7735_drawPixel>
							for (j = 0; j<aDots; j++ )
 800296c:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8002970:	b29b      	uxth	r3, r3
 8002972:	3301      	adds	r3, #1
 8002974:	b29b      	uxth	r3, r3
 8002976:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 800297a:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 800297e:	2b05      	cmp	r3, #5
 8002980:	f77f af66 	ble.w	8002850 <main+0x344>
							}
							//lcd7735_drawPixel(a_midxyl[0],a_midxyl[1],ST7735_RED);

							xgrad = cos(beta)*b_midxyl[2];
 8002984:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002988:	f7fd fde6 	bl	8000558 <__aeabi_f2d>
 800298c:	4602      	mov	r2, r0
 800298e:	460b      	mov	r3, r1
 8002990:	ec43 2b10 	vmov	d0, r2, r3
 8002994:	f004 facc 	bl	8006f30 <cos>
 8002998:	ec55 4b10 	vmov	r4, r5, d0
 800299c:	4b9c      	ldr	r3, [pc, #624]	; (8002c10 <main+0x704>)
 800299e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7fd fdc6 	bl	8000534 <__aeabi_i2d>
 80029a8:	4602      	mov	r2, r0
 80029aa:	460b      	mov	r3, r1
 80029ac:	4620      	mov	r0, r4
 80029ae:	4629      	mov	r1, r5
 80029b0:	f7fd fe2a 	bl	8000608 <__aeabi_dmul>
 80029b4:	4602      	mov	r2, r0
 80029b6:	460b      	mov	r3, r1
 80029b8:	4610      	mov	r0, r2
 80029ba:	4619      	mov	r1, r3
 80029bc:	f7fe f8fc 	bl	8000bb8 <__aeabi_d2f>
 80029c0:	4603      	mov	r3, r0
 80029c2:	667b      	str	r3, [r7, #100]	; 0x64
							ygrad = sin(beta)*b_midxyl[2];
 80029c4:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80029c8:	f7fd fdc6 	bl	8000558 <__aeabi_f2d>
 80029cc:	4602      	mov	r2, r0
 80029ce:	460b      	mov	r3, r1
 80029d0:	ec43 2b10 	vmov	d0, r2, r3
 80029d4:	f004 fb50 	bl	8007078 <sin>
 80029d8:	ec55 4b10 	vmov	r4, r5, d0
 80029dc:	4b8c      	ldr	r3, [pc, #560]	; (8002c10 <main+0x704>)
 80029de:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7fd fda6 	bl	8000534 <__aeabi_i2d>
 80029e8:	4602      	mov	r2, r0
 80029ea:	460b      	mov	r3, r1
 80029ec:	4620      	mov	r0, r4
 80029ee:	4629      	mov	r1, r5
 80029f0:	f7fd fe0a 	bl	8000608 <__aeabi_dmul>
 80029f4:	4602      	mov	r2, r0
 80029f6:	460b      	mov	r3, r1
 80029f8:	4610      	mov	r0, r2
 80029fa:	4619      	mov	r1, r3
 80029fc:	f7fe f8dc 	bl	8000bb8 <__aeabi_d2f>
 8002a00:	4603      	mov	r3, r0
 8002a02:	663b      	str	r3, [r7, #96]	; 0x60
							for (j = 0; j<bDots; j++ )
 8002a04:	2300      	movs	r3, #0
 8002a06:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 8002a0a:	e094      	b.n	8002b36 <main+0x62a>
							{
								lcd7735_drawPixel(XYb[0][j],XYb[1][j],ST7735_BLACK);
 8002a0c:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	3398      	adds	r3, #152	; 0x98
 8002a14:	443b      	add	r3, r7
 8002a16:	f933 0c90 	ldrsh.w	r0, [r3, #-144]
 8002a1a:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8002a1e:	330c      	adds	r3, #12
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	3398      	adds	r3, #152	; 0x98
 8002a24:	443b      	add	r3, r7
 8002a26:	f933 3c90 	ldrsh.w	r3, [r3, #-144]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	f7fe fa21 	bl	8000e74 <lcd7735_drawPixel>
								XYb[0][j] = lround(b_midxyl[0] + xgrad*(2*j - (float)bDots+1)/(bDots-1));			//(aDots-1) da j nur bis aDost -1 läuft
 8002a32:	4b77      	ldr	r3, [pc, #476]	; (8002c10 <main+0x704>)
 8002a34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a38:	ee07 3a90 	vmov	s15, r3
 8002a3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a40:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	ee07 3a90 	vmov	s15, r3
 8002a4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a4e:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 8002a52:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002a56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a5a:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8002a5e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002a62:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002a66:	eeb2 6a06 	vmov.f32	s12, #38	; 0x41300000  11.0
 8002a6a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002a6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a72:	ee17 0a90 	vmov	r0, s15
 8002a76:	f7fd fd6f 	bl	8000558 <__aeabi_f2d>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	ec43 2b10 	vmov	d0, r2, r3
 8002a82:	f004 fab2 	bl	8006fea <lround>
 8002a86:	4602      	mov	r2, r0
 8002a88:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8002a8c:	b212      	sxth	r2, r2
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	3398      	adds	r3, #152	; 0x98
 8002a92:	443b      	add	r3, r7
 8002a94:	f823 2c90 	strh.w	r2, [r3, #-144]
								XYb[1][j] = lround(b_midxyl[1] + ygrad*(2*j - (float)bDots+1)/(bDots-1));
 8002a98:	4b5d      	ldr	r3, [pc, #372]	; (8002c10 <main+0x704>)
 8002a9a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002a9e:	ee07 3a90 	vmov	s15, r3
 8002aa2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002aa6:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	ee07 3a90 	vmov	s15, r3
 8002ab0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ab4:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 8002ab8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002abc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ac0:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8002ac4:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002ac8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002acc:	eeb2 6a06 	vmov.f32	s12, #38	; 0x41300000  11.0
 8002ad0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002ad4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ad8:	ee17 0a90 	vmov	r0, s15
 8002adc:	f7fd fd3c 	bl	8000558 <__aeabi_f2d>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	ec43 2b10 	vmov	d0, r2, r3
 8002ae8:	f004 fa7f 	bl	8006fea <lround>
 8002aec:	4602      	mov	r2, r0
 8002aee:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8002af2:	b212      	sxth	r2, r2
 8002af4:	330c      	adds	r3, #12
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	3398      	adds	r3, #152	; 0x98
 8002afa:	443b      	add	r3, r7
 8002afc:	f823 2c90 	strh.w	r2, [r3, #-144]
								lcd7735_drawPixel(XYb[0][j],XYb[1][j],bColor);
 8002b00:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	3398      	adds	r3, #152	; 0x98
 8002b08:	443b      	add	r3, r7
 8002b0a:	f933 0c90 	ldrsh.w	r0, [r3, #-144]
 8002b0e:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8002b12:	330c      	adds	r3, #12
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	3398      	adds	r3, #152	; 0x98
 8002b18:	443b      	add	r3, r7
 8002b1a:	f933 3c90 	ldrsh.w	r3, [r3, #-144]
 8002b1e:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8002b22:	4619      	mov	r1, r3
 8002b24:	f7fe f9a6 	bl	8000e74 <lcd7735_drawPixel>
							for (j = 0; j<bDots; j++ )
 8002b28:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	3301      	adds	r3, #1
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 8002b36:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8002b3a:	2b0b      	cmp	r3, #11
 8002b3c:	f77f af66 	ble.w	8002a0c <main+0x500>
							}



						// kleines Oszi als Zeitmitschrieb
							int16_t Ya = oszi[0] - (int16_t)(oszi[1] * alpha/_pi);			// - ST7735 y = 0 upper line inverter direct to y Scale
 8002b40:	4b34      	ldr	r3, [pc, #208]	; (8002c14 <main+0x708>)
 8002b42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	4b32      	ldr	r3, [pc, #200]	; (8002c14 <main+0x708>)
 8002b4a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002b4e:	ee07 3a90 	vmov	s15, r3
 8002b52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b56:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002b5a:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002b5e:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002b62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b6a:	ee17 3a90 	vmov	r3, s15
 8002b6e:	b21b      	sxth	r3, r3
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
							int16_t Yb = oszi[0] - (int16_t)(oszi[1] * beta/_pi);
 8002b7a:	4b26      	ldr	r3, [pc, #152]	; (8002c14 <main+0x708>)
 8002b7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b80:	b29a      	uxth	r2, r3
 8002b82:	4b24      	ldr	r3, [pc, #144]	; (8002c14 <main+0x708>)
 8002b84:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002b88:	ee07 3a90 	vmov	s15, r3
 8002b8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b90:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8002b94:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002b98:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002b9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ba0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ba4:	ee17 3a90 	vmov	r3, s15
 8002ba8:	b21b      	sxth	r3, r3
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
							int16_t osziHight = oszi[1]*2;
 8002bb4:	4b17      	ldr	r3, [pc, #92]	; (8002c14 <main+0x708>)
 8002bb6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
							lcd7735_drawFastVLine(timepos, (oszi[0]-oszi[1]), osziHight, osziColor);
 8002bc4:	4b13      	ldr	r3, [pc, #76]	; (8002c14 <main+0x708>)
 8002bc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bca:	b29a      	uxth	r2, r3
 8002bcc:	4b11      	ldr	r3, [pc, #68]	; (8002c14 <main+0x708>)
 8002bce:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	b219      	sxth	r1, r3
 8002bda:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002bde:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8002be2:	f9b7 0084 	ldrsh.w	r0, [r7, #132]	; 0x84
 8002be6:	f7fe fa03 	bl	8000ff0 <lcd7735_drawFastVLine>
							if (Ya == Yb)
 8002bea:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	; 0x5e
 8002bee:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d110      	bne.n	8002c18 <main+0x70c>
							{
								lcd7735_drawPixel(timepos,Ya,ST7735_WHITE);
 8002bf6:	f9b7 105e 	ldrsh.w	r1, [r7, #94]	; 0x5e
 8002bfa:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 8002bfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7fe f936 	bl	8000e74 <lcd7735_drawPixel>
 8002c08:	e018      	b.n	8002c3c <main+0x730>
 8002c0a:	bf00      	nop
 8002c0c:	0800ae80 	.word	0x0800ae80
 8002c10:	0800ae88 	.word	0x0800ae88
 8002c14:	0800ae90 	.word	0x0800ae90
							}
							else
							{
								lcd7735_drawPixel(timepos,Ya,aColor);
 8002c18:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8002c1c:	f9b7 105e 	ldrsh.w	r1, [r7, #94]	; 0x5e
 8002c20:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7fe f925 	bl	8000e74 <lcd7735_drawPixel>
								lcd7735_drawPixel(timepos,Yb,bColor);
 8002c2a:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8002c2e:	f9b7 105c 	ldrsh.w	r1, [r7, #92]	; 0x5c
 8002c32:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7fe f91c 	bl	8000e74 <lcd7735_drawPixel>
							}
							if (++timepos > oszi[2] )
 8002c3c:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8002c40:	3301      	adds	r3, #1
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 8002c48:	4b17      	ldr	r3, [pc, #92]	; (8002ca8 <main+0x79c>)
 8002c4a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002c4e:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	; 0x84
 8002c52:	429a      	cmp	r2, r3
 8002c54:	dd02      	ble.n	8002c5c <main+0x750>
							{
								timepos = 0;
 8002c56:	2300      	movs	r3, #0
 8002c58:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
								//lcd7735_fillRect(0, oszi[0]-oszi[1], oszi[2]+1, 2*oszi[1], ST7735_GREY);
							}
							lcd7735_drawFastVLine(timepos, oszi[0], oszi[1]/2, ST7735_RED);
 8002c5c:	4b12      	ldr	r3, [pc, #72]	; (8002ca8 <main+0x79c>)
 8002c5e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8002c62:	4b11      	ldr	r3, [pc, #68]	; (8002ca8 <main+0x79c>)
 8002c64:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002c68:	0fda      	lsrs	r2, r3, #31
 8002c6a:	4413      	add	r3, r2
 8002c6c:	105b      	asrs	r3, r3, #1
 8002c6e:	b21a      	sxth	r2, r3
 8002c70:	f9b7 0084 	ldrsh.w	r0, [r7, #132]	; 0x84
 8002c74:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002c78:	f7fe f9ba 	bl	8000ff0 <lcd7735_drawFastVLine>

#endif
							LED_blue_off;
 8002c7c:	210a      	movs	r1, #10
 8002c7e:	480b      	ldr	r0, [pc, #44]	; (8002cac <main+0x7a0>)
 8002c80:	f000 fcb5 	bl	80035ee <gpioSetPin>


							//step = 3;
							break;
 8002c84:	e004      	b.n	8002c90 <main+0x784>
						}
						default:
						{
							stepSPI = 1;
 8002c86:	2301      	movs	r3, #1
 8002c88:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
						}
					}
				break;
 8002c8c:	e006      	b.n	8002c9c <main+0x790>
							break;
 8002c8e:	bf00      	nop
				break;
 8002c90:	e004      	b.n	8002c9c <main+0x790>
				}
		   	    default:
				{
					testmode = 2;
 8002c92:	2302      	movs	r3, #2
 8002c94:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
				} break;
 8002c98:	e000      	b.n	8002c9c <main+0x790>
				break;
 8002c9a:	bf00      	nop
		   }
		   LED_green_on;
 8002c9c:	2104      	movs	r1, #4
 8002c9e:	4803      	ldr	r0, [pc, #12]	; (8002cac <main+0x7a0>)
 8002ca0:	f000 fcd0 	bl	8003644 <gpioResetPin>
	   if (true == timerTrigger)
 8002ca4:	e473      	b.n	800258e <main+0x82>
 8002ca6:	bf00      	nop
 8002ca8:	0800ae90 	.word	0x0800ae90
 8002cac:	40020400 	.word	0x40020400

08002cb0 <test_graphics>:
    return 0;
}


int8_t test_graphics(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af02      	add	r7, sp, #8

#define GrafikTests 21
static int8_t testcount = GrafikTests;
switch (testcount--)
 8002cb6:	4b7f      	ldr	r3, [pc, #508]	; (8002eb4 <test_graphics+0x204>)
 8002cb8:	f993 2000 	ldrsb.w	r2, [r3]
 8002cbc:	b2d3      	uxtb	r3, r2
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	b259      	sxtb	r1, r3
 8002cc4:	4b7b      	ldr	r3, [pc, #492]	; (8002eb4 <test_graphics+0x204>)
 8002cc6:	7019      	strb	r1, [r3, #0]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	2b15      	cmp	r3, #21
 8002ccc:	f200 80e4 	bhi.w	8002e98 <test_graphics+0x1e8>
 8002cd0:	a201      	add	r2, pc, #4	; (adr r2, 8002cd8 <test_graphics+0x28>)
 8002cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cd6:	bf00      	nop
 8002cd8:	08002e91 	.word	0x08002e91
 8002cdc:	08002e7d 	.word	0x08002e7d
 8002ce0:	08002e69 	.word	0x08002e69
 8002ce4:	08002e59 	.word	0x08002e59
 8002ce8:	08002e45 	.word	0x08002e45
 8002cec:	08002e35 	.word	0x08002e35
 8002cf0:	08002e23 	.word	0x08002e23
 8002cf4:	08002e1b 	.word	0x08002e1b
 8002cf8:	08002e11 	.word	0x08002e11
 8002cfc:	08002e09 	.word	0x08002e09
 8002d00:	08002dff 	.word	0x08002dff
 8002d04:	08002df5 	.word	0x08002df5
 8002d08:	08002ded 	.word	0x08002ded
 8002d0c:	08002de5 	.word	0x08002de5
 8002d10:	08002dc9 	.word	0x08002dc9
 8002d14:	08002db3 	.word	0x08002db3
 8002d18:	08002d9d 	.word	0x08002d9d
 8002d1c:	08002d8f 	.word	0x08002d8f
 8002d20:	08002d73 	.word	0x08002d73
 8002d24:	08002d5f 	.word	0x08002d5f
 8002d28:	08002d4b 	.word	0x08002d4b
 8002d2c:	08002d31 	.word	0x08002d31
	{
		case 21:
		{
			lcd7735_setRotation(LANDSCAPE);
 8002d30:	2001      	movs	r0, #1
 8002d32:	f7ff f975 	bl	8002020 <lcd7735_setRotation>
			lcd7735_setFont((uint8_t *)&SmallFont[0]);
 8002d36:	4860      	ldr	r0, [pc, #384]	; (8002eb8 <test_graphics+0x208>)
 8002d38:	f7fe fea0 	bl	8001a7c <lcd7735_setFont>
			lcd7735_print("Hi the 1st output",0,0,0);
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	2200      	movs	r2, #0
 8002d40:	2100      	movs	r1, #0
 8002d42:	485e      	ldr	r0, [pc, #376]	; (8002ebc <test_graphics+0x20c>)
 8002d44:	f7ff f8f0 	bl	8001f28 <lcd7735_print>
		break;
 8002d48:	e0ad      	b.n	8002ea6 <test_graphics+0x1f6>
		}
		case 20:
		{
			lcd7735_setFont((uint8_t *)&BigFont[0]);
 8002d4a:	485d      	ldr	r0, [pc, #372]	; (8002ec0 <test_graphics+0x210>)
 8002d4c:	f7fe fe96 	bl	8001a7c <lcd7735_setFont>
			lcd7735_print("no SPI",10,20,0);
 8002d50:	2300      	movs	r3, #0
 8002d52:	2214      	movs	r2, #20
 8002d54:	210a      	movs	r1, #10
 8002d56:	485b      	ldr	r0, [pc, #364]	; (8002ec4 <test_graphics+0x214>)
 8002d58:	f7ff f8e6 	bl	8001f28 <lcd7735_print>
		break;
 8002d5c:	e0a3      	b.n	8002ea6 <test_graphics+0x1f6>
		}
		case 19:
		{
			lcd7735_setFont((uint8_t *)&SevenSegNumFont[0]);
 8002d5e:	485a      	ldr	r0, [pc, #360]	; (8002ec8 <test_graphics+0x218>)
 8002d60:	f7fe fe8c 	bl	8001a7c <lcd7735_setFont>
			lcd7735_print("01234",0,60,0);
 8002d64:	2300      	movs	r3, #0
 8002d66:	223c      	movs	r2, #60	; 0x3c
 8002d68:	2100      	movs	r1, #0
 8002d6a:	4858      	ldr	r0, [pc, #352]	; (8002ecc <test_graphics+0x21c>)
 8002d6c:	f7ff f8dc 	bl	8001f28 <lcd7735_print>
		break;
 8002d70:	e099      	b.n	8002ea6 <test_graphics+0x1f6>
		}
		case 18:
		{
			lcd7735_setFont((uint8_t *)&BigFont[0]);
 8002d72:	4853      	ldr	r0, [pc, #332]	; (8002ec0 <test_graphics+0x210>)
 8002d74:	f7fe fe82 	bl	8001a7c <lcd7735_setFont>
			lcd7735_fillScreen(ST7735_MAGENTA);
 8002d78:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8002d7c:	f7ff f936 	bl	8001fec <lcd7735_fillScreen>
			lcd7735_print("no SPI",30,10,0);
 8002d80:	2300      	movs	r3, #0
 8002d82:	220a      	movs	r2, #10
 8002d84:	211e      	movs	r1, #30
 8002d86:	484f      	ldr	r0, [pc, #316]	; (8002ec4 <test_graphics+0x214>)
 8002d88:	f7ff f8ce 	bl	8001f28 <lcd7735_print>
		break;
 8002d8c:	e08b      	b.n	8002ea6 <test_graphics+0x1f6>
		}
		case 17:	lcd7735_print("37deg noSPI",10,5,37);break;
 8002d8e:	2325      	movs	r3, #37	; 0x25
 8002d90:	2205      	movs	r2, #5
 8002d92:	210a      	movs	r1, #10
 8002d94:	484e      	ldr	r0, [pc, #312]	; (8002ed0 <test_graphics+0x220>)
 8002d96:	f7ff f8c7 	bl	8001f28 <lcd7735_print>
 8002d9a:	e084      	b.n	8002ea6 <test_graphics+0x1f6>
		case 16:	lcd7735_drawBitmap(0,0,50,52,(bitmapdatatype)tux_50_ad,1);break;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	9301      	str	r3, [sp, #4]
 8002da0:	4b4c      	ldr	r3, [pc, #304]	; (8002ed4 <test_graphics+0x224>)
 8002da2:	9300      	str	r3, [sp, #0]
 8002da4:	2334      	movs	r3, #52	; 0x34
 8002da6:	2232      	movs	r2, #50	; 0x32
 8002da8:	2100      	movs	r1, #0
 8002daa:	2000      	movs	r0, #0
 8002dac:	f7fe fcee 	bl	800178c <lcd7735_drawBitmap>
 8002db0:	e079      	b.n	8002ea6 <test_graphics+0x1f6>
		case 15:	lcd7735_drawBitmap(55,0,50,52,(bitmapdatatype)tux_50_ad,2);break;
 8002db2:	2302      	movs	r3, #2
 8002db4:	9301      	str	r3, [sp, #4]
 8002db6:	4b47      	ldr	r3, [pc, #284]	; (8002ed4 <test_graphics+0x224>)
 8002db8:	9300      	str	r3, [sp, #0]
 8002dba:	2334      	movs	r3, #52	; 0x34
 8002dbc:	2232      	movs	r2, #50	; 0x32
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	2037      	movs	r0, #55	; 0x37
 8002dc2:	f7fe fce3 	bl	800178c <lcd7735_drawBitmap>
 8002dc6:	e06e      	b.n	8002ea6 <test_graphics+0x1f6>
		case 14:
		{
			lcd7735_setRotation(PORTRAIT);
 8002dc8:	2000      	movs	r0, #0
 8002dca:	f7ff f929 	bl	8002020 <lcd7735_setRotation>
			lcd7735_drawBitmap(0,0,50,52,(bitmapdatatype)tux_50_ad,1);
 8002dce:	2301      	movs	r3, #1
 8002dd0:	9301      	str	r3, [sp, #4]
 8002dd2:	4b40      	ldr	r3, [pc, #256]	; (8002ed4 <test_graphics+0x224>)
 8002dd4:	9300      	str	r3, [sp, #0]
 8002dd6:	2334      	movs	r3, #52	; 0x34
 8002dd8:	2232      	movs	r2, #50	; 0x32
 8002dda:	2100      	movs	r1, #0
 8002ddc:	2000      	movs	r0, #0
 8002dde:	f7fe fcd5 	bl	800178c <lcd7735_drawBitmap>
		break;
 8002de2:	e060      	b.n	8002ea6 <test_graphics+0x1f6>
		}
		case 13:	lcd7735_invertDisplay(INVERT_ON);break;
 8002de4:	2001      	movs	r0, #1
 8002de6:	f7ff f96b 	bl	80020c0 <lcd7735_invertDisplay>
 8002dea:	e05c      	b.n	8002ea6 <test_graphics+0x1f6>
		case 12:	lcd7735_invertDisplay(INVERT_OFF);break;
 8002dec:	2000      	movs	r0, #0
 8002dee:	f7ff f967 	bl	80020c0 <lcd7735_invertDisplay>
 8002df2:	e058      	b.n	8002ea6 <test_graphics+0x1f6>
		case 11:	lcd7735_fillScreen(ST7735_RED);break;
 8002df4:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8002df8:	f7ff f8f8 	bl	8001fec <lcd7735_fillScreen>
 8002dfc:	e053      	b.n	8002ea6 <test_graphics+0x1f6>
		case 10:	lcd7735_fillScreen(ST7735_GREEN);break;
 8002dfe:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8002e02:	f7ff f8f3 	bl	8001fec <lcd7735_fillScreen>
 8002e06:	e04e      	b.n	8002ea6 <test_graphics+0x1f6>
		case  9:	lcd7735_fillScreen(ST7735_BLUE);break;
 8002e08:	201f      	movs	r0, #31
 8002e0a:	f7ff f8ef 	bl	8001fec <lcd7735_fillScreen>
 8002e0e:	e04a      	b.n	8002ea6 <test_graphics+0x1f6>
		case  8:	lcd7735_fillScreen(ST7735_MAGENTA);break;
 8002e10:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8002e14:	f7ff f8ea 	bl	8001fec <lcd7735_fillScreen>
 8002e18:	e045      	b.n	8002ea6 <test_graphics+0x1f6>
		case  7:	lcd7735_fillScreen(ST7735_BLACK); break;
 8002e1a:	2000      	movs	r0, #0
 8002e1c:	f7ff f8e6 	bl	8001fec <lcd7735_fillScreen>
 8002e20:	e041      	b.n	8002ea6 <test_graphics+0x1f6>
		case  6:	lcd7735_drawRect(20,15,40,35,ST7735_BLUE);break;
 8002e22:	231f      	movs	r3, #31
 8002e24:	9300      	str	r3, [sp, #0]
 8002e26:	2323      	movs	r3, #35	; 0x23
 8002e28:	2228      	movs	r2, #40	; 0x28
 8002e2a:	210f      	movs	r1, #15
 8002e2c:	2014      	movs	r0, #20
 8002e2e:	f7fe fa74 	bl	800131a <lcd7735_drawRect>
 8002e32:	e038      	b.n	8002ea6 <test_graphics+0x1f6>
		case  5:	lcd7735_fillCircle(70,70,30,ST7735_YELLOW);break;
 8002e34:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002e38:	221e      	movs	r2, #30
 8002e3a:	2146      	movs	r1, #70	; 0x46
 8002e3c:	2046      	movs	r0, #70	; 0x46
 8002e3e:	f7fe fc46 	bl	80016ce <lcd7735_fillCircle>
 8002e42:	e030      	b.n	8002ea6 <test_graphics+0x1f6>
		case  4:	lcd7735_drawRect(10,20,90,100,ST7735_MAGENTA);break;
 8002e44:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8002e48:	9300      	str	r3, [sp, #0]
 8002e4a:	2364      	movs	r3, #100	; 0x64
 8002e4c:	225a      	movs	r2, #90	; 0x5a
 8002e4e:	2114      	movs	r1, #20
 8002e50:	200a      	movs	r0, #10
 8002e52:	f7fe fa62 	bl	800131a <lcd7735_drawRect>
 8002e56:	e026      	b.n	8002ea6 <test_graphics+0x1f6>
		case  3:	lcd7735_drawCircle(60,120,35,ST7735_CYAN);break;
 8002e58:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002e5c:	2223      	movs	r2, #35	; 0x23
 8002e5e:	2178      	movs	r1, #120	; 0x78
 8002e60:	203c      	movs	r0, #60	; 0x3c
 8002e62:	f7fe faa5 	bl	80013b0 <lcd7735_drawCircle>
 8002e66:	e01e      	b.n	8002ea6 <test_graphics+0x1f6>
		case  2:	lcd7735_drawFastLine(10,5,110,100,ST7735_WHITE);break;
 8002e68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e6c:	9300      	str	r3, [sp, #0]
 8002e6e:	2364      	movs	r3, #100	; 0x64
 8002e70:	226e      	movs	r2, #110	; 0x6e
 8002e72:	2105      	movs	r1, #5
 8002e74:	200a      	movs	r0, #10
 8002e76:	f7fe f979 	bl	800116c <lcd7735_drawFastLine>
 8002e7a:	e014      	b.n	8002ea6 <test_graphics+0x1f6>
		case  1:	{ lcd7735_setRotation(LANDSCAPE);
 8002e7c:	2001      	movs	r0, #1
 8002e7e:	f7ff f8cf 	bl	8002020 <lcd7735_setRotation>
					lcd7735_invertDisplay(INVERT_OFF);
 8002e82:	2000      	movs	r0, #0
 8002e84:	f7ff f91c 	bl	80020c0 <lcd7735_invertDisplay>
					lcd7735_setFont((uint8_t *)&SmallFont[0]);}
 8002e88:	480b      	ldr	r0, [pc, #44]	; (8002eb8 <test_graphics+0x208>)
 8002e8a:	f7fe fdf7 	bl	8001a7c <lcd7735_setFont>
					break;
 8002e8e:	e00a      	b.n	8002ea6 <test_graphics+0x1f6>
		case  0:	lcd7735_invertDisplay(INVERT_OFF);break;
 8002e90:	2000      	movs	r0, #0
 8002e92:	f7ff f915 	bl	80020c0 <lcd7735_invertDisplay>
 8002e96:	e006      	b.n	8002ea6 <test_graphics+0x1f6>
		default:
		{
			testcount = GrafikTests;
 8002e98:	4b06      	ldr	r3, [pc, #24]	; (8002eb4 <test_graphics+0x204>)
 8002e9a:	2215      	movs	r2, #21
 8002e9c:	701a      	strb	r2, [r3, #0]
			lcd7735_fillScreen(ST7735_BLACK);
 8002e9e:	2000      	movs	r0, #0
 8002ea0:	f7ff f8a4 	bl	8001fec <lcd7735_fillScreen>
			break;
 8002ea4:	bf00      	nop
		}

	}
return  testcount;
 8002ea6:	4b03      	ldr	r3, [pc, #12]	; (8002eb4 <test_graphics+0x204>)
 8002ea8:	f993 3000 	ldrsb.w	r3, [r3]
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	20000018 	.word	0x20000018
 8002eb8:	08008178 	.word	0x08008178
 8002ebc:	08008148 	.word	0x08008148
 8002ec0:	080085f0 	.word	0x080085f0
 8002ec4:	0800815c 	.word	0x0800815c
 8002ec8:	080091d4 	.word	0x080091d4
 8002ecc:	08008164 	.word	0x08008164
 8002ed0:	0800816c 	.word	0x0800816c
 8002ed4:	08009a30 	.word	0x08009a30

08002ed8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	af00      	add	r7, sp, #0
	return 1;
 8002edc:	2301      	movs	r3, #1
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <_kill>:

int _kill(int pid, int sig)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002ef2:	f001 f933 	bl	800415c <__errno>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2216      	movs	r2, #22
 8002efa:	601a      	str	r2, [r3, #0]
	return -1;
 8002efc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3708      	adds	r7, #8
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <_exit>:

void _exit (int status)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002f10:	f04f 31ff 	mov.w	r1, #4294967295
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f7ff ffe7 	bl	8002ee8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002f1a:	e7fe      	b.n	8002f1a <_exit+0x12>

08002f1c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f28:	2300      	movs	r3, #0
 8002f2a:	617b      	str	r3, [r7, #20]
 8002f2c:	e00a      	b.n	8002f44 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002f2e:	f3af 8000 	nop.w
 8002f32:	4601      	mov	r1, r0
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	1c5a      	adds	r2, r3, #1
 8002f38:	60ba      	str	r2, [r7, #8]
 8002f3a:	b2ca      	uxtb	r2, r1
 8002f3c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	3301      	adds	r3, #1
 8002f42:	617b      	str	r3, [r7, #20]
 8002f44:	697a      	ldr	r2, [r7, #20]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	dbf0      	blt.n	8002f2e <_read+0x12>
	}

return len;
 8002f4c:	687b      	ldr	r3, [r7, #4]
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3718      	adds	r7, #24
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b086      	sub	sp, #24
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	60f8      	str	r0, [r7, #12]
 8002f5e:	60b9      	str	r1, [r7, #8]
 8002f60:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f62:	2300      	movs	r3, #0
 8002f64:	617b      	str	r3, [r7, #20]
 8002f66:	e009      	b.n	8002f7c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	1c5a      	adds	r2, r3, #1
 8002f6c:	60ba      	str	r2, [r7, #8]
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	4618      	mov	r0, r3
 8002f72:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	3301      	adds	r3, #1
 8002f7a:	617b      	str	r3, [r7, #20]
 8002f7c:	697a      	ldr	r2, [r7, #20]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	dbf1      	blt.n	8002f68 <_write+0x12>
	}
	return len;
 8002f84:	687b      	ldr	r3, [r7, #4]
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3718      	adds	r7, #24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <_close>:

int _close(int file)
{
 8002f8e:	b480      	push	{r7}
 8002f90:	b083      	sub	sp, #12
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
	return -1;
 8002f96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr

08002fa6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	b083      	sub	sp, #12
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
 8002fae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002fb6:	605a      	str	r2, [r3, #4]
	return 0;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr

08002fc6 <_isatty>:

int _isatty(int file)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b083      	sub	sp, #12
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
	return 1;
 8002fce:	2301      	movs	r3, #1
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	607a      	str	r2, [r7, #4]
	return 0;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3714      	adds	r7, #20
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
	...

08002ff8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003000:	4a14      	ldr	r2, [pc, #80]	; (8003054 <_sbrk+0x5c>)
 8003002:	4b15      	ldr	r3, [pc, #84]	; (8003058 <_sbrk+0x60>)
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800300c:	4b13      	ldr	r3, [pc, #76]	; (800305c <_sbrk+0x64>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d102      	bne.n	800301a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003014:	4b11      	ldr	r3, [pc, #68]	; (800305c <_sbrk+0x64>)
 8003016:	4a12      	ldr	r2, [pc, #72]	; (8003060 <_sbrk+0x68>)
 8003018:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800301a:	4b10      	ldr	r3, [pc, #64]	; (800305c <_sbrk+0x64>)
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4413      	add	r3, r2
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	429a      	cmp	r2, r3
 8003026:	d207      	bcs.n	8003038 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003028:	f001 f898 	bl	800415c <__errno>
 800302c:	4603      	mov	r3, r0
 800302e:	220c      	movs	r2, #12
 8003030:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003032:	f04f 33ff 	mov.w	r3, #4294967295
 8003036:	e009      	b.n	800304c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003038:	4b08      	ldr	r3, [pc, #32]	; (800305c <_sbrk+0x64>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800303e:	4b07      	ldr	r3, [pc, #28]	; (800305c <_sbrk+0x64>)
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4413      	add	r3, r2
 8003046:	4a05      	ldr	r2, [pc, #20]	; (800305c <_sbrk+0x64>)
 8003048:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800304a:	68fb      	ldr	r3, [r7, #12]
}
 800304c:	4618      	mov	r0, r3
 800304e:	3718      	adds	r7, #24
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	20018000 	.word	0x20018000
 8003058:	00000400 	.word	0x00000400
 800305c:	20000234 	.word	0x20000234
 8003060:	20000248 	.word	0x20000248

08003064 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003068:	4b08      	ldr	r3, [pc, #32]	; (800308c <SystemInit+0x28>)
 800306a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800306e:	4a07      	ldr	r2, [pc, #28]	; (800308c <SystemInit+0x28>)
 8003070:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003074:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003078:	4b04      	ldr	r3, [pc, #16]	; (800308c <SystemInit+0x28>)
 800307a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800307e:	609a      	str	r2, [r3, #8]
#endif
}
 8003080:	bf00      	nop
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	e000ed00 	.word	0xe000ed00

08003090 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8003090:	b480      	push	{r7}
 8003092:	b087      	sub	sp, #28
 8003094:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8003096:	2300      	movs	r3, #0
 8003098:	613b      	str	r3, [r7, #16]
 800309a:	2300      	movs	r3, #0
 800309c:	617b      	str	r3, [r7, #20]
 800309e:	2302      	movs	r3, #2
 80030a0:	60fb      	str	r3, [r7, #12]
 80030a2:	2300      	movs	r3, #0
 80030a4:	60bb      	str	r3, [r7, #8]
 80030a6:	2302      	movs	r3, #2
 80030a8:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80030aa:	4b34      	ldr	r3, [pc, #208]	; (800317c <SystemCoreClockUpdate+0xec>)
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f003 030c 	and.w	r3, r3, #12
 80030b2:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	2b08      	cmp	r3, #8
 80030b8:	d011      	beq.n	80030de <SystemCoreClockUpdate+0x4e>
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	2b08      	cmp	r3, #8
 80030be:	d844      	bhi.n	800314a <SystemCoreClockUpdate+0xba>
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d003      	beq.n	80030ce <SystemCoreClockUpdate+0x3e>
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	2b04      	cmp	r3, #4
 80030ca:	d004      	beq.n	80030d6 <SystemCoreClockUpdate+0x46>
 80030cc:	e03d      	b.n	800314a <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80030ce:	4b2c      	ldr	r3, [pc, #176]	; (8003180 <SystemCoreClockUpdate+0xf0>)
 80030d0:	4a2c      	ldr	r2, [pc, #176]	; (8003184 <SystemCoreClockUpdate+0xf4>)
 80030d2:	601a      	str	r2, [r3, #0]
      break;
 80030d4:	e03d      	b.n	8003152 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80030d6:	4b2a      	ldr	r3, [pc, #168]	; (8003180 <SystemCoreClockUpdate+0xf0>)
 80030d8:	4a2b      	ldr	r2, [pc, #172]	; (8003188 <SystemCoreClockUpdate+0xf8>)
 80030da:	601a      	str	r2, [r3, #0]
      break;
 80030dc:	e039      	b.n	8003152 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80030de:	4b27      	ldr	r3, [pc, #156]	; (800317c <SystemCoreClockUpdate+0xec>)
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	0d9b      	lsrs	r3, r3, #22
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030ea:	4b24      	ldr	r3, [pc, #144]	; (800317c <SystemCoreClockUpdate+0xec>)
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030f2:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d00c      	beq.n	8003114 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80030fa:	4a23      	ldr	r2, [pc, #140]	; (8003188 <SystemCoreClockUpdate+0xf8>)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003102:	4a1e      	ldr	r2, [pc, #120]	; (800317c <SystemCoreClockUpdate+0xec>)
 8003104:	6852      	ldr	r2, [r2, #4]
 8003106:	0992      	lsrs	r2, r2, #6
 8003108:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800310c:	fb02 f303 	mul.w	r3, r2, r3
 8003110:	617b      	str	r3, [r7, #20]
 8003112:	e00b      	b.n	800312c <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8003114:	4a1b      	ldr	r2, [pc, #108]	; (8003184 <SystemCoreClockUpdate+0xf4>)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	fbb2 f3f3 	udiv	r3, r2, r3
 800311c:	4a17      	ldr	r2, [pc, #92]	; (800317c <SystemCoreClockUpdate+0xec>)
 800311e:	6852      	ldr	r2, [r2, #4]
 8003120:	0992      	lsrs	r2, r2, #6
 8003122:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003126:	fb02 f303 	mul.w	r3, r2, r3
 800312a:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800312c:	4b13      	ldr	r3, [pc, #76]	; (800317c <SystemCoreClockUpdate+0xec>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	0c1b      	lsrs	r3, r3, #16
 8003132:	f003 0303 	and.w	r3, r3, #3
 8003136:	3301      	adds	r3, #1
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 800313c:	697a      	ldr	r2, [r7, #20]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	fbb2 f3f3 	udiv	r3, r2, r3
 8003144:	4a0e      	ldr	r2, [pc, #56]	; (8003180 <SystemCoreClockUpdate+0xf0>)
 8003146:	6013      	str	r3, [r2, #0]
      break;
 8003148:	e003      	b.n	8003152 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 800314a:	4b0d      	ldr	r3, [pc, #52]	; (8003180 <SystemCoreClockUpdate+0xf0>)
 800314c:	4a0d      	ldr	r2, [pc, #52]	; (8003184 <SystemCoreClockUpdate+0xf4>)
 800314e:	601a      	str	r2, [r3, #0]
      break;
 8003150:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8003152:	4b0a      	ldr	r3, [pc, #40]	; (800317c <SystemCoreClockUpdate+0xec>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	091b      	lsrs	r3, r3, #4
 8003158:	f003 030f 	and.w	r3, r3, #15
 800315c:	4a0b      	ldr	r2, [pc, #44]	; (800318c <SystemCoreClockUpdate+0xfc>)
 800315e:	5cd3      	ldrb	r3, [r2, r3]
 8003160:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8003162:	4b07      	ldr	r3, [pc, #28]	; (8003180 <SystemCoreClockUpdate+0xf0>)
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	fa22 f303 	lsr.w	r3, r2, r3
 800316c:	4a04      	ldr	r2, [pc, #16]	; (8003180 <SystemCoreClockUpdate+0xf0>)
 800316e:	6013      	str	r3, [r2, #0]
}
 8003170:	bf00      	nop
 8003172:	371c      	adds	r7, #28
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr
 800317c:	40023800 	.word	0x40023800
 8003180:	2000001c 	.word	0x2000001c
 8003184:	00f42400 	.word	0x00f42400
 8003188:	007a1200 	.word	0x007a1200
 800318c:	0800ae98 	.word	0x0800ae98

08003190 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003190:	480d      	ldr	r0, [pc, #52]	; (80031c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003192:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003194:	f7ff ff66 	bl	8003064 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003198:	480c      	ldr	r0, [pc, #48]	; (80031cc <LoopForever+0x6>)
  ldr r1, =_edata
 800319a:	490d      	ldr	r1, [pc, #52]	; (80031d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800319c:	4a0d      	ldr	r2, [pc, #52]	; (80031d4 <LoopForever+0xe>)
  movs r3, #0
 800319e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031a0:	e002      	b.n	80031a8 <LoopCopyDataInit>

080031a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031a6:	3304      	adds	r3, #4

080031a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031ac:	d3f9      	bcc.n	80031a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031ae:	4a0a      	ldr	r2, [pc, #40]	; (80031d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80031b0:	4c0a      	ldr	r4, [pc, #40]	; (80031dc <LoopForever+0x16>)
  movs r3, #0
 80031b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031b4:	e001      	b.n	80031ba <LoopFillZerobss>

080031b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031b8:	3204      	adds	r2, #4

080031ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031bc:	d3fb      	bcc.n	80031b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80031be:	f000 ffd3 	bl	8004168 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80031c2:	f7ff f9a3 	bl	800250c <main>

080031c6 <LoopForever>:

LoopForever:
  b LoopForever
 80031c6:	e7fe      	b.n	80031c6 <LoopForever>
  ldr   r0, =_estack
 80031c8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80031cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031d0:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80031d4:	0800b4a8 	.word	0x0800b4a8
  ldr r2, =_sbss
 80031d8:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80031dc:	20000248 	.word	0x20000248

080031e0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80031e0:	e7fe      	b.n	80031e0 <ADC_IRQHandler>
	...

080031e4 <gpioVerifyPort>:
 * Function to verify the integrity of the **port** parameter.
 *
 * @param *port : Pointer to the GPIO port
 */
bool gpioVerifyPort(GPIO_TypeDef *port)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
    if ((GPIOA == port) || (GPIOB == port) || (GPIOC == port) ||
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a10      	ldr	r2, [pc, #64]	; (8003230 <gpioVerifyPort+0x4c>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d013      	beq.n	800321c <gpioVerifyPort+0x38>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a0f      	ldr	r2, [pc, #60]	; (8003234 <gpioVerifyPort+0x50>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d00f      	beq.n	800321c <gpioVerifyPort+0x38>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a0e      	ldr	r2, [pc, #56]	; (8003238 <gpioVerifyPort+0x54>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d00b      	beq.n	800321c <gpioVerifyPort+0x38>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a0d      	ldr	r2, [pc, #52]	; (800323c <gpioVerifyPort+0x58>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d007      	beq.n	800321c <gpioVerifyPort+0x38>
        (GPIOD == port) || (GPIOE == port) || (GPIOH == port))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a0c      	ldr	r2, [pc, #48]	; (8003240 <gpioVerifyPort+0x5c>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d003      	beq.n	800321c <gpioVerifyPort+0x38>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a0b      	ldr	r2, [pc, #44]	; (8003244 <gpioVerifyPort+0x60>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d101      	bne.n	8003220 <gpioVerifyPort+0x3c>
    {
        return true;
 800321c:	2301      	movs	r3, #1
 800321e:	e000      	b.n	8003222 <gpioVerifyPort+0x3e>
    }
    return false;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	370c      	adds	r7, #12
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	40020000 	.word	0x40020000
 8003234:	40020400 	.word	0x40020400
 8003238:	40020800 	.word	0x40020800
 800323c:	40020c00 	.word	0x40020c00
 8003240:	40021000 	.word	0x40021000
 8003244:	40021c00 	.word	0x40021c00

08003248 <gpioVerifyPin>:
 * Function to verify the integrity of the **pin** parameter.
 *
 * @param pin : The pin number of any of the GPIO ports
 */
bool gpioVerifyPin(PIN_NUM_t pin)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	4603      	mov	r3, r0
 8003250:	71fb      	strb	r3, [r7, #7]
    if ((PIN0  == pin) || (PIN1  == pin) || (PIN2  == pin) || (PIN3  == pin) ||
 8003252:	79fb      	ldrb	r3, [r7, #7]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d02c      	beq.n	80032b2 <gpioVerifyPin+0x6a>
 8003258:	79fb      	ldrb	r3, [r7, #7]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d029      	beq.n	80032b2 <gpioVerifyPin+0x6a>
 800325e:	79fb      	ldrb	r3, [r7, #7]
 8003260:	2b02      	cmp	r3, #2
 8003262:	d026      	beq.n	80032b2 <gpioVerifyPin+0x6a>
 8003264:	79fb      	ldrb	r3, [r7, #7]
 8003266:	2b03      	cmp	r3, #3
 8003268:	d023      	beq.n	80032b2 <gpioVerifyPin+0x6a>
 800326a:	79fb      	ldrb	r3, [r7, #7]
 800326c:	2b04      	cmp	r3, #4
 800326e:	d020      	beq.n	80032b2 <gpioVerifyPin+0x6a>
        (PIN4  == pin) || (PIN5  == pin) || (PIN6  == pin) || (PIN7  == pin) ||
 8003270:	79fb      	ldrb	r3, [r7, #7]
 8003272:	2b05      	cmp	r3, #5
 8003274:	d01d      	beq.n	80032b2 <gpioVerifyPin+0x6a>
 8003276:	79fb      	ldrb	r3, [r7, #7]
 8003278:	2b06      	cmp	r3, #6
 800327a:	d01a      	beq.n	80032b2 <gpioVerifyPin+0x6a>
 800327c:	79fb      	ldrb	r3, [r7, #7]
 800327e:	2b07      	cmp	r3, #7
 8003280:	d017      	beq.n	80032b2 <gpioVerifyPin+0x6a>
 8003282:	79fb      	ldrb	r3, [r7, #7]
 8003284:	2b08      	cmp	r3, #8
 8003286:	d014      	beq.n	80032b2 <gpioVerifyPin+0x6a>
        (PIN8  == pin) || (PIN9  == pin) || (PIN10 == pin) || (PIN11 == pin) ||
 8003288:	79fb      	ldrb	r3, [r7, #7]
 800328a:	2b09      	cmp	r3, #9
 800328c:	d011      	beq.n	80032b2 <gpioVerifyPin+0x6a>
 800328e:	79fb      	ldrb	r3, [r7, #7]
 8003290:	2b0a      	cmp	r3, #10
 8003292:	d00e      	beq.n	80032b2 <gpioVerifyPin+0x6a>
 8003294:	79fb      	ldrb	r3, [r7, #7]
 8003296:	2b0b      	cmp	r3, #11
 8003298:	d00b      	beq.n	80032b2 <gpioVerifyPin+0x6a>
 800329a:	79fb      	ldrb	r3, [r7, #7]
 800329c:	2b0c      	cmp	r3, #12
 800329e:	d008      	beq.n	80032b2 <gpioVerifyPin+0x6a>
        (PIN12 == pin) || (PIN13 == pin) || (PIN14 == pin) || (PIN15 == pin))
 80032a0:	79fb      	ldrb	r3, [r7, #7]
 80032a2:	2b0d      	cmp	r3, #13
 80032a4:	d005      	beq.n	80032b2 <gpioVerifyPin+0x6a>
 80032a6:	79fb      	ldrb	r3, [r7, #7]
 80032a8:	2b0e      	cmp	r3, #14
 80032aa:	d002      	beq.n	80032b2 <gpioVerifyPin+0x6a>
 80032ac:	79fb      	ldrb	r3, [r7, #7]
 80032ae:	2b0f      	cmp	r3, #15
 80032b0:	d101      	bne.n	80032b6 <gpioVerifyPin+0x6e>
    {
        return true;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e000      	b.n	80032b8 <gpioVerifyPin+0x70>
    }
    return false;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <gpioVerifyAltFunc>:
 * Function to verify the integrity of the **af** parameter.
 *
 * @param af : The number of the alternative function.
 */
bool gpioVerifyAltFunc(ALT_FUNC_t af)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	4603      	mov	r3, r0
 80032cc:	71fb      	strb	r3, [r7, #7]
    if ((AF0  == af) || (AF1  == af) || (AF2  == af) || (AF3  == af) || (AF4  == af) ||
 80032ce:	79fb      	ldrb	r3, [r7, #7]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d02c      	beq.n	800332e <gpioVerifyAltFunc+0x6a>
 80032d4:	79fb      	ldrb	r3, [r7, #7]
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d029      	beq.n	800332e <gpioVerifyAltFunc+0x6a>
 80032da:	79fb      	ldrb	r3, [r7, #7]
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d026      	beq.n	800332e <gpioVerifyAltFunc+0x6a>
 80032e0:	79fb      	ldrb	r3, [r7, #7]
 80032e2:	2b03      	cmp	r3, #3
 80032e4:	d023      	beq.n	800332e <gpioVerifyAltFunc+0x6a>
 80032e6:	79fb      	ldrb	r3, [r7, #7]
 80032e8:	2b04      	cmp	r3, #4
 80032ea:	d020      	beq.n	800332e <gpioVerifyAltFunc+0x6a>
 80032ec:	79fb      	ldrb	r3, [r7, #7]
 80032ee:	2b05      	cmp	r3, #5
 80032f0:	d01d      	beq.n	800332e <gpioVerifyAltFunc+0x6a>
        (AF5  == af) || (AF6  == af) || (AF7  == af) || (AF8  == af) || (AF9  == af) ||
 80032f2:	79fb      	ldrb	r3, [r7, #7]
 80032f4:	2b06      	cmp	r3, #6
 80032f6:	d01a      	beq.n	800332e <gpioVerifyAltFunc+0x6a>
 80032f8:	79fb      	ldrb	r3, [r7, #7]
 80032fa:	2b07      	cmp	r3, #7
 80032fc:	d017      	beq.n	800332e <gpioVerifyAltFunc+0x6a>
 80032fe:	79fb      	ldrb	r3, [r7, #7]
 8003300:	2b08      	cmp	r3, #8
 8003302:	d014      	beq.n	800332e <gpioVerifyAltFunc+0x6a>
 8003304:	79fb      	ldrb	r3, [r7, #7]
 8003306:	2b09      	cmp	r3, #9
 8003308:	d011      	beq.n	800332e <gpioVerifyAltFunc+0x6a>
 800330a:	79fb      	ldrb	r3, [r7, #7]
 800330c:	2b0a      	cmp	r3, #10
 800330e:	d00e      	beq.n	800332e <gpioVerifyAltFunc+0x6a>
        (AF10 == af) || (AF11 == af) || (AF12 == af) || (AF13 == af) || (AF14 == af) ||
 8003310:	79fb      	ldrb	r3, [r7, #7]
 8003312:	2b0b      	cmp	r3, #11
 8003314:	d00b      	beq.n	800332e <gpioVerifyAltFunc+0x6a>
 8003316:	79fb      	ldrb	r3, [r7, #7]
 8003318:	2b0c      	cmp	r3, #12
 800331a:	d008      	beq.n	800332e <gpioVerifyAltFunc+0x6a>
 800331c:	79fb      	ldrb	r3, [r7, #7]
 800331e:	2b0d      	cmp	r3, #13
 8003320:	d005      	beq.n	800332e <gpioVerifyAltFunc+0x6a>
 8003322:	79fb      	ldrb	r3, [r7, #7]
 8003324:	2b0e      	cmp	r3, #14
 8003326:	d002      	beq.n	800332e <gpioVerifyAltFunc+0x6a>
 8003328:	79fb      	ldrb	r3, [r7, #7]
 800332a:	2b0f      	cmp	r3, #15
 800332c:	d101      	bne.n	8003332 <gpioVerifyAltFunc+0x6e>
        (AF15 == af))
    {
        return true;
 800332e:	2301      	movs	r3, #1
 8003330:	e000      	b.n	8003334 <gpioVerifyAltFunc+0x70>
    }

    return false;
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <gpioVerifyPinMode>:
 * Function to verify the integrity of the **pinMode** parameter.
 *
 * @param pinMode : The operational mode in which the GPIO pin shall work.
 */
bool gpioVerifyPinMode(PIN_MODE_t pinMode)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	4603      	mov	r3, r0
 8003348:	71fb      	strb	r3, [r7, #7]
    if ((INPUT == pinMode) || (OUTPUT == pinMode) || (ALTFUNC == pinMode) || (ANALOG == pinMode))
 800334a:	79fb      	ldrb	r3, [r7, #7]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d008      	beq.n	8003362 <gpioVerifyPinMode+0x22>
 8003350:	79fb      	ldrb	r3, [r7, #7]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d005      	beq.n	8003362 <gpioVerifyPinMode+0x22>
 8003356:	79fb      	ldrb	r3, [r7, #7]
 8003358:	2b02      	cmp	r3, #2
 800335a:	d002      	beq.n	8003362 <gpioVerifyPinMode+0x22>
 800335c:	79fb      	ldrb	r3, [r7, #7]
 800335e:	2b03      	cmp	r3, #3
 8003360:	d101      	bne.n	8003366 <gpioVerifyPinMode+0x26>
    {
        return true;
 8003362:	2301      	movs	r3, #1
 8003364:	e000      	b.n	8003368 <gpioVerifyPinMode+0x28>
    }

    return false;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <gpioVerifyOutputType>:
 * Function to verify the integrity of the **outType** parameter.
 *
 * @param outType : Verifies whether the passed value is PUSHPULL or OPENDRAIN.
 */
bool gpioVerifyOutputType(OUTPUT_TYPE_t outType)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	4603      	mov	r3, r0
 800337c:	71fb      	strb	r3, [r7, #7]
    if ((PUSHPULL == outType) || (OPENDRAIN == outType))
 800337e:	79fb      	ldrb	r3, [r7, #7]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d002      	beq.n	800338a <gpioVerifyOutputType+0x16>
 8003384:	79fb      	ldrb	r3, [r7, #7]
 8003386:	2b01      	cmp	r3, #1
 8003388:	d101      	bne.n	800338e <gpioVerifyOutputType+0x1a>
    {
        return true;
 800338a:	2301      	movs	r3, #1
 800338c:	e000      	b.n	8003390 <gpioVerifyOutputType+0x1c>
    }

    return false;
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <gpioVerifyPushPullMode>:
 * Function to verify the integrity of the Pullup/Pulldown parameter.
 *
 * @param mode : Verifies the Pullup/Pulldown mode
 */
bool gpioVerifyPushPullMode(PUPD_MODE_t mode)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	4603      	mov	r3, r0
 80033a4:	71fb      	strb	r3, [r7, #7]
    if ((NO_PULLUP_PULLDOWN == mode) || (PULLUP == mode) || (PULLDOWN == mode))
 80033a6:	79fb      	ldrb	r3, [r7, #7]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d005      	beq.n	80033b8 <gpioVerifyPushPullMode+0x1c>
 80033ac:	79fb      	ldrb	r3, [r7, #7]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d002      	beq.n	80033b8 <gpioVerifyPushPullMode+0x1c>
 80033b2:	79fb      	ldrb	r3, [r7, #7]
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d101      	bne.n	80033bc <gpioVerifyPushPullMode+0x20>
    {
        return true;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e000      	b.n	80033be <gpioVerifyPushPullMode+0x22>
    }
    return false;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	370c      	adds	r7, #12
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
	...

080033cc <gpioInitPort>:
 *          <td rowspan="1">7...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioInitPort(GPIO_TypeDef *port)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
    if (gpioVerifyPort(port) == true)
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f7ff ff05 	bl	80031e4 <gpioVerifyPort>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d042      	beq.n	8003466 <gpioInitPort+0x9a>
    {
        if (GPIOA == port)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a24      	ldr	r2, [pc, #144]	; (8003474 <gpioInitPort+0xa8>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d106      	bne.n	80033f6 <gpioInitPort+0x2a>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80033e8:	4b23      	ldr	r3, [pc, #140]	; (8003478 <gpioInitPort+0xac>)
 80033ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ec:	4a22      	ldr	r2, [pc, #136]	; (8003478 <gpioInitPort+0xac>)
 80033ee:	f043 0301 	orr.w	r3, r3, #1
 80033f2:	6313      	str	r3, [r2, #48]	; 0x30
 80033f4:	e035      	b.n	8003462 <gpioInitPort+0x96>
        }
        else if (GPIOB == port)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a20      	ldr	r2, [pc, #128]	; (800347c <gpioInitPort+0xb0>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d106      	bne.n	800340c <gpioInitPort+0x40>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 80033fe:	4b1e      	ldr	r3, [pc, #120]	; (8003478 <gpioInitPort+0xac>)
 8003400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003402:	4a1d      	ldr	r2, [pc, #116]	; (8003478 <gpioInitPort+0xac>)
 8003404:	f043 0302 	orr.w	r3, r3, #2
 8003408:	6313      	str	r3, [r2, #48]	; 0x30
 800340a:	e02a      	b.n	8003462 <gpioInitPort+0x96>
        }
        else if (GPIOC == port)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a1c      	ldr	r2, [pc, #112]	; (8003480 <gpioInitPort+0xb4>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d106      	bne.n	8003422 <gpioInitPort+0x56>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8003414:	4b18      	ldr	r3, [pc, #96]	; (8003478 <gpioInitPort+0xac>)
 8003416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003418:	4a17      	ldr	r2, [pc, #92]	; (8003478 <gpioInitPort+0xac>)
 800341a:	f043 0304 	orr.w	r3, r3, #4
 800341e:	6313      	str	r3, [r2, #48]	; 0x30
 8003420:	e01f      	b.n	8003462 <gpioInitPort+0x96>
        }
        else if (GPIOD == port)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a17      	ldr	r2, [pc, #92]	; (8003484 <gpioInitPort+0xb8>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d106      	bne.n	8003438 <gpioInitPort+0x6c>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 800342a:	4b13      	ldr	r3, [pc, #76]	; (8003478 <gpioInitPort+0xac>)
 800342c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342e:	4a12      	ldr	r2, [pc, #72]	; (8003478 <gpioInitPort+0xac>)
 8003430:	f043 0308 	orr.w	r3, r3, #8
 8003434:	6313      	str	r3, [r2, #48]	; 0x30
 8003436:	e014      	b.n	8003462 <gpioInitPort+0x96>
        }
        else if (GPIOE == port)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a13      	ldr	r2, [pc, #76]	; (8003488 <gpioInitPort+0xbc>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d106      	bne.n	800344e <gpioInitPort+0x82>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 8003440:	4b0d      	ldr	r3, [pc, #52]	; (8003478 <gpioInitPort+0xac>)
 8003442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003444:	4a0c      	ldr	r2, [pc, #48]	; (8003478 <gpioInitPort+0xac>)
 8003446:	f043 0310 	orr.w	r3, r3, #16
 800344a:	6313      	str	r3, [r2, #48]	; 0x30
 800344c:	e009      	b.n	8003462 <gpioInitPort+0x96>
        }
        else if (GPIOH == port)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a0e      	ldr	r2, [pc, #56]	; (800348c <gpioInitPort+0xc0>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d105      	bne.n	8003462 <gpioInitPort+0x96>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN;
 8003456:	4b08      	ldr	r3, [pc, #32]	; (8003478 <gpioInitPort+0xac>)
 8003458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345a:	4a07      	ldr	r2, [pc, #28]	; (8003478 <gpioInitPort+0xac>)
 800345c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003460:	6313      	str	r3, [r2, #48]	; 0x30
        }
        return GPIO_OK;
 8003462:	2300      	movs	r3, #0
 8003464:	e001      	b.n	800346a <gpioInitPort+0x9e>
    }
    return GPIO_INVALID_PORT;
 8003466:	f04f 33ff 	mov.w	r3, #4294967295
}
 800346a:	4618      	mov	r0, r3
 800346c:	3708      	adds	r7, #8
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	40020000 	.word	0x40020000
 8003478:	40023800 	.word	0x40023800
 800347c:	40020400 	.word	0x40020400
 8003480:	40020800 	.word	0x40020800
 8003484:	40020c00 	.word	0x40020c00
 8003488:	40021000 	.word	0x40021000
 800348c:	40021c00 	.word	0x40021c00

08003490 <gpioSelectPort>:
 *          <td rowspan="1">7...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectPort(GPIO_TypeDef *port)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
    if (gpioVerifyPort(port) != true)
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f7ff fea3 	bl	80031e4 <gpioVerifyPort>
 800349e:	4603      	mov	r3, r0
 80034a0:	f083 0301 	eor.w	r3, r3, #1
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d002      	beq.n	80034b0 <gpioSelectPort+0x20>
    {
        return GPIO_INVALID_PORT;
 80034aa:	f04f 33ff 	mov.w	r3, #4294967295
 80034ae:	e041      	b.n	8003534 <gpioSelectPort+0xa4>
    }

    if (GPIOA == port)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4a22      	ldr	r2, [pc, #136]	; (800353c <gpioSelectPort+0xac>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d106      	bne.n	80034c6 <gpioSelectPort+0x36>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80034b8:	4b21      	ldr	r3, [pc, #132]	; (8003540 <gpioSelectPort+0xb0>)
 80034ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034bc:	4a20      	ldr	r2, [pc, #128]	; (8003540 <gpioSelectPort+0xb0>)
 80034be:	f043 0301 	orr.w	r3, r3, #1
 80034c2:	6313      	str	r3, [r2, #48]	; 0x30
 80034c4:	e035      	b.n	8003532 <gpioSelectPort+0xa2>
    }
    else if (GPIOB == port)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a1e      	ldr	r2, [pc, #120]	; (8003544 <gpioSelectPort+0xb4>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d106      	bne.n	80034dc <gpioSelectPort+0x4c>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 80034ce:	4b1c      	ldr	r3, [pc, #112]	; (8003540 <gpioSelectPort+0xb0>)
 80034d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d2:	4a1b      	ldr	r2, [pc, #108]	; (8003540 <gpioSelectPort+0xb0>)
 80034d4:	f043 0302 	orr.w	r3, r3, #2
 80034d8:	6313      	str	r3, [r2, #48]	; 0x30
 80034da:	e02a      	b.n	8003532 <gpioSelectPort+0xa2>
    }
    else if (GPIOC == port)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a1a      	ldr	r2, [pc, #104]	; (8003548 <gpioSelectPort+0xb8>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d106      	bne.n	80034f2 <gpioSelectPort+0x62>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 80034e4:	4b16      	ldr	r3, [pc, #88]	; (8003540 <gpioSelectPort+0xb0>)
 80034e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e8:	4a15      	ldr	r2, [pc, #84]	; (8003540 <gpioSelectPort+0xb0>)
 80034ea:	f043 0304 	orr.w	r3, r3, #4
 80034ee:	6313      	str	r3, [r2, #48]	; 0x30
 80034f0:	e01f      	b.n	8003532 <gpioSelectPort+0xa2>
    }
    else if (GPIOD == port)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a15      	ldr	r2, [pc, #84]	; (800354c <gpioSelectPort+0xbc>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d106      	bne.n	8003508 <gpioSelectPort+0x78>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 80034fa:	4b11      	ldr	r3, [pc, #68]	; (8003540 <gpioSelectPort+0xb0>)
 80034fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fe:	4a10      	ldr	r2, [pc, #64]	; (8003540 <gpioSelectPort+0xb0>)
 8003500:	f043 0308 	orr.w	r3, r3, #8
 8003504:	6313      	str	r3, [r2, #48]	; 0x30
 8003506:	e014      	b.n	8003532 <gpioSelectPort+0xa2>
    }
    else if (GPIOE == port)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a11      	ldr	r2, [pc, #68]	; (8003550 <gpioSelectPort+0xc0>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d106      	bne.n	800351e <gpioSelectPort+0x8e>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 8003510:	4b0b      	ldr	r3, [pc, #44]	; (8003540 <gpioSelectPort+0xb0>)
 8003512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003514:	4a0a      	ldr	r2, [pc, #40]	; (8003540 <gpioSelectPort+0xb0>)
 8003516:	f043 0310 	orr.w	r3, r3, #16
 800351a:	6313      	str	r3, [r2, #48]	; 0x30
 800351c:	e009      	b.n	8003532 <gpioSelectPort+0xa2>
    }
    else if (GPIOH == port)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a0c      	ldr	r2, [pc, #48]	; (8003554 <gpioSelectPort+0xc4>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d105      	bne.n	8003532 <gpioSelectPort+0xa2>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN;
 8003526:	4b06      	ldr	r3, [pc, #24]	; (8003540 <gpioSelectPort+0xb0>)
 8003528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352a:	4a05      	ldr	r2, [pc, #20]	; (8003540 <gpioSelectPort+0xb0>)
 800352c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003530:	6313      	str	r3, [r2, #48]	; 0x30
    }
    return GPIO_OK;
 8003532:	2300      	movs	r3, #0
}
 8003534:	4618      	mov	r0, r3
 8003536:	3708      	adds	r7, #8
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	40020000 	.word	0x40020000
 8003540:	40023800 	.word	0x40023800
 8003544:	40020400 	.word	0x40020400
 8003548:	40020800 	.word	0x40020800
 800354c:	40020c00 	.word	0x40020c00
 8003550:	40021000 	.word	0x40021000
 8003554:	40021c00 	.word	0x40021c00

08003558 <gpioSelectPinMode>:
 *          <td rowspan="1">Sets the pin function either to input, output, alternate function, or analog mode</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectPinMode(GPIO_TypeDef *port, PIN_NUM_t pin, PIN_MODE_t mode)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	460b      	mov	r3, r1
 8003562:	70fb      	strb	r3, [r7, #3]
 8003564:	4613      	mov	r3, r2
 8003566:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f7ff fe3b 	bl	80031e4 <gpioVerifyPort>
 800356e:	4603      	mov	r3, r0
 8003570:	f083 0301 	eor.w	r3, r3, #1
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d002      	beq.n	8003580 <gpioSelectPinMode+0x28>
    {
        return GPIO_INVALID_PORT;
 800357a:	f04f 33ff 	mov.w	r3, #4294967295
 800357e:	e032      	b.n	80035e6 <gpioSelectPinMode+0x8e>
    }
    if (gpioVerifyPin(pin) != true)
 8003580:	78fb      	ldrb	r3, [r7, #3]
 8003582:	4618      	mov	r0, r3
 8003584:	f7ff fe60 	bl	8003248 <gpioVerifyPin>
 8003588:	4603      	mov	r3, r0
 800358a:	f083 0301 	eor.w	r3, r3, #1
 800358e:	b2db      	uxtb	r3, r3
 8003590:	2b00      	cmp	r3, #0
 8003592:	d002      	beq.n	800359a <gpioSelectPinMode+0x42>
    {
        return GPIO_INVALID_PIN;
 8003594:	f06f 0301 	mvn.w	r3, #1
 8003598:	e025      	b.n	80035e6 <gpioSelectPinMode+0x8e>
    }
    if (gpioVerifyPinMode(mode) != true)
 800359a:	78bb      	ldrb	r3, [r7, #2]
 800359c:	4618      	mov	r0, r3
 800359e:	f7ff fecf 	bl	8003340 <gpioVerifyPinMode>
 80035a2:	4603      	mov	r3, r0
 80035a4:	f083 0301 	eor.w	r3, r3, #1
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d002      	beq.n	80035b4 <gpioSelectPinMode+0x5c>
    {
        return GPIO_INVALID_PINMODE;
 80035ae:	f06f 0305 	mvn.w	r3, #5
 80035b2:	e018      	b.n	80035e6 <gpioSelectPinMode+0x8e>
    }

    // Set pin to default (INPUT)
	port->MODER &= ~(0b11 << (pin * 2));
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	78fa      	ldrb	r2, [r7, #3]
 80035ba:	0052      	lsls	r2, r2, #1
 80035bc:	2103      	movs	r1, #3
 80035be:	fa01 f202 	lsl.w	r2, r1, r2
 80035c2:	43d2      	mvns	r2, r2
 80035c4:	401a      	ands	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	601a      	str	r2, [r3, #0]

	// If mode is not INPUT --> Select other setting
	if (INPUT != mode)
 80035ca:	78bb      	ldrb	r3, [r7, #2]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d009      	beq.n	80035e4 <gpioSelectPinMode+0x8c>
	{
		port->MODER |= (mode << (pin * 2));
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	78b9      	ldrb	r1, [r7, #2]
 80035d6:	78fa      	ldrb	r2, [r7, #3]
 80035d8:	0052      	lsls	r2, r2, #1
 80035da:	fa01 f202 	lsl.w	r2, r1, r2
 80035de:	431a      	orrs	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	601a      	str	r2, [r3, #0]
	}

	return GPIO_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3708      	adds	r7, #8
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <gpioSetPin>:
 *          <td rowspan="1">15...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSetPin(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b082      	sub	sp, #8
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
 80035f6:	460b      	mov	r3, r1
 80035f8:	70fb      	strb	r3, [r7, #3]
    if (gpioVerifyPort(port) != true)
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f7ff fdf2 	bl	80031e4 <gpioVerifyPort>
 8003600:	4603      	mov	r3, r0
 8003602:	f083 0301 	eor.w	r3, r3, #1
 8003606:	b2db      	uxtb	r3, r3
 8003608:	2b00      	cmp	r3, #0
 800360a:	d002      	beq.n	8003612 <gpioSetPin+0x24>
    {
        return GPIO_INVALID_PORT;
 800360c:	f04f 33ff 	mov.w	r3, #4294967295
 8003610:	e014      	b.n	800363c <gpioSetPin+0x4e>
    }
    if (gpioVerifyPin(pin) != true)
 8003612:	78fb      	ldrb	r3, [r7, #3]
 8003614:	4618      	mov	r0, r3
 8003616:	f7ff fe17 	bl	8003248 <gpioVerifyPin>
 800361a:	4603      	mov	r3, r0
 800361c:	f083 0301 	eor.w	r3, r3, #1
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d002      	beq.n	800362c <gpioSetPin+0x3e>
    {
        return GPIO_INVALID_PIN;
 8003626:	f06f 0301 	mvn.w	r3, #1
 800362a:	e007      	b.n	800363c <gpioSetPin+0x4e>
    }

	port->BSRR = 1 << pin;
 800362c:	78fb      	ldrb	r3, [r7, #3]
 800362e:	2201      	movs	r2, #1
 8003630:	fa02 f303 	lsl.w	r3, r2, r3
 8003634:	461a      	mov	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	619a      	str	r2, [r3, #24]

	return GPIO_OK;
 800363a:	2300      	movs	r3, #0
}
 800363c:	4618      	mov	r0, r3
 800363e:	3708      	adds	r7, #8
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <gpioResetPin>:
 *          <td rowspan="1">31...16</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioResetPin(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	460b      	mov	r3, r1
 800364e:	70fb      	strb	r3, [r7, #3]
    if (gpioVerifyPort(port) != true)
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f7ff fdc7 	bl	80031e4 <gpioVerifyPort>
 8003656:	4603      	mov	r3, r0
 8003658:	f083 0301 	eor.w	r3, r3, #1
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d002      	beq.n	8003668 <gpioResetPin+0x24>
    {
        return GPIO_INVALID_PORT;
 8003662:	f04f 33ff 	mov.w	r3, #4294967295
 8003666:	e015      	b.n	8003694 <gpioResetPin+0x50>
    }
    if (gpioVerifyPin(pin) != true)
 8003668:	78fb      	ldrb	r3, [r7, #3]
 800366a:	4618      	mov	r0, r3
 800366c:	f7ff fdec 	bl	8003248 <gpioVerifyPin>
 8003670:	4603      	mov	r3, r0
 8003672:	f083 0301 	eor.w	r3, r3, #1
 8003676:	b2db      	uxtb	r3, r3
 8003678:	2b00      	cmp	r3, #0
 800367a:	d002      	beq.n	8003682 <gpioResetPin+0x3e>
    {
        return GPIO_INVALID_PIN;
 800367c:	f06f 0301 	mvn.w	r3, #1
 8003680:	e008      	b.n	8003694 <gpioResetPin+0x50>
    }

	port->BSRR = (1 << (pin + 16));
 8003682:	78fb      	ldrb	r3, [r7, #3]
 8003684:	3310      	adds	r3, #16
 8003686:	2201      	movs	r2, #1
 8003688:	fa02 f303 	lsl.w	r3, r2, r3
 800368c:	461a      	mov	r2, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	619a      	str	r2, [r3, #24]

	return GPIO_OK;
 8003692:	2300      	movs	r3, #0
}
 8003694:	4618      	mov	r0, r3
 8003696:	3708      	adds	r7, #8
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <gpioSelectAltFunc>:
 *          <td rowspan="1">31...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectAltFunc(GPIO_TypeDef *port, PIN_NUM_t pin, ALT_FUNC_t af)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	460b      	mov	r3, r1
 80036a6:	70fb      	strb	r3, [r7, #3]
 80036a8:	4613      	mov	r3, r2
 80036aa:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f7ff fd99 	bl	80031e4 <gpioVerifyPort>
 80036b2:	4603      	mov	r3, r0
 80036b4:	f083 0301 	eor.w	r3, r3, #1
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d002      	beq.n	80036c4 <gpioSelectAltFunc+0x28>
    {
        return GPIO_INVALID_PORT;
 80036be:	f04f 33ff 	mov.w	r3, #4294967295
 80036c2:	e050      	b.n	8003766 <gpioSelectAltFunc+0xca>
    }
    if (gpioVerifyPin(pin) != true)
 80036c4:	78fb      	ldrb	r3, [r7, #3]
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7ff fdbe 	bl	8003248 <gpioVerifyPin>
 80036cc:	4603      	mov	r3, r0
 80036ce:	f083 0301 	eor.w	r3, r3, #1
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d002      	beq.n	80036de <gpioSelectAltFunc+0x42>
    {
        return GPIO_INVALID_PIN;
 80036d8:	f06f 0301 	mvn.w	r3, #1
 80036dc:	e043      	b.n	8003766 <gpioSelectAltFunc+0xca>
    }
    if (gpioVerifyAltFunc(af) != true)
 80036de:	78bb      	ldrb	r3, [r7, #2]
 80036e0:	4618      	mov	r0, r3
 80036e2:	f7ff fdef 	bl	80032c4 <gpioVerifyAltFunc>
 80036e6:	4603      	mov	r3, r0
 80036e8:	f083 0301 	eor.w	r3, r3, #1
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d002      	beq.n	80036f8 <gpioSelectAltFunc+0x5c>
    {
        return GPIO_INVALID_ALTFUNC;
 80036f2:	f06f 0302 	mvn.w	r3, #2
 80036f6:	e036      	b.n	8003766 <gpioSelectAltFunc+0xca>
    }

	// Dont't forget to select the alternative function mode before...
	gpioSelectPinMode(port, pin, ALTFUNC);
 80036f8:	78fb      	ldrb	r3, [r7, #3]
 80036fa:	2202      	movs	r2, #2
 80036fc:	4619      	mov	r1, r3
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f7ff ff2a 	bl	8003558 <gpioSelectPinMode>

	if (pin <= PIN7)
 8003704:	78fb      	ldrb	r3, [r7, #3]
 8003706:	2b07      	cmp	r3, #7
 8003708:	d815      	bhi.n	8003736 <gpioSelectAltFunc+0x9a>
	{
		port->AFR[0] &= ~(0x0F << (pin * 4));       // Reset previously selected AF
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a1b      	ldr	r3, [r3, #32]
 800370e:	78fa      	ldrb	r2, [r7, #3]
 8003710:	0092      	lsls	r2, r2, #2
 8003712:	210f      	movs	r1, #15
 8003714:	fa01 f202 	lsl.w	r2, r1, r2
 8003718:	43d2      	mvns	r2, r2
 800371a:	401a      	ands	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	621a      	str	r2, [r3, #32]
		port->AFR[0] |= af << (pin * 4);            // Set AFR[0] to the new AF
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a1b      	ldr	r3, [r3, #32]
 8003724:	78b9      	ldrb	r1, [r7, #2]
 8003726:	78fa      	ldrb	r2, [r7, #3]
 8003728:	0092      	lsls	r2, r2, #2
 800372a:	fa01 f202 	lsl.w	r2, r1, r2
 800372e:	431a      	orrs	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	621a      	str	r2, [r3, #32]
 8003734:	e016      	b.n	8003764 <gpioSelectAltFunc+0xc8>
	}
	else
	{
		// !!! Subtract 8 from pin number since we start at bit 0 !!!
		port->AFR[1] &= ~(0x0F << ((pin - 8) * 4)); // Reset previously selected AF.
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373a:	78fa      	ldrb	r2, [r7, #3]
 800373c:	3a08      	subs	r2, #8
 800373e:	0092      	lsls	r2, r2, #2
 8003740:	210f      	movs	r1, #15
 8003742:	fa01 f202 	lsl.w	r2, r1, r2
 8003746:	43d2      	mvns	r2, r2
 8003748:	401a      	ands	r2, r3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	625a      	str	r2, [r3, #36]	; 0x24
		port->AFR[1] |= af << ((pin - 8) * 4);      // Set AFR[1] to the new AF
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003752:	78b9      	ldrb	r1, [r7, #2]
 8003754:	78fa      	ldrb	r2, [r7, #3]
 8003756:	3a08      	subs	r2, #8
 8003758:	0092      	lsls	r2, r2, #2
 800375a:	fa01 f202 	lsl.w	r2, r1, r2
 800375e:	431a      	orrs	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return GPIO_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}

0800376e <gpioSetOutputType>:
 *          <td rowspan="1">Sets the output type either to push-pull or to Open drain</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSetOutputType(GPIO_TypeDef *port, PIN_NUM_t pin, OUTPUT_TYPE_t outType)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b082      	sub	sp, #8
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
 8003776:	460b      	mov	r3, r1
 8003778:	70fb      	strb	r3, [r7, #3]
 800377a:	4613      	mov	r3, r2
 800377c:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f7ff fd30 	bl	80031e4 <gpioVerifyPort>
 8003784:	4603      	mov	r3, r0
 8003786:	f083 0301 	eor.w	r3, r3, #1
 800378a:	b2db      	uxtb	r3, r3
 800378c:	2b00      	cmp	r3, #0
 800378e:	d002      	beq.n	8003796 <gpioSetOutputType+0x28>
    {
        return GPIO_INVALID_PORT;
 8003790:	f04f 33ff 	mov.w	r3, #4294967295
 8003794:	e030      	b.n	80037f8 <gpioSetOutputType+0x8a>
    }
    if (gpioVerifyPin(pin) != true)
 8003796:	78fb      	ldrb	r3, [r7, #3]
 8003798:	4618      	mov	r0, r3
 800379a:	f7ff fd55 	bl	8003248 <gpioVerifyPin>
 800379e:	4603      	mov	r3, r0
 80037a0:	f083 0301 	eor.w	r3, r3, #1
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d002      	beq.n	80037b0 <gpioSetOutputType+0x42>
    {
        return GPIO_INVALID_PIN;
 80037aa:	f06f 0301 	mvn.w	r3, #1
 80037ae:	e023      	b.n	80037f8 <gpioSetOutputType+0x8a>
    }
    if (gpioVerifyOutputType(outType) != true)
 80037b0:	78bb      	ldrb	r3, [r7, #2]
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7ff fdde 	bl	8003374 <gpioVerifyOutputType>
 80037b8:	4603      	mov	r3, r0
 80037ba:	f083 0301 	eor.w	r3, r3, #1
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d002      	beq.n	80037ca <gpioSetOutputType+0x5c>
    {
        return GPIO_INVALID_OUTPUT_TYPE;
 80037c4:	f06f 0303 	mvn.w	r3, #3
 80037c8:	e016      	b.n	80037f8 <gpioSetOutputType+0x8a>
    }

    port->OTYPER &= ~(1 << pin);   // Use pin as push-pull output
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	78fa      	ldrb	r2, [r7, #3]
 80037d0:	2101      	movs	r1, #1
 80037d2:	fa01 f202 	lsl.w	r2, r1, r2
 80037d6:	43d2      	mvns	r2, r2
 80037d8:	401a      	ands	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	605a      	str	r2, [r3, #4]
    if (OPENDRAIN == outType)
 80037de:	78bb      	ldrb	r3, [r7, #2]
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d108      	bne.n	80037f6 <gpioSetOutputType+0x88>
    {
        port->OTYPER |= (1 << pin);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	78fa      	ldrb	r2, [r7, #3]
 80037ea:	2101      	movs	r1, #1
 80037ec:	fa01 f202 	lsl.w	r2, r1, r2
 80037f0:	431a      	orrs	r2, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	605a      	str	r2, [r3, #4]
	}

	return GPIO_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3708      	adds	r7, #8
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <gpioSelectPushPullMode>:
 *          <td rowspan="1">OTYPER must be set to push-pull</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectPushPullMode(GPIO_TypeDef *port, PIN_NUM_t pin, PUPD_MODE_t pupd)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	460b      	mov	r3, r1
 800380a:	70fb      	strb	r3, [r7, #3]
 800380c:	4613      	mov	r3, r2
 800380e:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f7ff fce7 	bl	80031e4 <gpioVerifyPort>
 8003816:	4603      	mov	r3, r0
 8003818:	f083 0301 	eor.w	r3, r3, #1
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d002      	beq.n	8003828 <gpioSelectPushPullMode+0x28>
    {
        return GPIO_INVALID_PORT;
 8003822:	f04f 33ff 	mov.w	r3, #4294967295
 8003826:	e044      	b.n	80038b2 <gpioSelectPushPullMode+0xb2>
    }
    if (gpioVerifyPin(pin) != true)
 8003828:	78fb      	ldrb	r3, [r7, #3]
 800382a:	4618      	mov	r0, r3
 800382c:	f7ff fd0c 	bl	8003248 <gpioVerifyPin>
 8003830:	4603      	mov	r3, r0
 8003832:	f083 0301 	eor.w	r3, r3, #1
 8003836:	b2db      	uxtb	r3, r3
 8003838:	2b00      	cmp	r3, #0
 800383a:	d002      	beq.n	8003842 <gpioSelectPushPullMode+0x42>
    {
        return GPIO_INVALID_PIN;
 800383c:	f06f 0301 	mvn.w	r3, #1
 8003840:	e037      	b.n	80038b2 <gpioSelectPushPullMode+0xb2>
    }
    if (gpioVerifyPushPullMode(pupd) != true)
 8003842:	78bb      	ldrb	r3, [r7, #2]
 8003844:	4618      	mov	r0, r3
 8003846:	f7ff fda9 	bl	800339c <gpioVerifyPushPullMode>
 800384a:	4603      	mov	r3, r0
 800384c:	f083 0301 	eor.w	r3, r3, #1
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b00      	cmp	r3, #0
 8003854:	d002      	beq.n	800385c <gpioSelectPushPullMode+0x5c>
    {
        return GPIO_INVALID_PUSH_PULL_MODE;
 8003856:	f06f 0306 	mvn.w	r3, #6
 800385a:	e02a      	b.n	80038b2 <gpioSelectPushPullMode+0xb2>
    }

    port->PUPDR &= ~(0x03 << (pin * 2));        // Disable PU/PD
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	78fa      	ldrb	r2, [r7, #3]
 8003862:	0052      	lsls	r2, r2, #1
 8003864:	2103      	movs	r1, #3
 8003866:	fa01 f202 	lsl.w	r2, r1, r2
 800386a:	43d2      	mvns	r2, r2
 800386c:	401a      	ands	r2, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	60da      	str	r2, [r3, #12]

    if (port->OTYPER == PUSHPULL)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d11a      	bne.n	80038b0 <gpioSelectPushPullMode+0xb0>
	{
		if (PULLUP == pupd)
 800387a:	78bb      	ldrb	r3, [r7, #2]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d10a      	bne.n	8003896 <gpioSelectPushPullMode+0x96>
		{
			port->PUPDR |= (PULLUP << (pin *2));
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	78fa      	ldrb	r2, [r7, #3]
 8003886:	0052      	lsls	r2, r2, #1
 8003888:	2101      	movs	r1, #1
 800388a:	fa01 f202 	lsl.w	r2, r1, r2
 800388e:	431a      	orrs	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	60da      	str	r2, [r3, #12]
 8003894:	e00c      	b.n	80038b0 <gpioSelectPushPullMode+0xb0>
		}
		else if (PULLDOWN == pupd)
 8003896:	78bb      	ldrb	r3, [r7, #2]
 8003898:	2b02      	cmp	r3, #2
 800389a:	d109      	bne.n	80038b0 <gpioSelectPushPullMode+0xb0>
		{
			port->PUPDR |= (PULLDOWN << (pin *2));
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	78fa      	ldrb	r2, [r7, #3]
 80038a2:	0052      	lsls	r2, r2, #1
 80038a4:	2102      	movs	r1, #2
 80038a6:	fa01 f202 	lsl.w	r2, r1, r2
 80038aa:	431a      	orrs	r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	60da      	str	r2, [r3, #12]
		}
	}

    return GPIO_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3708      	adds	r7, #8
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}

080038ba <__spi_Chk_TX_empty>:
#include <mcalGPIO.h>
#include <mcalSPI.h>


static inline void __spi_Chk_TX_empty(SPI_TypeDef *spi)
{
 80038ba:	b480      	push	{r7}
 80038bc:	b085      	sub	sp, #20
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]

	uint16_t simpleDelay;
	while(!(spi->SR & SPI_SR_TXE));
 80038c2:	bf00      	nop
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f003 0302 	and.w	r3, r3, #2
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d0f9      	beq.n	80038c4 <__spi_Chk_TX_empty+0xa>
	for (simpleDelay = 0; simpleDelay < 3; simpleDelay++) {	; }  // Kurze Zwangspause, da das Signal TXE etwas vor Ausgbae des Letzen Bite erfolgt. ca 500 ns
 80038d0:	2300      	movs	r3, #0
 80038d2:	81fb      	strh	r3, [r7, #14]
 80038d4:	e002      	b.n	80038dc <__spi_Chk_TX_empty+0x22>
 80038d6:	89fb      	ldrh	r3, [r7, #14]
 80038d8:	3301      	adds	r3, #1
 80038da:	81fb      	strh	r3, [r7, #14]
 80038dc:	89fb      	ldrh	r3, [r7, #14]
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d9f9      	bls.n	80038d6 <__spi_Chk_TX_empty+0x1c>

}
 80038e2:	bf00      	nop
 80038e4:	bf00      	nop
 80038e6:	3714      	adds	r7, #20
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <__spi_Chk_RX_empty>:

static inline void __spi_Chk_RX_empty(SPI_TypeDef *spi)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
	uint16_t simpleDelay;
	while(!(spi -> SR & SPI_SR_RXNE));
 80038f8:	bf00      	nop
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	2b00      	cmp	r3, #0
 8003904:	d0f9      	beq.n	80038fa <__spi_Chk_RX_empty+0xa>
	for (simpleDelay = 0; simpleDelay < 4; simpleDelay++) {	; }
 8003906:	2300      	movs	r3, #0
 8003908:	81fb      	strh	r3, [r7, #14]
 800390a:	e002      	b.n	8003912 <__spi_Chk_RX_empty+0x22>
 800390c:	89fb      	ldrh	r3, [r7, #14]
 800390e:	3301      	adds	r3, #1
 8003910:	81fb      	strh	r3, [r7, #14]
 8003912:	89fb      	ldrh	r3, [r7, #14]
 8003914:	2b03      	cmp	r3, #3
 8003916:	d9f9      	bls.n	800390c <__spi_Chk_RX_empty+0x1c>

}
 8003918:	bf00      	nop
 800391a:	bf00      	nop
 800391c:	3714      	adds	r7, #20
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr

08003926 <__spi_Chk_notBSY>:



static inline void __spi_Chk_notBSY(SPI_TypeDef *spi)
{
 8003926:	b480      	push	{r7}
 8003928:	b083      	sub	sp, #12
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
	while((spi->SR & SPI_SR_BSY));
 800392e:	bf00      	nop
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003938:	2b00      	cmp	r3, #0
 800393a:	d1f9      	bne.n	8003930 <__spi_Chk_notBSY+0xa>
}
 800393c:	bf00      	nop
 800393e:	bf00      	nop
 8003940:	370c      	adds	r7, #12
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
	...

0800394c <spiVerifySPI>:
*/
/**
 * Verifies the integrity of the SPI port.
 */
static bool spiVerifySPI(SPI_TypeDef *spi)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
    if ((SPI1 == spi) || (SPI2 == spi) || (SPI3 == spi) || (SPI4 == spi))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a0c      	ldr	r2, [pc, #48]	; (8003988 <spiVerifySPI+0x3c>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d00b      	beq.n	8003974 <spiVerifySPI+0x28>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a0b      	ldr	r2, [pc, #44]	; (800398c <spiVerifySPI+0x40>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d007      	beq.n	8003974 <spiVerifySPI+0x28>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a0a      	ldr	r2, [pc, #40]	; (8003990 <spiVerifySPI+0x44>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d003      	beq.n	8003974 <spiVerifySPI+0x28>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a09      	ldr	r2, [pc, #36]	; (8003994 <spiVerifySPI+0x48>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d101      	bne.n	8003978 <spiVerifySPI+0x2c>
    {
        return true;
 8003974:	2301      	movs	r3, #1
 8003976:	e000      	b.n	800397a <spiVerifySPI+0x2e>
    }
    return false;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	370c      	adds	r7, #12
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	40013000 	.word	0x40013000
 800398c:	40003800 	.word	0x40003800
 8003990:	40003c00 	.word	0x40003c00
 8003994:	40013400 	.word	0x40013400

08003998 <spiVerifyClkDivider>:

/**
 * Verifies the integrity of the SPI clock divider.
 */
static bool spiVerifyClkDivider(SPI_CLOCK_DIV_t div)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	4603      	mov	r3, r0
 80039a0:	71fb      	strb	r3, [r7, #7]
    if ((CLK_DIV_2  == div) || (CLK_DIV_4  == div) || (CLK_DIV_8   == div) || (CLK_DIV_16  == div) ||
 80039a2:	79fb      	ldrb	r3, [r7, #7]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d014      	beq.n	80039d2 <spiVerifyClkDivider+0x3a>
 80039a8:	79fb      	ldrb	r3, [r7, #7]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d011      	beq.n	80039d2 <spiVerifyClkDivider+0x3a>
 80039ae:	79fb      	ldrb	r3, [r7, #7]
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d00e      	beq.n	80039d2 <spiVerifyClkDivider+0x3a>
 80039b4:	79fb      	ldrb	r3, [r7, #7]
 80039b6:	2b03      	cmp	r3, #3
 80039b8:	d00b      	beq.n	80039d2 <spiVerifyClkDivider+0x3a>
 80039ba:	79fb      	ldrb	r3, [r7, #7]
 80039bc:	2b04      	cmp	r3, #4
 80039be:	d008      	beq.n	80039d2 <spiVerifyClkDivider+0x3a>
        (CLK_DIV_32 == div) || (CLK_DIV_64 == div) || (CLK_DIV_128 == div) || (CLK_DIV_256 == div))
 80039c0:	79fb      	ldrb	r3, [r7, #7]
 80039c2:	2b05      	cmp	r3, #5
 80039c4:	d005      	beq.n	80039d2 <spiVerifyClkDivider+0x3a>
 80039c6:	79fb      	ldrb	r3, [r7, #7]
 80039c8:	2b06      	cmp	r3, #6
 80039ca:	d002      	beq.n	80039d2 <spiVerifyClkDivider+0x3a>
 80039cc:	79fb      	ldrb	r3, [r7, #7]
 80039ce:	2b07      	cmp	r3, #7
 80039d0:	d101      	bne.n	80039d6 <spiVerifyClkDivider+0x3e>
    {
        return true;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e000      	b.n	80039d8 <spiVerifyClkDivider+0x40>
    }
    return false;
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	4618      	mov	r0, r3
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <spiVerifySSM>:

/**
 * Verifies the integrity of the SPI Software Slave Management.
 */
static bool spiVerifySSM(SPI_SSM_t ssm)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	4603      	mov	r3, r0
 80039ec:	71fb      	strb	r3, [r7, #7]
    if ((SSM_ON == ssm) || (SSM_OFF == ssm))
 80039ee:	79fb      	ldrb	r3, [r7, #7]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d002      	beq.n	80039fa <spiVerifySSM+0x16>
 80039f4:	79fb      	ldrb	r3, [r7, #7]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <spiVerifySSM+0x1a>
    {
        return true;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e000      	b.n	8003a00 <spiVerifySSM+0x1c>
    }
    return false;
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <spiVerifyOpMode>:

/**
 * Verifies the integrity of the SPI operational mode.
 */
static bool spiVerifyOpMode(SPI_OPMODE_t om)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	4603      	mov	r3, r0
 8003a14:	71fb      	strb	r3, [r7, #7]
    if ((MASTER == om) || (SLAVE == om))
 8003a16:	79fb      	ldrb	r3, [r7, #7]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d002      	beq.n	8003a22 <spiVerifyOpMode+0x16>
 8003a1c:	79fb      	ldrb	r3, [r7, #7]
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d101      	bne.n	8003a26 <spiVerifyOpMode+0x1a>
    {
        return true;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e000      	b.n	8003a28 <spiVerifyOpMode+0x1c>
    }
    return false;
 8003a26:	2300      	movs	r3, #0
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <spiVerifyPhase>:

/**
 * Verifies the integrity of the SPI trigger phase.
 */
static bool spiVerifyPhase(SPI_PHASE_t ph)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	71fb      	strb	r3, [r7, #7]
    if ((SPI_PHASE_EDGE_1 == ph) || (SPI_PHASE_EDGE_2 == ph))
 8003a3e:	79fb      	ldrb	r3, [r7, #7]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d002      	beq.n	8003a4a <spiVerifyPhase+0x16>
 8003a44:	79fb      	ldrb	r3, [r7, #7]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d101      	bne.n	8003a4e <spiVerifyPhase+0x1a>
    {
        return true;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e000      	b.n	8003a50 <spiVerifyPhase+0x1c>
    }
    return false;
 8003a4e:	2300      	movs	r3, #0
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <spiVerifyIdlePolarity>:

/**
 * Verifies the integrity of the SPI idle level.
 */
static bool spiVerifyIdlePolarity(SPI_POLARITY_t pol)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	4603      	mov	r3, r0
 8003a64:	71fb      	strb	r3, [r7, #7]
    if ((SPI_IDLE_LOW == pol) || (SPI_IDLE_HIGH == pol))
 8003a66:	79fb      	ldrb	r3, [r7, #7]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d002      	beq.n	8003a72 <spiVerifyIdlePolarity+0x16>
 8003a6c:	79fb      	ldrb	r3, [r7, #7]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d101      	bne.n	8003a76 <spiVerifyIdlePolarity+0x1a>
    {
        return true;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e000      	b.n	8003a78 <spiVerifyIdlePolarity+0x1c>
    }
    return false;
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <spiInitSPI>:


SPI_RETURN_CODE_t spiInitSPI(SPI_TypeDef *spi, SPI_CLOCK_DIV_t div, SPI_DATALEN_t len,
                             SPI_SSM_t ssm, SPI_SSI_LVL_t lvl, SPI_OPMODE_t opMode,
                             SPI_PHASE_t phase, SPI_POLARITY_t polarity)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	4608      	mov	r0, r1
 8003a8e:	4611      	mov	r1, r2
 8003a90:	461a      	mov	r2, r3
 8003a92:	4603      	mov	r3, r0
 8003a94:	70fb      	strb	r3, [r7, #3]
 8003a96:	460b      	mov	r3, r1
 8003a98:	70bb      	strb	r3, [r7, #2]
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	707b      	strb	r3, [r7, #1]
    uint16_t cr1 = 0U;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	81fb      	strh	r3, [r7, #14]
    // Parameter verification
    if (spiVerifyClkDivider(div) != true)
 8003aa2:	78fb      	ldrb	r3, [r7, #3]
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7ff ff77 	bl	8003998 <spiVerifyClkDivider>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	f083 0301 	eor.w	r3, r3, #1
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d002      	beq.n	8003abc <spiInitSPI+0x38>
    {
        return SPI_INVALID_CLOCK_DIVIDER;
 8003ab6:	f06f 0350 	mvn.w	r3, #80	; 0x50
 8003aba:	e0cc      	b.n	8003c56 <spiInitSPI+0x1d2>
    }
    if (spiVerifySSM(ssm) != true)
 8003abc:	787b      	ldrb	r3, [r7, #1]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7ff ff90 	bl	80039e4 <spiVerifySSM>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	f083 0301 	eor.w	r3, r3, #1
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d002      	beq.n	8003ad6 <spiInitSPI+0x52>
    {
        return SPI_INVALID_SW_SLV_MGMT;
 8003ad0:	f06f 0352 	mvn.w	r3, #82	; 0x52
 8003ad4:	e0bf      	b.n	8003c56 <spiInitSPI+0x1d2>
    if (spiVerifySsiLvl(lvl) != true)
    {
        return SPI_INVALID_SSI_LEVEL;
    }
#endif
    if (spiVerifyOpMode(opMode) != true)
 8003ad6:	7f3b      	ldrb	r3, [r7, #28]
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f7ff ff97 	bl	8003a0c <spiVerifyOpMode>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	f083 0301 	eor.w	r3, r3, #1
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d002      	beq.n	8003af0 <spiInitSPI+0x6c>
    {
        return SPI_INVALID_OP_MODE;
 8003aea:	f06f 0355 	mvn.w	r3, #85	; 0x55
 8003aee:	e0b2      	b.n	8003c56 <spiInitSPI+0x1d2>
    }
    if (spiVerifyPhase(phase) != true)
 8003af0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7ff ff9d 	bl	8003a34 <spiVerifyPhase>
 8003afa:	4603      	mov	r3, r0
 8003afc:	f083 0301 	eor.w	r3, r3, #1
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d002      	beq.n	8003b0c <spiInitSPI+0x88>
    {
        return SPI_INVALID_PHASE;
 8003b06:	f06f 0356 	mvn.w	r3, #86	; 0x56
 8003b0a:	e0a4      	b.n	8003c56 <spiInitSPI+0x1d2>
    }
    if (spiVerifyIdlePolarity(polarity) != true)
 8003b0c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003b10:	4618      	mov	r0, r3
 8003b12:	f7ff ffa3 	bl	8003a5c <spiVerifyIdlePolarity>
 8003b16:	4603      	mov	r3, r0
 8003b18:	f083 0301 	eor.w	r3, r3, #1
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d002      	beq.n	8003b28 <spiInitSPI+0xa4>
    {
        return SPI_INVALID_IDLE_POLARITY;
 8003b22:	f06f 0357 	mvn.w	r3, #87	; 0x57
 8003b26:	e096      	b.n	8003c56 <spiInitSPI+0x1d2>
    /**
     *  All parameter check passed successfully!
     */

    // Setting up the baudrate (PCLK / Pre-Scaler)
    switch (div)
 8003b28:	78fb      	ldrb	r3, [r7, #3]
 8003b2a:	2b07      	cmp	r3, #7
 8003b2c:	d83a      	bhi.n	8003ba4 <spiInitSPI+0x120>
 8003b2e:	a201      	add	r2, pc, #4	; (adr r2, 8003b34 <spiInitSPI+0xb0>)
 8003b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b34:	08003b55 	.word	0x08003b55
 8003b38:	08003b5f 	.word	0x08003b5f
 8003b3c:	08003b69 	.word	0x08003b69
 8003b40:	08003b73 	.word	0x08003b73
 8003b44:	08003b7d 	.word	0x08003b7d
 8003b48:	08003b87 	.word	0x08003b87
 8003b4c:	08003b91 	.word	0x08003b91
 8003b50:	08003b9b 	.word	0x08003b9b
    {
        case CLK_DIV_2:
            cr1 &= ~(SPI_CR1_BR_2 | SPI_CR1_BR_1 | SPI_CR1_BR_0);
 8003b54:	89fb      	ldrh	r3, [r7, #14]
 8003b56:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8003b5a:	81fb      	strh	r3, [r7, #14]
            break;
 8003b5c:	e027      	b.n	8003bae <spiInitSPI+0x12a>

        case CLK_DIV_4:
            cr1 |= SPI_CR1_BR_0;
 8003b5e:	89fb      	ldrh	r3, [r7, #14]
 8003b60:	f043 0308 	orr.w	r3, r3, #8
 8003b64:	81fb      	strh	r3, [r7, #14]
            break;
 8003b66:	e022      	b.n	8003bae <spiInitSPI+0x12a>

        case CLK_DIV_8:
            cr1 |= SPI_CR1_BR_1;
 8003b68:	89fb      	ldrh	r3, [r7, #14]
 8003b6a:	f043 0310 	orr.w	r3, r3, #16
 8003b6e:	81fb      	strh	r3, [r7, #14]
            break;
 8003b70:	e01d      	b.n	8003bae <spiInitSPI+0x12a>

        case CLK_DIV_16:
            cr1 |= (SPI_CR1_BR_1 | SPI_CR1_BR_0);
 8003b72:	89fb      	ldrh	r3, [r7, #14]
 8003b74:	f043 0318 	orr.w	r3, r3, #24
 8003b78:	81fb      	strh	r3, [r7, #14]
            break;
 8003b7a:	e018      	b.n	8003bae <spiInitSPI+0x12a>

        case CLK_DIV_32:
            cr1 |= SPI_CR1_BR_2;
 8003b7c:	89fb      	ldrh	r3, [r7, #14]
 8003b7e:	f043 0320 	orr.w	r3, r3, #32
 8003b82:	81fb      	strh	r3, [r7, #14]
            break;
 8003b84:	e013      	b.n	8003bae <spiInitSPI+0x12a>

        case CLK_DIV_64:
            cr1 |= (SPI_CR1_BR_2 | SPI_CR1_BR_0);
 8003b86:	89fb      	ldrh	r3, [r7, #14]
 8003b88:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8003b8c:	81fb      	strh	r3, [r7, #14]
            break;
 8003b8e:	e00e      	b.n	8003bae <spiInitSPI+0x12a>

        case CLK_DIV_128:
            cr1 |= (SPI_CR1_BR_2 | SPI_CR1_BR_1);
 8003b90:	89fb      	ldrh	r3, [r7, #14]
 8003b92:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003b96:	81fb      	strh	r3, [r7, #14]
            break;
 8003b98:	e009      	b.n	8003bae <spiInitSPI+0x12a>

        case CLK_DIV_256:
            cr1 |= (SPI_CR1_BR_2 | SPI_CR1_BR_1 | SPI_CR1_BR_0);
 8003b9a:	89fb      	ldrh	r3, [r7, #14]
 8003b9c:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8003ba0:	81fb      	strh	r3, [r7, #14]
            break;
 8003ba2:	e004      	b.n	8003bae <spiInitSPI+0x12a>

        default:
            cr1 |= (SPI_CR1_BR_1 | SPI_CR1_BR_0);
 8003ba4:	89fb      	ldrh	r3, [r7, #14]
 8003ba6:	f043 0318 	orr.w	r3, r3, #24
 8003baa:	81fb      	strh	r3, [r7, #14]
            break;
 8003bac:	bf00      	nop
    }

    // Setting up the data length
    if (SPI_DATA_8_BIT == len)
 8003bae:	78bb      	ldrb	r3, [r7, #2]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d104      	bne.n	8003bbe <spiInitSPI+0x13a>
    {
        cr1 &= ~SPI_CR1_DFF_Msk;
 8003bb4:	89fb      	ldrh	r3, [r7, #14]
 8003bb6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003bba:	81fb      	strh	r3, [r7, #14]
 8003bbc:	e003      	b.n	8003bc6 <spiInitSPI+0x142>
    }
    else
    {
        cr1 |= SPI_CR1_DFF;
 8003bbe:	89fb      	ldrh	r3, [r7, #14]
 8003bc0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003bc4:	81fb      	strh	r3, [r7, #14]
    }

    // Set SSM and SSI bits
    if (SSM_ON == ssm)
 8003bc6:	787b      	ldrb	r3, [r7, #1]
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d110      	bne.n	8003bee <spiInitSPI+0x16a>
    {
        cr1 |= SPI_CR1_SSM;
 8003bcc:	89fb      	ldrh	r3, [r7, #14]
 8003bce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bd2:	81fb      	strh	r3, [r7, #14]

        // SSI level works only if SSM is active
        if (SSI_LVL_HIGH == lvl)
 8003bd4:	7e3b      	ldrb	r3, [r7, #24]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d104      	bne.n	8003be4 <spiInitSPI+0x160>
        {
            cr1 |= SPI_CR1_SSI;
 8003bda:	89fb      	ldrh	r3, [r7, #14]
 8003bdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003be0:	81fb      	strh	r3, [r7, #14]
 8003be2:	e008      	b.n	8003bf6 <spiInitSPI+0x172>
        }
        else
        {
            cr1 &= ~SPI_CR1_SSI_Msk;
 8003be4:	89fb      	ldrh	r3, [r7, #14]
 8003be6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bea:	81fb      	strh	r3, [r7, #14]
 8003bec:	e003      	b.n	8003bf6 <spiInitSPI+0x172>
        }
    }
    else
    {
        cr1 &= ~SPI_CR1_SSM_Msk;
 8003bee:	89fb      	ldrh	r3, [r7, #14]
 8003bf0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003bf4:	81fb      	strh	r3, [r7, #14]
    }

    // Select between Master/Slave mode
    if (MASTER == opMode)
 8003bf6:	7f3b      	ldrb	r3, [r7, #28]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d104      	bne.n	8003c06 <spiInitSPI+0x182>
    {
        cr1 |= SPI_CR1_MSTR;
 8003bfc:	89fb      	ldrh	r3, [r7, #14]
 8003bfe:	f043 0304 	orr.w	r3, r3, #4
 8003c02:	81fb      	strh	r3, [r7, #14]
 8003c04:	e003      	b.n	8003c0e <spiInitSPI+0x18a>
    }
    else
    {
        cr1 &= ~SPI_CR1_MSTR_Msk;
 8003c06:	89fb      	ldrh	r3, [r7, #14]
 8003c08:	f023 0304 	bic.w	r3, r3, #4
 8003c0c:	81fb      	strh	r3, [r7, #14]
    }

    // Set clock phase
    if (SPI_PHASE_EDGE_1 == phase)
 8003c0e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d104      	bne.n	8003c20 <spiInitSPI+0x19c>
    {
        cr1 &= ~SPI_CR1_CPHA_Msk;
 8003c16:	89fb      	ldrh	r3, [r7, #14]
 8003c18:	f023 0301 	bic.w	r3, r3, #1
 8003c1c:	81fb      	strh	r3, [r7, #14]
 8003c1e:	e003      	b.n	8003c28 <spiInitSPI+0x1a4>
    }
    else
    {
        cr1 |= SPI_CR1_CPHA;
 8003c20:	89fb      	ldrh	r3, [r7, #14]
 8003c22:	f043 0301 	orr.w	r3, r3, #1
 8003c26:	81fb      	strh	r3, [r7, #14]
    }

    // Set clock polarity
    if (SPI_IDLE_LOW == polarity)
 8003c28:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d104      	bne.n	8003c3a <spiInitSPI+0x1b6>
    {
        cr1 &= ~SPI_CR1_CPOL_Msk;
 8003c30:	89fb      	ldrh	r3, [r7, #14]
 8003c32:	f023 0302 	bic.w	r3, r3, #2
 8003c36:	81fb      	strh	r3, [r7, #14]
 8003c38:	e003      	b.n	8003c42 <spiInitSPI+0x1be>
    }
    else
    {
        cr1 |= SPI_CR1_CPOL;
 8003c3a:	89fb      	ldrh	r3, [r7, #14]
 8003c3c:	f043 0302 	orr.w	r3, r3, #2
 8003c40:	81fb      	strh	r3, [r7, #14]
    }

    // Transfer settings to CR1 + CR2
    spi->CR1 = cr1;
 8003c42:	89fa      	ldrh	r2, [r7, #14]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	601a      	str	r2, [r3, #0]
    //spi->CR1 = 0x31E; //8-bit frames
    spi->CR2 = 0;                     // Simplified version. Should be modified.
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	605a      	str	r2, [r3, #4]

    // Finally, enable SPIn
    spiEnableSPI(spi);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 f846 	bl	8003ce0 <spiEnableSPI>

    return SPI_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3710      	adds	r7, #16
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop

08003c60 <spiSelectSPI>:


SPI_RETURN_CODE_t spiSelectSPI(SPI_TypeDef *spi)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
    // All parameter check passed successfully!

    // Selects the bus clock for SPIn
    if (SPI1 == spi)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	4a18      	ldr	r2, [pc, #96]	; (8003ccc <spiSelectSPI+0x6c>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d106      	bne.n	8003c7e <spiSelectSPI+0x1e>
    {
        RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8003c70:	4b17      	ldr	r3, [pc, #92]	; (8003cd0 <spiSelectSPI+0x70>)
 8003c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c74:	4a16      	ldr	r2, [pc, #88]	; (8003cd0 <spiSelectSPI+0x70>)
 8003c76:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003c7a:	6453      	str	r3, [r2, #68]	; 0x44
 8003c7c:	e01f      	b.n	8003cbe <spiSelectSPI+0x5e>
    }
    else if (SPI2 == spi)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a14      	ldr	r2, [pc, #80]	; (8003cd4 <spiSelectSPI+0x74>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d106      	bne.n	8003c94 <spiSelectSPI+0x34>
    {
        RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 8003c86:	4b12      	ldr	r3, [pc, #72]	; (8003cd0 <spiSelectSPI+0x70>)
 8003c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8a:	4a11      	ldr	r2, [pc, #68]	; (8003cd0 <spiSelectSPI+0x70>)
 8003c8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c90:	6413      	str	r3, [r2, #64]	; 0x40
 8003c92:	e014      	b.n	8003cbe <spiSelectSPI+0x5e>
    }
    else if (SPI3 == spi)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a10      	ldr	r2, [pc, #64]	; (8003cd8 <spiSelectSPI+0x78>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d106      	bne.n	8003caa <spiSelectSPI+0x4a>
    {
        RCC->APB1ENR |= RCC_APB1ENR_SPI3EN;
 8003c9c:	4b0c      	ldr	r3, [pc, #48]	; (8003cd0 <spiSelectSPI+0x70>)
 8003c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca0:	4a0b      	ldr	r2, [pc, #44]	; (8003cd0 <spiSelectSPI+0x70>)
 8003ca2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ca6:	6413      	str	r3, [r2, #64]	; 0x40
 8003ca8:	e009      	b.n	8003cbe <spiSelectSPI+0x5e>
    }
    else if (SPI4 == spi)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a0b      	ldr	r2, [pc, #44]	; (8003cdc <spiSelectSPI+0x7c>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d105      	bne.n	8003cbe <spiSelectSPI+0x5e>
    {
        RCC->APB2ENR |= RCC_APB2ENR_SPI4EN;
 8003cb2:	4b07      	ldr	r3, [pc, #28]	; (8003cd0 <spiSelectSPI+0x70>)
 8003cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb6:	4a06      	ldr	r2, [pc, #24]	; (8003cd0 <spiSelectSPI+0x70>)
 8003cb8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003cbc:	6453      	str	r3, [r2, #68]	; 0x44
    }

    return SPI_OK;
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr
 8003ccc:	40013000 	.word	0x40013000
 8003cd0:	40023800 	.word	0x40023800
 8003cd4:	40003800 	.word	0x40003800
 8003cd8:	40003c00 	.word	0x40003c00
 8003cdc:	40013400 	.word	0x40013400

08003ce0 <spiEnableSPI>:

    return SPI_OK;
}

SPI_RETURN_CODE_t spiEnableSPI(SPI_TypeDef *spi)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]

	// Parameter verification
    if (spiVerifySPI(spi) != true)
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f7ff fe2f 	bl	800394c <spiVerifySPI>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	f083 0301 	eor.w	r3, r3, #1
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d002      	beq.n	8003d00 <spiEnableSPI+0x20>
    {
        return SPI_INVALID_SPI;
 8003cfa:	f06f 034f 	mvn.w	r3, #79	; 0x4f
 8003cfe:	e006      	b.n	8003d0e <spiEnableSPI+0x2e>
    }

    // All parameter check passed successfully!
    spi->CR1 |= SPI_CR1_SPE;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	601a      	str	r2, [r3, #0]

    return SPI_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3708      	adds	r7, #8
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <spiWriteByte>:
    return SPI_OK;
}


SPI_RETURN_CODE_t spiWriteByte(SPI_TypeDef *spi, GPIO_TypeDef *port, PIN_NUM_t pin, uint8_t data)
{
 8003d16:	b580      	push	{r7, lr}
 8003d18:	b084      	sub	sp, #16
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	60f8      	str	r0, [r7, #12]
 8003d1e:	60b9      	str	r1, [r7, #8]
 8003d20:	4611      	mov	r1, r2
 8003d22:	461a      	mov	r2, r3
 8003d24:	460b      	mov	r3, r1
 8003d26:	71fb      	strb	r3, [r7, #7]
 8003d28:	4613      	mov	r3, r2
 8003d2a:	71bb      	strb	r3, [r7, #6]
    //static uint8_t state = SPI_SEND_BYTE_1;

    if (gpioVerifyPin(pin) != true)
 8003d2c:	79fb      	ldrb	r3, [r7, #7]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7ff fa8a 	bl	8003248 <gpioVerifyPin>
 8003d34:	4603      	mov	r3, r0
 8003d36:	f083 0301 	eor.w	r3, r3, #1
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d002      	beq.n	8003d46 <spiWriteByte+0x30>
    {
        return GPIO_INVALID_PIN;
 8003d40:	f06f 0301 	mvn.w	r3, #1
 8003d44:	e016      	b.n	8003d74 <spiWriteByte+0x5e>
    }
	__spi_Chk_TX_empty(spi);
 8003d46:	68f8      	ldr	r0, [r7, #12]
 8003d48:	f7ff fdb7 	bl	80038ba <__spi_Chk_TX_empty>
    gpioResetPin(port, pin);              // Set CS input to low level
 8003d4c:	79fb      	ldrb	r3, [r7, #7]
 8003d4e:	4619      	mov	r1, r3
 8003d50:	68b8      	ldr	r0, [r7, #8]
 8003d52:	f7ff fc77 	bl	8003644 <gpioResetPin>

	spi->DR = data;                         // Send first byte to data register
 8003d56:	79ba      	ldrb	r2, [r7, #6]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	60da      	str	r2, [r3, #12]
	__spi_Chk_TX_empty(spi);
 8003d5c:	68f8      	ldr	r0, [r7, #12]
 8003d5e:	f7ff fdac 	bl	80038ba <__spi_Chk_TX_empty>

	__spi_Chk_notBSY(spi);
 8003d62:	68f8      	ldr	r0, [r7, #12]
 8003d64:	f7ff fddf 	bl	8003926 <__spi_Chk_notBSY>
	gpioSetPin(port, pin);
 8003d68:	79fb      	ldrb	r3, [r7, #7]
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	68b8      	ldr	r0, [r7, #8]
 8003d6e:	f7ff fc3e 	bl	80035ee <gpioSetPin>
            gpioSetPin(port, pin);
            state = SPI_SEND_BYTE_1;
        }
    }
*/
    return SPI_OK;
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3710      	adds	r7, #16
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <spiWriteWord>:


SPI_RETURN_CODE_t spiWriteWord(SPI_TypeDef *spi, GPIO_TypeDef *port, PIN_NUM_t pin, uint16_t data)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	4611      	mov	r1, r2
 8003d88:	461a      	mov	r2, r3
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	71fb      	strb	r3, [r7, #7]
 8003d8e:	4613      	mov	r3, r2
 8003d90:	80bb      	strh	r3, [r7, #4]
    if (gpioVerifyPin(pin) != true)
 8003d92:	79fb      	ldrb	r3, [r7, #7]
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7ff fa57 	bl	8003248 <gpioVerifyPin>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	f083 0301 	eor.w	r3, r3, #1
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d002      	beq.n	8003dac <spiWriteWord+0x30>
    {
        return GPIO_INVALID_PIN;
 8003da6:	f06f 0301 	mvn.w	r3, #1
 8003daa:	e01b      	b.n	8003de4 <spiWriteWord+0x68>
    }

    // All parameter check passed successfully!

    // Wait until the TX register is empty
    while (!(spi->SR & SPI_SR_TXE))
 8003dac:	bf00      	nop
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d0f9      	beq.n	8003dae <spiWriteWord+0x32>
    {
        ;
    }

    // Reset CS
    gpioResetPin(port, pin);
 8003dba:	79fb      	ldrb	r3, [r7, #7]
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	68b8      	ldr	r0, [r7, #8]
 8003dc0:	f7ff fc40 	bl	8003644 <gpioResetPin>

    // Transfer new data to the transfer register
    spi->DR = data;
 8003dc4:	88ba      	ldrh	r2, [r7, #4]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	60da      	str	r2, [r3, #12]

    // Waits until data has been sent
    while (spi->SR & SPI_SR_BSY)
 8003dca:	bf00      	nop
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d1f9      	bne.n	8003dcc <spiWriteWord+0x50>
    {
        // Wait: SPI is still busy
    }

    // Set CS
    gpioSetPin(port, pin);
 8003dd8:	79fb      	ldrb	r3, [r7, #7]
 8003dda:	4619      	mov	r1, r3
 8003ddc:	68b8      	ldr	r0, [r7, #8]
 8003dde:	f7ff fc06 	bl	80035ee <gpioSetPin>

    return SPI_OK;
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3710      	adds	r7, #16
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <spiSendData>:



SPI_RETURN_CODE_t spiSendData(SPI_TypeDef *spi, GPIO_TypeDef *port, PIN_NUM_t pin, uint8_t reg, uint8_t data)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	4611      	mov	r1, r2
 8003df8:	461a      	mov	r2, r3
 8003dfa:	460b      	mov	r3, r1
 8003dfc:	71fb      	strb	r3, [r7, #7]
 8003dfe:	4613      	mov	r3, r2
 8003e00:	71bb      	strb	r3, [r7, #6]
    // Parameter verification
    if (gpioVerifyPin(pin) != true)
 8003e02:	79fb      	ldrb	r3, [r7, #7]
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7ff fa1f 	bl	8003248 <gpioVerifyPin>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	f083 0301 	eor.w	r3, r3, #1
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d002      	beq.n	8003e1c <spiSendData+0x30>
    {
        return GPIO_INVALID_PIN;
 8003e16:	f06f 0301 	mvn.w	r3, #1
 8003e1a:	e02d      	b.n	8003e78 <spiSendData+0x8c>
    }

    // All parameter check passed successfully!

    if (!(spi->CR1 & SPI_CR1_DFF))				// mit 8BIT Daten Lenge werden reg und data nacheinander gesendet
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d119      	bne.n	8003e5c <spiSendData+0x70>
    {
    	__spi_Chk_TX_empty(spi);
 8003e28:	68f8      	ldr	r0, [r7, #12]
 8003e2a:	f7ff fd46 	bl	80038ba <__spi_Chk_TX_empty>
    	gpioResetPin(port, pin);              // Set CS input to low level
 8003e2e:	79fb      	ldrb	r3, [r7, #7]
 8003e30:	4619      	mov	r1, r3
 8003e32:	68b8      	ldr	r0, [r7, #8]
 8003e34:	f7ff fc06 	bl	8003644 <gpioResetPin>
		spi->DR = reg;                         // Send first byte to data register
 8003e38:	79ba      	ldrb	r2, [r7, #6]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	60da      	str	r2, [r3, #12]
		__spi_Chk_TX_empty(spi);
 8003e3e:	68f8      	ldr	r0, [r7, #12]
 8003e40:	f7ff fd3b 	bl	80038ba <__spi_Chk_TX_empty>
		spi->DR = data;                         // Send first byte to data register
 8003e44:	7e3a      	ldrb	r2, [r7, #24]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	60da      	str	r2, [r3, #12]
		__spi_Chk_TX_empty(spi);
 8003e4a:	68f8      	ldr	r0, [r7, #12]
 8003e4c:	f7ff fd35 	bl	80038ba <__spi_Chk_TX_empty>
		//__spi_Chk_notBSY(spi);
		gpioSetPin(port, pin);
 8003e50:	79fb      	ldrb	r3, [r7, #7]
 8003e52:	4619      	mov	r1, r3
 8003e54:	68b8      	ldr	r0, [r7, #8]
 8003e56:	f7ff fbca 	bl	80035ee <gpioSetPin>
 8003e5a:	e00c      	b.n	8003e76 <spiSendData+0x8a>
    	//spiWriteByte(spi, port, pin, reg);
        //spiWriteByte(spi, port, pin, data);
    }
    else
    {
        spiWriteWord(spi, port, pin, (reg << 8) | data);
 8003e5c:	79bb      	ldrb	r3, [r7, #6]
 8003e5e:	021b      	lsls	r3, r3, #8
 8003e60:	b21a      	sxth	r2, r3
 8003e62:	7e3b      	ldrb	r3, [r7, #24]
 8003e64:	b21b      	sxth	r3, r3
 8003e66:	4313      	orrs	r3, r2
 8003e68:	b21b      	sxth	r3, r3
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	79fa      	ldrb	r2, [r7, #7]
 8003e6e:	68b9      	ldr	r1, [r7, #8]
 8003e70:	68f8      	ldr	r0, [r7, #12]
 8003e72:	f7ff ff83 	bl	8003d7c <spiWriteWord>
    }

    return SPI_OK;
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3710      	adds	r7, #16
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <spiReadRegBurst>:


// <- end does not work correct

SPI_RETURN_CODE_t spiReadRegBurst(SPI_TypeDef *spi, GPIO_TypeDef *port, PIN_NUM_t pin, uint8_t reg, uint8_t *data, uint8_t num)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b088      	sub	sp, #32
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	4611      	mov	r1, r2
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	460b      	mov	r3, r1
 8003e90:	71fb      	strb	r3, [r7, #7]
 8003e92:	4613      	mov	r3, r2
 8003e94:	71bb      	strb	r3, [r7, #6]
	uint32_t value;
	uint8_t b, simpleDelay;

	while (spi -> SR & SPI_SR_RXNE)	{b = spi->DR;}
 8003e96:	e002      	b.n	8003e9e <spiReadRegBurst+0x1e>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	75fb      	strb	r3, [r7, #23]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1f6      	bne.n	8003e98 <spiReadRegBurst+0x18>

	__spi_Chk_notBSY(spi);
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f7ff fd3b 	bl	8003926 <__spi_Chk_notBSY>
	gpioResetPin(port, pin);              	// Set CS input to low level
 8003eb0:	79fb      	ldrb	r3, [r7, #7]
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	68b8      	ldr	r0, [r7, #8]
 8003eb6:	f7ff fbc5 	bl	8003644 <gpioResetPin>

	spi->DR = reg;  							// Send first byte to data register
 8003eba:	79ba      	ldrb	r2, [r7, #6]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	60da      	str	r2, [r3, #12]

	 //while (!(spi->SR & SPI_SR_TXE))         // Wait until the TX register is empty
	__spi_Chk_TX_empty(spi);
 8003ec0:	68f8      	ldr	r0, [r7, #12]
 8003ec2:	f7ff fcfa 	bl	80038ba <__spi_Chk_TX_empty>
	for (simpleDelay = 0; simpleDelay < 4; simpleDelay++) {	; }
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	77fb      	strb	r3, [r7, #31]
 8003eca:	e002      	b.n	8003ed2 <spiReadRegBurst+0x52>
 8003ecc:	7ffb      	ldrb	r3, [r7, #31]
 8003ece:	3301      	adds	r3, #1
 8003ed0:	77fb      	strb	r3, [r7, #31]
 8003ed2:	7ffb      	ldrb	r3, [r7, #31]
 8003ed4:	2b03      	cmp	r3, #3
 8003ed6:	d9f9      	bls.n	8003ecc <spiReadRegBurst+0x4c>
    spi->CR1 |= SPI_CR1_RXONLY;  			// active SPI Clock for half duplex reading
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	601a      	str	r2, [r3, #0]

    while (num > 0)                        // Start reading multiple values
 8003ee4:	e029      	b.n	8003f3a <spiReadRegBurst+0xba>
    {
	   if (num == 1U)                      // If there is only one byte left...
 8003ee6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d113      	bne.n	8003f16 <spiReadRegBurst+0x96>
	   {
		   __spi_Chk_RX_empty(spi);
 8003eee:	68f8      	ldr	r0, [r7, #12]
 8003ef0:	f7ff fcfe 	bl	80038f0 <__spi_Chk_RX_empty>
		   value = (spi->DR);         			// Read data from data register
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	61bb      	str	r3, [r7, #24]
		   spi->CR1 &= ~SPI_CR1_RXONLY;		// Fullduplex SPI Clock
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	601a      	str	r2, [r3, #0]
		    b = (uint8_t) value;
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	75fb      	strb	r3, [r7, #23]
		    *data++ = b;
 8003f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f0c:	1c5a      	adds	r2, r3, #1
 8003f0e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003f10:	7dfa      	ldrb	r2, [r7, #23]
 8003f12:	701a      	strb	r2, [r3, #0]
		   break;
 8003f14:	e015      	b.n	8003f42 <spiReadRegBurst+0xc2>
	   }
	   else                                // More than one byte left
	   {
		   __spi_Chk_RX_empty(spi);			 // Wait until receive buffer is no longer empty
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	f7ff fcea 	bl	80038f0 <__spi_Chk_RX_empty>
		   value = spi->DR;         		// Read data from data register
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	61bb      	str	r3, [r7, #24]
		   b =(uint8_t) value;
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	75fb      	strb	r3, [r7, #23]
		   *data++ = b;
 8003f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f28:	1c5a      	adds	r2, r3, #1
 8003f2a:	62ba      	str	r2, [r7, #40]	; 0x28
 8003f2c:	7dfa      	ldrb	r2, [r7, #23]
 8003f2e:	701a      	strb	r2, [r3, #0]
		   num--;
 8003f30:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003f34:	3b01      	subs	r3, #1
 8003f36:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    while (num > 0)                        // Start reading multiple values
 8003f3a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d1d1      	bne.n	8003ee6 <spiReadRegBurst+0x66>
	   }
    }
    __spi_Chk_RX_empty(spi);
 8003f42:	68f8      	ldr	r0, [r7, #12]
 8003f44:	f7ff fcd4 	bl	80038f0 <__spi_Chk_RX_empty>
    gpioSetPin(port, pin);
 8003f48:	79fb      	ldrb	r3, [r7, #7]
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	68b8      	ldr	r0, [r7, #8]
 8003f4e:	f7ff fb4e 	bl	80035ee <gpioSetPin>
	return SPI_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3720      	adds	r7, #32
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	4603      	mov	r3, r0
 8003f64:	6039      	str	r1, [r7, #0]
 8003f66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	db0a      	blt.n	8003f86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	b2da      	uxtb	r2, r3
 8003f74:	490c      	ldr	r1, [pc, #48]	; (8003fa8 <__NVIC_SetPriority+0x4c>)
 8003f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f7a:	0112      	lsls	r2, r2, #4
 8003f7c:	b2d2      	uxtb	r2, r2
 8003f7e:	440b      	add	r3, r1
 8003f80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f84:	e00a      	b.n	8003f9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	b2da      	uxtb	r2, r3
 8003f8a:	4908      	ldr	r1, [pc, #32]	; (8003fac <__NVIC_SetPriority+0x50>)
 8003f8c:	79fb      	ldrb	r3, [r7, #7]
 8003f8e:	f003 030f 	and.w	r3, r3, #15
 8003f92:	3b04      	subs	r3, #4
 8003f94:	0112      	lsls	r2, r2, #4
 8003f96:	b2d2      	uxtb	r2, r2
 8003f98:	440b      	add	r3, r1
 8003f9a:	761a      	strb	r2, [r3, #24]
}
 8003f9c:	bf00      	nop
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr
 8003fa8:	e000e100 	.word	0xe000e100
 8003fac:	e000ed00 	.word	0xe000ed00

08003fb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003fc0:	d301      	bcc.n	8003fc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e00f      	b.n	8003fe6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003fc6:	4a0a      	ldr	r2, [pc, #40]	; (8003ff0 <SysTick_Config+0x40>)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003fce:	210f      	movs	r1, #15
 8003fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8003fd4:	f7ff ffc2 	bl	8003f5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003fd8:	4b05      	ldr	r3, [pc, #20]	; (8003ff0 <SysTick_Config+0x40>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003fde:	4b04      	ldr	r3, [pc, #16]	; (8003ff0 <SysTick_Config+0x40>)
 8003fe0:	2207      	movs	r2, #7
 8003fe2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3708      	adds	r7, #8
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	e000e010 	.word	0xe000e010

08003ff4 <systickSetMillis>:
 * **systickSetMillis()** might be confusing since the user might expect to get a ticktime of a multiple of **one**
 * millisecond. However, depending on the setting of the divider used in function systickInit() the real ticktime might
 * be also a multiple of 10 or 100 milliseconds.
 */
void systickSetMillis(uint32_t *timer, uint32_t millis)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
    *timer = millis;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	683a      	ldr	r2, [r7, #0]
 8004002:	601a      	str	r2, [r3, #0]
}
 8004004:	bf00      	nop
 8004006:	370c      	adds	r7, #12
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <systickInit>:
 * Initialization of the SysTick timer
 *
 * @param  divisor : Sets the tick time of SysTick
 */
void systickInit(uint32_t divisor)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
	SystemCoreClockUpdate();
 8004018:	f7ff f83a 	bl	8003090 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock / divisor);
 800401c:	4b05      	ldr	r3, [pc, #20]	; (8004034 <systickInit+0x24>)
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	fbb2 f3f3 	udiv	r3, r2, r3
 8004026:	4618      	mov	r0, r3
 8004028:	f7ff ffc2 	bl	8003fb0 <SysTick_Config>
}
 800402c:	bf00      	nop
 800402e:	3708      	adds	r7, #8
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}
 8004034:	2000001c 	.word	0x2000001c

08004038 <systickSetTicktime>:
 * @note
 * This function is a replacement for the deprecated functions systickSetMillis() and systickSetMicros(). The reason for
 * this replacement is documented in the 'Deprecated Systick Functions' section.
 */
void systickSetTicktime(uint32_t *timer, uint32_t ticktime)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
    *timer = ticktime;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	683a      	ldr	r2, [r7, #0]
 8004046:	601a      	str	r2, [r3, #0]
}
 8004048:	bf00      	nop
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <isSystickExpired>:
 * on the Systick timer.
 *
 * @param   timer : This is a software timer.
 */
bool isSystickExpired(uint32_t timer)
{
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
	bool timerState = false;
 800405c:	2300      	movs	r3, #0
 800405e:	73fb      	strb	r3, [r7, #15]

	if (0 == timer)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d101      	bne.n	800406a <isSystickExpired+0x16>
	{
		timerState = true;
 8004066:	2301      	movs	r3, #1
 8004068:	73fb      	strb	r3, [r7, #15]
	}

	return timerState;
 800406a:	7bfb      	ldrb	r3, [r7, #15]
}
 800406c:	4618      	mov	r0, r3
 800406e:	3714      	adds	r7, #20
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <SysTick_Handler>:
 * @note
 * It is very important to provide a globally defined boolean variable with exactly the name <b>timerTrigger</b>. A very good place
 * for the introduction of this variable is the file <b>main.c</b> of your personal project.
 */
void SysTick_Handler(void)
{
 8004078:	b480      	push	{r7}
 800407a:	af00      	add	r7, sp, #0
	timerTrigger = true;
 800407c:	4b03      	ldr	r3, [pc, #12]	; (800408c <SysTick_Handler+0x14>)
 800407e:	2201      	movs	r2, #1
 8004080:	701a      	strb	r2, [r3, #0]
}
 8004082:	bf00      	nop
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr
 800408c:	20000228 	.word	0x20000228

08004090 <systickUpdateTimer>:
 * Updates the given timer.
 *
 * @param *timer : A pointer to the variable representing this timer.
 */
void systickUpdateTimer(uint32_t *timer)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
    DECREMENT_TIMER(*timer);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d004      	beq.n	80040aa <systickUpdateTimer+0x1a>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	1e5a      	subs	r2, r3, #1
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	601a      	str	r2, [r3, #0]
    timerTrigger = false;
 80040aa:	4b04      	ldr	r3, [pc, #16]	; (80040bc <systickUpdateTimer+0x2c>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	701a      	strb	r2, [r3, #0]
}
 80040b0:	bf00      	nop
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr
 80040bc:	20000228 	.word	0x20000228

080040c0 <systickUpdateTimerList>:
 *
 * @param  *list      : Pointer to an array of pointers
 * @param   arraySize : Size of the list
 */
void systickUpdateTimerList(uint32_t *list, uint8_t arraySize)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b085      	sub	sp, #20
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	460b      	mov	r3, r1
 80040ca:	70fb      	strb	r3, [r7, #3]
	uint32_t *timer;
	uint8_t  i;

	for (i = 0; i < (arraySize); ++i)
 80040cc:	2300      	movs	r3, #0
 80040ce:	73fb      	strb	r3, [r7, #15]
 80040d0:	e011      	b.n	80040f6 <systickUpdateTimerList+0x36>
	{
		timer = (uint32_t *) list[i];
 80040d2:	7bfb      	ldrb	r3, [r7, #15]
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	4413      	add	r3, r2
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	60bb      	str	r3, [r7, #8]
		DECREMENT_TIMER(*timer);
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d004      	beq.n	80040f0 <systickUpdateTimerList+0x30>
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	1e5a      	subs	r2, r3, #1
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	601a      	str	r2, [r3, #0]
	for (i = 0; i < (arraySize); ++i)
 80040f0:	7bfb      	ldrb	r3, [r7, #15]
 80040f2:	3301      	adds	r3, #1
 80040f4:	73fb      	strb	r3, [r7, #15]
 80040f6:	7bfa      	ldrb	r2, [r7, #15]
 80040f8:	78fb      	ldrb	r3, [r7, #3]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d3e9      	bcc.n	80040d2 <systickUpdateTimerList+0x12>
	}
    timerTrigger = false;
 80040fe:	4b04      	ldr	r3, [pc, #16]	; (8004110 <systickUpdateTimerList+0x50>)
 8004100:	2200      	movs	r2, #0
 8004102:	701a      	strb	r2, [r3, #0]
}
 8004104:	bf00      	nop
 8004106:	3714      	adds	r7, #20
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr
 8004110:	20000228 	.word	0x20000228

08004114 <systickDelay>:
 * of the while(1) loop, e.g. when initialization of a hardware component needs
 * time to perform one initialization step (e.g. if the datasheet of that component
 * demands a delay before doing the next initialization step).
 */
void systickDelay(uint32_t *timer, uint32_t delay)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
    systickSetMillis(timer, delay);
 800411e:	6839      	ldr	r1, [r7, #0]
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f7ff ff67 	bl	8003ff4 <systickSetMillis>
    while (!isSystickExpired(*timer))
 8004126:	e006      	b.n	8004136 <systickDelay+0x22>
    {
        if (timerTrigger == true)
 8004128:	4b0b      	ldr	r3, [pc, #44]	; (8004158 <systickDelay+0x44>)
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d002      	beq.n	8004136 <systickDelay+0x22>
        {
            systickUpdateTimer(timer);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f7ff ffad 	bl	8004090 <systickUpdateTimer>
    while (!isSystickExpired(*timer))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4618      	mov	r0, r3
 800413c:	f7ff ff8a 	bl	8004054 <isSystickExpired>
 8004140:	4603      	mov	r3, r0
 8004142:	f083 0301 	eor.w	r3, r3, #1
 8004146:	b2db      	uxtb	r3, r3
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1ed      	bne.n	8004128 <systickDelay+0x14>
        }
    }
}
 800414c:	bf00      	nop
 800414e:	bf00      	nop
 8004150:	3708      	adds	r7, #8
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	20000228 	.word	0x20000228

0800415c <__errno>:
 800415c:	4b01      	ldr	r3, [pc, #4]	; (8004164 <__errno+0x8>)
 800415e:	6818      	ldr	r0, [r3, #0]
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	20000020 	.word	0x20000020

08004168 <__libc_init_array>:
 8004168:	b570      	push	{r4, r5, r6, lr}
 800416a:	4d0d      	ldr	r5, [pc, #52]	; (80041a0 <__libc_init_array+0x38>)
 800416c:	4c0d      	ldr	r4, [pc, #52]	; (80041a4 <__libc_init_array+0x3c>)
 800416e:	1b64      	subs	r4, r4, r5
 8004170:	10a4      	asrs	r4, r4, #2
 8004172:	2600      	movs	r6, #0
 8004174:	42a6      	cmp	r6, r4
 8004176:	d109      	bne.n	800418c <__libc_init_array+0x24>
 8004178:	4d0b      	ldr	r5, [pc, #44]	; (80041a8 <__libc_init_array+0x40>)
 800417a:	4c0c      	ldr	r4, [pc, #48]	; (80041ac <__libc_init_array+0x44>)
 800417c:	f003 ffbe 	bl	80080fc <_init>
 8004180:	1b64      	subs	r4, r4, r5
 8004182:	10a4      	asrs	r4, r4, #2
 8004184:	2600      	movs	r6, #0
 8004186:	42a6      	cmp	r6, r4
 8004188:	d105      	bne.n	8004196 <__libc_init_array+0x2e>
 800418a:	bd70      	pop	{r4, r5, r6, pc}
 800418c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004190:	4798      	blx	r3
 8004192:	3601      	adds	r6, #1
 8004194:	e7ee      	b.n	8004174 <__libc_init_array+0xc>
 8004196:	f855 3b04 	ldr.w	r3, [r5], #4
 800419a:	4798      	blx	r3
 800419c:	3601      	adds	r6, #1
 800419e:	e7f2      	b.n	8004186 <__libc_init_array+0x1e>
 80041a0:	0800b4a0 	.word	0x0800b4a0
 80041a4:	0800b4a0 	.word	0x0800b4a0
 80041a8:	0800b4a0 	.word	0x0800b4a0
 80041ac:	0800b4a4 	.word	0x0800b4a4

080041b0 <malloc>:
 80041b0:	4b02      	ldr	r3, [pc, #8]	; (80041bc <malloc+0xc>)
 80041b2:	4601      	mov	r1, r0
 80041b4:	6818      	ldr	r0, [r3, #0]
 80041b6:	f000 b877 	b.w	80042a8 <_malloc_r>
 80041ba:	bf00      	nop
 80041bc:	20000020 	.word	0x20000020

080041c0 <memset>:
 80041c0:	4402      	add	r2, r0
 80041c2:	4603      	mov	r3, r0
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d100      	bne.n	80041ca <memset+0xa>
 80041c8:	4770      	bx	lr
 80041ca:	f803 1b01 	strb.w	r1, [r3], #1
 80041ce:	e7f9      	b.n	80041c4 <memset+0x4>

080041d0 <_free_r>:
 80041d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80041d2:	2900      	cmp	r1, #0
 80041d4:	d044      	beq.n	8004260 <_free_r+0x90>
 80041d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041da:	9001      	str	r0, [sp, #4]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	f1a1 0404 	sub.w	r4, r1, #4
 80041e2:	bfb8      	it	lt
 80041e4:	18e4      	addlt	r4, r4, r3
 80041e6:	f001 fbdb 	bl	80059a0 <__malloc_lock>
 80041ea:	4a1e      	ldr	r2, [pc, #120]	; (8004264 <_free_r+0x94>)
 80041ec:	9801      	ldr	r0, [sp, #4]
 80041ee:	6813      	ldr	r3, [r2, #0]
 80041f0:	b933      	cbnz	r3, 8004200 <_free_r+0x30>
 80041f2:	6063      	str	r3, [r4, #4]
 80041f4:	6014      	str	r4, [r2, #0]
 80041f6:	b003      	add	sp, #12
 80041f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80041fc:	f001 bbd6 	b.w	80059ac <__malloc_unlock>
 8004200:	42a3      	cmp	r3, r4
 8004202:	d908      	bls.n	8004216 <_free_r+0x46>
 8004204:	6825      	ldr	r5, [r4, #0]
 8004206:	1961      	adds	r1, r4, r5
 8004208:	428b      	cmp	r3, r1
 800420a:	bf01      	itttt	eq
 800420c:	6819      	ldreq	r1, [r3, #0]
 800420e:	685b      	ldreq	r3, [r3, #4]
 8004210:	1949      	addeq	r1, r1, r5
 8004212:	6021      	streq	r1, [r4, #0]
 8004214:	e7ed      	b.n	80041f2 <_free_r+0x22>
 8004216:	461a      	mov	r2, r3
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	b10b      	cbz	r3, 8004220 <_free_r+0x50>
 800421c:	42a3      	cmp	r3, r4
 800421e:	d9fa      	bls.n	8004216 <_free_r+0x46>
 8004220:	6811      	ldr	r1, [r2, #0]
 8004222:	1855      	adds	r5, r2, r1
 8004224:	42a5      	cmp	r5, r4
 8004226:	d10b      	bne.n	8004240 <_free_r+0x70>
 8004228:	6824      	ldr	r4, [r4, #0]
 800422a:	4421      	add	r1, r4
 800422c:	1854      	adds	r4, r2, r1
 800422e:	42a3      	cmp	r3, r4
 8004230:	6011      	str	r1, [r2, #0]
 8004232:	d1e0      	bne.n	80041f6 <_free_r+0x26>
 8004234:	681c      	ldr	r4, [r3, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	6053      	str	r3, [r2, #4]
 800423a:	4421      	add	r1, r4
 800423c:	6011      	str	r1, [r2, #0]
 800423e:	e7da      	b.n	80041f6 <_free_r+0x26>
 8004240:	d902      	bls.n	8004248 <_free_r+0x78>
 8004242:	230c      	movs	r3, #12
 8004244:	6003      	str	r3, [r0, #0]
 8004246:	e7d6      	b.n	80041f6 <_free_r+0x26>
 8004248:	6825      	ldr	r5, [r4, #0]
 800424a:	1961      	adds	r1, r4, r5
 800424c:	428b      	cmp	r3, r1
 800424e:	bf04      	itt	eq
 8004250:	6819      	ldreq	r1, [r3, #0]
 8004252:	685b      	ldreq	r3, [r3, #4]
 8004254:	6063      	str	r3, [r4, #4]
 8004256:	bf04      	itt	eq
 8004258:	1949      	addeq	r1, r1, r5
 800425a:	6021      	streq	r1, [r4, #0]
 800425c:	6054      	str	r4, [r2, #4]
 800425e:	e7ca      	b.n	80041f6 <_free_r+0x26>
 8004260:	b003      	add	sp, #12
 8004262:	bd30      	pop	{r4, r5, pc}
 8004264:	20000238 	.word	0x20000238

08004268 <sbrk_aligned>:
 8004268:	b570      	push	{r4, r5, r6, lr}
 800426a:	4e0e      	ldr	r6, [pc, #56]	; (80042a4 <sbrk_aligned+0x3c>)
 800426c:	460c      	mov	r4, r1
 800426e:	6831      	ldr	r1, [r6, #0]
 8004270:	4605      	mov	r5, r0
 8004272:	b911      	cbnz	r1, 800427a <sbrk_aligned+0x12>
 8004274:	f000 fcf6 	bl	8004c64 <_sbrk_r>
 8004278:	6030      	str	r0, [r6, #0]
 800427a:	4621      	mov	r1, r4
 800427c:	4628      	mov	r0, r5
 800427e:	f000 fcf1 	bl	8004c64 <_sbrk_r>
 8004282:	1c43      	adds	r3, r0, #1
 8004284:	d00a      	beq.n	800429c <sbrk_aligned+0x34>
 8004286:	1cc4      	adds	r4, r0, #3
 8004288:	f024 0403 	bic.w	r4, r4, #3
 800428c:	42a0      	cmp	r0, r4
 800428e:	d007      	beq.n	80042a0 <sbrk_aligned+0x38>
 8004290:	1a21      	subs	r1, r4, r0
 8004292:	4628      	mov	r0, r5
 8004294:	f000 fce6 	bl	8004c64 <_sbrk_r>
 8004298:	3001      	adds	r0, #1
 800429a:	d101      	bne.n	80042a0 <sbrk_aligned+0x38>
 800429c:	f04f 34ff 	mov.w	r4, #4294967295
 80042a0:	4620      	mov	r0, r4
 80042a2:	bd70      	pop	{r4, r5, r6, pc}
 80042a4:	2000023c 	.word	0x2000023c

080042a8 <_malloc_r>:
 80042a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042ac:	1ccd      	adds	r5, r1, #3
 80042ae:	f025 0503 	bic.w	r5, r5, #3
 80042b2:	3508      	adds	r5, #8
 80042b4:	2d0c      	cmp	r5, #12
 80042b6:	bf38      	it	cc
 80042b8:	250c      	movcc	r5, #12
 80042ba:	2d00      	cmp	r5, #0
 80042bc:	4607      	mov	r7, r0
 80042be:	db01      	blt.n	80042c4 <_malloc_r+0x1c>
 80042c0:	42a9      	cmp	r1, r5
 80042c2:	d905      	bls.n	80042d0 <_malloc_r+0x28>
 80042c4:	230c      	movs	r3, #12
 80042c6:	603b      	str	r3, [r7, #0]
 80042c8:	2600      	movs	r6, #0
 80042ca:	4630      	mov	r0, r6
 80042cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042d0:	4e2e      	ldr	r6, [pc, #184]	; (800438c <_malloc_r+0xe4>)
 80042d2:	f001 fb65 	bl	80059a0 <__malloc_lock>
 80042d6:	6833      	ldr	r3, [r6, #0]
 80042d8:	461c      	mov	r4, r3
 80042da:	bb34      	cbnz	r4, 800432a <_malloc_r+0x82>
 80042dc:	4629      	mov	r1, r5
 80042de:	4638      	mov	r0, r7
 80042e0:	f7ff ffc2 	bl	8004268 <sbrk_aligned>
 80042e4:	1c43      	adds	r3, r0, #1
 80042e6:	4604      	mov	r4, r0
 80042e8:	d14d      	bne.n	8004386 <_malloc_r+0xde>
 80042ea:	6834      	ldr	r4, [r6, #0]
 80042ec:	4626      	mov	r6, r4
 80042ee:	2e00      	cmp	r6, #0
 80042f0:	d140      	bne.n	8004374 <_malloc_r+0xcc>
 80042f2:	6823      	ldr	r3, [r4, #0]
 80042f4:	4631      	mov	r1, r6
 80042f6:	4638      	mov	r0, r7
 80042f8:	eb04 0803 	add.w	r8, r4, r3
 80042fc:	f000 fcb2 	bl	8004c64 <_sbrk_r>
 8004300:	4580      	cmp	r8, r0
 8004302:	d13a      	bne.n	800437a <_malloc_r+0xd2>
 8004304:	6821      	ldr	r1, [r4, #0]
 8004306:	3503      	adds	r5, #3
 8004308:	1a6d      	subs	r5, r5, r1
 800430a:	f025 0503 	bic.w	r5, r5, #3
 800430e:	3508      	adds	r5, #8
 8004310:	2d0c      	cmp	r5, #12
 8004312:	bf38      	it	cc
 8004314:	250c      	movcc	r5, #12
 8004316:	4629      	mov	r1, r5
 8004318:	4638      	mov	r0, r7
 800431a:	f7ff ffa5 	bl	8004268 <sbrk_aligned>
 800431e:	3001      	adds	r0, #1
 8004320:	d02b      	beq.n	800437a <_malloc_r+0xd2>
 8004322:	6823      	ldr	r3, [r4, #0]
 8004324:	442b      	add	r3, r5
 8004326:	6023      	str	r3, [r4, #0]
 8004328:	e00e      	b.n	8004348 <_malloc_r+0xa0>
 800432a:	6822      	ldr	r2, [r4, #0]
 800432c:	1b52      	subs	r2, r2, r5
 800432e:	d41e      	bmi.n	800436e <_malloc_r+0xc6>
 8004330:	2a0b      	cmp	r2, #11
 8004332:	d916      	bls.n	8004362 <_malloc_r+0xba>
 8004334:	1961      	adds	r1, r4, r5
 8004336:	42a3      	cmp	r3, r4
 8004338:	6025      	str	r5, [r4, #0]
 800433a:	bf18      	it	ne
 800433c:	6059      	strne	r1, [r3, #4]
 800433e:	6863      	ldr	r3, [r4, #4]
 8004340:	bf08      	it	eq
 8004342:	6031      	streq	r1, [r6, #0]
 8004344:	5162      	str	r2, [r4, r5]
 8004346:	604b      	str	r3, [r1, #4]
 8004348:	4638      	mov	r0, r7
 800434a:	f104 060b 	add.w	r6, r4, #11
 800434e:	f001 fb2d 	bl	80059ac <__malloc_unlock>
 8004352:	f026 0607 	bic.w	r6, r6, #7
 8004356:	1d23      	adds	r3, r4, #4
 8004358:	1af2      	subs	r2, r6, r3
 800435a:	d0b6      	beq.n	80042ca <_malloc_r+0x22>
 800435c:	1b9b      	subs	r3, r3, r6
 800435e:	50a3      	str	r3, [r4, r2]
 8004360:	e7b3      	b.n	80042ca <_malloc_r+0x22>
 8004362:	6862      	ldr	r2, [r4, #4]
 8004364:	42a3      	cmp	r3, r4
 8004366:	bf0c      	ite	eq
 8004368:	6032      	streq	r2, [r6, #0]
 800436a:	605a      	strne	r2, [r3, #4]
 800436c:	e7ec      	b.n	8004348 <_malloc_r+0xa0>
 800436e:	4623      	mov	r3, r4
 8004370:	6864      	ldr	r4, [r4, #4]
 8004372:	e7b2      	b.n	80042da <_malloc_r+0x32>
 8004374:	4634      	mov	r4, r6
 8004376:	6876      	ldr	r6, [r6, #4]
 8004378:	e7b9      	b.n	80042ee <_malloc_r+0x46>
 800437a:	230c      	movs	r3, #12
 800437c:	603b      	str	r3, [r7, #0]
 800437e:	4638      	mov	r0, r7
 8004380:	f001 fb14 	bl	80059ac <__malloc_unlock>
 8004384:	e7a1      	b.n	80042ca <_malloc_r+0x22>
 8004386:	6025      	str	r5, [r4, #0]
 8004388:	e7de      	b.n	8004348 <_malloc_r+0xa0>
 800438a:	bf00      	nop
 800438c:	20000238 	.word	0x20000238

08004390 <__cvt>:
 8004390:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004394:	ec55 4b10 	vmov	r4, r5, d0
 8004398:	2d00      	cmp	r5, #0
 800439a:	460e      	mov	r6, r1
 800439c:	4619      	mov	r1, r3
 800439e:	462b      	mov	r3, r5
 80043a0:	bfbb      	ittet	lt
 80043a2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80043a6:	461d      	movlt	r5, r3
 80043a8:	2300      	movge	r3, #0
 80043aa:	232d      	movlt	r3, #45	; 0x2d
 80043ac:	700b      	strb	r3, [r1, #0]
 80043ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80043b0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80043b4:	4691      	mov	r9, r2
 80043b6:	f023 0820 	bic.w	r8, r3, #32
 80043ba:	bfbc      	itt	lt
 80043bc:	4622      	movlt	r2, r4
 80043be:	4614      	movlt	r4, r2
 80043c0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80043c4:	d005      	beq.n	80043d2 <__cvt+0x42>
 80043c6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80043ca:	d100      	bne.n	80043ce <__cvt+0x3e>
 80043cc:	3601      	adds	r6, #1
 80043ce:	2102      	movs	r1, #2
 80043d0:	e000      	b.n	80043d4 <__cvt+0x44>
 80043d2:	2103      	movs	r1, #3
 80043d4:	ab03      	add	r3, sp, #12
 80043d6:	9301      	str	r3, [sp, #4]
 80043d8:	ab02      	add	r3, sp, #8
 80043da:	9300      	str	r3, [sp, #0]
 80043dc:	ec45 4b10 	vmov	d0, r4, r5
 80043e0:	4653      	mov	r3, sl
 80043e2:	4632      	mov	r2, r6
 80043e4:	f000 fcdc 	bl	8004da0 <_dtoa_r>
 80043e8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80043ec:	4607      	mov	r7, r0
 80043ee:	d102      	bne.n	80043f6 <__cvt+0x66>
 80043f0:	f019 0f01 	tst.w	r9, #1
 80043f4:	d022      	beq.n	800443c <__cvt+0xac>
 80043f6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80043fa:	eb07 0906 	add.w	r9, r7, r6
 80043fe:	d110      	bne.n	8004422 <__cvt+0x92>
 8004400:	783b      	ldrb	r3, [r7, #0]
 8004402:	2b30      	cmp	r3, #48	; 0x30
 8004404:	d10a      	bne.n	800441c <__cvt+0x8c>
 8004406:	2200      	movs	r2, #0
 8004408:	2300      	movs	r3, #0
 800440a:	4620      	mov	r0, r4
 800440c:	4629      	mov	r1, r5
 800440e:	f7fc fb63 	bl	8000ad8 <__aeabi_dcmpeq>
 8004412:	b918      	cbnz	r0, 800441c <__cvt+0x8c>
 8004414:	f1c6 0601 	rsb	r6, r6, #1
 8004418:	f8ca 6000 	str.w	r6, [sl]
 800441c:	f8da 3000 	ldr.w	r3, [sl]
 8004420:	4499      	add	r9, r3
 8004422:	2200      	movs	r2, #0
 8004424:	2300      	movs	r3, #0
 8004426:	4620      	mov	r0, r4
 8004428:	4629      	mov	r1, r5
 800442a:	f7fc fb55 	bl	8000ad8 <__aeabi_dcmpeq>
 800442e:	b108      	cbz	r0, 8004434 <__cvt+0xa4>
 8004430:	f8cd 900c 	str.w	r9, [sp, #12]
 8004434:	2230      	movs	r2, #48	; 0x30
 8004436:	9b03      	ldr	r3, [sp, #12]
 8004438:	454b      	cmp	r3, r9
 800443a:	d307      	bcc.n	800444c <__cvt+0xbc>
 800443c:	9b03      	ldr	r3, [sp, #12]
 800443e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004440:	1bdb      	subs	r3, r3, r7
 8004442:	4638      	mov	r0, r7
 8004444:	6013      	str	r3, [r2, #0]
 8004446:	b004      	add	sp, #16
 8004448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800444c:	1c59      	adds	r1, r3, #1
 800444e:	9103      	str	r1, [sp, #12]
 8004450:	701a      	strb	r2, [r3, #0]
 8004452:	e7f0      	b.n	8004436 <__cvt+0xa6>

08004454 <__exponent>:
 8004454:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004456:	4603      	mov	r3, r0
 8004458:	2900      	cmp	r1, #0
 800445a:	bfb8      	it	lt
 800445c:	4249      	neglt	r1, r1
 800445e:	f803 2b02 	strb.w	r2, [r3], #2
 8004462:	bfb4      	ite	lt
 8004464:	222d      	movlt	r2, #45	; 0x2d
 8004466:	222b      	movge	r2, #43	; 0x2b
 8004468:	2909      	cmp	r1, #9
 800446a:	7042      	strb	r2, [r0, #1]
 800446c:	dd2a      	ble.n	80044c4 <__exponent+0x70>
 800446e:	f10d 0407 	add.w	r4, sp, #7
 8004472:	46a4      	mov	ip, r4
 8004474:	270a      	movs	r7, #10
 8004476:	46a6      	mov	lr, r4
 8004478:	460a      	mov	r2, r1
 800447a:	fb91 f6f7 	sdiv	r6, r1, r7
 800447e:	fb07 1516 	mls	r5, r7, r6, r1
 8004482:	3530      	adds	r5, #48	; 0x30
 8004484:	2a63      	cmp	r2, #99	; 0x63
 8004486:	f104 34ff 	add.w	r4, r4, #4294967295
 800448a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800448e:	4631      	mov	r1, r6
 8004490:	dcf1      	bgt.n	8004476 <__exponent+0x22>
 8004492:	3130      	adds	r1, #48	; 0x30
 8004494:	f1ae 0502 	sub.w	r5, lr, #2
 8004498:	f804 1c01 	strb.w	r1, [r4, #-1]
 800449c:	1c44      	adds	r4, r0, #1
 800449e:	4629      	mov	r1, r5
 80044a0:	4561      	cmp	r1, ip
 80044a2:	d30a      	bcc.n	80044ba <__exponent+0x66>
 80044a4:	f10d 0209 	add.w	r2, sp, #9
 80044a8:	eba2 020e 	sub.w	r2, r2, lr
 80044ac:	4565      	cmp	r5, ip
 80044ae:	bf88      	it	hi
 80044b0:	2200      	movhi	r2, #0
 80044b2:	4413      	add	r3, r2
 80044b4:	1a18      	subs	r0, r3, r0
 80044b6:	b003      	add	sp, #12
 80044b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80044be:	f804 2f01 	strb.w	r2, [r4, #1]!
 80044c2:	e7ed      	b.n	80044a0 <__exponent+0x4c>
 80044c4:	2330      	movs	r3, #48	; 0x30
 80044c6:	3130      	adds	r1, #48	; 0x30
 80044c8:	7083      	strb	r3, [r0, #2]
 80044ca:	70c1      	strb	r1, [r0, #3]
 80044cc:	1d03      	adds	r3, r0, #4
 80044ce:	e7f1      	b.n	80044b4 <__exponent+0x60>

080044d0 <_printf_float>:
 80044d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044d4:	ed2d 8b02 	vpush	{d8}
 80044d8:	b08d      	sub	sp, #52	; 0x34
 80044da:	460c      	mov	r4, r1
 80044dc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80044e0:	4616      	mov	r6, r2
 80044e2:	461f      	mov	r7, r3
 80044e4:	4605      	mov	r5, r0
 80044e6:	f001 fa49 	bl	800597c <_localeconv_r>
 80044ea:	f8d0 a000 	ldr.w	sl, [r0]
 80044ee:	4650      	mov	r0, sl
 80044f0:	f7fb fe76 	bl	80001e0 <strlen>
 80044f4:	2300      	movs	r3, #0
 80044f6:	930a      	str	r3, [sp, #40]	; 0x28
 80044f8:	6823      	ldr	r3, [r4, #0]
 80044fa:	9305      	str	r3, [sp, #20]
 80044fc:	f8d8 3000 	ldr.w	r3, [r8]
 8004500:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004504:	3307      	adds	r3, #7
 8004506:	f023 0307 	bic.w	r3, r3, #7
 800450a:	f103 0208 	add.w	r2, r3, #8
 800450e:	f8c8 2000 	str.w	r2, [r8]
 8004512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004516:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800451a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800451e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004522:	9307      	str	r3, [sp, #28]
 8004524:	f8cd 8018 	str.w	r8, [sp, #24]
 8004528:	ee08 0a10 	vmov	s16, r0
 800452c:	4b9f      	ldr	r3, [pc, #636]	; (80047ac <_printf_float+0x2dc>)
 800452e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004532:	f04f 32ff 	mov.w	r2, #4294967295
 8004536:	f7fc fb01 	bl	8000b3c <__aeabi_dcmpun>
 800453a:	bb88      	cbnz	r0, 80045a0 <_printf_float+0xd0>
 800453c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004540:	4b9a      	ldr	r3, [pc, #616]	; (80047ac <_printf_float+0x2dc>)
 8004542:	f04f 32ff 	mov.w	r2, #4294967295
 8004546:	f7fc fadb 	bl	8000b00 <__aeabi_dcmple>
 800454a:	bb48      	cbnz	r0, 80045a0 <_printf_float+0xd0>
 800454c:	2200      	movs	r2, #0
 800454e:	2300      	movs	r3, #0
 8004550:	4640      	mov	r0, r8
 8004552:	4649      	mov	r1, r9
 8004554:	f7fc faca 	bl	8000aec <__aeabi_dcmplt>
 8004558:	b110      	cbz	r0, 8004560 <_printf_float+0x90>
 800455a:	232d      	movs	r3, #45	; 0x2d
 800455c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004560:	4b93      	ldr	r3, [pc, #588]	; (80047b0 <_printf_float+0x2e0>)
 8004562:	4894      	ldr	r0, [pc, #592]	; (80047b4 <_printf_float+0x2e4>)
 8004564:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004568:	bf94      	ite	ls
 800456a:	4698      	movls	r8, r3
 800456c:	4680      	movhi	r8, r0
 800456e:	2303      	movs	r3, #3
 8004570:	6123      	str	r3, [r4, #16]
 8004572:	9b05      	ldr	r3, [sp, #20]
 8004574:	f023 0204 	bic.w	r2, r3, #4
 8004578:	6022      	str	r2, [r4, #0]
 800457a:	f04f 0900 	mov.w	r9, #0
 800457e:	9700      	str	r7, [sp, #0]
 8004580:	4633      	mov	r3, r6
 8004582:	aa0b      	add	r2, sp, #44	; 0x2c
 8004584:	4621      	mov	r1, r4
 8004586:	4628      	mov	r0, r5
 8004588:	f000 f9d8 	bl	800493c <_printf_common>
 800458c:	3001      	adds	r0, #1
 800458e:	f040 8090 	bne.w	80046b2 <_printf_float+0x1e2>
 8004592:	f04f 30ff 	mov.w	r0, #4294967295
 8004596:	b00d      	add	sp, #52	; 0x34
 8004598:	ecbd 8b02 	vpop	{d8}
 800459c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045a0:	4642      	mov	r2, r8
 80045a2:	464b      	mov	r3, r9
 80045a4:	4640      	mov	r0, r8
 80045a6:	4649      	mov	r1, r9
 80045a8:	f7fc fac8 	bl	8000b3c <__aeabi_dcmpun>
 80045ac:	b140      	cbz	r0, 80045c0 <_printf_float+0xf0>
 80045ae:	464b      	mov	r3, r9
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	bfbc      	itt	lt
 80045b4:	232d      	movlt	r3, #45	; 0x2d
 80045b6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80045ba:	487f      	ldr	r0, [pc, #508]	; (80047b8 <_printf_float+0x2e8>)
 80045bc:	4b7f      	ldr	r3, [pc, #508]	; (80047bc <_printf_float+0x2ec>)
 80045be:	e7d1      	b.n	8004564 <_printf_float+0x94>
 80045c0:	6863      	ldr	r3, [r4, #4]
 80045c2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80045c6:	9206      	str	r2, [sp, #24]
 80045c8:	1c5a      	adds	r2, r3, #1
 80045ca:	d13f      	bne.n	800464c <_printf_float+0x17c>
 80045cc:	2306      	movs	r3, #6
 80045ce:	6063      	str	r3, [r4, #4]
 80045d0:	9b05      	ldr	r3, [sp, #20]
 80045d2:	6861      	ldr	r1, [r4, #4]
 80045d4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80045d8:	2300      	movs	r3, #0
 80045da:	9303      	str	r3, [sp, #12]
 80045dc:	ab0a      	add	r3, sp, #40	; 0x28
 80045de:	e9cd b301 	strd	fp, r3, [sp, #4]
 80045e2:	ab09      	add	r3, sp, #36	; 0x24
 80045e4:	ec49 8b10 	vmov	d0, r8, r9
 80045e8:	9300      	str	r3, [sp, #0]
 80045ea:	6022      	str	r2, [r4, #0]
 80045ec:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80045f0:	4628      	mov	r0, r5
 80045f2:	f7ff fecd 	bl	8004390 <__cvt>
 80045f6:	9b06      	ldr	r3, [sp, #24]
 80045f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80045fa:	2b47      	cmp	r3, #71	; 0x47
 80045fc:	4680      	mov	r8, r0
 80045fe:	d108      	bne.n	8004612 <_printf_float+0x142>
 8004600:	1cc8      	adds	r0, r1, #3
 8004602:	db02      	blt.n	800460a <_printf_float+0x13a>
 8004604:	6863      	ldr	r3, [r4, #4]
 8004606:	4299      	cmp	r1, r3
 8004608:	dd41      	ble.n	800468e <_printf_float+0x1be>
 800460a:	f1ab 0b02 	sub.w	fp, fp, #2
 800460e:	fa5f fb8b 	uxtb.w	fp, fp
 8004612:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004616:	d820      	bhi.n	800465a <_printf_float+0x18a>
 8004618:	3901      	subs	r1, #1
 800461a:	465a      	mov	r2, fp
 800461c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004620:	9109      	str	r1, [sp, #36]	; 0x24
 8004622:	f7ff ff17 	bl	8004454 <__exponent>
 8004626:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004628:	1813      	adds	r3, r2, r0
 800462a:	2a01      	cmp	r2, #1
 800462c:	4681      	mov	r9, r0
 800462e:	6123      	str	r3, [r4, #16]
 8004630:	dc02      	bgt.n	8004638 <_printf_float+0x168>
 8004632:	6822      	ldr	r2, [r4, #0]
 8004634:	07d2      	lsls	r2, r2, #31
 8004636:	d501      	bpl.n	800463c <_printf_float+0x16c>
 8004638:	3301      	adds	r3, #1
 800463a:	6123      	str	r3, [r4, #16]
 800463c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004640:	2b00      	cmp	r3, #0
 8004642:	d09c      	beq.n	800457e <_printf_float+0xae>
 8004644:	232d      	movs	r3, #45	; 0x2d
 8004646:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800464a:	e798      	b.n	800457e <_printf_float+0xae>
 800464c:	9a06      	ldr	r2, [sp, #24]
 800464e:	2a47      	cmp	r2, #71	; 0x47
 8004650:	d1be      	bne.n	80045d0 <_printf_float+0x100>
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1bc      	bne.n	80045d0 <_printf_float+0x100>
 8004656:	2301      	movs	r3, #1
 8004658:	e7b9      	b.n	80045ce <_printf_float+0xfe>
 800465a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800465e:	d118      	bne.n	8004692 <_printf_float+0x1c2>
 8004660:	2900      	cmp	r1, #0
 8004662:	6863      	ldr	r3, [r4, #4]
 8004664:	dd0b      	ble.n	800467e <_printf_float+0x1ae>
 8004666:	6121      	str	r1, [r4, #16]
 8004668:	b913      	cbnz	r3, 8004670 <_printf_float+0x1a0>
 800466a:	6822      	ldr	r2, [r4, #0]
 800466c:	07d0      	lsls	r0, r2, #31
 800466e:	d502      	bpl.n	8004676 <_printf_float+0x1a6>
 8004670:	3301      	adds	r3, #1
 8004672:	440b      	add	r3, r1
 8004674:	6123      	str	r3, [r4, #16]
 8004676:	65a1      	str	r1, [r4, #88]	; 0x58
 8004678:	f04f 0900 	mov.w	r9, #0
 800467c:	e7de      	b.n	800463c <_printf_float+0x16c>
 800467e:	b913      	cbnz	r3, 8004686 <_printf_float+0x1b6>
 8004680:	6822      	ldr	r2, [r4, #0]
 8004682:	07d2      	lsls	r2, r2, #31
 8004684:	d501      	bpl.n	800468a <_printf_float+0x1ba>
 8004686:	3302      	adds	r3, #2
 8004688:	e7f4      	b.n	8004674 <_printf_float+0x1a4>
 800468a:	2301      	movs	r3, #1
 800468c:	e7f2      	b.n	8004674 <_printf_float+0x1a4>
 800468e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004692:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004694:	4299      	cmp	r1, r3
 8004696:	db05      	blt.n	80046a4 <_printf_float+0x1d4>
 8004698:	6823      	ldr	r3, [r4, #0]
 800469a:	6121      	str	r1, [r4, #16]
 800469c:	07d8      	lsls	r0, r3, #31
 800469e:	d5ea      	bpl.n	8004676 <_printf_float+0x1a6>
 80046a0:	1c4b      	adds	r3, r1, #1
 80046a2:	e7e7      	b.n	8004674 <_printf_float+0x1a4>
 80046a4:	2900      	cmp	r1, #0
 80046a6:	bfd4      	ite	le
 80046a8:	f1c1 0202 	rsble	r2, r1, #2
 80046ac:	2201      	movgt	r2, #1
 80046ae:	4413      	add	r3, r2
 80046b0:	e7e0      	b.n	8004674 <_printf_float+0x1a4>
 80046b2:	6823      	ldr	r3, [r4, #0]
 80046b4:	055a      	lsls	r2, r3, #21
 80046b6:	d407      	bmi.n	80046c8 <_printf_float+0x1f8>
 80046b8:	6923      	ldr	r3, [r4, #16]
 80046ba:	4642      	mov	r2, r8
 80046bc:	4631      	mov	r1, r6
 80046be:	4628      	mov	r0, r5
 80046c0:	47b8      	blx	r7
 80046c2:	3001      	adds	r0, #1
 80046c4:	d12c      	bne.n	8004720 <_printf_float+0x250>
 80046c6:	e764      	b.n	8004592 <_printf_float+0xc2>
 80046c8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80046cc:	f240 80e0 	bls.w	8004890 <_printf_float+0x3c0>
 80046d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80046d4:	2200      	movs	r2, #0
 80046d6:	2300      	movs	r3, #0
 80046d8:	f7fc f9fe 	bl	8000ad8 <__aeabi_dcmpeq>
 80046dc:	2800      	cmp	r0, #0
 80046de:	d034      	beq.n	800474a <_printf_float+0x27a>
 80046e0:	4a37      	ldr	r2, [pc, #220]	; (80047c0 <_printf_float+0x2f0>)
 80046e2:	2301      	movs	r3, #1
 80046e4:	4631      	mov	r1, r6
 80046e6:	4628      	mov	r0, r5
 80046e8:	47b8      	blx	r7
 80046ea:	3001      	adds	r0, #1
 80046ec:	f43f af51 	beq.w	8004592 <_printf_float+0xc2>
 80046f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80046f4:	429a      	cmp	r2, r3
 80046f6:	db02      	blt.n	80046fe <_printf_float+0x22e>
 80046f8:	6823      	ldr	r3, [r4, #0]
 80046fa:	07d8      	lsls	r0, r3, #31
 80046fc:	d510      	bpl.n	8004720 <_printf_float+0x250>
 80046fe:	ee18 3a10 	vmov	r3, s16
 8004702:	4652      	mov	r2, sl
 8004704:	4631      	mov	r1, r6
 8004706:	4628      	mov	r0, r5
 8004708:	47b8      	blx	r7
 800470a:	3001      	adds	r0, #1
 800470c:	f43f af41 	beq.w	8004592 <_printf_float+0xc2>
 8004710:	f04f 0800 	mov.w	r8, #0
 8004714:	f104 091a 	add.w	r9, r4, #26
 8004718:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800471a:	3b01      	subs	r3, #1
 800471c:	4543      	cmp	r3, r8
 800471e:	dc09      	bgt.n	8004734 <_printf_float+0x264>
 8004720:	6823      	ldr	r3, [r4, #0]
 8004722:	079b      	lsls	r3, r3, #30
 8004724:	f100 8105 	bmi.w	8004932 <_printf_float+0x462>
 8004728:	68e0      	ldr	r0, [r4, #12]
 800472a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800472c:	4298      	cmp	r0, r3
 800472e:	bfb8      	it	lt
 8004730:	4618      	movlt	r0, r3
 8004732:	e730      	b.n	8004596 <_printf_float+0xc6>
 8004734:	2301      	movs	r3, #1
 8004736:	464a      	mov	r2, r9
 8004738:	4631      	mov	r1, r6
 800473a:	4628      	mov	r0, r5
 800473c:	47b8      	blx	r7
 800473e:	3001      	adds	r0, #1
 8004740:	f43f af27 	beq.w	8004592 <_printf_float+0xc2>
 8004744:	f108 0801 	add.w	r8, r8, #1
 8004748:	e7e6      	b.n	8004718 <_printf_float+0x248>
 800474a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800474c:	2b00      	cmp	r3, #0
 800474e:	dc39      	bgt.n	80047c4 <_printf_float+0x2f4>
 8004750:	4a1b      	ldr	r2, [pc, #108]	; (80047c0 <_printf_float+0x2f0>)
 8004752:	2301      	movs	r3, #1
 8004754:	4631      	mov	r1, r6
 8004756:	4628      	mov	r0, r5
 8004758:	47b8      	blx	r7
 800475a:	3001      	adds	r0, #1
 800475c:	f43f af19 	beq.w	8004592 <_printf_float+0xc2>
 8004760:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004764:	4313      	orrs	r3, r2
 8004766:	d102      	bne.n	800476e <_printf_float+0x29e>
 8004768:	6823      	ldr	r3, [r4, #0]
 800476a:	07d9      	lsls	r1, r3, #31
 800476c:	d5d8      	bpl.n	8004720 <_printf_float+0x250>
 800476e:	ee18 3a10 	vmov	r3, s16
 8004772:	4652      	mov	r2, sl
 8004774:	4631      	mov	r1, r6
 8004776:	4628      	mov	r0, r5
 8004778:	47b8      	blx	r7
 800477a:	3001      	adds	r0, #1
 800477c:	f43f af09 	beq.w	8004592 <_printf_float+0xc2>
 8004780:	f04f 0900 	mov.w	r9, #0
 8004784:	f104 0a1a 	add.w	sl, r4, #26
 8004788:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800478a:	425b      	negs	r3, r3
 800478c:	454b      	cmp	r3, r9
 800478e:	dc01      	bgt.n	8004794 <_printf_float+0x2c4>
 8004790:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004792:	e792      	b.n	80046ba <_printf_float+0x1ea>
 8004794:	2301      	movs	r3, #1
 8004796:	4652      	mov	r2, sl
 8004798:	4631      	mov	r1, r6
 800479a:	4628      	mov	r0, r5
 800479c:	47b8      	blx	r7
 800479e:	3001      	adds	r0, #1
 80047a0:	f43f aef7 	beq.w	8004592 <_printf_float+0xc2>
 80047a4:	f109 0901 	add.w	r9, r9, #1
 80047a8:	e7ee      	b.n	8004788 <_printf_float+0x2b8>
 80047aa:	bf00      	nop
 80047ac:	7fefffff 	.word	0x7fefffff
 80047b0:	0800aeac 	.word	0x0800aeac
 80047b4:	0800aeb0 	.word	0x0800aeb0
 80047b8:	0800aeb8 	.word	0x0800aeb8
 80047bc:	0800aeb4 	.word	0x0800aeb4
 80047c0:	0800aebc 	.word	0x0800aebc
 80047c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80047c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80047c8:	429a      	cmp	r2, r3
 80047ca:	bfa8      	it	ge
 80047cc:	461a      	movge	r2, r3
 80047ce:	2a00      	cmp	r2, #0
 80047d0:	4691      	mov	r9, r2
 80047d2:	dc37      	bgt.n	8004844 <_printf_float+0x374>
 80047d4:	f04f 0b00 	mov.w	fp, #0
 80047d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80047dc:	f104 021a 	add.w	r2, r4, #26
 80047e0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80047e2:	9305      	str	r3, [sp, #20]
 80047e4:	eba3 0309 	sub.w	r3, r3, r9
 80047e8:	455b      	cmp	r3, fp
 80047ea:	dc33      	bgt.n	8004854 <_printf_float+0x384>
 80047ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80047f0:	429a      	cmp	r2, r3
 80047f2:	db3b      	blt.n	800486c <_printf_float+0x39c>
 80047f4:	6823      	ldr	r3, [r4, #0]
 80047f6:	07da      	lsls	r2, r3, #31
 80047f8:	d438      	bmi.n	800486c <_printf_float+0x39c>
 80047fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047fc:	9a05      	ldr	r2, [sp, #20]
 80047fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004800:	1a9a      	subs	r2, r3, r2
 8004802:	eba3 0901 	sub.w	r9, r3, r1
 8004806:	4591      	cmp	r9, r2
 8004808:	bfa8      	it	ge
 800480a:	4691      	movge	r9, r2
 800480c:	f1b9 0f00 	cmp.w	r9, #0
 8004810:	dc35      	bgt.n	800487e <_printf_float+0x3ae>
 8004812:	f04f 0800 	mov.w	r8, #0
 8004816:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800481a:	f104 0a1a 	add.w	sl, r4, #26
 800481e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004822:	1a9b      	subs	r3, r3, r2
 8004824:	eba3 0309 	sub.w	r3, r3, r9
 8004828:	4543      	cmp	r3, r8
 800482a:	f77f af79 	ble.w	8004720 <_printf_float+0x250>
 800482e:	2301      	movs	r3, #1
 8004830:	4652      	mov	r2, sl
 8004832:	4631      	mov	r1, r6
 8004834:	4628      	mov	r0, r5
 8004836:	47b8      	blx	r7
 8004838:	3001      	adds	r0, #1
 800483a:	f43f aeaa 	beq.w	8004592 <_printf_float+0xc2>
 800483e:	f108 0801 	add.w	r8, r8, #1
 8004842:	e7ec      	b.n	800481e <_printf_float+0x34e>
 8004844:	4613      	mov	r3, r2
 8004846:	4631      	mov	r1, r6
 8004848:	4642      	mov	r2, r8
 800484a:	4628      	mov	r0, r5
 800484c:	47b8      	blx	r7
 800484e:	3001      	adds	r0, #1
 8004850:	d1c0      	bne.n	80047d4 <_printf_float+0x304>
 8004852:	e69e      	b.n	8004592 <_printf_float+0xc2>
 8004854:	2301      	movs	r3, #1
 8004856:	4631      	mov	r1, r6
 8004858:	4628      	mov	r0, r5
 800485a:	9205      	str	r2, [sp, #20]
 800485c:	47b8      	blx	r7
 800485e:	3001      	adds	r0, #1
 8004860:	f43f ae97 	beq.w	8004592 <_printf_float+0xc2>
 8004864:	9a05      	ldr	r2, [sp, #20]
 8004866:	f10b 0b01 	add.w	fp, fp, #1
 800486a:	e7b9      	b.n	80047e0 <_printf_float+0x310>
 800486c:	ee18 3a10 	vmov	r3, s16
 8004870:	4652      	mov	r2, sl
 8004872:	4631      	mov	r1, r6
 8004874:	4628      	mov	r0, r5
 8004876:	47b8      	blx	r7
 8004878:	3001      	adds	r0, #1
 800487a:	d1be      	bne.n	80047fa <_printf_float+0x32a>
 800487c:	e689      	b.n	8004592 <_printf_float+0xc2>
 800487e:	9a05      	ldr	r2, [sp, #20]
 8004880:	464b      	mov	r3, r9
 8004882:	4442      	add	r2, r8
 8004884:	4631      	mov	r1, r6
 8004886:	4628      	mov	r0, r5
 8004888:	47b8      	blx	r7
 800488a:	3001      	adds	r0, #1
 800488c:	d1c1      	bne.n	8004812 <_printf_float+0x342>
 800488e:	e680      	b.n	8004592 <_printf_float+0xc2>
 8004890:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004892:	2a01      	cmp	r2, #1
 8004894:	dc01      	bgt.n	800489a <_printf_float+0x3ca>
 8004896:	07db      	lsls	r3, r3, #31
 8004898:	d538      	bpl.n	800490c <_printf_float+0x43c>
 800489a:	2301      	movs	r3, #1
 800489c:	4642      	mov	r2, r8
 800489e:	4631      	mov	r1, r6
 80048a0:	4628      	mov	r0, r5
 80048a2:	47b8      	blx	r7
 80048a4:	3001      	adds	r0, #1
 80048a6:	f43f ae74 	beq.w	8004592 <_printf_float+0xc2>
 80048aa:	ee18 3a10 	vmov	r3, s16
 80048ae:	4652      	mov	r2, sl
 80048b0:	4631      	mov	r1, r6
 80048b2:	4628      	mov	r0, r5
 80048b4:	47b8      	blx	r7
 80048b6:	3001      	adds	r0, #1
 80048b8:	f43f ae6b 	beq.w	8004592 <_printf_float+0xc2>
 80048bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80048c0:	2200      	movs	r2, #0
 80048c2:	2300      	movs	r3, #0
 80048c4:	f7fc f908 	bl	8000ad8 <__aeabi_dcmpeq>
 80048c8:	b9d8      	cbnz	r0, 8004902 <_printf_float+0x432>
 80048ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048cc:	f108 0201 	add.w	r2, r8, #1
 80048d0:	3b01      	subs	r3, #1
 80048d2:	4631      	mov	r1, r6
 80048d4:	4628      	mov	r0, r5
 80048d6:	47b8      	blx	r7
 80048d8:	3001      	adds	r0, #1
 80048da:	d10e      	bne.n	80048fa <_printf_float+0x42a>
 80048dc:	e659      	b.n	8004592 <_printf_float+0xc2>
 80048de:	2301      	movs	r3, #1
 80048e0:	4652      	mov	r2, sl
 80048e2:	4631      	mov	r1, r6
 80048e4:	4628      	mov	r0, r5
 80048e6:	47b8      	blx	r7
 80048e8:	3001      	adds	r0, #1
 80048ea:	f43f ae52 	beq.w	8004592 <_printf_float+0xc2>
 80048ee:	f108 0801 	add.w	r8, r8, #1
 80048f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048f4:	3b01      	subs	r3, #1
 80048f6:	4543      	cmp	r3, r8
 80048f8:	dcf1      	bgt.n	80048de <_printf_float+0x40e>
 80048fa:	464b      	mov	r3, r9
 80048fc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004900:	e6dc      	b.n	80046bc <_printf_float+0x1ec>
 8004902:	f04f 0800 	mov.w	r8, #0
 8004906:	f104 0a1a 	add.w	sl, r4, #26
 800490a:	e7f2      	b.n	80048f2 <_printf_float+0x422>
 800490c:	2301      	movs	r3, #1
 800490e:	4642      	mov	r2, r8
 8004910:	e7df      	b.n	80048d2 <_printf_float+0x402>
 8004912:	2301      	movs	r3, #1
 8004914:	464a      	mov	r2, r9
 8004916:	4631      	mov	r1, r6
 8004918:	4628      	mov	r0, r5
 800491a:	47b8      	blx	r7
 800491c:	3001      	adds	r0, #1
 800491e:	f43f ae38 	beq.w	8004592 <_printf_float+0xc2>
 8004922:	f108 0801 	add.w	r8, r8, #1
 8004926:	68e3      	ldr	r3, [r4, #12]
 8004928:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800492a:	1a5b      	subs	r3, r3, r1
 800492c:	4543      	cmp	r3, r8
 800492e:	dcf0      	bgt.n	8004912 <_printf_float+0x442>
 8004930:	e6fa      	b.n	8004728 <_printf_float+0x258>
 8004932:	f04f 0800 	mov.w	r8, #0
 8004936:	f104 0919 	add.w	r9, r4, #25
 800493a:	e7f4      	b.n	8004926 <_printf_float+0x456>

0800493c <_printf_common>:
 800493c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004940:	4616      	mov	r6, r2
 8004942:	4699      	mov	r9, r3
 8004944:	688a      	ldr	r2, [r1, #8]
 8004946:	690b      	ldr	r3, [r1, #16]
 8004948:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800494c:	4293      	cmp	r3, r2
 800494e:	bfb8      	it	lt
 8004950:	4613      	movlt	r3, r2
 8004952:	6033      	str	r3, [r6, #0]
 8004954:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004958:	4607      	mov	r7, r0
 800495a:	460c      	mov	r4, r1
 800495c:	b10a      	cbz	r2, 8004962 <_printf_common+0x26>
 800495e:	3301      	adds	r3, #1
 8004960:	6033      	str	r3, [r6, #0]
 8004962:	6823      	ldr	r3, [r4, #0]
 8004964:	0699      	lsls	r1, r3, #26
 8004966:	bf42      	ittt	mi
 8004968:	6833      	ldrmi	r3, [r6, #0]
 800496a:	3302      	addmi	r3, #2
 800496c:	6033      	strmi	r3, [r6, #0]
 800496e:	6825      	ldr	r5, [r4, #0]
 8004970:	f015 0506 	ands.w	r5, r5, #6
 8004974:	d106      	bne.n	8004984 <_printf_common+0x48>
 8004976:	f104 0a19 	add.w	sl, r4, #25
 800497a:	68e3      	ldr	r3, [r4, #12]
 800497c:	6832      	ldr	r2, [r6, #0]
 800497e:	1a9b      	subs	r3, r3, r2
 8004980:	42ab      	cmp	r3, r5
 8004982:	dc26      	bgt.n	80049d2 <_printf_common+0x96>
 8004984:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004988:	1e13      	subs	r3, r2, #0
 800498a:	6822      	ldr	r2, [r4, #0]
 800498c:	bf18      	it	ne
 800498e:	2301      	movne	r3, #1
 8004990:	0692      	lsls	r2, r2, #26
 8004992:	d42b      	bmi.n	80049ec <_printf_common+0xb0>
 8004994:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004998:	4649      	mov	r1, r9
 800499a:	4638      	mov	r0, r7
 800499c:	47c0      	blx	r8
 800499e:	3001      	adds	r0, #1
 80049a0:	d01e      	beq.n	80049e0 <_printf_common+0xa4>
 80049a2:	6823      	ldr	r3, [r4, #0]
 80049a4:	68e5      	ldr	r5, [r4, #12]
 80049a6:	6832      	ldr	r2, [r6, #0]
 80049a8:	f003 0306 	and.w	r3, r3, #6
 80049ac:	2b04      	cmp	r3, #4
 80049ae:	bf08      	it	eq
 80049b0:	1aad      	subeq	r5, r5, r2
 80049b2:	68a3      	ldr	r3, [r4, #8]
 80049b4:	6922      	ldr	r2, [r4, #16]
 80049b6:	bf0c      	ite	eq
 80049b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049bc:	2500      	movne	r5, #0
 80049be:	4293      	cmp	r3, r2
 80049c0:	bfc4      	itt	gt
 80049c2:	1a9b      	subgt	r3, r3, r2
 80049c4:	18ed      	addgt	r5, r5, r3
 80049c6:	2600      	movs	r6, #0
 80049c8:	341a      	adds	r4, #26
 80049ca:	42b5      	cmp	r5, r6
 80049cc:	d11a      	bne.n	8004a04 <_printf_common+0xc8>
 80049ce:	2000      	movs	r0, #0
 80049d0:	e008      	b.n	80049e4 <_printf_common+0xa8>
 80049d2:	2301      	movs	r3, #1
 80049d4:	4652      	mov	r2, sl
 80049d6:	4649      	mov	r1, r9
 80049d8:	4638      	mov	r0, r7
 80049da:	47c0      	blx	r8
 80049dc:	3001      	adds	r0, #1
 80049de:	d103      	bne.n	80049e8 <_printf_common+0xac>
 80049e0:	f04f 30ff 	mov.w	r0, #4294967295
 80049e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049e8:	3501      	adds	r5, #1
 80049ea:	e7c6      	b.n	800497a <_printf_common+0x3e>
 80049ec:	18e1      	adds	r1, r4, r3
 80049ee:	1c5a      	adds	r2, r3, #1
 80049f0:	2030      	movs	r0, #48	; 0x30
 80049f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80049f6:	4422      	add	r2, r4
 80049f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80049fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a00:	3302      	adds	r3, #2
 8004a02:	e7c7      	b.n	8004994 <_printf_common+0x58>
 8004a04:	2301      	movs	r3, #1
 8004a06:	4622      	mov	r2, r4
 8004a08:	4649      	mov	r1, r9
 8004a0a:	4638      	mov	r0, r7
 8004a0c:	47c0      	blx	r8
 8004a0e:	3001      	adds	r0, #1
 8004a10:	d0e6      	beq.n	80049e0 <_printf_common+0xa4>
 8004a12:	3601      	adds	r6, #1
 8004a14:	e7d9      	b.n	80049ca <_printf_common+0x8e>
	...

08004a18 <_printf_i>:
 8004a18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a1c:	7e0f      	ldrb	r7, [r1, #24]
 8004a1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004a20:	2f78      	cmp	r7, #120	; 0x78
 8004a22:	4691      	mov	r9, r2
 8004a24:	4680      	mov	r8, r0
 8004a26:	460c      	mov	r4, r1
 8004a28:	469a      	mov	sl, r3
 8004a2a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004a2e:	d807      	bhi.n	8004a40 <_printf_i+0x28>
 8004a30:	2f62      	cmp	r7, #98	; 0x62
 8004a32:	d80a      	bhi.n	8004a4a <_printf_i+0x32>
 8004a34:	2f00      	cmp	r7, #0
 8004a36:	f000 80d8 	beq.w	8004bea <_printf_i+0x1d2>
 8004a3a:	2f58      	cmp	r7, #88	; 0x58
 8004a3c:	f000 80a3 	beq.w	8004b86 <_printf_i+0x16e>
 8004a40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a48:	e03a      	b.n	8004ac0 <_printf_i+0xa8>
 8004a4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a4e:	2b15      	cmp	r3, #21
 8004a50:	d8f6      	bhi.n	8004a40 <_printf_i+0x28>
 8004a52:	a101      	add	r1, pc, #4	; (adr r1, 8004a58 <_printf_i+0x40>)
 8004a54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a58:	08004ab1 	.word	0x08004ab1
 8004a5c:	08004ac5 	.word	0x08004ac5
 8004a60:	08004a41 	.word	0x08004a41
 8004a64:	08004a41 	.word	0x08004a41
 8004a68:	08004a41 	.word	0x08004a41
 8004a6c:	08004a41 	.word	0x08004a41
 8004a70:	08004ac5 	.word	0x08004ac5
 8004a74:	08004a41 	.word	0x08004a41
 8004a78:	08004a41 	.word	0x08004a41
 8004a7c:	08004a41 	.word	0x08004a41
 8004a80:	08004a41 	.word	0x08004a41
 8004a84:	08004bd1 	.word	0x08004bd1
 8004a88:	08004af5 	.word	0x08004af5
 8004a8c:	08004bb3 	.word	0x08004bb3
 8004a90:	08004a41 	.word	0x08004a41
 8004a94:	08004a41 	.word	0x08004a41
 8004a98:	08004bf3 	.word	0x08004bf3
 8004a9c:	08004a41 	.word	0x08004a41
 8004aa0:	08004af5 	.word	0x08004af5
 8004aa4:	08004a41 	.word	0x08004a41
 8004aa8:	08004a41 	.word	0x08004a41
 8004aac:	08004bbb 	.word	0x08004bbb
 8004ab0:	682b      	ldr	r3, [r5, #0]
 8004ab2:	1d1a      	adds	r2, r3, #4
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	602a      	str	r2, [r5, #0]
 8004ab8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004abc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e0a3      	b.n	8004c0c <_printf_i+0x1f4>
 8004ac4:	6820      	ldr	r0, [r4, #0]
 8004ac6:	6829      	ldr	r1, [r5, #0]
 8004ac8:	0606      	lsls	r6, r0, #24
 8004aca:	f101 0304 	add.w	r3, r1, #4
 8004ace:	d50a      	bpl.n	8004ae6 <_printf_i+0xce>
 8004ad0:	680e      	ldr	r6, [r1, #0]
 8004ad2:	602b      	str	r3, [r5, #0]
 8004ad4:	2e00      	cmp	r6, #0
 8004ad6:	da03      	bge.n	8004ae0 <_printf_i+0xc8>
 8004ad8:	232d      	movs	r3, #45	; 0x2d
 8004ada:	4276      	negs	r6, r6
 8004adc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ae0:	485e      	ldr	r0, [pc, #376]	; (8004c5c <_printf_i+0x244>)
 8004ae2:	230a      	movs	r3, #10
 8004ae4:	e019      	b.n	8004b1a <_printf_i+0x102>
 8004ae6:	680e      	ldr	r6, [r1, #0]
 8004ae8:	602b      	str	r3, [r5, #0]
 8004aea:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004aee:	bf18      	it	ne
 8004af0:	b236      	sxthne	r6, r6
 8004af2:	e7ef      	b.n	8004ad4 <_printf_i+0xbc>
 8004af4:	682b      	ldr	r3, [r5, #0]
 8004af6:	6820      	ldr	r0, [r4, #0]
 8004af8:	1d19      	adds	r1, r3, #4
 8004afa:	6029      	str	r1, [r5, #0]
 8004afc:	0601      	lsls	r1, r0, #24
 8004afe:	d501      	bpl.n	8004b04 <_printf_i+0xec>
 8004b00:	681e      	ldr	r6, [r3, #0]
 8004b02:	e002      	b.n	8004b0a <_printf_i+0xf2>
 8004b04:	0646      	lsls	r6, r0, #25
 8004b06:	d5fb      	bpl.n	8004b00 <_printf_i+0xe8>
 8004b08:	881e      	ldrh	r6, [r3, #0]
 8004b0a:	4854      	ldr	r0, [pc, #336]	; (8004c5c <_printf_i+0x244>)
 8004b0c:	2f6f      	cmp	r7, #111	; 0x6f
 8004b0e:	bf0c      	ite	eq
 8004b10:	2308      	moveq	r3, #8
 8004b12:	230a      	movne	r3, #10
 8004b14:	2100      	movs	r1, #0
 8004b16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b1a:	6865      	ldr	r5, [r4, #4]
 8004b1c:	60a5      	str	r5, [r4, #8]
 8004b1e:	2d00      	cmp	r5, #0
 8004b20:	bfa2      	ittt	ge
 8004b22:	6821      	ldrge	r1, [r4, #0]
 8004b24:	f021 0104 	bicge.w	r1, r1, #4
 8004b28:	6021      	strge	r1, [r4, #0]
 8004b2a:	b90e      	cbnz	r6, 8004b30 <_printf_i+0x118>
 8004b2c:	2d00      	cmp	r5, #0
 8004b2e:	d04d      	beq.n	8004bcc <_printf_i+0x1b4>
 8004b30:	4615      	mov	r5, r2
 8004b32:	fbb6 f1f3 	udiv	r1, r6, r3
 8004b36:	fb03 6711 	mls	r7, r3, r1, r6
 8004b3a:	5dc7      	ldrb	r7, [r0, r7]
 8004b3c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004b40:	4637      	mov	r7, r6
 8004b42:	42bb      	cmp	r3, r7
 8004b44:	460e      	mov	r6, r1
 8004b46:	d9f4      	bls.n	8004b32 <_printf_i+0x11a>
 8004b48:	2b08      	cmp	r3, #8
 8004b4a:	d10b      	bne.n	8004b64 <_printf_i+0x14c>
 8004b4c:	6823      	ldr	r3, [r4, #0]
 8004b4e:	07de      	lsls	r6, r3, #31
 8004b50:	d508      	bpl.n	8004b64 <_printf_i+0x14c>
 8004b52:	6923      	ldr	r3, [r4, #16]
 8004b54:	6861      	ldr	r1, [r4, #4]
 8004b56:	4299      	cmp	r1, r3
 8004b58:	bfde      	ittt	le
 8004b5a:	2330      	movle	r3, #48	; 0x30
 8004b5c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b60:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004b64:	1b52      	subs	r2, r2, r5
 8004b66:	6122      	str	r2, [r4, #16]
 8004b68:	f8cd a000 	str.w	sl, [sp]
 8004b6c:	464b      	mov	r3, r9
 8004b6e:	aa03      	add	r2, sp, #12
 8004b70:	4621      	mov	r1, r4
 8004b72:	4640      	mov	r0, r8
 8004b74:	f7ff fee2 	bl	800493c <_printf_common>
 8004b78:	3001      	adds	r0, #1
 8004b7a:	d14c      	bne.n	8004c16 <_printf_i+0x1fe>
 8004b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b80:	b004      	add	sp, #16
 8004b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b86:	4835      	ldr	r0, [pc, #212]	; (8004c5c <_printf_i+0x244>)
 8004b88:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004b8c:	6829      	ldr	r1, [r5, #0]
 8004b8e:	6823      	ldr	r3, [r4, #0]
 8004b90:	f851 6b04 	ldr.w	r6, [r1], #4
 8004b94:	6029      	str	r1, [r5, #0]
 8004b96:	061d      	lsls	r5, r3, #24
 8004b98:	d514      	bpl.n	8004bc4 <_printf_i+0x1ac>
 8004b9a:	07df      	lsls	r7, r3, #31
 8004b9c:	bf44      	itt	mi
 8004b9e:	f043 0320 	orrmi.w	r3, r3, #32
 8004ba2:	6023      	strmi	r3, [r4, #0]
 8004ba4:	b91e      	cbnz	r6, 8004bae <_printf_i+0x196>
 8004ba6:	6823      	ldr	r3, [r4, #0]
 8004ba8:	f023 0320 	bic.w	r3, r3, #32
 8004bac:	6023      	str	r3, [r4, #0]
 8004bae:	2310      	movs	r3, #16
 8004bb0:	e7b0      	b.n	8004b14 <_printf_i+0xfc>
 8004bb2:	6823      	ldr	r3, [r4, #0]
 8004bb4:	f043 0320 	orr.w	r3, r3, #32
 8004bb8:	6023      	str	r3, [r4, #0]
 8004bba:	2378      	movs	r3, #120	; 0x78
 8004bbc:	4828      	ldr	r0, [pc, #160]	; (8004c60 <_printf_i+0x248>)
 8004bbe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004bc2:	e7e3      	b.n	8004b8c <_printf_i+0x174>
 8004bc4:	0659      	lsls	r1, r3, #25
 8004bc6:	bf48      	it	mi
 8004bc8:	b2b6      	uxthmi	r6, r6
 8004bca:	e7e6      	b.n	8004b9a <_printf_i+0x182>
 8004bcc:	4615      	mov	r5, r2
 8004bce:	e7bb      	b.n	8004b48 <_printf_i+0x130>
 8004bd0:	682b      	ldr	r3, [r5, #0]
 8004bd2:	6826      	ldr	r6, [r4, #0]
 8004bd4:	6961      	ldr	r1, [r4, #20]
 8004bd6:	1d18      	adds	r0, r3, #4
 8004bd8:	6028      	str	r0, [r5, #0]
 8004bda:	0635      	lsls	r5, r6, #24
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	d501      	bpl.n	8004be4 <_printf_i+0x1cc>
 8004be0:	6019      	str	r1, [r3, #0]
 8004be2:	e002      	b.n	8004bea <_printf_i+0x1d2>
 8004be4:	0670      	lsls	r0, r6, #25
 8004be6:	d5fb      	bpl.n	8004be0 <_printf_i+0x1c8>
 8004be8:	8019      	strh	r1, [r3, #0]
 8004bea:	2300      	movs	r3, #0
 8004bec:	6123      	str	r3, [r4, #16]
 8004bee:	4615      	mov	r5, r2
 8004bf0:	e7ba      	b.n	8004b68 <_printf_i+0x150>
 8004bf2:	682b      	ldr	r3, [r5, #0]
 8004bf4:	1d1a      	adds	r2, r3, #4
 8004bf6:	602a      	str	r2, [r5, #0]
 8004bf8:	681d      	ldr	r5, [r3, #0]
 8004bfa:	6862      	ldr	r2, [r4, #4]
 8004bfc:	2100      	movs	r1, #0
 8004bfe:	4628      	mov	r0, r5
 8004c00:	f7fb faf6 	bl	80001f0 <memchr>
 8004c04:	b108      	cbz	r0, 8004c0a <_printf_i+0x1f2>
 8004c06:	1b40      	subs	r0, r0, r5
 8004c08:	6060      	str	r0, [r4, #4]
 8004c0a:	6863      	ldr	r3, [r4, #4]
 8004c0c:	6123      	str	r3, [r4, #16]
 8004c0e:	2300      	movs	r3, #0
 8004c10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c14:	e7a8      	b.n	8004b68 <_printf_i+0x150>
 8004c16:	6923      	ldr	r3, [r4, #16]
 8004c18:	462a      	mov	r2, r5
 8004c1a:	4649      	mov	r1, r9
 8004c1c:	4640      	mov	r0, r8
 8004c1e:	47d0      	blx	sl
 8004c20:	3001      	adds	r0, #1
 8004c22:	d0ab      	beq.n	8004b7c <_printf_i+0x164>
 8004c24:	6823      	ldr	r3, [r4, #0]
 8004c26:	079b      	lsls	r3, r3, #30
 8004c28:	d413      	bmi.n	8004c52 <_printf_i+0x23a>
 8004c2a:	68e0      	ldr	r0, [r4, #12]
 8004c2c:	9b03      	ldr	r3, [sp, #12]
 8004c2e:	4298      	cmp	r0, r3
 8004c30:	bfb8      	it	lt
 8004c32:	4618      	movlt	r0, r3
 8004c34:	e7a4      	b.n	8004b80 <_printf_i+0x168>
 8004c36:	2301      	movs	r3, #1
 8004c38:	4632      	mov	r2, r6
 8004c3a:	4649      	mov	r1, r9
 8004c3c:	4640      	mov	r0, r8
 8004c3e:	47d0      	blx	sl
 8004c40:	3001      	adds	r0, #1
 8004c42:	d09b      	beq.n	8004b7c <_printf_i+0x164>
 8004c44:	3501      	adds	r5, #1
 8004c46:	68e3      	ldr	r3, [r4, #12]
 8004c48:	9903      	ldr	r1, [sp, #12]
 8004c4a:	1a5b      	subs	r3, r3, r1
 8004c4c:	42ab      	cmp	r3, r5
 8004c4e:	dcf2      	bgt.n	8004c36 <_printf_i+0x21e>
 8004c50:	e7eb      	b.n	8004c2a <_printf_i+0x212>
 8004c52:	2500      	movs	r5, #0
 8004c54:	f104 0619 	add.w	r6, r4, #25
 8004c58:	e7f5      	b.n	8004c46 <_printf_i+0x22e>
 8004c5a:	bf00      	nop
 8004c5c:	0800aebe 	.word	0x0800aebe
 8004c60:	0800aecf 	.word	0x0800aecf

08004c64 <_sbrk_r>:
 8004c64:	b538      	push	{r3, r4, r5, lr}
 8004c66:	4d06      	ldr	r5, [pc, #24]	; (8004c80 <_sbrk_r+0x1c>)
 8004c68:	2300      	movs	r3, #0
 8004c6a:	4604      	mov	r4, r0
 8004c6c:	4608      	mov	r0, r1
 8004c6e:	602b      	str	r3, [r5, #0]
 8004c70:	f7fe f9c2 	bl	8002ff8 <_sbrk>
 8004c74:	1c43      	adds	r3, r0, #1
 8004c76:	d102      	bne.n	8004c7e <_sbrk_r+0x1a>
 8004c78:	682b      	ldr	r3, [r5, #0]
 8004c7a:	b103      	cbz	r3, 8004c7e <_sbrk_r+0x1a>
 8004c7c:	6023      	str	r3, [r4, #0]
 8004c7e:	bd38      	pop	{r3, r4, r5, pc}
 8004c80:	20000240 	.word	0x20000240

08004c84 <quorem>:
 8004c84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c88:	6903      	ldr	r3, [r0, #16]
 8004c8a:	690c      	ldr	r4, [r1, #16]
 8004c8c:	42a3      	cmp	r3, r4
 8004c8e:	4607      	mov	r7, r0
 8004c90:	f2c0 8081 	blt.w	8004d96 <quorem+0x112>
 8004c94:	3c01      	subs	r4, #1
 8004c96:	f101 0814 	add.w	r8, r1, #20
 8004c9a:	f100 0514 	add.w	r5, r0, #20
 8004c9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004ca2:	9301      	str	r3, [sp, #4]
 8004ca4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004ca8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004cac:	3301      	adds	r3, #1
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004cb4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004cb8:	fbb2 f6f3 	udiv	r6, r2, r3
 8004cbc:	d331      	bcc.n	8004d22 <quorem+0x9e>
 8004cbe:	f04f 0e00 	mov.w	lr, #0
 8004cc2:	4640      	mov	r0, r8
 8004cc4:	46ac      	mov	ip, r5
 8004cc6:	46f2      	mov	sl, lr
 8004cc8:	f850 2b04 	ldr.w	r2, [r0], #4
 8004ccc:	b293      	uxth	r3, r2
 8004cce:	fb06 e303 	mla	r3, r6, r3, lr
 8004cd2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	ebaa 0303 	sub.w	r3, sl, r3
 8004cdc:	f8dc a000 	ldr.w	sl, [ip]
 8004ce0:	0c12      	lsrs	r2, r2, #16
 8004ce2:	fa13 f38a 	uxtah	r3, r3, sl
 8004ce6:	fb06 e202 	mla	r2, r6, r2, lr
 8004cea:	9300      	str	r3, [sp, #0]
 8004cec:	9b00      	ldr	r3, [sp, #0]
 8004cee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004cf2:	b292      	uxth	r2, r2
 8004cf4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004cf8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004cfc:	f8bd 3000 	ldrh.w	r3, [sp]
 8004d00:	4581      	cmp	r9, r0
 8004d02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004d06:	f84c 3b04 	str.w	r3, [ip], #4
 8004d0a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004d0e:	d2db      	bcs.n	8004cc8 <quorem+0x44>
 8004d10:	f855 300b 	ldr.w	r3, [r5, fp]
 8004d14:	b92b      	cbnz	r3, 8004d22 <quorem+0x9e>
 8004d16:	9b01      	ldr	r3, [sp, #4]
 8004d18:	3b04      	subs	r3, #4
 8004d1a:	429d      	cmp	r5, r3
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	d32e      	bcc.n	8004d7e <quorem+0xfa>
 8004d20:	613c      	str	r4, [r7, #16]
 8004d22:	4638      	mov	r0, r7
 8004d24:	f001 f8ca 	bl	8005ebc <__mcmp>
 8004d28:	2800      	cmp	r0, #0
 8004d2a:	db24      	blt.n	8004d76 <quorem+0xf2>
 8004d2c:	3601      	adds	r6, #1
 8004d2e:	4628      	mov	r0, r5
 8004d30:	f04f 0c00 	mov.w	ip, #0
 8004d34:	f858 2b04 	ldr.w	r2, [r8], #4
 8004d38:	f8d0 e000 	ldr.w	lr, [r0]
 8004d3c:	b293      	uxth	r3, r2
 8004d3e:	ebac 0303 	sub.w	r3, ip, r3
 8004d42:	0c12      	lsrs	r2, r2, #16
 8004d44:	fa13 f38e 	uxtah	r3, r3, lr
 8004d48:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004d4c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004d56:	45c1      	cmp	r9, r8
 8004d58:	f840 3b04 	str.w	r3, [r0], #4
 8004d5c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004d60:	d2e8      	bcs.n	8004d34 <quorem+0xb0>
 8004d62:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004d66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004d6a:	b922      	cbnz	r2, 8004d76 <quorem+0xf2>
 8004d6c:	3b04      	subs	r3, #4
 8004d6e:	429d      	cmp	r5, r3
 8004d70:	461a      	mov	r2, r3
 8004d72:	d30a      	bcc.n	8004d8a <quorem+0x106>
 8004d74:	613c      	str	r4, [r7, #16]
 8004d76:	4630      	mov	r0, r6
 8004d78:	b003      	add	sp, #12
 8004d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d7e:	6812      	ldr	r2, [r2, #0]
 8004d80:	3b04      	subs	r3, #4
 8004d82:	2a00      	cmp	r2, #0
 8004d84:	d1cc      	bne.n	8004d20 <quorem+0x9c>
 8004d86:	3c01      	subs	r4, #1
 8004d88:	e7c7      	b.n	8004d1a <quorem+0x96>
 8004d8a:	6812      	ldr	r2, [r2, #0]
 8004d8c:	3b04      	subs	r3, #4
 8004d8e:	2a00      	cmp	r2, #0
 8004d90:	d1f0      	bne.n	8004d74 <quorem+0xf0>
 8004d92:	3c01      	subs	r4, #1
 8004d94:	e7eb      	b.n	8004d6e <quorem+0xea>
 8004d96:	2000      	movs	r0, #0
 8004d98:	e7ee      	b.n	8004d78 <quorem+0xf4>
 8004d9a:	0000      	movs	r0, r0
 8004d9c:	0000      	movs	r0, r0
	...

08004da0 <_dtoa_r>:
 8004da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004da4:	ed2d 8b04 	vpush	{d8-d9}
 8004da8:	ec57 6b10 	vmov	r6, r7, d0
 8004dac:	b093      	sub	sp, #76	; 0x4c
 8004dae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004db0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004db4:	9106      	str	r1, [sp, #24]
 8004db6:	ee10 aa10 	vmov	sl, s0
 8004dba:	4604      	mov	r4, r0
 8004dbc:	9209      	str	r2, [sp, #36]	; 0x24
 8004dbe:	930c      	str	r3, [sp, #48]	; 0x30
 8004dc0:	46bb      	mov	fp, r7
 8004dc2:	b975      	cbnz	r5, 8004de2 <_dtoa_r+0x42>
 8004dc4:	2010      	movs	r0, #16
 8004dc6:	f7ff f9f3 	bl	80041b0 <malloc>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	6260      	str	r0, [r4, #36]	; 0x24
 8004dce:	b920      	cbnz	r0, 8004dda <_dtoa_r+0x3a>
 8004dd0:	4ba7      	ldr	r3, [pc, #668]	; (8005070 <_dtoa_r+0x2d0>)
 8004dd2:	21ea      	movs	r1, #234	; 0xea
 8004dd4:	48a7      	ldr	r0, [pc, #668]	; (8005074 <_dtoa_r+0x2d4>)
 8004dd6:	f001 f989 	bl	80060ec <__assert_func>
 8004dda:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004dde:	6005      	str	r5, [r0, #0]
 8004de0:	60c5      	str	r5, [r0, #12]
 8004de2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004de4:	6819      	ldr	r1, [r3, #0]
 8004de6:	b151      	cbz	r1, 8004dfe <_dtoa_r+0x5e>
 8004de8:	685a      	ldr	r2, [r3, #4]
 8004dea:	604a      	str	r2, [r1, #4]
 8004dec:	2301      	movs	r3, #1
 8004dee:	4093      	lsls	r3, r2
 8004df0:	608b      	str	r3, [r1, #8]
 8004df2:	4620      	mov	r0, r4
 8004df4:	f000 fe20 	bl	8005a38 <_Bfree>
 8004df8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	601a      	str	r2, [r3, #0]
 8004dfe:	1e3b      	subs	r3, r7, #0
 8004e00:	bfaa      	itet	ge
 8004e02:	2300      	movge	r3, #0
 8004e04:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8004e08:	f8c8 3000 	strge.w	r3, [r8]
 8004e0c:	4b9a      	ldr	r3, [pc, #616]	; (8005078 <_dtoa_r+0x2d8>)
 8004e0e:	bfbc      	itt	lt
 8004e10:	2201      	movlt	r2, #1
 8004e12:	f8c8 2000 	strlt.w	r2, [r8]
 8004e16:	ea33 030b 	bics.w	r3, r3, fp
 8004e1a:	d11b      	bne.n	8004e54 <_dtoa_r+0xb4>
 8004e1c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004e1e:	f242 730f 	movw	r3, #9999	; 0x270f
 8004e22:	6013      	str	r3, [r2, #0]
 8004e24:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004e28:	4333      	orrs	r3, r6
 8004e2a:	f000 8592 	beq.w	8005952 <_dtoa_r+0xbb2>
 8004e2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004e30:	b963      	cbnz	r3, 8004e4c <_dtoa_r+0xac>
 8004e32:	4b92      	ldr	r3, [pc, #584]	; (800507c <_dtoa_r+0x2dc>)
 8004e34:	e022      	b.n	8004e7c <_dtoa_r+0xdc>
 8004e36:	4b92      	ldr	r3, [pc, #584]	; (8005080 <_dtoa_r+0x2e0>)
 8004e38:	9301      	str	r3, [sp, #4]
 8004e3a:	3308      	adds	r3, #8
 8004e3c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004e3e:	6013      	str	r3, [r2, #0]
 8004e40:	9801      	ldr	r0, [sp, #4]
 8004e42:	b013      	add	sp, #76	; 0x4c
 8004e44:	ecbd 8b04 	vpop	{d8-d9}
 8004e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e4c:	4b8b      	ldr	r3, [pc, #556]	; (800507c <_dtoa_r+0x2dc>)
 8004e4e:	9301      	str	r3, [sp, #4]
 8004e50:	3303      	adds	r3, #3
 8004e52:	e7f3      	b.n	8004e3c <_dtoa_r+0x9c>
 8004e54:	2200      	movs	r2, #0
 8004e56:	2300      	movs	r3, #0
 8004e58:	4650      	mov	r0, sl
 8004e5a:	4659      	mov	r1, fp
 8004e5c:	f7fb fe3c 	bl	8000ad8 <__aeabi_dcmpeq>
 8004e60:	ec4b ab19 	vmov	d9, sl, fp
 8004e64:	4680      	mov	r8, r0
 8004e66:	b158      	cbz	r0, 8004e80 <_dtoa_r+0xe0>
 8004e68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	6013      	str	r3, [r2, #0]
 8004e6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	f000 856b 	beq.w	800594c <_dtoa_r+0xbac>
 8004e76:	4883      	ldr	r0, [pc, #524]	; (8005084 <_dtoa_r+0x2e4>)
 8004e78:	6018      	str	r0, [r3, #0]
 8004e7a:	1e43      	subs	r3, r0, #1
 8004e7c:	9301      	str	r3, [sp, #4]
 8004e7e:	e7df      	b.n	8004e40 <_dtoa_r+0xa0>
 8004e80:	ec4b ab10 	vmov	d0, sl, fp
 8004e84:	aa10      	add	r2, sp, #64	; 0x40
 8004e86:	a911      	add	r1, sp, #68	; 0x44
 8004e88:	4620      	mov	r0, r4
 8004e8a:	f001 f8bd 	bl	8006008 <__d2b>
 8004e8e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8004e92:	ee08 0a10 	vmov	s16, r0
 8004e96:	2d00      	cmp	r5, #0
 8004e98:	f000 8084 	beq.w	8004fa4 <_dtoa_r+0x204>
 8004e9c:	ee19 3a90 	vmov	r3, s19
 8004ea0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ea4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004ea8:	4656      	mov	r6, sl
 8004eaa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004eae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004eb2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8004eb6:	4b74      	ldr	r3, [pc, #464]	; (8005088 <_dtoa_r+0x2e8>)
 8004eb8:	2200      	movs	r2, #0
 8004eba:	4630      	mov	r0, r6
 8004ebc:	4639      	mov	r1, r7
 8004ebe:	f7fb f9eb 	bl	8000298 <__aeabi_dsub>
 8004ec2:	a365      	add	r3, pc, #404	; (adr r3, 8005058 <_dtoa_r+0x2b8>)
 8004ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec8:	f7fb fb9e 	bl	8000608 <__aeabi_dmul>
 8004ecc:	a364      	add	r3, pc, #400	; (adr r3, 8005060 <_dtoa_r+0x2c0>)
 8004ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed2:	f7fb f9e3 	bl	800029c <__adddf3>
 8004ed6:	4606      	mov	r6, r0
 8004ed8:	4628      	mov	r0, r5
 8004eda:	460f      	mov	r7, r1
 8004edc:	f7fb fb2a 	bl	8000534 <__aeabi_i2d>
 8004ee0:	a361      	add	r3, pc, #388	; (adr r3, 8005068 <_dtoa_r+0x2c8>)
 8004ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee6:	f7fb fb8f 	bl	8000608 <__aeabi_dmul>
 8004eea:	4602      	mov	r2, r0
 8004eec:	460b      	mov	r3, r1
 8004eee:	4630      	mov	r0, r6
 8004ef0:	4639      	mov	r1, r7
 8004ef2:	f7fb f9d3 	bl	800029c <__adddf3>
 8004ef6:	4606      	mov	r6, r0
 8004ef8:	460f      	mov	r7, r1
 8004efa:	f7fb fe35 	bl	8000b68 <__aeabi_d2iz>
 8004efe:	2200      	movs	r2, #0
 8004f00:	9000      	str	r0, [sp, #0]
 8004f02:	2300      	movs	r3, #0
 8004f04:	4630      	mov	r0, r6
 8004f06:	4639      	mov	r1, r7
 8004f08:	f7fb fdf0 	bl	8000aec <__aeabi_dcmplt>
 8004f0c:	b150      	cbz	r0, 8004f24 <_dtoa_r+0x184>
 8004f0e:	9800      	ldr	r0, [sp, #0]
 8004f10:	f7fb fb10 	bl	8000534 <__aeabi_i2d>
 8004f14:	4632      	mov	r2, r6
 8004f16:	463b      	mov	r3, r7
 8004f18:	f7fb fdde 	bl	8000ad8 <__aeabi_dcmpeq>
 8004f1c:	b910      	cbnz	r0, 8004f24 <_dtoa_r+0x184>
 8004f1e:	9b00      	ldr	r3, [sp, #0]
 8004f20:	3b01      	subs	r3, #1
 8004f22:	9300      	str	r3, [sp, #0]
 8004f24:	9b00      	ldr	r3, [sp, #0]
 8004f26:	2b16      	cmp	r3, #22
 8004f28:	d85a      	bhi.n	8004fe0 <_dtoa_r+0x240>
 8004f2a:	9a00      	ldr	r2, [sp, #0]
 8004f2c:	4b57      	ldr	r3, [pc, #348]	; (800508c <_dtoa_r+0x2ec>)
 8004f2e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f36:	ec51 0b19 	vmov	r0, r1, d9
 8004f3a:	f7fb fdd7 	bl	8000aec <__aeabi_dcmplt>
 8004f3e:	2800      	cmp	r0, #0
 8004f40:	d050      	beq.n	8004fe4 <_dtoa_r+0x244>
 8004f42:	9b00      	ldr	r3, [sp, #0]
 8004f44:	3b01      	subs	r3, #1
 8004f46:	9300      	str	r3, [sp, #0]
 8004f48:	2300      	movs	r3, #0
 8004f4a:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004f4e:	1b5d      	subs	r5, r3, r5
 8004f50:	1e6b      	subs	r3, r5, #1
 8004f52:	9305      	str	r3, [sp, #20]
 8004f54:	bf45      	ittet	mi
 8004f56:	f1c5 0301 	rsbmi	r3, r5, #1
 8004f5a:	9304      	strmi	r3, [sp, #16]
 8004f5c:	2300      	movpl	r3, #0
 8004f5e:	2300      	movmi	r3, #0
 8004f60:	bf4c      	ite	mi
 8004f62:	9305      	strmi	r3, [sp, #20]
 8004f64:	9304      	strpl	r3, [sp, #16]
 8004f66:	9b00      	ldr	r3, [sp, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	db3d      	blt.n	8004fe8 <_dtoa_r+0x248>
 8004f6c:	9b05      	ldr	r3, [sp, #20]
 8004f6e:	9a00      	ldr	r2, [sp, #0]
 8004f70:	920a      	str	r2, [sp, #40]	; 0x28
 8004f72:	4413      	add	r3, r2
 8004f74:	9305      	str	r3, [sp, #20]
 8004f76:	2300      	movs	r3, #0
 8004f78:	9307      	str	r3, [sp, #28]
 8004f7a:	9b06      	ldr	r3, [sp, #24]
 8004f7c:	2b09      	cmp	r3, #9
 8004f7e:	f200 8089 	bhi.w	8005094 <_dtoa_r+0x2f4>
 8004f82:	2b05      	cmp	r3, #5
 8004f84:	bfc4      	itt	gt
 8004f86:	3b04      	subgt	r3, #4
 8004f88:	9306      	strgt	r3, [sp, #24]
 8004f8a:	9b06      	ldr	r3, [sp, #24]
 8004f8c:	f1a3 0302 	sub.w	r3, r3, #2
 8004f90:	bfcc      	ite	gt
 8004f92:	2500      	movgt	r5, #0
 8004f94:	2501      	movle	r5, #1
 8004f96:	2b03      	cmp	r3, #3
 8004f98:	f200 8087 	bhi.w	80050aa <_dtoa_r+0x30a>
 8004f9c:	e8df f003 	tbb	[pc, r3]
 8004fa0:	59383a2d 	.word	0x59383a2d
 8004fa4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004fa8:	441d      	add	r5, r3
 8004faa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004fae:	2b20      	cmp	r3, #32
 8004fb0:	bfc1      	itttt	gt
 8004fb2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004fb6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004fba:	fa0b f303 	lslgt.w	r3, fp, r3
 8004fbe:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004fc2:	bfda      	itte	le
 8004fc4:	f1c3 0320 	rsble	r3, r3, #32
 8004fc8:	fa06 f003 	lslle.w	r0, r6, r3
 8004fcc:	4318      	orrgt	r0, r3
 8004fce:	f7fb faa1 	bl	8000514 <__aeabi_ui2d>
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	4606      	mov	r6, r0
 8004fd6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004fda:	3d01      	subs	r5, #1
 8004fdc:	930e      	str	r3, [sp, #56]	; 0x38
 8004fde:	e76a      	b.n	8004eb6 <_dtoa_r+0x116>
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e7b2      	b.n	8004f4a <_dtoa_r+0x1aa>
 8004fe4:	900b      	str	r0, [sp, #44]	; 0x2c
 8004fe6:	e7b1      	b.n	8004f4c <_dtoa_r+0x1ac>
 8004fe8:	9b04      	ldr	r3, [sp, #16]
 8004fea:	9a00      	ldr	r2, [sp, #0]
 8004fec:	1a9b      	subs	r3, r3, r2
 8004fee:	9304      	str	r3, [sp, #16]
 8004ff0:	4253      	negs	r3, r2
 8004ff2:	9307      	str	r3, [sp, #28]
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	930a      	str	r3, [sp, #40]	; 0x28
 8004ff8:	e7bf      	b.n	8004f7a <_dtoa_r+0x1da>
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	9308      	str	r3, [sp, #32]
 8004ffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005000:	2b00      	cmp	r3, #0
 8005002:	dc55      	bgt.n	80050b0 <_dtoa_r+0x310>
 8005004:	2301      	movs	r3, #1
 8005006:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800500a:	461a      	mov	r2, r3
 800500c:	9209      	str	r2, [sp, #36]	; 0x24
 800500e:	e00c      	b.n	800502a <_dtoa_r+0x28a>
 8005010:	2301      	movs	r3, #1
 8005012:	e7f3      	b.n	8004ffc <_dtoa_r+0x25c>
 8005014:	2300      	movs	r3, #0
 8005016:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005018:	9308      	str	r3, [sp, #32]
 800501a:	9b00      	ldr	r3, [sp, #0]
 800501c:	4413      	add	r3, r2
 800501e:	9302      	str	r3, [sp, #8]
 8005020:	3301      	adds	r3, #1
 8005022:	2b01      	cmp	r3, #1
 8005024:	9303      	str	r3, [sp, #12]
 8005026:	bfb8      	it	lt
 8005028:	2301      	movlt	r3, #1
 800502a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800502c:	2200      	movs	r2, #0
 800502e:	6042      	str	r2, [r0, #4]
 8005030:	2204      	movs	r2, #4
 8005032:	f102 0614 	add.w	r6, r2, #20
 8005036:	429e      	cmp	r6, r3
 8005038:	6841      	ldr	r1, [r0, #4]
 800503a:	d93d      	bls.n	80050b8 <_dtoa_r+0x318>
 800503c:	4620      	mov	r0, r4
 800503e:	f000 fcbb 	bl	80059b8 <_Balloc>
 8005042:	9001      	str	r0, [sp, #4]
 8005044:	2800      	cmp	r0, #0
 8005046:	d13b      	bne.n	80050c0 <_dtoa_r+0x320>
 8005048:	4b11      	ldr	r3, [pc, #68]	; (8005090 <_dtoa_r+0x2f0>)
 800504a:	4602      	mov	r2, r0
 800504c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005050:	e6c0      	b.n	8004dd4 <_dtoa_r+0x34>
 8005052:	2301      	movs	r3, #1
 8005054:	e7df      	b.n	8005016 <_dtoa_r+0x276>
 8005056:	bf00      	nop
 8005058:	636f4361 	.word	0x636f4361
 800505c:	3fd287a7 	.word	0x3fd287a7
 8005060:	8b60c8b3 	.word	0x8b60c8b3
 8005064:	3fc68a28 	.word	0x3fc68a28
 8005068:	509f79fb 	.word	0x509f79fb
 800506c:	3fd34413 	.word	0x3fd34413
 8005070:	0800aeed 	.word	0x0800aeed
 8005074:	0800af04 	.word	0x0800af04
 8005078:	7ff00000 	.word	0x7ff00000
 800507c:	0800aee9 	.word	0x0800aee9
 8005080:	0800aee0 	.word	0x0800aee0
 8005084:	0800aebd 	.word	0x0800aebd
 8005088:	3ff80000 	.word	0x3ff80000
 800508c:	0800aff8 	.word	0x0800aff8
 8005090:	0800af5f 	.word	0x0800af5f
 8005094:	2501      	movs	r5, #1
 8005096:	2300      	movs	r3, #0
 8005098:	9306      	str	r3, [sp, #24]
 800509a:	9508      	str	r5, [sp, #32]
 800509c:	f04f 33ff 	mov.w	r3, #4294967295
 80050a0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80050a4:	2200      	movs	r2, #0
 80050a6:	2312      	movs	r3, #18
 80050a8:	e7b0      	b.n	800500c <_dtoa_r+0x26c>
 80050aa:	2301      	movs	r3, #1
 80050ac:	9308      	str	r3, [sp, #32]
 80050ae:	e7f5      	b.n	800509c <_dtoa_r+0x2fc>
 80050b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050b2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80050b6:	e7b8      	b.n	800502a <_dtoa_r+0x28a>
 80050b8:	3101      	adds	r1, #1
 80050ba:	6041      	str	r1, [r0, #4]
 80050bc:	0052      	lsls	r2, r2, #1
 80050be:	e7b8      	b.n	8005032 <_dtoa_r+0x292>
 80050c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050c2:	9a01      	ldr	r2, [sp, #4]
 80050c4:	601a      	str	r2, [r3, #0]
 80050c6:	9b03      	ldr	r3, [sp, #12]
 80050c8:	2b0e      	cmp	r3, #14
 80050ca:	f200 809d 	bhi.w	8005208 <_dtoa_r+0x468>
 80050ce:	2d00      	cmp	r5, #0
 80050d0:	f000 809a 	beq.w	8005208 <_dtoa_r+0x468>
 80050d4:	9b00      	ldr	r3, [sp, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	dd32      	ble.n	8005140 <_dtoa_r+0x3a0>
 80050da:	4ab7      	ldr	r2, [pc, #732]	; (80053b8 <_dtoa_r+0x618>)
 80050dc:	f003 030f 	and.w	r3, r3, #15
 80050e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80050e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80050e8:	9b00      	ldr	r3, [sp, #0]
 80050ea:	05d8      	lsls	r0, r3, #23
 80050ec:	ea4f 1723 	mov.w	r7, r3, asr #4
 80050f0:	d516      	bpl.n	8005120 <_dtoa_r+0x380>
 80050f2:	4bb2      	ldr	r3, [pc, #712]	; (80053bc <_dtoa_r+0x61c>)
 80050f4:	ec51 0b19 	vmov	r0, r1, d9
 80050f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80050fc:	f7fb fbae 	bl	800085c <__aeabi_ddiv>
 8005100:	f007 070f 	and.w	r7, r7, #15
 8005104:	4682      	mov	sl, r0
 8005106:	468b      	mov	fp, r1
 8005108:	2503      	movs	r5, #3
 800510a:	4eac      	ldr	r6, [pc, #688]	; (80053bc <_dtoa_r+0x61c>)
 800510c:	b957      	cbnz	r7, 8005124 <_dtoa_r+0x384>
 800510e:	4642      	mov	r2, r8
 8005110:	464b      	mov	r3, r9
 8005112:	4650      	mov	r0, sl
 8005114:	4659      	mov	r1, fp
 8005116:	f7fb fba1 	bl	800085c <__aeabi_ddiv>
 800511a:	4682      	mov	sl, r0
 800511c:	468b      	mov	fp, r1
 800511e:	e028      	b.n	8005172 <_dtoa_r+0x3d2>
 8005120:	2502      	movs	r5, #2
 8005122:	e7f2      	b.n	800510a <_dtoa_r+0x36a>
 8005124:	07f9      	lsls	r1, r7, #31
 8005126:	d508      	bpl.n	800513a <_dtoa_r+0x39a>
 8005128:	4640      	mov	r0, r8
 800512a:	4649      	mov	r1, r9
 800512c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005130:	f7fb fa6a 	bl	8000608 <__aeabi_dmul>
 8005134:	3501      	adds	r5, #1
 8005136:	4680      	mov	r8, r0
 8005138:	4689      	mov	r9, r1
 800513a:	107f      	asrs	r7, r7, #1
 800513c:	3608      	adds	r6, #8
 800513e:	e7e5      	b.n	800510c <_dtoa_r+0x36c>
 8005140:	f000 809b 	beq.w	800527a <_dtoa_r+0x4da>
 8005144:	9b00      	ldr	r3, [sp, #0]
 8005146:	4f9d      	ldr	r7, [pc, #628]	; (80053bc <_dtoa_r+0x61c>)
 8005148:	425e      	negs	r6, r3
 800514a:	4b9b      	ldr	r3, [pc, #620]	; (80053b8 <_dtoa_r+0x618>)
 800514c:	f006 020f 	and.w	r2, r6, #15
 8005150:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005158:	ec51 0b19 	vmov	r0, r1, d9
 800515c:	f7fb fa54 	bl	8000608 <__aeabi_dmul>
 8005160:	1136      	asrs	r6, r6, #4
 8005162:	4682      	mov	sl, r0
 8005164:	468b      	mov	fp, r1
 8005166:	2300      	movs	r3, #0
 8005168:	2502      	movs	r5, #2
 800516a:	2e00      	cmp	r6, #0
 800516c:	d17a      	bne.n	8005264 <_dtoa_r+0x4c4>
 800516e:	2b00      	cmp	r3, #0
 8005170:	d1d3      	bne.n	800511a <_dtoa_r+0x37a>
 8005172:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005174:	2b00      	cmp	r3, #0
 8005176:	f000 8082 	beq.w	800527e <_dtoa_r+0x4de>
 800517a:	4b91      	ldr	r3, [pc, #580]	; (80053c0 <_dtoa_r+0x620>)
 800517c:	2200      	movs	r2, #0
 800517e:	4650      	mov	r0, sl
 8005180:	4659      	mov	r1, fp
 8005182:	f7fb fcb3 	bl	8000aec <__aeabi_dcmplt>
 8005186:	2800      	cmp	r0, #0
 8005188:	d079      	beq.n	800527e <_dtoa_r+0x4de>
 800518a:	9b03      	ldr	r3, [sp, #12]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d076      	beq.n	800527e <_dtoa_r+0x4de>
 8005190:	9b02      	ldr	r3, [sp, #8]
 8005192:	2b00      	cmp	r3, #0
 8005194:	dd36      	ble.n	8005204 <_dtoa_r+0x464>
 8005196:	9b00      	ldr	r3, [sp, #0]
 8005198:	4650      	mov	r0, sl
 800519a:	4659      	mov	r1, fp
 800519c:	1e5f      	subs	r7, r3, #1
 800519e:	2200      	movs	r2, #0
 80051a0:	4b88      	ldr	r3, [pc, #544]	; (80053c4 <_dtoa_r+0x624>)
 80051a2:	f7fb fa31 	bl	8000608 <__aeabi_dmul>
 80051a6:	9e02      	ldr	r6, [sp, #8]
 80051a8:	4682      	mov	sl, r0
 80051aa:	468b      	mov	fp, r1
 80051ac:	3501      	adds	r5, #1
 80051ae:	4628      	mov	r0, r5
 80051b0:	f7fb f9c0 	bl	8000534 <__aeabi_i2d>
 80051b4:	4652      	mov	r2, sl
 80051b6:	465b      	mov	r3, fp
 80051b8:	f7fb fa26 	bl	8000608 <__aeabi_dmul>
 80051bc:	4b82      	ldr	r3, [pc, #520]	; (80053c8 <_dtoa_r+0x628>)
 80051be:	2200      	movs	r2, #0
 80051c0:	f7fb f86c 	bl	800029c <__adddf3>
 80051c4:	46d0      	mov	r8, sl
 80051c6:	46d9      	mov	r9, fp
 80051c8:	4682      	mov	sl, r0
 80051ca:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80051ce:	2e00      	cmp	r6, #0
 80051d0:	d158      	bne.n	8005284 <_dtoa_r+0x4e4>
 80051d2:	4b7e      	ldr	r3, [pc, #504]	; (80053cc <_dtoa_r+0x62c>)
 80051d4:	2200      	movs	r2, #0
 80051d6:	4640      	mov	r0, r8
 80051d8:	4649      	mov	r1, r9
 80051da:	f7fb f85d 	bl	8000298 <__aeabi_dsub>
 80051de:	4652      	mov	r2, sl
 80051e0:	465b      	mov	r3, fp
 80051e2:	4680      	mov	r8, r0
 80051e4:	4689      	mov	r9, r1
 80051e6:	f7fb fc9f 	bl	8000b28 <__aeabi_dcmpgt>
 80051ea:	2800      	cmp	r0, #0
 80051ec:	f040 8295 	bne.w	800571a <_dtoa_r+0x97a>
 80051f0:	4652      	mov	r2, sl
 80051f2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80051f6:	4640      	mov	r0, r8
 80051f8:	4649      	mov	r1, r9
 80051fa:	f7fb fc77 	bl	8000aec <__aeabi_dcmplt>
 80051fe:	2800      	cmp	r0, #0
 8005200:	f040 8289 	bne.w	8005716 <_dtoa_r+0x976>
 8005204:	ec5b ab19 	vmov	sl, fp, d9
 8005208:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800520a:	2b00      	cmp	r3, #0
 800520c:	f2c0 8148 	blt.w	80054a0 <_dtoa_r+0x700>
 8005210:	9a00      	ldr	r2, [sp, #0]
 8005212:	2a0e      	cmp	r2, #14
 8005214:	f300 8144 	bgt.w	80054a0 <_dtoa_r+0x700>
 8005218:	4b67      	ldr	r3, [pc, #412]	; (80053b8 <_dtoa_r+0x618>)
 800521a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800521e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005222:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005224:	2b00      	cmp	r3, #0
 8005226:	f280 80d5 	bge.w	80053d4 <_dtoa_r+0x634>
 800522a:	9b03      	ldr	r3, [sp, #12]
 800522c:	2b00      	cmp	r3, #0
 800522e:	f300 80d1 	bgt.w	80053d4 <_dtoa_r+0x634>
 8005232:	f040 826f 	bne.w	8005714 <_dtoa_r+0x974>
 8005236:	4b65      	ldr	r3, [pc, #404]	; (80053cc <_dtoa_r+0x62c>)
 8005238:	2200      	movs	r2, #0
 800523a:	4640      	mov	r0, r8
 800523c:	4649      	mov	r1, r9
 800523e:	f7fb f9e3 	bl	8000608 <__aeabi_dmul>
 8005242:	4652      	mov	r2, sl
 8005244:	465b      	mov	r3, fp
 8005246:	f7fb fc65 	bl	8000b14 <__aeabi_dcmpge>
 800524a:	9e03      	ldr	r6, [sp, #12]
 800524c:	4637      	mov	r7, r6
 800524e:	2800      	cmp	r0, #0
 8005250:	f040 8245 	bne.w	80056de <_dtoa_r+0x93e>
 8005254:	9d01      	ldr	r5, [sp, #4]
 8005256:	2331      	movs	r3, #49	; 0x31
 8005258:	f805 3b01 	strb.w	r3, [r5], #1
 800525c:	9b00      	ldr	r3, [sp, #0]
 800525e:	3301      	adds	r3, #1
 8005260:	9300      	str	r3, [sp, #0]
 8005262:	e240      	b.n	80056e6 <_dtoa_r+0x946>
 8005264:	07f2      	lsls	r2, r6, #31
 8005266:	d505      	bpl.n	8005274 <_dtoa_r+0x4d4>
 8005268:	e9d7 2300 	ldrd	r2, r3, [r7]
 800526c:	f7fb f9cc 	bl	8000608 <__aeabi_dmul>
 8005270:	3501      	adds	r5, #1
 8005272:	2301      	movs	r3, #1
 8005274:	1076      	asrs	r6, r6, #1
 8005276:	3708      	adds	r7, #8
 8005278:	e777      	b.n	800516a <_dtoa_r+0x3ca>
 800527a:	2502      	movs	r5, #2
 800527c:	e779      	b.n	8005172 <_dtoa_r+0x3d2>
 800527e:	9f00      	ldr	r7, [sp, #0]
 8005280:	9e03      	ldr	r6, [sp, #12]
 8005282:	e794      	b.n	80051ae <_dtoa_r+0x40e>
 8005284:	9901      	ldr	r1, [sp, #4]
 8005286:	4b4c      	ldr	r3, [pc, #304]	; (80053b8 <_dtoa_r+0x618>)
 8005288:	4431      	add	r1, r6
 800528a:	910d      	str	r1, [sp, #52]	; 0x34
 800528c:	9908      	ldr	r1, [sp, #32]
 800528e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005292:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005296:	2900      	cmp	r1, #0
 8005298:	d043      	beq.n	8005322 <_dtoa_r+0x582>
 800529a:	494d      	ldr	r1, [pc, #308]	; (80053d0 <_dtoa_r+0x630>)
 800529c:	2000      	movs	r0, #0
 800529e:	f7fb fadd 	bl	800085c <__aeabi_ddiv>
 80052a2:	4652      	mov	r2, sl
 80052a4:	465b      	mov	r3, fp
 80052a6:	f7fa fff7 	bl	8000298 <__aeabi_dsub>
 80052aa:	9d01      	ldr	r5, [sp, #4]
 80052ac:	4682      	mov	sl, r0
 80052ae:	468b      	mov	fp, r1
 80052b0:	4649      	mov	r1, r9
 80052b2:	4640      	mov	r0, r8
 80052b4:	f7fb fc58 	bl	8000b68 <__aeabi_d2iz>
 80052b8:	4606      	mov	r6, r0
 80052ba:	f7fb f93b 	bl	8000534 <__aeabi_i2d>
 80052be:	4602      	mov	r2, r0
 80052c0:	460b      	mov	r3, r1
 80052c2:	4640      	mov	r0, r8
 80052c4:	4649      	mov	r1, r9
 80052c6:	f7fa ffe7 	bl	8000298 <__aeabi_dsub>
 80052ca:	3630      	adds	r6, #48	; 0x30
 80052cc:	f805 6b01 	strb.w	r6, [r5], #1
 80052d0:	4652      	mov	r2, sl
 80052d2:	465b      	mov	r3, fp
 80052d4:	4680      	mov	r8, r0
 80052d6:	4689      	mov	r9, r1
 80052d8:	f7fb fc08 	bl	8000aec <__aeabi_dcmplt>
 80052dc:	2800      	cmp	r0, #0
 80052de:	d163      	bne.n	80053a8 <_dtoa_r+0x608>
 80052e0:	4642      	mov	r2, r8
 80052e2:	464b      	mov	r3, r9
 80052e4:	4936      	ldr	r1, [pc, #216]	; (80053c0 <_dtoa_r+0x620>)
 80052e6:	2000      	movs	r0, #0
 80052e8:	f7fa ffd6 	bl	8000298 <__aeabi_dsub>
 80052ec:	4652      	mov	r2, sl
 80052ee:	465b      	mov	r3, fp
 80052f0:	f7fb fbfc 	bl	8000aec <__aeabi_dcmplt>
 80052f4:	2800      	cmp	r0, #0
 80052f6:	f040 80b5 	bne.w	8005464 <_dtoa_r+0x6c4>
 80052fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80052fc:	429d      	cmp	r5, r3
 80052fe:	d081      	beq.n	8005204 <_dtoa_r+0x464>
 8005300:	4b30      	ldr	r3, [pc, #192]	; (80053c4 <_dtoa_r+0x624>)
 8005302:	2200      	movs	r2, #0
 8005304:	4650      	mov	r0, sl
 8005306:	4659      	mov	r1, fp
 8005308:	f7fb f97e 	bl	8000608 <__aeabi_dmul>
 800530c:	4b2d      	ldr	r3, [pc, #180]	; (80053c4 <_dtoa_r+0x624>)
 800530e:	4682      	mov	sl, r0
 8005310:	468b      	mov	fp, r1
 8005312:	4640      	mov	r0, r8
 8005314:	4649      	mov	r1, r9
 8005316:	2200      	movs	r2, #0
 8005318:	f7fb f976 	bl	8000608 <__aeabi_dmul>
 800531c:	4680      	mov	r8, r0
 800531e:	4689      	mov	r9, r1
 8005320:	e7c6      	b.n	80052b0 <_dtoa_r+0x510>
 8005322:	4650      	mov	r0, sl
 8005324:	4659      	mov	r1, fp
 8005326:	f7fb f96f 	bl	8000608 <__aeabi_dmul>
 800532a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800532c:	9d01      	ldr	r5, [sp, #4]
 800532e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005330:	4682      	mov	sl, r0
 8005332:	468b      	mov	fp, r1
 8005334:	4649      	mov	r1, r9
 8005336:	4640      	mov	r0, r8
 8005338:	f7fb fc16 	bl	8000b68 <__aeabi_d2iz>
 800533c:	4606      	mov	r6, r0
 800533e:	f7fb f8f9 	bl	8000534 <__aeabi_i2d>
 8005342:	3630      	adds	r6, #48	; 0x30
 8005344:	4602      	mov	r2, r0
 8005346:	460b      	mov	r3, r1
 8005348:	4640      	mov	r0, r8
 800534a:	4649      	mov	r1, r9
 800534c:	f7fa ffa4 	bl	8000298 <__aeabi_dsub>
 8005350:	f805 6b01 	strb.w	r6, [r5], #1
 8005354:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005356:	429d      	cmp	r5, r3
 8005358:	4680      	mov	r8, r0
 800535a:	4689      	mov	r9, r1
 800535c:	f04f 0200 	mov.w	r2, #0
 8005360:	d124      	bne.n	80053ac <_dtoa_r+0x60c>
 8005362:	4b1b      	ldr	r3, [pc, #108]	; (80053d0 <_dtoa_r+0x630>)
 8005364:	4650      	mov	r0, sl
 8005366:	4659      	mov	r1, fp
 8005368:	f7fa ff98 	bl	800029c <__adddf3>
 800536c:	4602      	mov	r2, r0
 800536e:	460b      	mov	r3, r1
 8005370:	4640      	mov	r0, r8
 8005372:	4649      	mov	r1, r9
 8005374:	f7fb fbd8 	bl	8000b28 <__aeabi_dcmpgt>
 8005378:	2800      	cmp	r0, #0
 800537a:	d173      	bne.n	8005464 <_dtoa_r+0x6c4>
 800537c:	4652      	mov	r2, sl
 800537e:	465b      	mov	r3, fp
 8005380:	4913      	ldr	r1, [pc, #76]	; (80053d0 <_dtoa_r+0x630>)
 8005382:	2000      	movs	r0, #0
 8005384:	f7fa ff88 	bl	8000298 <__aeabi_dsub>
 8005388:	4602      	mov	r2, r0
 800538a:	460b      	mov	r3, r1
 800538c:	4640      	mov	r0, r8
 800538e:	4649      	mov	r1, r9
 8005390:	f7fb fbac 	bl	8000aec <__aeabi_dcmplt>
 8005394:	2800      	cmp	r0, #0
 8005396:	f43f af35 	beq.w	8005204 <_dtoa_r+0x464>
 800539a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800539c:	1e6b      	subs	r3, r5, #1
 800539e:	930f      	str	r3, [sp, #60]	; 0x3c
 80053a0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80053a4:	2b30      	cmp	r3, #48	; 0x30
 80053a6:	d0f8      	beq.n	800539a <_dtoa_r+0x5fa>
 80053a8:	9700      	str	r7, [sp, #0]
 80053aa:	e049      	b.n	8005440 <_dtoa_r+0x6a0>
 80053ac:	4b05      	ldr	r3, [pc, #20]	; (80053c4 <_dtoa_r+0x624>)
 80053ae:	f7fb f92b 	bl	8000608 <__aeabi_dmul>
 80053b2:	4680      	mov	r8, r0
 80053b4:	4689      	mov	r9, r1
 80053b6:	e7bd      	b.n	8005334 <_dtoa_r+0x594>
 80053b8:	0800aff8 	.word	0x0800aff8
 80053bc:	0800afd0 	.word	0x0800afd0
 80053c0:	3ff00000 	.word	0x3ff00000
 80053c4:	40240000 	.word	0x40240000
 80053c8:	401c0000 	.word	0x401c0000
 80053cc:	40140000 	.word	0x40140000
 80053d0:	3fe00000 	.word	0x3fe00000
 80053d4:	9d01      	ldr	r5, [sp, #4]
 80053d6:	4656      	mov	r6, sl
 80053d8:	465f      	mov	r7, fp
 80053da:	4642      	mov	r2, r8
 80053dc:	464b      	mov	r3, r9
 80053de:	4630      	mov	r0, r6
 80053e0:	4639      	mov	r1, r7
 80053e2:	f7fb fa3b 	bl	800085c <__aeabi_ddiv>
 80053e6:	f7fb fbbf 	bl	8000b68 <__aeabi_d2iz>
 80053ea:	4682      	mov	sl, r0
 80053ec:	f7fb f8a2 	bl	8000534 <__aeabi_i2d>
 80053f0:	4642      	mov	r2, r8
 80053f2:	464b      	mov	r3, r9
 80053f4:	f7fb f908 	bl	8000608 <__aeabi_dmul>
 80053f8:	4602      	mov	r2, r0
 80053fa:	460b      	mov	r3, r1
 80053fc:	4630      	mov	r0, r6
 80053fe:	4639      	mov	r1, r7
 8005400:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005404:	f7fa ff48 	bl	8000298 <__aeabi_dsub>
 8005408:	f805 6b01 	strb.w	r6, [r5], #1
 800540c:	9e01      	ldr	r6, [sp, #4]
 800540e:	9f03      	ldr	r7, [sp, #12]
 8005410:	1bae      	subs	r6, r5, r6
 8005412:	42b7      	cmp	r7, r6
 8005414:	4602      	mov	r2, r0
 8005416:	460b      	mov	r3, r1
 8005418:	d135      	bne.n	8005486 <_dtoa_r+0x6e6>
 800541a:	f7fa ff3f 	bl	800029c <__adddf3>
 800541e:	4642      	mov	r2, r8
 8005420:	464b      	mov	r3, r9
 8005422:	4606      	mov	r6, r0
 8005424:	460f      	mov	r7, r1
 8005426:	f7fb fb7f 	bl	8000b28 <__aeabi_dcmpgt>
 800542a:	b9d0      	cbnz	r0, 8005462 <_dtoa_r+0x6c2>
 800542c:	4642      	mov	r2, r8
 800542e:	464b      	mov	r3, r9
 8005430:	4630      	mov	r0, r6
 8005432:	4639      	mov	r1, r7
 8005434:	f7fb fb50 	bl	8000ad8 <__aeabi_dcmpeq>
 8005438:	b110      	cbz	r0, 8005440 <_dtoa_r+0x6a0>
 800543a:	f01a 0f01 	tst.w	sl, #1
 800543e:	d110      	bne.n	8005462 <_dtoa_r+0x6c2>
 8005440:	4620      	mov	r0, r4
 8005442:	ee18 1a10 	vmov	r1, s16
 8005446:	f000 faf7 	bl	8005a38 <_Bfree>
 800544a:	2300      	movs	r3, #0
 800544c:	9800      	ldr	r0, [sp, #0]
 800544e:	702b      	strb	r3, [r5, #0]
 8005450:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005452:	3001      	adds	r0, #1
 8005454:	6018      	str	r0, [r3, #0]
 8005456:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005458:	2b00      	cmp	r3, #0
 800545a:	f43f acf1 	beq.w	8004e40 <_dtoa_r+0xa0>
 800545e:	601d      	str	r5, [r3, #0]
 8005460:	e4ee      	b.n	8004e40 <_dtoa_r+0xa0>
 8005462:	9f00      	ldr	r7, [sp, #0]
 8005464:	462b      	mov	r3, r5
 8005466:	461d      	mov	r5, r3
 8005468:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800546c:	2a39      	cmp	r2, #57	; 0x39
 800546e:	d106      	bne.n	800547e <_dtoa_r+0x6de>
 8005470:	9a01      	ldr	r2, [sp, #4]
 8005472:	429a      	cmp	r2, r3
 8005474:	d1f7      	bne.n	8005466 <_dtoa_r+0x6c6>
 8005476:	9901      	ldr	r1, [sp, #4]
 8005478:	2230      	movs	r2, #48	; 0x30
 800547a:	3701      	adds	r7, #1
 800547c:	700a      	strb	r2, [r1, #0]
 800547e:	781a      	ldrb	r2, [r3, #0]
 8005480:	3201      	adds	r2, #1
 8005482:	701a      	strb	r2, [r3, #0]
 8005484:	e790      	b.n	80053a8 <_dtoa_r+0x608>
 8005486:	4ba6      	ldr	r3, [pc, #664]	; (8005720 <_dtoa_r+0x980>)
 8005488:	2200      	movs	r2, #0
 800548a:	f7fb f8bd 	bl	8000608 <__aeabi_dmul>
 800548e:	2200      	movs	r2, #0
 8005490:	2300      	movs	r3, #0
 8005492:	4606      	mov	r6, r0
 8005494:	460f      	mov	r7, r1
 8005496:	f7fb fb1f 	bl	8000ad8 <__aeabi_dcmpeq>
 800549a:	2800      	cmp	r0, #0
 800549c:	d09d      	beq.n	80053da <_dtoa_r+0x63a>
 800549e:	e7cf      	b.n	8005440 <_dtoa_r+0x6a0>
 80054a0:	9a08      	ldr	r2, [sp, #32]
 80054a2:	2a00      	cmp	r2, #0
 80054a4:	f000 80d7 	beq.w	8005656 <_dtoa_r+0x8b6>
 80054a8:	9a06      	ldr	r2, [sp, #24]
 80054aa:	2a01      	cmp	r2, #1
 80054ac:	f300 80ba 	bgt.w	8005624 <_dtoa_r+0x884>
 80054b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80054b2:	2a00      	cmp	r2, #0
 80054b4:	f000 80b2 	beq.w	800561c <_dtoa_r+0x87c>
 80054b8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80054bc:	9e07      	ldr	r6, [sp, #28]
 80054be:	9d04      	ldr	r5, [sp, #16]
 80054c0:	9a04      	ldr	r2, [sp, #16]
 80054c2:	441a      	add	r2, r3
 80054c4:	9204      	str	r2, [sp, #16]
 80054c6:	9a05      	ldr	r2, [sp, #20]
 80054c8:	2101      	movs	r1, #1
 80054ca:	441a      	add	r2, r3
 80054cc:	4620      	mov	r0, r4
 80054ce:	9205      	str	r2, [sp, #20]
 80054d0:	f000 fb6a 	bl	8005ba8 <__i2b>
 80054d4:	4607      	mov	r7, r0
 80054d6:	2d00      	cmp	r5, #0
 80054d8:	dd0c      	ble.n	80054f4 <_dtoa_r+0x754>
 80054da:	9b05      	ldr	r3, [sp, #20]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	dd09      	ble.n	80054f4 <_dtoa_r+0x754>
 80054e0:	42ab      	cmp	r3, r5
 80054e2:	9a04      	ldr	r2, [sp, #16]
 80054e4:	bfa8      	it	ge
 80054e6:	462b      	movge	r3, r5
 80054e8:	1ad2      	subs	r2, r2, r3
 80054ea:	9204      	str	r2, [sp, #16]
 80054ec:	9a05      	ldr	r2, [sp, #20]
 80054ee:	1aed      	subs	r5, r5, r3
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	9305      	str	r3, [sp, #20]
 80054f4:	9b07      	ldr	r3, [sp, #28]
 80054f6:	b31b      	cbz	r3, 8005540 <_dtoa_r+0x7a0>
 80054f8:	9b08      	ldr	r3, [sp, #32]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	f000 80af 	beq.w	800565e <_dtoa_r+0x8be>
 8005500:	2e00      	cmp	r6, #0
 8005502:	dd13      	ble.n	800552c <_dtoa_r+0x78c>
 8005504:	4639      	mov	r1, r7
 8005506:	4632      	mov	r2, r6
 8005508:	4620      	mov	r0, r4
 800550a:	f000 fc0d 	bl	8005d28 <__pow5mult>
 800550e:	ee18 2a10 	vmov	r2, s16
 8005512:	4601      	mov	r1, r0
 8005514:	4607      	mov	r7, r0
 8005516:	4620      	mov	r0, r4
 8005518:	f000 fb5c 	bl	8005bd4 <__multiply>
 800551c:	ee18 1a10 	vmov	r1, s16
 8005520:	4680      	mov	r8, r0
 8005522:	4620      	mov	r0, r4
 8005524:	f000 fa88 	bl	8005a38 <_Bfree>
 8005528:	ee08 8a10 	vmov	s16, r8
 800552c:	9b07      	ldr	r3, [sp, #28]
 800552e:	1b9a      	subs	r2, r3, r6
 8005530:	d006      	beq.n	8005540 <_dtoa_r+0x7a0>
 8005532:	ee18 1a10 	vmov	r1, s16
 8005536:	4620      	mov	r0, r4
 8005538:	f000 fbf6 	bl	8005d28 <__pow5mult>
 800553c:	ee08 0a10 	vmov	s16, r0
 8005540:	2101      	movs	r1, #1
 8005542:	4620      	mov	r0, r4
 8005544:	f000 fb30 	bl	8005ba8 <__i2b>
 8005548:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800554a:	2b00      	cmp	r3, #0
 800554c:	4606      	mov	r6, r0
 800554e:	f340 8088 	ble.w	8005662 <_dtoa_r+0x8c2>
 8005552:	461a      	mov	r2, r3
 8005554:	4601      	mov	r1, r0
 8005556:	4620      	mov	r0, r4
 8005558:	f000 fbe6 	bl	8005d28 <__pow5mult>
 800555c:	9b06      	ldr	r3, [sp, #24]
 800555e:	2b01      	cmp	r3, #1
 8005560:	4606      	mov	r6, r0
 8005562:	f340 8081 	ble.w	8005668 <_dtoa_r+0x8c8>
 8005566:	f04f 0800 	mov.w	r8, #0
 800556a:	6933      	ldr	r3, [r6, #16]
 800556c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005570:	6918      	ldr	r0, [r3, #16]
 8005572:	f000 fac9 	bl	8005b08 <__hi0bits>
 8005576:	f1c0 0020 	rsb	r0, r0, #32
 800557a:	9b05      	ldr	r3, [sp, #20]
 800557c:	4418      	add	r0, r3
 800557e:	f010 001f 	ands.w	r0, r0, #31
 8005582:	f000 8092 	beq.w	80056aa <_dtoa_r+0x90a>
 8005586:	f1c0 0320 	rsb	r3, r0, #32
 800558a:	2b04      	cmp	r3, #4
 800558c:	f340 808a 	ble.w	80056a4 <_dtoa_r+0x904>
 8005590:	f1c0 001c 	rsb	r0, r0, #28
 8005594:	9b04      	ldr	r3, [sp, #16]
 8005596:	4403      	add	r3, r0
 8005598:	9304      	str	r3, [sp, #16]
 800559a:	9b05      	ldr	r3, [sp, #20]
 800559c:	4403      	add	r3, r0
 800559e:	4405      	add	r5, r0
 80055a0:	9305      	str	r3, [sp, #20]
 80055a2:	9b04      	ldr	r3, [sp, #16]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	dd07      	ble.n	80055b8 <_dtoa_r+0x818>
 80055a8:	ee18 1a10 	vmov	r1, s16
 80055ac:	461a      	mov	r2, r3
 80055ae:	4620      	mov	r0, r4
 80055b0:	f000 fc14 	bl	8005ddc <__lshift>
 80055b4:	ee08 0a10 	vmov	s16, r0
 80055b8:	9b05      	ldr	r3, [sp, #20]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	dd05      	ble.n	80055ca <_dtoa_r+0x82a>
 80055be:	4631      	mov	r1, r6
 80055c0:	461a      	mov	r2, r3
 80055c2:	4620      	mov	r0, r4
 80055c4:	f000 fc0a 	bl	8005ddc <__lshift>
 80055c8:	4606      	mov	r6, r0
 80055ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d06e      	beq.n	80056ae <_dtoa_r+0x90e>
 80055d0:	ee18 0a10 	vmov	r0, s16
 80055d4:	4631      	mov	r1, r6
 80055d6:	f000 fc71 	bl	8005ebc <__mcmp>
 80055da:	2800      	cmp	r0, #0
 80055dc:	da67      	bge.n	80056ae <_dtoa_r+0x90e>
 80055de:	9b00      	ldr	r3, [sp, #0]
 80055e0:	3b01      	subs	r3, #1
 80055e2:	ee18 1a10 	vmov	r1, s16
 80055e6:	9300      	str	r3, [sp, #0]
 80055e8:	220a      	movs	r2, #10
 80055ea:	2300      	movs	r3, #0
 80055ec:	4620      	mov	r0, r4
 80055ee:	f000 fa45 	bl	8005a7c <__multadd>
 80055f2:	9b08      	ldr	r3, [sp, #32]
 80055f4:	ee08 0a10 	vmov	s16, r0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	f000 81b1 	beq.w	8005960 <_dtoa_r+0xbc0>
 80055fe:	2300      	movs	r3, #0
 8005600:	4639      	mov	r1, r7
 8005602:	220a      	movs	r2, #10
 8005604:	4620      	mov	r0, r4
 8005606:	f000 fa39 	bl	8005a7c <__multadd>
 800560a:	9b02      	ldr	r3, [sp, #8]
 800560c:	2b00      	cmp	r3, #0
 800560e:	4607      	mov	r7, r0
 8005610:	f300 808e 	bgt.w	8005730 <_dtoa_r+0x990>
 8005614:	9b06      	ldr	r3, [sp, #24]
 8005616:	2b02      	cmp	r3, #2
 8005618:	dc51      	bgt.n	80056be <_dtoa_r+0x91e>
 800561a:	e089      	b.n	8005730 <_dtoa_r+0x990>
 800561c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800561e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005622:	e74b      	b.n	80054bc <_dtoa_r+0x71c>
 8005624:	9b03      	ldr	r3, [sp, #12]
 8005626:	1e5e      	subs	r6, r3, #1
 8005628:	9b07      	ldr	r3, [sp, #28]
 800562a:	42b3      	cmp	r3, r6
 800562c:	bfbf      	itttt	lt
 800562e:	9b07      	ldrlt	r3, [sp, #28]
 8005630:	9607      	strlt	r6, [sp, #28]
 8005632:	1af2      	sublt	r2, r6, r3
 8005634:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005636:	bfb6      	itet	lt
 8005638:	189b      	addlt	r3, r3, r2
 800563a:	1b9e      	subge	r6, r3, r6
 800563c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800563e:	9b03      	ldr	r3, [sp, #12]
 8005640:	bfb8      	it	lt
 8005642:	2600      	movlt	r6, #0
 8005644:	2b00      	cmp	r3, #0
 8005646:	bfb7      	itett	lt
 8005648:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800564c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005650:	1a9d      	sublt	r5, r3, r2
 8005652:	2300      	movlt	r3, #0
 8005654:	e734      	b.n	80054c0 <_dtoa_r+0x720>
 8005656:	9e07      	ldr	r6, [sp, #28]
 8005658:	9d04      	ldr	r5, [sp, #16]
 800565a:	9f08      	ldr	r7, [sp, #32]
 800565c:	e73b      	b.n	80054d6 <_dtoa_r+0x736>
 800565e:	9a07      	ldr	r2, [sp, #28]
 8005660:	e767      	b.n	8005532 <_dtoa_r+0x792>
 8005662:	9b06      	ldr	r3, [sp, #24]
 8005664:	2b01      	cmp	r3, #1
 8005666:	dc18      	bgt.n	800569a <_dtoa_r+0x8fa>
 8005668:	f1ba 0f00 	cmp.w	sl, #0
 800566c:	d115      	bne.n	800569a <_dtoa_r+0x8fa>
 800566e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005672:	b993      	cbnz	r3, 800569a <_dtoa_r+0x8fa>
 8005674:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005678:	0d1b      	lsrs	r3, r3, #20
 800567a:	051b      	lsls	r3, r3, #20
 800567c:	b183      	cbz	r3, 80056a0 <_dtoa_r+0x900>
 800567e:	9b04      	ldr	r3, [sp, #16]
 8005680:	3301      	adds	r3, #1
 8005682:	9304      	str	r3, [sp, #16]
 8005684:	9b05      	ldr	r3, [sp, #20]
 8005686:	3301      	adds	r3, #1
 8005688:	9305      	str	r3, [sp, #20]
 800568a:	f04f 0801 	mov.w	r8, #1
 800568e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005690:	2b00      	cmp	r3, #0
 8005692:	f47f af6a 	bne.w	800556a <_dtoa_r+0x7ca>
 8005696:	2001      	movs	r0, #1
 8005698:	e76f      	b.n	800557a <_dtoa_r+0x7da>
 800569a:	f04f 0800 	mov.w	r8, #0
 800569e:	e7f6      	b.n	800568e <_dtoa_r+0x8ee>
 80056a0:	4698      	mov	r8, r3
 80056a2:	e7f4      	b.n	800568e <_dtoa_r+0x8ee>
 80056a4:	f43f af7d 	beq.w	80055a2 <_dtoa_r+0x802>
 80056a8:	4618      	mov	r0, r3
 80056aa:	301c      	adds	r0, #28
 80056ac:	e772      	b.n	8005594 <_dtoa_r+0x7f4>
 80056ae:	9b03      	ldr	r3, [sp, #12]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	dc37      	bgt.n	8005724 <_dtoa_r+0x984>
 80056b4:	9b06      	ldr	r3, [sp, #24]
 80056b6:	2b02      	cmp	r3, #2
 80056b8:	dd34      	ble.n	8005724 <_dtoa_r+0x984>
 80056ba:	9b03      	ldr	r3, [sp, #12]
 80056bc:	9302      	str	r3, [sp, #8]
 80056be:	9b02      	ldr	r3, [sp, #8]
 80056c0:	b96b      	cbnz	r3, 80056de <_dtoa_r+0x93e>
 80056c2:	4631      	mov	r1, r6
 80056c4:	2205      	movs	r2, #5
 80056c6:	4620      	mov	r0, r4
 80056c8:	f000 f9d8 	bl	8005a7c <__multadd>
 80056cc:	4601      	mov	r1, r0
 80056ce:	4606      	mov	r6, r0
 80056d0:	ee18 0a10 	vmov	r0, s16
 80056d4:	f000 fbf2 	bl	8005ebc <__mcmp>
 80056d8:	2800      	cmp	r0, #0
 80056da:	f73f adbb 	bgt.w	8005254 <_dtoa_r+0x4b4>
 80056de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056e0:	9d01      	ldr	r5, [sp, #4]
 80056e2:	43db      	mvns	r3, r3
 80056e4:	9300      	str	r3, [sp, #0]
 80056e6:	f04f 0800 	mov.w	r8, #0
 80056ea:	4631      	mov	r1, r6
 80056ec:	4620      	mov	r0, r4
 80056ee:	f000 f9a3 	bl	8005a38 <_Bfree>
 80056f2:	2f00      	cmp	r7, #0
 80056f4:	f43f aea4 	beq.w	8005440 <_dtoa_r+0x6a0>
 80056f8:	f1b8 0f00 	cmp.w	r8, #0
 80056fc:	d005      	beq.n	800570a <_dtoa_r+0x96a>
 80056fe:	45b8      	cmp	r8, r7
 8005700:	d003      	beq.n	800570a <_dtoa_r+0x96a>
 8005702:	4641      	mov	r1, r8
 8005704:	4620      	mov	r0, r4
 8005706:	f000 f997 	bl	8005a38 <_Bfree>
 800570a:	4639      	mov	r1, r7
 800570c:	4620      	mov	r0, r4
 800570e:	f000 f993 	bl	8005a38 <_Bfree>
 8005712:	e695      	b.n	8005440 <_dtoa_r+0x6a0>
 8005714:	2600      	movs	r6, #0
 8005716:	4637      	mov	r7, r6
 8005718:	e7e1      	b.n	80056de <_dtoa_r+0x93e>
 800571a:	9700      	str	r7, [sp, #0]
 800571c:	4637      	mov	r7, r6
 800571e:	e599      	b.n	8005254 <_dtoa_r+0x4b4>
 8005720:	40240000 	.word	0x40240000
 8005724:	9b08      	ldr	r3, [sp, #32]
 8005726:	2b00      	cmp	r3, #0
 8005728:	f000 80ca 	beq.w	80058c0 <_dtoa_r+0xb20>
 800572c:	9b03      	ldr	r3, [sp, #12]
 800572e:	9302      	str	r3, [sp, #8]
 8005730:	2d00      	cmp	r5, #0
 8005732:	dd05      	ble.n	8005740 <_dtoa_r+0x9a0>
 8005734:	4639      	mov	r1, r7
 8005736:	462a      	mov	r2, r5
 8005738:	4620      	mov	r0, r4
 800573a:	f000 fb4f 	bl	8005ddc <__lshift>
 800573e:	4607      	mov	r7, r0
 8005740:	f1b8 0f00 	cmp.w	r8, #0
 8005744:	d05b      	beq.n	80057fe <_dtoa_r+0xa5e>
 8005746:	6879      	ldr	r1, [r7, #4]
 8005748:	4620      	mov	r0, r4
 800574a:	f000 f935 	bl	80059b8 <_Balloc>
 800574e:	4605      	mov	r5, r0
 8005750:	b928      	cbnz	r0, 800575e <_dtoa_r+0x9be>
 8005752:	4b87      	ldr	r3, [pc, #540]	; (8005970 <_dtoa_r+0xbd0>)
 8005754:	4602      	mov	r2, r0
 8005756:	f240 21ea 	movw	r1, #746	; 0x2ea
 800575a:	f7ff bb3b 	b.w	8004dd4 <_dtoa_r+0x34>
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	3202      	adds	r2, #2
 8005762:	0092      	lsls	r2, r2, #2
 8005764:	f107 010c 	add.w	r1, r7, #12
 8005768:	300c      	adds	r0, #12
 800576a:	f000 f90b 	bl	8005984 <memcpy>
 800576e:	2201      	movs	r2, #1
 8005770:	4629      	mov	r1, r5
 8005772:	4620      	mov	r0, r4
 8005774:	f000 fb32 	bl	8005ddc <__lshift>
 8005778:	9b01      	ldr	r3, [sp, #4]
 800577a:	f103 0901 	add.w	r9, r3, #1
 800577e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8005782:	4413      	add	r3, r2
 8005784:	9305      	str	r3, [sp, #20]
 8005786:	f00a 0301 	and.w	r3, sl, #1
 800578a:	46b8      	mov	r8, r7
 800578c:	9304      	str	r3, [sp, #16]
 800578e:	4607      	mov	r7, r0
 8005790:	4631      	mov	r1, r6
 8005792:	ee18 0a10 	vmov	r0, s16
 8005796:	f7ff fa75 	bl	8004c84 <quorem>
 800579a:	4641      	mov	r1, r8
 800579c:	9002      	str	r0, [sp, #8]
 800579e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80057a2:	ee18 0a10 	vmov	r0, s16
 80057a6:	f000 fb89 	bl	8005ebc <__mcmp>
 80057aa:	463a      	mov	r2, r7
 80057ac:	9003      	str	r0, [sp, #12]
 80057ae:	4631      	mov	r1, r6
 80057b0:	4620      	mov	r0, r4
 80057b2:	f000 fb9f 	bl	8005ef4 <__mdiff>
 80057b6:	68c2      	ldr	r2, [r0, #12]
 80057b8:	f109 3bff 	add.w	fp, r9, #4294967295
 80057bc:	4605      	mov	r5, r0
 80057be:	bb02      	cbnz	r2, 8005802 <_dtoa_r+0xa62>
 80057c0:	4601      	mov	r1, r0
 80057c2:	ee18 0a10 	vmov	r0, s16
 80057c6:	f000 fb79 	bl	8005ebc <__mcmp>
 80057ca:	4602      	mov	r2, r0
 80057cc:	4629      	mov	r1, r5
 80057ce:	4620      	mov	r0, r4
 80057d0:	9207      	str	r2, [sp, #28]
 80057d2:	f000 f931 	bl	8005a38 <_Bfree>
 80057d6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80057da:	ea43 0102 	orr.w	r1, r3, r2
 80057de:	9b04      	ldr	r3, [sp, #16]
 80057e0:	430b      	orrs	r3, r1
 80057e2:	464d      	mov	r5, r9
 80057e4:	d10f      	bne.n	8005806 <_dtoa_r+0xa66>
 80057e6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80057ea:	d02a      	beq.n	8005842 <_dtoa_r+0xaa2>
 80057ec:	9b03      	ldr	r3, [sp, #12]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	dd02      	ble.n	80057f8 <_dtoa_r+0xa58>
 80057f2:	9b02      	ldr	r3, [sp, #8]
 80057f4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80057f8:	f88b a000 	strb.w	sl, [fp]
 80057fc:	e775      	b.n	80056ea <_dtoa_r+0x94a>
 80057fe:	4638      	mov	r0, r7
 8005800:	e7ba      	b.n	8005778 <_dtoa_r+0x9d8>
 8005802:	2201      	movs	r2, #1
 8005804:	e7e2      	b.n	80057cc <_dtoa_r+0xa2c>
 8005806:	9b03      	ldr	r3, [sp, #12]
 8005808:	2b00      	cmp	r3, #0
 800580a:	db04      	blt.n	8005816 <_dtoa_r+0xa76>
 800580c:	9906      	ldr	r1, [sp, #24]
 800580e:	430b      	orrs	r3, r1
 8005810:	9904      	ldr	r1, [sp, #16]
 8005812:	430b      	orrs	r3, r1
 8005814:	d122      	bne.n	800585c <_dtoa_r+0xabc>
 8005816:	2a00      	cmp	r2, #0
 8005818:	ddee      	ble.n	80057f8 <_dtoa_r+0xa58>
 800581a:	ee18 1a10 	vmov	r1, s16
 800581e:	2201      	movs	r2, #1
 8005820:	4620      	mov	r0, r4
 8005822:	f000 fadb 	bl	8005ddc <__lshift>
 8005826:	4631      	mov	r1, r6
 8005828:	ee08 0a10 	vmov	s16, r0
 800582c:	f000 fb46 	bl	8005ebc <__mcmp>
 8005830:	2800      	cmp	r0, #0
 8005832:	dc03      	bgt.n	800583c <_dtoa_r+0xa9c>
 8005834:	d1e0      	bne.n	80057f8 <_dtoa_r+0xa58>
 8005836:	f01a 0f01 	tst.w	sl, #1
 800583a:	d0dd      	beq.n	80057f8 <_dtoa_r+0xa58>
 800583c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005840:	d1d7      	bne.n	80057f2 <_dtoa_r+0xa52>
 8005842:	2339      	movs	r3, #57	; 0x39
 8005844:	f88b 3000 	strb.w	r3, [fp]
 8005848:	462b      	mov	r3, r5
 800584a:	461d      	mov	r5, r3
 800584c:	3b01      	subs	r3, #1
 800584e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005852:	2a39      	cmp	r2, #57	; 0x39
 8005854:	d071      	beq.n	800593a <_dtoa_r+0xb9a>
 8005856:	3201      	adds	r2, #1
 8005858:	701a      	strb	r2, [r3, #0]
 800585a:	e746      	b.n	80056ea <_dtoa_r+0x94a>
 800585c:	2a00      	cmp	r2, #0
 800585e:	dd07      	ble.n	8005870 <_dtoa_r+0xad0>
 8005860:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005864:	d0ed      	beq.n	8005842 <_dtoa_r+0xaa2>
 8005866:	f10a 0301 	add.w	r3, sl, #1
 800586a:	f88b 3000 	strb.w	r3, [fp]
 800586e:	e73c      	b.n	80056ea <_dtoa_r+0x94a>
 8005870:	9b05      	ldr	r3, [sp, #20]
 8005872:	f809 ac01 	strb.w	sl, [r9, #-1]
 8005876:	4599      	cmp	r9, r3
 8005878:	d047      	beq.n	800590a <_dtoa_r+0xb6a>
 800587a:	ee18 1a10 	vmov	r1, s16
 800587e:	2300      	movs	r3, #0
 8005880:	220a      	movs	r2, #10
 8005882:	4620      	mov	r0, r4
 8005884:	f000 f8fa 	bl	8005a7c <__multadd>
 8005888:	45b8      	cmp	r8, r7
 800588a:	ee08 0a10 	vmov	s16, r0
 800588e:	f04f 0300 	mov.w	r3, #0
 8005892:	f04f 020a 	mov.w	r2, #10
 8005896:	4641      	mov	r1, r8
 8005898:	4620      	mov	r0, r4
 800589a:	d106      	bne.n	80058aa <_dtoa_r+0xb0a>
 800589c:	f000 f8ee 	bl	8005a7c <__multadd>
 80058a0:	4680      	mov	r8, r0
 80058a2:	4607      	mov	r7, r0
 80058a4:	f109 0901 	add.w	r9, r9, #1
 80058a8:	e772      	b.n	8005790 <_dtoa_r+0x9f0>
 80058aa:	f000 f8e7 	bl	8005a7c <__multadd>
 80058ae:	4639      	mov	r1, r7
 80058b0:	4680      	mov	r8, r0
 80058b2:	2300      	movs	r3, #0
 80058b4:	220a      	movs	r2, #10
 80058b6:	4620      	mov	r0, r4
 80058b8:	f000 f8e0 	bl	8005a7c <__multadd>
 80058bc:	4607      	mov	r7, r0
 80058be:	e7f1      	b.n	80058a4 <_dtoa_r+0xb04>
 80058c0:	9b03      	ldr	r3, [sp, #12]
 80058c2:	9302      	str	r3, [sp, #8]
 80058c4:	9d01      	ldr	r5, [sp, #4]
 80058c6:	ee18 0a10 	vmov	r0, s16
 80058ca:	4631      	mov	r1, r6
 80058cc:	f7ff f9da 	bl	8004c84 <quorem>
 80058d0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80058d4:	9b01      	ldr	r3, [sp, #4]
 80058d6:	f805 ab01 	strb.w	sl, [r5], #1
 80058da:	1aea      	subs	r2, r5, r3
 80058dc:	9b02      	ldr	r3, [sp, #8]
 80058de:	4293      	cmp	r3, r2
 80058e0:	dd09      	ble.n	80058f6 <_dtoa_r+0xb56>
 80058e2:	ee18 1a10 	vmov	r1, s16
 80058e6:	2300      	movs	r3, #0
 80058e8:	220a      	movs	r2, #10
 80058ea:	4620      	mov	r0, r4
 80058ec:	f000 f8c6 	bl	8005a7c <__multadd>
 80058f0:	ee08 0a10 	vmov	s16, r0
 80058f4:	e7e7      	b.n	80058c6 <_dtoa_r+0xb26>
 80058f6:	9b02      	ldr	r3, [sp, #8]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	bfc8      	it	gt
 80058fc:	461d      	movgt	r5, r3
 80058fe:	9b01      	ldr	r3, [sp, #4]
 8005900:	bfd8      	it	le
 8005902:	2501      	movle	r5, #1
 8005904:	441d      	add	r5, r3
 8005906:	f04f 0800 	mov.w	r8, #0
 800590a:	ee18 1a10 	vmov	r1, s16
 800590e:	2201      	movs	r2, #1
 8005910:	4620      	mov	r0, r4
 8005912:	f000 fa63 	bl	8005ddc <__lshift>
 8005916:	4631      	mov	r1, r6
 8005918:	ee08 0a10 	vmov	s16, r0
 800591c:	f000 face 	bl	8005ebc <__mcmp>
 8005920:	2800      	cmp	r0, #0
 8005922:	dc91      	bgt.n	8005848 <_dtoa_r+0xaa8>
 8005924:	d102      	bne.n	800592c <_dtoa_r+0xb8c>
 8005926:	f01a 0f01 	tst.w	sl, #1
 800592a:	d18d      	bne.n	8005848 <_dtoa_r+0xaa8>
 800592c:	462b      	mov	r3, r5
 800592e:	461d      	mov	r5, r3
 8005930:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005934:	2a30      	cmp	r2, #48	; 0x30
 8005936:	d0fa      	beq.n	800592e <_dtoa_r+0xb8e>
 8005938:	e6d7      	b.n	80056ea <_dtoa_r+0x94a>
 800593a:	9a01      	ldr	r2, [sp, #4]
 800593c:	429a      	cmp	r2, r3
 800593e:	d184      	bne.n	800584a <_dtoa_r+0xaaa>
 8005940:	9b00      	ldr	r3, [sp, #0]
 8005942:	3301      	adds	r3, #1
 8005944:	9300      	str	r3, [sp, #0]
 8005946:	2331      	movs	r3, #49	; 0x31
 8005948:	7013      	strb	r3, [r2, #0]
 800594a:	e6ce      	b.n	80056ea <_dtoa_r+0x94a>
 800594c:	4b09      	ldr	r3, [pc, #36]	; (8005974 <_dtoa_r+0xbd4>)
 800594e:	f7ff ba95 	b.w	8004e7c <_dtoa_r+0xdc>
 8005952:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005954:	2b00      	cmp	r3, #0
 8005956:	f47f aa6e 	bne.w	8004e36 <_dtoa_r+0x96>
 800595a:	4b07      	ldr	r3, [pc, #28]	; (8005978 <_dtoa_r+0xbd8>)
 800595c:	f7ff ba8e 	b.w	8004e7c <_dtoa_r+0xdc>
 8005960:	9b02      	ldr	r3, [sp, #8]
 8005962:	2b00      	cmp	r3, #0
 8005964:	dcae      	bgt.n	80058c4 <_dtoa_r+0xb24>
 8005966:	9b06      	ldr	r3, [sp, #24]
 8005968:	2b02      	cmp	r3, #2
 800596a:	f73f aea8 	bgt.w	80056be <_dtoa_r+0x91e>
 800596e:	e7a9      	b.n	80058c4 <_dtoa_r+0xb24>
 8005970:	0800af5f 	.word	0x0800af5f
 8005974:	0800aebc 	.word	0x0800aebc
 8005978:	0800aee0 	.word	0x0800aee0

0800597c <_localeconv_r>:
 800597c:	4800      	ldr	r0, [pc, #0]	; (8005980 <_localeconv_r+0x4>)
 800597e:	4770      	bx	lr
 8005980:	20000174 	.word	0x20000174

08005984 <memcpy>:
 8005984:	440a      	add	r2, r1
 8005986:	4291      	cmp	r1, r2
 8005988:	f100 33ff 	add.w	r3, r0, #4294967295
 800598c:	d100      	bne.n	8005990 <memcpy+0xc>
 800598e:	4770      	bx	lr
 8005990:	b510      	push	{r4, lr}
 8005992:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005996:	f803 4f01 	strb.w	r4, [r3, #1]!
 800599a:	4291      	cmp	r1, r2
 800599c:	d1f9      	bne.n	8005992 <memcpy+0xe>
 800599e:	bd10      	pop	{r4, pc}

080059a0 <__malloc_lock>:
 80059a0:	4801      	ldr	r0, [pc, #4]	; (80059a8 <__malloc_lock+0x8>)
 80059a2:	f000 bbd4 	b.w	800614e <__retarget_lock_acquire_recursive>
 80059a6:	bf00      	nop
 80059a8:	20000244 	.word	0x20000244

080059ac <__malloc_unlock>:
 80059ac:	4801      	ldr	r0, [pc, #4]	; (80059b4 <__malloc_unlock+0x8>)
 80059ae:	f000 bbcf 	b.w	8006150 <__retarget_lock_release_recursive>
 80059b2:	bf00      	nop
 80059b4:	20000244 	.word	0x20000244

080059b8 <_Balloc>:
 80059b8:	b570      	push	{r4, r5, r6, lr}
 80059ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80059bc:	4604      	mov	r4, r0
 80059be:	460d      	mov	r5, r1
 80059c0:	b976      	cbnz	r6, 80059e0 <_Balloc+0x28>
 80059c2:	2010      	movs	r0, #16
 80059c4:	f7fe fbf4 	bl	80041b0 <malloc>
 80059c8:	4602      	mov	r2, r0
 80059ca:	6260      	str	r0, [r4, #36]	; 0x24
 80059cc:	b920      	cbnz	r0, 80059d8 <_Balloc+0x20>
 80059ce:	4b18      	ldr	r3, [pc, #96]	; (8005a30 <_Balloc+0x78>)
 80059d0:	4818      	ldr	r0, [pc, #96]	; (8005a34 <_Balloc+0x7c>)
 80059d2:	2166      	movs	r1, #102	; 0x66
 80059d4:	f000 fb8a 	bl	80060ec <__assert_func>
 80059d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80059dc:	6006      	str	r6, [r0, #0]
 80059de:	60c6      	str	r6, [r0, #12]
 80059e0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80059e2:	68f3      	ldr	r3, [r6, #12]
 80059e4:	b183      	cbz	r3, 8005a08 <_Balloc+0x50>
 80059e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80059ee:	b9b8      	cbnz	r0, 8005a20 <_Balloc+0x68>
 80059f0:	2101      	movs	r1, #1
 80059f2:	fa01 f605 	lsl.w	r6, r1, r5
 80059f6:	1d72      	adds	r2, r6, #5
 80059f8:	0092      	lsls	r2, r2, #2
 80059fa:	4620      	mov	r0, r4
 80059fc:	f000 fb60 	bl	80060c0 <_calloc_r>
 8005a00:	b160      	cbz	r0, 8005a1c <_Balloc+0x64>
 8005a02:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005a06:	e00e      	b.n	8005a26 <_Balloc+0x6e>
 8005a08:	2221      	movs	r2, #33	; 0x21
 8005a0a:	2104      	movs	r1, #4
 8005a0c:	4620      	mov	r0, r4
 8005a0e:	f000 fb57 	bl	80060c0 <_calloc_r>
 8005a12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a14:	60f0      	str	r0, [r6, #12]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d1e4      	bne.n	80059e6 <_Balloc+0x2e>
 8005a1c:	2000      	movs	r0, #0
 8005a1e:	bd70      	pop	{r4, r5, r6, pc}
 8005a20:	6802      	ldr	r2, [r0, #0]
 8005a22:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005a26:	2300      	movs	r3, #0
 8005a28:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005a2c:	e7f7      	b.n	8005a1e <_Balloc+0x66>
 8005a2e:	bf00      	nop
 8005a30:	0800aeed 	.word	0x0800aeed
 8005a34:	0800af70 	.word	0x0800af70

08005a38 <_Bfree>:
 8005a38:	b570      	push	{r4, r5, r6, lr}
 8005a3a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005a3c:	4605      	mov	r5, r0
 8005a3e:	460c      	mov	r4, r1
 8005a40:	b976      	cbnz	r6, 8005a60 <_Bfree+0x28>
 8005a42:	2010      	movs	r0, #16
 8005a44:	f7fe fbb4 	bl	80041b0 <malloc>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	6268      	str	r0, [r5, #36]	; 0x24
 8005a4c:	b920      	cbnz	r0, 8005a58 <_Bfree+0x20>
 8005a4e:	4b09      	ldr	r3, [pc, #36]	; (8005a74 <_Bfree+0x3c>)
 8005a50:	4809      	ldr	r0, [pc, #36]	; (8005a78 <_Bfree+0x40>)
 8005a52:	218a      	movs	r1, #138	; 0x8a
 8005a54:	f000 fb4a 	bl	80060ec <__assert_func>
 8005a58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005a5c:	6006      	str	r6, [r0, #0]
 8005a5e:	60c6      	str	r6, [r0, #12]
 8005a60:	b13c      	cbz	r4, 8005a72 <_Bfree+0x3a>
 8005a62:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005a64:	6862      	ldr	r2, [r4, #4]
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005a6c:	6021      	str	r1, [r4, #0]
 8005a6e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005a72:	bd70      	pop	{r4, r5, r6, pc}
 8005a74:	0800aeed 	.word	0x0800aeed
 8005a78:	0800af70 	.word	0x0800af70

08005a7c <__multadd>:
 8005a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a80:	690d      	ldr	r5, [r1, #16]
 8005a82:	4607      	mov	r7, r0
 8005a84:	460c      	mov	r4, r1
 8005a86:	461e      	mov	r6, r3
 8005a88:	f101 0c14 	add.w	ip, r1, #20
 8005a8c:	2000      	movs	r0, #0
 8005a8e:	f8dc 3000 	ldr.w	r3, [ip]
 8005a92:	b299      	uxth	r1, r3
 8005a94:	fb02 6101 	mla	r1, r2, r1, r6
 8005a98:	0c1e      	lsrs	r6, r3, #16
 8005a9a:	0c0b      	lsrs	r3, r1, #16
 8005a9c:	fb02 3306 	mla	r3, r2, r6, r3
 8005aa0:	b289      	uxth	r1, r1
 8005aa2:	3001      	adds	r0, #1
 8005aa4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005aa8:	4285      	cmp	r5, r0
 8005aaa:	f84c 1b04 	str.w	r1, [ip], #4
 8005aae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005ab2:	dcec      	bgt.n	8005a8e <__multadd+0x12>
 8005ab4:	b30e      	cbz	r6, 8005afa <__multadd+0x7e>
 8005ab6:	68a3      	ldr	r3, [r4, #8]
 8005ab8:	42ab      	cmp	r3, r5
 8005aba:	dc19      	bgt.n	8005af0 <__multadd+0x74>
 8005abc:	6861      	ldr	r1, [r4, #4]
 8005abe:	4638      	mov	r0, r7
 8005ac0:	3101      	adds	r1, #1
 8005ac2:	f7ff ff79 	bl	80059b8 <_Balloc>
 8005ac6:	4680      	mov	r8, r0
 8005ac8:	b928      	cbnz	r0, 8005ad6 <__multadd+0x5a>
 8005aca:	4602      	mov	r2, r0
 8005acc:	4b0c      	ldr	r3, [pc, #48]	; (8005b00 <__multadd+0x84>)
 8005ace:	480d      	ldr	r0, [pc, #52]	; (8005b04 <__multadd+0x88>)
 8005ad0:	21b5      	movs	r1, #181	; 0xb5
 8005ad2:	f000 fb0b 	bl	80060ec <__assert_func>
 8005ad6:	6922      	ldr	r2, [r4, #16]
 8005ad8:	3202      	adds	r2, #2
 8005ada:	f104 010c 	add.w	r1, r4, #12
 8005ade:	0092      	lsls	r2, r2, #2
 8005ae0:	300c      	adds	r0, #12
 8005ae2:	f7ff ff4f 	bl	8005984 <memcpy>
 8005ae6:	4621      	mov	r1, r4
 8005ae8:	4638      	mov	r0, r7
 8005aea:	f7ff ffa5 	bl	8005a38 <_Bfree>
 8005aee:	4644      	mov	r4, r8
 8005af0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005af4:	3501      	adds	r5, #1
 8005af6:	615e      	str	r6, [r3, #20]
 8005af8:	6125      	str	r5, [r4, #16]
 8005afa:	4620      	mov	r0, r4
 8005afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b00:	0800af5f 	.word	0x0800af5f
 8005b04:	0800af70 	.word	0x0800af70

08005b08 <__hi0bits>:
 8005b08:	0c03      	lsrs	r3, r0, #16
 8005b0a:	041b      	lsls	r3, r3, #16
 8005b0c:	b9d3      	cbnz	r3, 8005b44 <__hi0bits+0x3c>
 8005b0e:	0400      	lsls	r0, r0, #16
 8005b10:	2310      	movs	r3, #16
 8005b12:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005b16:	bf04      	itt	eq
 8005b18:	0200      	lsleq	r0, r0, #8
 8005b1a:	3308      	addeq	r3, #8
 8005b1c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005b20:	bf04      	itt	eq
 8005b22:	0100      	lsleq	r0, r0, #4
 8005b24:	3304      	addeq	r3, #4
 8005b26:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005b2a:	bf04      	itt	eq
 8005b2c:	0080      	lsleq	r0, r0, #2
 8005b2e:	3302      	addeq	r3, #2
 8005b30:	2800      	cmp	r0, #0
 8005b32:	db05      	blt.n	8005b40 <__hi0bits+0x38>
 8005b34:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005b38:	f103 0301 	add.w	r3, r3, #1
 8005b3c:	bf08      	it	eq
 8005b3e:	2320      	moveq	r3, #32
 8005b40:	4618      	mov	r0, r3
 8005b42:	4770      	bx	lr
 8005b44:	2300      	movs	r3, #0
 8005b46:	e7e4      	b.n	8005b12 <__hi0bits+0xa>

08005b48 <__lo0bits>:
 8005b48:	6803      	ldr	r3, [r0, #0]
 8005b4a:	f013 0207 	ands.w	r2, r3, #7
 8005b4e:	4601      	mov	r1, r0
 8005b50:	d00b      	beq.n	8005b6a <__lo0bits+0x22>
 8005b52:	07da      	lsls	r2, r3, #31
 8005b54:	d423      	bmi.n	8005b9e <__lo0bits+0x56>
 8005b56:	0798      	lsls	r0, r3, #30
 8005b58:	bf49      	itett	mi
 8005b5a:	085b      	lsrmi	r3, r3, #1
 8005b5c:	089b      	lsrpl	r3, r3, #2
 8005b5e:	2001      	movmi	r0, #1
 8005b60:	600b      	strmi	r3, [r1, #0]
 8005b62:	bf5c      	itt	pl
 8005b64:	600b      	strpl	r3, [r1, #0]
 8005b66:	2002      	movpl	r0, #2
 8005b68:	4770      	bx	lr
 8005b6a:	b298      	uxth	r0, r3
 8005b6c:	b9a8      	cbnz	r0, 8005b9a <__lo0bits+0x52>
 8005b6e:	0c1b      	lsrs	r3, r3, #16
 8005b70:	2010      	movs	r0, #16
 8005b72:	b2da      	uxtb	r2, r3
 8005b74:	b90a      	cbnz	r2, 8005b7a <__lo0bits+0x32>
 8005b76:	3008      	adds	r0, #8
 8005b78:	0a1b      	lsrs	r3, r3, #8
 8005b7a:	071a      	lsls	r2, r3, #28
 8005b7c:	bf04      	itt	eq
 8005b7e:	091b      	lsreq	r3, r3, #4
 8005b80:	3004      	addeq	r0, #4
 8005b82:	079a      	lsls	r2, r3, #30
 8005b84:	bf04      	itt	eq
 8005b86:	089b      	lsreq	r3, r3, #2
 8005b88:	3002      	addeq	r0, #2
 8005b8a:	07da      	lsls	r2, r3, #31
 8005b8c:	d403      	bmi.n	8005b96 <__lo0bits+0x4e>
 8005b8e:	085b      	lsrs	r3, r3, #1
 8005b90:	f100 0001 	add.w	r0, r0, #1
 8005b94:	d005      	beq.n	8005ba2 <__lo0bits+0x5a>
 8005b96:	600b      	str	r3, [r1, #0]
 8005b98:	4770      	bx	lr
 8005b9a:	4610      	mov	r0, r2
 8005b9c:	e7e9      	b.n	8005b72 <__lo0bits+0x2a>
 8005b9e:	2000      	movs	r0, #0
 8005ba0:	4770      	bx	lr
 8005ba2:	2020      	movs	r0, #32
 8005ba4:	4770      	bx	lr
	...

08005ba8 <__i2b>:
 8005ba8:	b510      	push	{r4, lr}
 8005baa:	460c      	mov	r4, r1
 8005bac:	2101      	movs	r1, #1
 8005bae:	f7ff ff03 	bl	80059b8 <_Balloc>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	b928      	cbnz	r0, 8005bc2 <__i2b+0x1a>
 8005bb6:	4b05      	ldr	r3, [pc, #20]	; (8005bcc <__i2b+0x24>)
 8005bb8:	4805      	ldr	r0, [pc, #20]	; (8005bd0 <__i2b+0x28>)
 8005bba:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005bbe:	f000 fa95 	bl	80060ec <__assert_func>
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	6144      	str	r4, [r0, #20]
 8005bc6:	6103      	str	r3, [r0, #16]
 8005bc8:	bd10      	pop	{r4, pc}
 8005bca:	bf00      	nop
 8005bcc:	0800af5f 	.word	0x0800af5f
 8005bd0:	0800af70 	.word	0x0800af70

08005bd4 <__multiply>:
 8005bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bd8:	4691      	mov	r9, r2
 8005bda:	690a      	ldr	r2, [r1, #16]
 8005bdc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	bfb8      	it	lt
 8005be4:	460b      	movlt	r3, r1
 8005be6:	460c      	mov	r4, r1
 8005be8:	bfbc      	itt	lt
 8005bea:	464c      	movlt	r4, r9
 8005bec:	4699      	movlt	r9, r3
 8005bee:	6927      	ldr	r7, [r4, #16]
 8005bf0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005bf4:	68a3      	ldr	r3, [r4, #8]
 8005bf6:	6861      	ldr	r1, [r4, #4]
 8005bf8:	eb07 060a 	add.w	r6, r7, sl
 8005bfc:	42b3      	cmp	r3, r6
 8005bfe:	b085      	sub	sp, #20
 8005c00:	bfb8      	it	lt
 8005c02:	3101      	addlt	r1, #1
 8005c04:	f7ff fed8 	bl	80059b8 <_Balloc>
 8005c08:	b930      	cbnz	r0, 8005c18 <__multiply+0x44>
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	4b44      	ldr	r3, [pc, #272]	; (8005d20 <__multiply+0x14c>)
 8005c0e:	4845      	ldr	r0, [pc, #276]	; (8005d24 <__multiply+0x150>)
 8005c10:	f240 115d 	movw	r1, #349	; 0x15d
 8005c14:	f000 fa6a 	bl	80060ec <__assert_func>
 8005c18:	f100 0514 	add.w	r5, r0, #20
 8005c1c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005c20:	462b      	mov	r3, r5
 8005c22:	2200      	movs	r2, #0
 8005c24:	4543      	cmp	r3, r8
 8005c26:	d321      	bcc.n	8005c6c <__multiply+0x98>
 8005c28:	f104 0314 	add.w	r3, r4, #20
 8005c2c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005c30:	f109 0314 	add.w	r3, r9, #20
 8005c34:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005c38:	9202      	str	r2, [sp, #8]
 8005c3a:	1b3a      	subs	r2, r7, r4
 8005c3c:	3a15      	subs	r2, #21
 8005c3e:	f022 0203 	bic.w	r2, r2, #3
 8005c42:	3204      	adds	r2, #4
 8005c44:	f104 0115 	add.w	r1, r4, #21
 8005c48:	428f      	cmp	r7, r1
 8005c4a:	bf38      	it	cc
 8005c4c:	2204      	movcc	r2, #4
 8005c4e:	9201      	str	r2, [sp, #4]
 8005c50:	9a02      	ldr	r2, [sp, #8]
 8005c52:	9303      	str	r3, [sp, #12]
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d80c      	bhi.n	8005c72 <__multiply+0x9e>
 8005c58:	2e00      	cmp	r6, #0
 8005c5a:	dd03      	ble.n	8005c64 <__multiply+0x90>
 8005c5c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d05a      	beq.n	8005d1a <__multiply+0x146>
 8005c64:	6106      	str	r6, [r0, #16]
 8005c66:	b005      	add	sp, #20
 8005c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c6c:	f843 2b04 	str.w	r2, [r3], #4
 8005c70:	e7d8      	b.n	8005c24 <__multiply+0x50>
 8005c72:	f8b3 a000 	ldrh.w	sl, [r3]
 8005c76:	f1ba 0f00 	cmp.w	sl, #0
 8005c7a:	d024      	beq.n	8005cc6 <__multiply+0xf2>
 8005c7c:	f104 0e14 	add.w	lr, r4, #20
 8005c80:	46a9      	mov	r9, r5
 8005c82:	f04f 0c00 	mov.w	ip, #0
 8005c86:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005c8a:	f8d9 1000 	ldr.w	r1, [r9]
 8005c8e:	fa1f fb82 	uxth.w	fp, r2
 8005c92:	b289      	uxth	r1, r1
 8005c94:	fb0a 110b 	mla	r1, sl, fp, r1
 8005c98:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005c9c:	f8d9 2000 	ldr.w	r2, [r9]
 8005ca0:	4461      	add	r1, ip
 8005ca2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005ca6:	fb0a c20b 	mla	r2, sl, fp, ip
 8005caa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005cae:	b289      	uxth	r1, r1
 8005cb0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005cb4:	4577      	cmp	r7, lr
 8005cb6:	f849 1b04 	str.w	r1, [r9], #4
 8005cba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005cbe:	d8e2      	bhi.n	8005c86 <__multiply+0xb2>
 8005cc0:	9a01      	ldr	r2, [sp, #4]
 8005cc2:	f845 c002 	str.w	ip, [r5, r2]
 8005cc6:	9a03      	ldr	r2, [sp, #12]
 8005cc8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005ccc:	3304      	adds	r3, #4
 8005cce:	f1b9 0f00 	cmp.w	r9, #0
 8005cd2:	d020      	beq.n	8005d16 <__multiply+0x142>
 8005cd4:	6829      	ldr	r1, [r5, #0]
 8005cd6:	f104 0c14 	add.w	ip, r4, #20
 8005cda:	46ae      	mov	lr, r5
 8005cdc:	f04f 0a00 	mov.w	sl, #0
 8005ce0:	f8bc b000 	ldrh.w	fp, [ip]
 8005ce4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005ce8:	fb09 220b 	mla	r2, r9, fp, r2
 8005cec:	4492      	add	sl, r2
 8005cee:	b289      	uxth	r1, r1
 8005cf0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005cf4:	f84e 1b04 	str.w	r1, [lr], #4
 8005cf8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005cfc:	f8be 1000 	ldrh.w	r1, [lr]
 8005d00:	0c12      	lsrs	r2, r2, #16
 8005d02:	fb09 1102 	mla	r1, r9, r2, r1
 8005d06:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005d0a:	4567      	cmp	r7, ip
 8005d0c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005d10:	d8e6      	bhi.n	8005ce0 <__multiply+0x10c>
 8005d12:	9a01      	ldr	r2, [sp, #4]
 8005d14:	50a9      	str	r1, [r5, r2]
 8005d16:	3504      	adds	r5, #4
 8005d18:	e79a      	b.n	8005c50 <__multiply+0x7c>
 8005d1a:	3e01      	subs	r6, #1
 8005d1c:	e79c      	b.n	8005c58 <__multiply+0x84>
 8005d1e:	bf00      	nop
 8005d20:	0800af5f 	.word	0x0800af5f
 8005d24:	0800af70 	.word	0x0800af70

08005d28 <__pow5mult>:
 8005d28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d2c:	4615      	mov	r5, r2
 8005d2e:	f012 0203 	ands.w	r2, r2, #3
 8005d32:	4606      	mov	r6, r0
 8005d34:	460f      	mov	r7, r1
 8005d36:	d007      	beq.n	8005d48 <__pow5mult+0x20>
 8005d38:	4c25      	ldr	r4, [pc, #148]	; (8005dd0 <__pow5mult+0xa8>)
 8005d3a:	3a01      	subs	r2, #1
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005d42:	f7ff fe9b 	bl	8005a7c <__multadd>
 8005d46:	4607      	mov	r7, r0
 8005d48:	10ad      	asrs	r5, r5, #2
 8005d4a:	d03d      	beq.n	8005dc8 <__pow5mult+0xa0>
 8005d4c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005d4e:	b97c      	cbnz	r4, 8005d70 <__pow5mult+0x48>
 8005d50:	2010      	movs	r0, #16
 8005d52:	f7fe fa2d 	bl	80041b0 <malloc>
 8005d56:	4602      	mov	r2, r0
 8005d58:	6270      	str	r0, [r6, #36]	; 0x24
 8005d5a:	b928      	cbnz	r0, 8005d68 <__pow5mult+0x40>
 8005d5c:	4b1d      	ldr	r3, [pc, #116]	; (8005dd4 <__pow5mult+0xac>)
 8005d5e:	481e      	ldr	r0, [pc, #120]	; (8005dd8 <__pow5mult+0xb0>)
 8005d60:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005d64:	f000 f9c2 	bl	80060ec <__assert_func>
 8005d68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005d6c:	6004      	str	r4, [r0, #0]
 8005d6e:	60c4      	str	r4, [r0, #12]
 8005d70:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005d74:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005d78:	b94c      	cbnz	r4, 8005d8e <__pow5mult+0x66>
 8005d7a:	f240 2171 	movw	r1, #625	; 0x271
 8005d7e:	4630      	mov	r0, r6
 8005d80:	f7ff ff12 	bl	8005ba8 <__i2b>
 8005d84:	2300      	movs	r3, #0
 8005d86:	f8c8 0008 	str.w	r0, [r8, #8]
 8005d8a:	4604      	mov	r4, r0
 8005d8c:	6003      	str	r3, [r0, #0]
 8005d8e:	f04f 0900 	mov.w	r9, #0
 8005d92:	07eb      	lsls	r3, r5, #31
 8005d94:	d50a      	bpl.n	8005dac <__pow5mult+0x84>
 8005d96:	4639      	mov	r1, r7
 8005d98:	4622      	mov	r2, r4
 8005d9a:	4630      	mov	r0, r6
 8005d9c:	f7ff ff1a 	bl	8005bd4 <__multiply>
 8005da0:	4639      	mov	r1, r7
 8005da2:	4680      	mov	r8, r0
 8005da4:	4630      	mov	r0, r6
 8005da6:	f7ff fe47 	bl	8005a38 <_Bfree>
 8005daa:	4647      	mov	r7, r8
 8005dac:	106d      	asrs	r5, r5, #1
 8005dae:	d00b      	beq.n	8005dc8 <__pow5mult+0xa0>
 8005db0:	6820      	ldr	r0, [r4, #0]
 8005db2:	b938      	cbnz	r0, 8005dc4 <__pow5mult+0x9c>
 8005db4:	4622      	mov	r2, r4
 8005db6:	4621      	mov	r1, r4
 8005db8:	4630      	mov	r0, r6
 8005dba:	f7ff ff0b 	bl	8005bd4 <__multiply>
 8005dbe:	6020      	str	r0, [r4, #0]
 8005dc0:	f8c0 9000 	str.w	r9, [r0]
 8005dc4:	4604      	mov	r4, r0
 8005dc6:	e7e4      	b.n	8005d92 <__pow5mult+0x6a>
 8005dc8:	4638      	mov	r0, r7
 8005dca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005dce:	bf00      	nop
 8005dd0:	0800b0c0 	.word	0x0800b0c0
 8005dd4:	0800aeed 	.word	0x0800aeed
 8005dd8:	0800af70 	.word	0x0800af70

08005ddc <__lshift>:
 8005ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005de0:	460c      	mov	r4, r1
 8005de2:	6849      	ldr	r1, [r1, #4]
 8005de4:	6923      	ldr	r3, [r4, #16]
 8005de6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005dea:	68a3      	ldr	r3, [r4, #8]
 8005dec:	4607      	mov	r7, r0
 8005dee:	4691      	mov	r9, r2
 8005df0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005df4:	f108 0601 	add.w	r6, r8, #1
 8005df8:	42b3      	cmp	r3, r6
 8005dfa:	db0b      	blt.n	8005e14 <__lshift+0x38>
 8005dfc:	4638      	mov	r0, r7
 8005dfe:	f7ff fddb 	bl	80059b8 <_Balloc>
 8005e02:	4605      	mov	r5, r0
 8005e04:	b948      	cbnz	r0, 8005e1a <__lshift+0x3e>
 8005e06:	4602      	mov	r2, r0
 8005e08:	4b2a      	ldr	r3, [pc, #168]	; (8005eb4 <__lshift+0xd8>)
 8005e0a:	482b      	ldr	r0, [pc, #172]	; (8005eb8 <__lshift+0xdc>)
 8005e0c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005e10:	f000 f96c 	bl	80060ec <__assert_func>
 8005e14:	3101      	adds	r1, #1
 8005e16:	005b      	lsls	r3, r3, #1
 8005e18:	e7ee      	b.n	8005df8 <__lshift+0x1c>
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	f100 0114 	add.w	r1, r0, #20
 8005e20:	f100 0210 	add.w	r2, r0, #16
 8005e24:	4618      	mov	r0, r3
 8005e26:	4553      	cmp	r3, sl
 8005e28:	db37      	blt.n	8005e9a <__lshift+0xbe>
 8005e2a:	6920      	ldr	r0, [r4, #16]
 8005e2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005e30:	f104 0314 	add.w	r3, r4, #20
 8005e34:	f019 091f 	ands.w	r9, r9, #31
 8005e38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005e3c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005e40:	d02f      	beq.n	8005ea2 <__lshift+0xc6>
 8005e42:	f1c9 0e20 	rsb	lr, r9, #32
 8005e46:	468a      	mov	sl, r1
 8005e48:	f04f 0c00 	mov.w	ip, #0
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	fa02 f209 	lsl.w	r2, r2, r9
 8005e52:	ea42 020c 	orr.w	r2, r2, ip
 8005e56:	f84a 2b04 	str.w	r2, [sl], #4
 8005e5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e5e:	4298      	cmp	r0, r3
 8005e60:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005e64:	d8f2      	bhi.n	8005e4c <__lshift+0x70>
 8005e66:	1b03      	subs	r3, r0, r4
 8005e68:	3b15      	subs	r3, #21
 8005e6a:	f023 0303 	bic.w	r3, r3, #3
 8005e6e:	3304      	adds	r3, #4
 8005e70:	f104 0215 	add.w	r2, r4, #21
 8005e74:	4290      	cmp	r0, r2
 8005e76:	bf38      	it	cc
 8005e78:	2304      	movcc	r3, #4
 8005e7a:	f841 c003 	str.w	ip, [r1, r3]
 8005e7e:	f1bc 0f00 	cmp.w	ip, #0
 8005e82:	d001      	beq.n	8005e88 <__lshift+0xac>
 8005e84:	f108 0602 	add.w	r6, r8, #2
 8005e88:	3e01      	subs	r6, #1
 8005e8a:	4638      	mov	r0, r7
 8005e8c:	612e      	str	r6, [r5, #16]
 8005e8e:	4621      	mov	r1, r4
 8005e90:	f7ff fdd2 	bl	8005a38 <_Bfree>
 8005e94:	4628      	mov	r0, r5
 8005e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e9a:	f842 0f04 	str.w	r0, [r2, #4]!
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	e7c1      	b.n	8005e26 <__lshift+0x4a>
 8005ea2:	3904      	subs	r1, #4
 8005ea4:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ea8:	f841 2f04 	str.w	r2, [r1, #4]!
 8005eac:	4298      	cmp	r0, r3
 8005eae:	d8f9      	bhi.n	8005ea4 <__lshift+0xc8>
 8005eb0:	e7ea      	b.n	8005e88 <__lshift+0xac>
 8005eb2:	bf00      	nop
 8005eb4:	0800af5f 	.word	0x0800af5f
 8005eb8:	0800af70 	.word	0x0800af70

08005ebc <__mcmp>:
 8005ebc:	b530      	push	{r4, r5, lr}
 8005ebe:	6902      	ldr	r2, [r0, #16]
 8005ec0:	690c      	ldr	r4, [r1, #16]
 8005ec2:	1b12      	subs	r2, r2, r4
 8005ec4:	d10e      	bne.n	8005ee4 <__mcmp+0x28>
 8005ec6:	f100 0314 	add.w	r3, r0, #20
 8005eca:	3114      	adds	r1, #20
 8005ecc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005ed0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005ed4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005ed8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005edc:	42a5      	cmp	r5, r4
 8005ede:	d003      	beq.n	8005ee8 <__mcmp+0x2c>
 8005ee0:	d305      	bcc.n	8005eee <__mcmp+0x32>
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	4610      	mov	r0, r2
 8005ee6:	bd30      	pop	{r4, r5, pc}
 8005ee8:	4283      	cmp	r3, r0
 8005eea:	d3f3      	bcc.n	8005ed4 <__mcmp+0x18>
 8005eec:	e7fa      	b.n	8005ee4 <__mcmp+0x28>
 8005eee:	f04f 32ff 	mov.w	r2, #4294967295
 8005ef2:	e7f7      	b.n	8005ee4 <__mcmp+0x28>

08005ef4 <__mdiff>:
 8005ef4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ef8:	460c      	mov	r4, r1
 8005efa:	4606      	mov	r6, r0
 8005efc:	4611      	mov	r1, r2
 8005efe:	4620      	mov	r0, r4
 8005f00:	4690      	mov	r8, r2
 8005f02:	f7ff ffdb 	bl	8005ebc <__mcmp>
 8005f06:	1e05      	subs	r5, r0, #0
 8005f08:	d110      	bne.n	8005f2c <__mdiff+0x38>
 8005f0a:	4629      	mov	r1, r5
 8005f0c:	4630      	mov	r0, r6
 8005f0e:	f7ff fd53 	bl	80059b8 <_Balloc>
 8005f12:	b930      	cbnz	r0, 8005f22 <__mdiff+0x2e>
 8005f14:	4b3a      	ldr	r3, [pc, #232]	; (8006000 <__mdiff+0x10c>)
 8005f16:	4602      	mov	r2, r0
 8005f18:	f240 2132 	movw	r1, #562	; 0x232
 8005f1c:	4839      	ldr	r0, [pc, #228]	; (8006004 <__mdiff+0x110>)
 8005f1e:	f000 f8e5 	bl	80060ec <__assert_func>
 8005f22:	2301      	movs	r3, #1
 8005f24:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005f28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f2c:	bfa4      	itt	ge
 8005f2e:	4643      	movge	r3, r8
 8005f30:	46a0      	movge	r8, r4
 8005f32:	4630      	mov	r0, r6
 8005f34:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005f38:	bfa6      	itte	ge
 8005f3a:	461c      	movge	r4, r3
 8005f3c:	2500      	movge	r5, #0
 8005f3e:	2501      	movlt	r5, #1
 8005f40:	f7ff fd3a 	bl	80059b8 <_Balloc>
 8005f44:	b920      	cbnz	r0, 8005f50 <__mdiff+0x5c>
 8005f46:	4b2e      	ldr	r3, [pc, #184]	; (8006000 <__mdiff+0x10c>)
 8005f48:	4602      	mov	r2, r0
 8005f4a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005f4e:	e7e5      	b.n	8005f1c <__mdiff+0x28>
 8005f50:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005f54:	6926      	ldr	r6, [r4, #16]
 8005f56:	60c5      	str	r5, [r0, #12]
 8005f58:	f104 0914 	add.w	r9, r4, #20
 8005f5c:	f108 0514 	add.w	r5, r8, #20
 8005f60:	f100 0e14 	add.w	lr, r0, #20
 8005f64:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005f68:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005f6c:	f108 0210 	add.w	r2, r8, #16
 8005f70:	46f2      	mov	sl, lr
 8005f72:	2100      	movs	r1, #0
 8005f74:	f859 3b04 	ldr.w	r3, [r9], #4
 8005f78:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005f7c:	fa1f f883 	uxth.w	r8, r3
 8005f80:	fa11 f18b 	uxtah	r1, r1, fp
 8005f84:	0c1b      	lsrs	r3, r3, #16
 8005f86:	eba1 0808 	sub.w	r8, r1, r8
 8005f8a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005f8e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005f92:	fa1f f888 	uxth.w	r8, r8
 8005f96:	1419      	asrs	r1, r3, #16
 8005f98:	454e      	cmp	r6, r9
 8005f9a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005f9e:	f84a 3b04 	str.w	r3, [sl], #4
 8005fa2:	d8e7      	bhi.n	8005f74 <__mdiff+0x80>
 8005fa4:	1b33      	subs	r3, r6, r4
 8005fa6:	3b15      	subs	r3, #21
 8005fa8:	f023 0303 	bic.w	r3, r3, #3
 8005fac:	3304      	adds	r3, #4
 8005fae:	3415      	adds	r4, #21
 8005fb0:	42a6      	cmp	r6, r4
 8005fb2:	bf38      	it	cc
 8005fb4:	2304      	movcc	r3, #4
 8005fb6:	441d      	add	r5, r3
 8005fb8:	4473      	add	r3, lr
 8005fba:	469e      	mov	lr, r3
 8005fbc:	462e      	mov	r6, r5
 8005fbe:	4566      	cmp	r6, ip
 8005fc0:	d30e      	bcc.n	8005fe0 <__mdiff+0xec>
 8005fc2:	f10c 0203 	add.w	r2, ip, #3
 8005fc6:	1b52      	subs	r2, r2, r5
 8005fc8:	f022 0203 	bic.w	r2, r2, #3
 8005fcc:	3d03      	subs	r5, #3
 8005fce:	45ac      	cmp	ip, r5
 8005fd0:	bf38      	it	cc
 8005fd2:	2200      	movcc	r2, #0
 8005fd4:	441a      	add	r2, r3
 8005fd6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005fda:	b17b      	cbz	r3, 8005ffc <__mdiff+0x108>
 8005fdc:	6107      	str	r7, [r0, #16]
 8005fde:	e7a3      	b.n	8005f28 <__mdiff+0x34>
 8005fe0:	f856 8b04 	ldr.w	r8, [r6], #4
 8005fe4:	fa11 f288 	uxtah	r2, r1, r8
 8005fe8:	1414      	asrs	r4, r2, #16
 8005fea:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005fee:	b292      	uxth	r2, r2
 8005ff0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005ff4:	f84e 2b04 	str.w	r2, [lr], #4
 8005ff8:	1421      	asrs	r1, r4, #16
 8005ffa:	e7e0      	b.n	8005fbe <__mdiff+0xca>
 8005ffc:	3f01      	subs	r7, #1
 8005ffe:	e7ea      	b.n	8005fd6 <__mdiff+0xe2>
 8006000:	0800af5f 	.word	0x0800af5f
 8006004:	0800af70 	.word	0x0800af70

08006008 <__d2b>:
 8006008:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800600c:	4689      	mov	r9, r1
 800600e:	2101      	movs	r1, #1
 8006010:	ec57 6b10 	vmov	r6, r7, d0
 8006014:	4690      	mov	r8, r2
 8006016:	f7ff fccf 	bl	80059b8 <_Balloc>
 800601a:	4604      	mov	r4, r0
 800601c:	b930      	cbnz	r0, 800602c <__d2b+0x24>
 800601e:	4602      	mov	r2, r0
 8006020:	4b25      	ldr	r3, [pc, #148]	; (80060b8 <__d2b+0xb0>)
 8006022:	4826      	ldr	r0, [pc, #152]	; (80060bc <__d2b+0xb4>)
 8006024:	f240 310a 	movw	r1, #778	; 0x30a
 8006028:	f000 f860 	bl	80060ec <__assert_func>
 800602c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006030:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006034:	bb35      	cbnz	r5, 8006084 <__d2b+0x7c>
 8006036:	2e00      	cmp	r6, #0
 8006038:	9301      	str	r3, [sp, #4]
 800603a:	d028      	beq.n	800608e <__d2b+0x86>
 800603c:	4668      	mov	r0, sp
 800603e:	9600      	str	r6, [sp, #0]
 8006040:	f7ff fd82 	bl	8005b48 <__lo0bits>
 8006044:	9900      	ldr	r1, [sp, #0]
 8006046:	b300      	cbz	r0, 800608a <__d2b+0x82>
 8006048:	9a01      	ldr	r2, [sp, #4]
 800604a:	f1c0 0320 	rsb	r3, r0, #32
 800604e:	fa02 f303 	lsl.w	r3, r2, r3
 8006052:	430b      	orrs	r3, r1
 8006054:	40c2      	lsrs	r2, r0
 8006056:	6163      	str	r3, [r4, #20]
 8006058:	9201      	str	r2, [sp, #4]
 800605a:	9b01      	ldr	r3, [sp, #4]
 800605c:	61a3      	str	r3, [r4, #24]
 800605e:	2b00      	cmp	r3, #0
 8006060:	bf14      	ite	ne
 8006062:	2202      	movne	r2, #2
 8006064:	2201      	moveq	r2, #1
 8006066:	6122      	str	r2, [r4, #16]
 8006068:	b1d5      	cbz	r5, 80060a0 <__d2b+0x98>
 800606a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800606e:	4405      	add	r5, r0
 8006070:	f8c9 5000 	str.w	r5, [r9]
 8006074:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006078:	f8c8 0000 	str.w	r0, [r8]
 800607c:	4620      	mov	r0, r4
 800607e:	b003      	add	sp, #12
 8006080:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006084:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006088:	e7d5      	b.n	8006036 <__d2b+0x2e>
 800608a:	6161      	str	r1, [r4, #20]
 800608c:	e7e5      	b.n	800605a <__d2b+0x52>
 800608e:	a801      	add	r0, sp, #4
 8006090:	f7ff fd5a 	bl	8005b48 <__lo0bits>
 8006094:	9b01      	ldr	r3, [sp, #4]
 8006096:	6163      	str	r3, [r4, #20]
 8006098:	2201      	movs	r2, #1
 800609a:	6122      	str	r2, [r4, #16]
 800609c:	3020      	adds	r0, #32
 800609e:	e7e3      	b.n	8006068 <__d2b+0x60>
 80060a0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80060a4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80060a8:	f8c9 0000 	str.w	r0, [r9]
 80060ac:	6918      	ldr	r0, [r3, #16]
 80060ae:	f7ff fd2b 	bl	8005b08 <__hi0bits>
 80060b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80060b6:	e7df      	b.n	8006078 <__d2b+0x70>
 80060b8:	0800af5f 	.word	0x0800af5f
 80060bc:	0800af70 	.word	0x0800af70

080060c0 <_calloc_r>:
 80060c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80060c2:	fba1 2402 	umull	r2, r4, r1, r2
 80060c6:	b94c      	cbnz	r4, 80060dc <_calloc_r+0x1c>
 80060c8:	4611      	mov	r1, r2
 80060ca:	9201      	str	r2, [sp, #4]
 80060cc:	f7fe f8ec 	bl	80042a8 <_malloc_r>
 80060d0:	9a01      	ldr	r2, [sp, #4]
 80060d2:	4605      	mov	r5, r0
 80060d4:	b930      	cbnz	r0, 80060e4 <_calloc_r+0x24>
 80060d6:	4628      	mov	r0, r5
 80060d8:	b003      	add	sp, #12
 80060da:	bd30      	pop	{r4, r5, pc}
 80060dc:	220c      	movs	r2, #12
 80060de:	6002      	str	r2, [r0, #0]
 80060e0:	2500      	movs	r5, #0
 80060e2:	e7f8      	b.n	80060d6 <_calloc_r+0x16>
 80060e4:	4621      	mov	r1, r4
 80060e6:	f7fe f86b 	bl	80041c0 <memset>
 80060ea:	e7f4      	b.n	80060d6 <_calloc_r+0x16>

080060ec <__assert_func>:
 80060ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80060ee:	4614      	mov	r4, r2
 80060f0:	461a      	mov	r2, r3
 80060f2:	4b09      	ldr	r3, [pc, #36]	; (8006118 <__assert_func+0x2c>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4605      	mov	r5, r0
 80060f8:	68d8      	ldr	r0, [r3, #12]
 80060fa:	b14c      	cbz	r4, 8006110 <__assert_func+0x24>
 80060fc:	4b07      	ldr	r3, [pc, #28]	; (800611c <__assert_func+0x30>)
 80060fe:	9100      	str	r1, [sp, #0]
 8006100:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006104:	4906      	ldr	r1, [pc, #24]	; (8006120 <__assert_func+0x34>)
 8006106:	462b      	mov	r3, r5
 8006108:	f000 f80e 	bl	8006128 <fiprintf>
 800610c:	f000 fa5a 	bl	80065c4 <abort>
 8006110:	4b04      	ldr	r3, [pc, #16]	; (8006124 <__assert_func+0x38>)
 8006112:	461c      	mov	r4, r3
 8006114:	e7f3      	b.n	80060fe <__assert_func+0x12>
 8006116:	bf00      	nop
 8006118:	20000020 	.word	0x20000020
 800611c:	0800b0cc 	.word	0x0800b0cc
 8006120:	0800b0d9 	.word	0x0800b0d9
 8006124:	0800b107 	.word	0x0800b107

08006128 <fiprintf>:
 8006128:	b40e      	push	{r1, r2, r3}
 800612a:	b503      	push	{r0, r1, lr}
 800612c:	4601      	mov	r1, r0
 800612e:	ab03      	add	r3, sp, #12
 8006130:	4805      	ldr	r0, [pc, #20]	; (8006148 <fiprintf+0x20>)
 8006132:	f853 2b04 	ldr.w	r2, [r3], #4
 8006136:	6800      	ldr	r0, [r0, #0]
 8006138:	9301      	str	r3, [sp, #4]
 800613a:	f000 f845 	bl	80061c8 <_vfiprintf_r>
 800613e:	b002      	add	sp, #8
 8006140:	f85d eb04 	ldr.w	lr, [sp], #4
 8006144:	b003      	add	sp, #12
 8006146:	4770      	bx	lr
 8006148:	20000020 	.word	0x20000020

0800614c <__retarget_lock_init_recursive>:
 800614c:	4770      	bx	lr

0800614e <__retarget_lock_acquire_recursive>:
 800614e:	4770      	bx	lr

08006150 <__retarget_lock_release_recursive>:
 8006150:	4770      	bx	lr

08006152 <__ascii_mbtowc>:
 8006152:	b082      	sub	sp, #8
 8006154:	b901      	cbnz	r1, 8006158 <__ascii_mbtowc+0x6>
 8006156:	a901      	add	r1, sp, #4
 8006158:	b142      	cbz	r2, 800616c <__ascii_mbtowc+0x1a>
 800615a:	b14b      	cbz	r3, 8006170 <__ascii_mbtowc+0x1e>
 800615c:	7813      	ldrb	r3, [r2, #0]
 800615e:	600b      	str	r3, [r1, #0]
 8006160:	7812      	ldrb	r2, [r2, #0]
 8006162:	1e10      	subs	r0, r2, #0
 8006164:	bf18      	it	ne
 8006166:	2001      	movne	r0, #1
 8006168:	b002      	add	sp, #8
 800616a:	4770      	bx	lr
 800616c:	4610      	mov	r0, r2
 800616e:	e7fb      	b.n	8006168 <__ascii_mbtowc+0x16>
 8006170:	f06f 0001 	mvn.w	r0, #1
 8006174:	e7f8      	b.n	8006168 <__ascii_mbtowc+0x16>

08006176 <__sfputc_r>:
 8006176:	6893      	ldr	r3, [r2, #8]
 8006178:	3b01      	subs	r3, #1
 800617a:	2b00      	cmp	r3, #0
 800617c:	b410      	push	{r4}
 800617e:	6093      	str	r3, [r2, #8]
 8006180:	da08      	bge.n	8006194 <__sfputc_r+0x1e>
 8006182:	6994      	ldr	r4, [r2, #24]
 8006184:	42a3      	cmp	r3, r4
 8006186:	db01      	blt.n	800618c <__sfputc_r+0x16>
 8006188:	290a      	cmp	r1, #10
 800618a:	d103      	bne.n	8006194 <__sfputc_r+0x1e>
 800618c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006190:	f000 b94a 	b.w	8006428 <__swbuf_r>
 8006194:	6813      	ldr	r3, [r2, #0]
 8006196:	1c58      	adds	r0, r3, #1
 8006198:	6010      	str	r0, [r2, #0]
 800619a:	7019      	strb	r1, [r3, #0]
 800619c:	4608      	mov	r0, r1
 800619e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80061a2:	4770      	bx	lr

080061a4 <__sfputs_r>:
 80061a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061a6:	4606      	mov	r6, r0
 80061a8:	460f      	mov	r7, r1
 80061aa:	4614      	mov	r4, r2
 80061ac:	18d5      	adds	r5, r2, r3
 80061ae:	42ac      	cmp	r4, r5
 80061b0:	d101      	bne.n	80061b6 <__sfputs_r+0x12>
 80061b2:	2000      	movs	r0, #0
 80061b4:	e007      	b.n	80061c6 <__sfputs_r+0x22>
 80061b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061ba:	463a      	mov	r2, r7
 80061bc:	4630      	mov	r0, r6
 80061be:	f7ff ffda 	bl	8006176 <__sfputc_r>
 80061c2:	1c43      	adds	r3, r0, #1
 80061c4:	d1f3      	bne.n	80061ae <__sfputs_r+0xa>
 80061c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080061c8 <_vfiprintf_r>:
 80061c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061cc:	460d      	mov	r5, r1
 80061ce:	b09d      	sub	sp, #116	; 0x74
 80061d0:	4614      	mov	r4, r2
 80061d2:	4698      	mov	r8, r3
 80061d4:	4606      	mov	r6, r0
 80061d6:	b118      	cbz	r0, 80061e0 <_vfiprintf_r+0x18>
 80061d8:	6983      	ldr	r3, [r0, #24]
 80061da:	b90b      	cbnz	r3, 80061e0 <_vfiprintf_r+0x18>
 80061dc:	f000 fb14 	bl	8006808 <__sinit>
 80061e0:	4b89      	ldr	r3, [pc, #548]	; (8006408 <_vfiprintf_r+0x240>)
 80061e2:	429d      	cmp	r5, r3
 80061e4:	d11b      	bne.n	800621e <_vfiprintf_r+0x56>
 80061e6:	6875      	ldr	r5, [r6, #4]
 80061e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80061ea:	07d9      	lsls	r1, r3, #31
 80061ec:	d405      	bmi.n	80061fa <_vfiprintf_r+0x32>
 80061ee:	89ab      	ldrh	r3, [r5, #12]
 80061f0:	059a      	lsls	r2, r3, #22
 80061f2:	d402      	bmi.n	80061fa <_vfiprintf_r+0x32>
 80061f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80061f6:	f7ff ffaa 	bl	800614e <__retarget_lock_acquire_recursive>
 80061fa:	89ab      	ldrh	r3, [r5, #12]
 80061fc:	071b      	lsls	r3, r3, #28
 80061fe:	d501      	bpl.n	8006204 <_vfiprintf_r+0x3c>
 8006200:	692b      	ldr	r3, [r5, #16]
 8006202:	b9eb      	cbnz	r3, 8006240 <_vfiprintf_r+0x78>
 8006204:	4629      	mov	r1, r5
 8006206:	4630      	mov	r0, r6
 8006208:	f000 f96e 	bl	80064e8 <__swsetup_r>
 800620c:	b1c0      	cbz	r0, 8006240 <_vfiprintf_r+0x78>
 800620e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006210:	07dc      	lsls	r4, r3, #31
 8006212:	d50e      	bpl.n	8006232 <_vfiprintf_r+0x6a>
 8006214:	f04f 30ff 	mov.w	r0, #4294967295
 8006218:	b01d      	add	sp, #116	; 0x74
 800621a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800621e:	4b7b      	ldr	r3, [pc, #492]	; (800640c <_vfiprintf_r+0x244>)
 8006220:	429d      	cmp	r5, r3
 8006222:	d101      	bne.n	8006228 <_vfiprintf_r+0x60>
 8006224:	68b5      	ldr	r5, [r6, #8]
 8006226:	e7df      	b.n	80061e8 <_vfiprintf_r+0x20>
 8006228:	4b79      	ldr	r3, [pc, #484]	; (8006410 <_vfiprintf_r+0x248>)
 800622a:	429d      	cmp	r5, r3
 800622c:	bf08      	it	eq
 800622e:	68f5      	ldreq	r5, [r6, #12]
 8006230:	e7da      	b.n	80061e8 <_vfiprintf_r+0x20>
 8006232:	89ab      	ldrh	r3, [r5, #12]
 8006234:	0598      	lsls	r0, r3, #22
 8006236:	d4ed      	bmi.n	8006214 <_vfiprintf_r+0x4c>
 8006238:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800623a:	f7ff ff89 	bl	8006150 <__retarget_lock_release_recursive>
 800623e:	e7e9      	b.n	8006214 <_vfiprintf_r+0x4c>
 8006240:	2300      	movs	r3, #0
 8006242:	9309      	str	r3, [sp, #36]	; 0x24
 8006244:	2320      	movs	r3, #32
 8006246:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800624a:	f8cd 800c 	str.w	r8, [sp, #12]
 800624e:	2330      	movs	r3, #48	; 0x30
 8006250:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006414 <_vfiprintf_r+0x24c>
 8006254:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006258:	f04f 0901 	mov.w	r9, #1
 800625c:	4623      	mov	r3, r4
 800625e:	469a      	mov	sl, r3
 8006260:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006264:	b10a      	cbz	r2, 800626a <_vfiprintf_r+0xa2>
 8006266:	2a25      	cmp	r2, #37	; 0x25
 8006268:	d1f9      	bne.n	800625e <_vfiprintf_r+0x96>
 800626a:	ebba 0b04 	subs.w	fp, sl, r4
 800626e:	d00b      	beq.n	8006288 <_vfiprintf_r+0xc0>
 8006270:	465b      	mov	r3, fp
 8006272:	4622      	mov	r2, r4
 8006274:	4629      	mov	r1, r5
 8006276:	4630      	mov	r0, r6
 8006278:	f7ff ff94 	bl	80061a4 <__sfputs_r>
 800627c:	3001      	adds	r0, #1
 800627e:	f000 80aa 	beq.w	80063d6 <_vfiprintf_r+0x20e>
 8006282:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006284:	445a      	add	r2, fp
 8006286:	9209      	str	r2, [sp, #36]	; 0x24
 8006288:	f89a 3000 	ldrb.w	r3, [sl]
 800628c:	2b00      	cmp	r3, #0
 800628e:	f000 80a2 	beq.w	80063d6 <_vfiprintf_r+0x20e>
 8006292:	2300      	movs	r3, #0
 8006294:	f04f 32ff 	mov.w	r2, #4294967295
 8006298:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800629c:	f10a 0a01 	add.w	sl, sl, #1
 80062a0:	9304      	str	r3, [sp, #16]
 80062a2:	9307      	str	r3, [sp, #28]
 80062a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80062a8:	931a      	str	r3, [sp, #104]	; 0x68
 80062aa:	4654      	mov	r4, sl
 80062ac:	2205      	movs	r2, #5
 80062ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062b2:	4858      	ldr	r0, [pc, #352]	; (8006414 <_vfiprintf_r+0x24c>)
 80062b4:	f7f9 ff9c 	bl	80001f0 <memchr>
 80062b8:	9a04      	ldr	r2, [sp, #16]
 80062ba:	b9d8      	cbnz	r0, 80062f4 <_vfiprintf_r+0x12c>
 80062bc:	06d1      	lsls	r1, r2, #27
 80062be:	bf44      	itt	mi
 80062c0:	2320      	movmi	r3, #32
 80062c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062c6:	0713      	lsls	r3, r2, #28
 80062c8:	bf44      	itt	mi
 80062ca:	232b      	movmi	r3, #43	; 0x2b
 80062cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062d0:	f89a 3000 	ldrb.w	r3, [sl]
 80062d4:	2b2a      	cmp	r3, #42	; 0x2a
 80062d6:	d015      	beq.n	8006304 <_vfiprintf_r+0x13c>
 80062d8:	9a07      	ldr	r2, [sp, #28]
 80062da:	4654      	mov	r4, sl
 80062dc:	2000      	movs	r0, #0
 80062de:	f04f 0c0a 	mov.w	ip, #10
 80062e2:	4621      	mov	r1, r4
 80062e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80062e8:	3b30      	subs	r3, #48	; 0x30
 80062ea:	2b09      	cmp	r3, #9
 80062ec:	d94e      	bls.n	800638c <_vfiprintf_r+0x1c4>
 80062ee:	b1b0      	cbz	r0, 800631e <_vfiprintf_r+0x156>
 80062f0:	9207      	str	r2, [sp, #28]
 80062f2:	e014      	b.n	800631e <_vfiprintf_r+0x156>
 80062f4:	eba0 0308 	sub.w	r3, r0, r8
 80062f8:	fa09 f303 	lsl.w	r3, r9, r3
 80062fc:	4313      	orrs	r3, r2
 80062fe:	9304      	str	r3, [sp, #16]
 8006300:	46a2      	mov	sl, r4
 8006302:	e7d2      	b.n	80062aa <_vfiprintf_r+0xe2>
 8006304:	9b03      	ldr	r3, [sp, #12]
 8006306:	1d19      	adds	r1, r3, #4
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	9103      	str	r1, [sp, #12]
 800630c:	2b00      	cmp	r3, #0
 800630e:	bfbb      	ittet	lt
 8006310:	425b      	neglt	r3, r3
 8006312:	f042 0202 	orrlt.w	r2, r2, #2
 8006316:	9307      	strge	r3, [sp, #28]
 8006318:	9307      	strlt	r3, [sp, #28]
 800631a:	bfb8      	it	lt
 800631c:	9204      	strlt	r2, [sp, #16]
 800631e:	7823      	ldrb	r3, [r4, #0]
 8006320:	2b2e      	cmp	r3, #46	; 0x2e
 8006322:	d10c      	bne.n	800633e <_vfiprintf_r+0x176>
 8006324:	7863      	ldrb	r3, [r4, #1]
 8006326:	2b2a      	cmp	r3, #42	; 0x2a
 8006328:	d135      	bne.n	8006396 <_vfiprintf_r+0x1ce>
 800632a:	9b03      	ldr	r3, [sp, #12]
 800632c:	1d1a      	adds	r2, r3, #4
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	9203      	str	r2, [sp, #12]
 8006332:	2b00      	cmp	r3, #0
 8006334:	bfb8      	it	lt
 8006336:	f04f 33ff 	movlt.w	r3, #4294967295
 800633a:	3402      	adds	r4, #2
 800633c:	9305      	str	r3, [sp, #20]
 800633e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006424 <_vfiprintf_r+0x25c>
 8006342:	7821      	ldrb	r1, [r4, #0]
 8006344:	2203      	movs	r2, #3
 8006346:	4650      	mov	r0, sl
 8006348:	f7f9 ff52 	bl	80001f0 <memchr>
 800634c:	b140      	cbz	r0, 8006360 <_vfiprintf_r+0x198>
 800634e:	2340      	movs	r3, #64	; 0x40
 8006350:	eba0 000a 	sub.w	r0, r0, sl
 8006354:	fa03 f000 	lsl.w	r0, r3, r0
 8006358:	9b04      	ldr	r3, [sp, #16]
 800635a:	4303      	orrs	r3, r0
 800635c:	3401      	adds	r4, #1
 800635e:	9304      	str	r3, [sp, #16]
 8006360:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006364:	482c      	ldr	r0, [pc, #176]	; (8006418 <_vfiprintf_r+0x250>)
 8006366:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800636a:	2206      	movs	r2, #6
 800636c:	f7f9 ff40 	bl	80001f0 <memchr>
 8006370:	2800      	cmp	r0, #0
 8006372:	d03f      	beq.n	80063f4 <_vfiprintf_r+0x22c>
 8006374:	4b29      	ldr	r3, [pc, #164]	; (800641c <_vfiprintf_r+0x254>)
 8006376:	bb1b      	cbnz	r3, 80063c0 <_vfiprintf_r+0x1f8>
 8006378:	9b03      	ldr	r3, [sp, #12]
 800637a:	3307      	adds	r3, #7
 800637c:	f023 0307 	bic.w	r3, r3, #7
 8006380:	3308      	adds	r3, #8
 8006382:	9303      	str	r3, [sp, #12]
 8006384:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006386:	443b      	add	r3, r7
 8006388:	9309      	str	r3, [sp, #36]	; 0x24
 800638a:	e767      	b.n	800625c <_vfiprintf_r+0x94>
 800638c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006390:	460c      	mov	r4, r1
 8006392:	2001      	movs	r0, #1
 8006394:	e7a5      	b.n	80062e2 <_vfiprintf_r+0x11a>
 8006396:	2300      	movs	r3, #0
 8006398:	3401      	adds	r4, #1
 800639a:	9305      	str	r3, [sp, #20]
 800639c:	4619      	mov	r1, r3
 800639e:	f04f 0c0a 	mov.w	ip, #10
 80063a2:	4620      	mov	r0, r4
 80063a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063a8:	3a30      	subs	r2, #48	; 0x30
 80063aa:	2a09      	cmp	r2, #9
 80063ac:	d903      	bls.n	80063b6 <_vfiprintf_r+0x1ee>
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d0c5      	beq.n	800633e <_vfiprintf_r+0x176>
 80063b2:	9105      	str	r1, [sp, #20]
 80063b4:	e7c3      	b.n	800633e <_vfiprintf_r+0x176>
 80063b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80063ba:	4604      	mov	r4, r0
 80063bc:	2301      	movs	r3, #1
 80063be:	e7f0      	b.n	80063a2 <_vfiprintf_r+0x1da>
 80063c0:	ab03      	add	r3, sp, #12
 80063c2:	9300      	str	r3, [sp, #0]
 80063c4:	462a      	mov	r2, r5
 80063c6:	4b16      	ldr	r3, [pc, #88]	; (8006420 <_vfiprintf_r+0x258>)
 80063c8:	a904      	add	r1, sp, #16
 80063ca:	4630      	mov	r0, r6
 80063cc:	f7fe f880 	bl	80044d0 <_printf_float>
 80063d0:	4607      	mov	r7, r0
 80063d2:	1c78      	adds	r0, r7, #1
 80063d4:	d1d6      	bne.n	8006384 <_vfiprintf_r+0x1bc>
 80063d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80063d8:	07d9      	lsls	r1, r3, #31
 80063da:	d405      	bmi.n	80063e8 <_vfiprintf_r+0x220>
 80063dc:	89ab      	ldrh	r3, [r5, #12]
 80063de:	059a      	lsls	r2, r3, #22
 80063e0:	d402      	bmi.n	80063e8 <_vfiprintf_r+0x220>
 80063e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80063e4:	f7ff feb4 	bl	8006150 <__retarget_lock_release_recursive>
 80063e8:	89ab      	ldrh	r3, [r5, #12]
 80063ea:	065b      	lsls	r3, r3, #25
 80063ec:	f53f af12 	bmi.w	8006214 <_vfiprintf_r+0x4c>
 80063f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80063f2:	e711      	b.n	8006218 <_vfiprintf_r+0x50>
 80063f4:	ab03      	add	r3, sp, #12
 80063f6:	9300      	str	r3, [sp, #0]
 80063f8:	462a      	mov	r2, r5
 80063fa:	4b09      	ldr	r3, [pc, #36]	; (8006420 <_vfiprintf_r+0x258>)
 80063fc:	a904      	add	r1, sp, #16
 80063fe:	4630      	mov	r0, r6
 8006400:	f7fe fb0a 	bl	8004a18 <_printf_i>
 8006404:	e7e4      	b.n	80063d0 <_vfiprintf_r+0x208>
 8006406:	bf00      	nop
 8006408:	0800b244 	.word	0x0800b244
 800640c:	0800b264 	.word	0x0800b264
 8006410:	0800b224 	.word	0x0800b224
 8006414:	0800b112 	.word	0x0800b112
 8006418:	0800b11c 	.word	0x0800b11c
 800641c:	080044d1 	.word	0x080044d1
 8006420:	080061a5 	.word	0x080061a5
 8006424:	0800b118 	.word	0x0800b118

08006428 <__swbuf_r>:
 8006428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800642a:	460e      	mov	r6, r1
 800642c:	4614      	mov	r4, r2
 800642e:	4605      	mov	r5, r0
 8006430:	b118      	cbz	r0, 800643a <__swbuf_r+0x12>
 8006432:	6983      	ldr	r3, [r0, #24]
 8006434:	b90b      	cbnz	r3, 800643a <__swbuf_r+0x12>
 8006436:	f000 f9e7 	bl	8006808 <__sinit>
 800643a:	4b21      	ldr	r3, [pc, #132]	; (80064c0 <__swbuf_r+0x98>)
 800643c:	429c      	cmp	r4, r3
 800643e:	d12b      	bne.n	8006498 <__swbuf_r+0x70>
 8006440:	686c      	ldr	r4, [r5, #4]
 8006442:	69a3      	ldr	r3, [r4, #24]
 8006444:	60a3      	str	r3, [r4, #8]
 8006446:	89a3      	ldrh	r3, [r4, #12]
 8006448:	071a      	lsls	r2, r3, #28
 800644a:	d52f      	bpl.n	80064ac <__swbuf_r+0x84>
 800644c:	6923      	ldr	r3, [r4, #16]
 800644e:	b36b      	cbz	r3, 80064ac <__swbuf_r+0x84>
 8006450:	6923      	ldr	r3, [r4, #16]
 8006452:	6820      	ldr	r0, [r4, #0]
 8006454:	1ac0      	subs	r0, r0, r3
 8006456:	6963      	ldr	r3, [r4, #20]
 8006458:	b2f6      	uxtb	r6, r6
 800645a:	4283      	cmp	r3, r0
 800645c:	4637      	mov	r7, r6
 800645e:	dc04      	bgt.n	800646a <__swbuf_r+0x42>
 8006460:	4621      	mov	r1, r4
 8006462:	4628      	mov	r0, r5
 8006464:	f000 f93c 	bl	80066e0 <_fflush_r>
 8006468:	bb30      	cbnz	r0, 80064b8 <__swbuf_r+0x90>
 800646a:	68a3      	ldr	r3, [r4, #8]
 800646c:	3b01      	subs	r3, #1
 800646e:	60a3      	str	r3, [r4, #8]
 8006470:	6823      	ldr	r3, [r4, #0]
 8006472:	1c5a      	adds	r2, r3, #1
 8006474:	6022      	str	r2, [r4, #0]
 8006476:	701e      	strb	r6, [r3, #0]
 8006478:	6963      	ldr	r3, [r4, #20]
 800647a:	3001      	adds	r0, #1
 800647c:	4283      	cmp	r3, r0
 800647e:	d004      	beq.n	800648a <__swbuf_r+0x62>
 8006480:	89a3      	ldrh	r3, [r4, #12]
 8006482:	07db      	lsls	r3, r3, #31
 8006484:	d506      	bpl.n	8006494 <__swbuf_r+0x6c>
 8006486:	2e0a      	cmp	r6, #10
 8006488:	d104      	bne.n	8006494 <__swbuf_r+0x6c>
 800648a:	4621      	mov	r1, r4
 800648c:	4628      	mov	r0, r5
 800648e:	f000 f927 	bl	80066e0 <_fflush_r>
 8006492:	b988      	cbnz	r0, 80064b8 <__swbuf_r+0x90>
 8006494:	4638      	mov	r0, r7
 8006496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006498:	4b0a      	ldr	r3, [pc, #40]	; (80064c4 <__swbuf_r+0x9c>)
 800649a:	429c      	cmp	r4, r3
 800649c:	d101      	bne.n	80064a2 <__swbuf_r+0x7a>
 800649e:	68ac      	ldr	r4, [r5, #8]
 80064a0:	e7cf      	b.n	8006442 <__swbuf_r+0x1a>
 80064a2:	4b09      	ldr	r3, [pc, #36]	; (80064c8 <__swbuf_r+0xa0>)
 80064a4:	429c      	cmp	r4, r3
 80064a6:	bf08      	it	eq
 80064a8:	68ec      	ldreq	r4, [r5, #12]
 80064aa:	e7ca      	b.n	8006442 <__swbuf_r+0x1a>
 80064ac:	4621      	mov	r1, r4
 80064ae:	4628      	mov	r0, r5
 80064b0:	f000 f81a 	bl	80064e8 <__swsetup_r>
 80064b4:	2800      	cmp	r0, #0
 80064b6:	d0cb      	beq.n	8006450 <__swbuf_r+0x28>
 80064b8:	f04f 37ff 	mov.w	r7, #4294967295
 80064bc:	e7ea      	b.n	8006494 <__swbuf_r+0x6c>
 80064be:	bf00      	nop
 80064c0:	0800b244 	.word	0x0800b244
 80064c4:	0800b264 	.word	0x0800b264
 80064c8:	0800b224 	.word	0x0800b224

080064cc <__ascii_wctomb>:
 80064cc:	b149      	cbz	r1, 80064e2 <__ascii_wctomb+0x16>
 80064ce:	2aff      	cmp	r2, #255	; 0xff
 80064d0:	bf85      	ittet	hi
 80064d2:	238a      	movhi	r3, #138	; 0x8a
 80064d4:	6003      	strhi	r3, [r0, #0]
 80064d6:	700a      	strbls	r2, [r1, #0]
 80064d8:	f04f 30ff 	movhi.w	r0, #4294967295
 80064dc:	bf98      	it	ls
 80064de:	2001      	movls	r0, #1
 80064e0:	4770      	bx	lr
 80064e2:	4608      	mov	r0, r1
 80064e4:	4770      	bx	lr
	...

080064e8 <__swsetup_r>:
 80064e8:	4b32      	ldr	r3, [pc, #200]	; (80065b4 <__swsetup_r+0xcc>)
 80064ea:	b570      	push	{r4, r5, r6, lr}
 80064ec:	681d      	ldr	r5, [r3, #0]
 80064ee:	4606      	mov	r6, r0
 80064f0:	460c      	mov	r4, r1
 80064f2:	b125      	cbz	r5, 80064fe <__swsetup_r+0x16>
 80064f4:	69ab      	ldr	r3, [r5, #24]
 80064f6:	b913      	cbnz	r3, 80064fe <__swsetup_r+0x16>
 80064f8:	4628      	mov	r0, r5
 80064fa:	f000 f985 	bl	8006808 <__sinit>
 80064fe:	4b2e      	ldr	r3, [pc, #184]	; (80065b8 <__swsetup_r+0xd0>)
 8006500:	429c      	cmp	r4, r3
 8006502:	d10f      	bne.n	8006524 <__swsetup_r+0x3c>
 8006504:	686c      	ldr	r4, [r5, #4]
 8006506:	89a3      	ldrh	r3, [r4, #12]
 8006508:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800650c:	0719      	lsls	r1, r3, #28
 800650e:	d42c      	bmi.n	800656a <__swsetup_r+0x82>
 8006510:	06dd      	lsls	r5, r3, #27
 8006512:	d411      	bmi.n	8006538 <__swsetup_r+0x50>
 8006514:	2309      	movs	r3, #9
 8006516:	6033      	str	r3, [r6, #0]
 8006518:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800651c:	81a3      	strh	r3, [r4, #12]
 800651e:	f04f 30ff 	mov.w	r0, #4294967295
 8006522:	e03e      	b.n	80065a2 <__swsetup_r+0xba>
 8006524:	4b25      	ldr	r3, [pc, #148]	; (80065bc <__swsetup_r+0xd4>)
 8006526:	429c      	cmp	r4, r3
 8006528:	d101      	bne.n	800652e <__swsetup_r+0x46>
 800652a:	68ac      	ldr	r4, [r5, #8]
 800652c:	e7eb      	b.n	8006506 <__swsetup_r+0x1e>
 800652e:	4b24      	ldr	r3, [pc, #144]	; (80065c0 <__swsetup_r+0xd8>)
 8006530:	429c      	cmp	r4, r3
 8006532:	bf08      	it	eq
 8006534:	68ec      	ldreq	r4, [r5, #12]
 8006536:	e7e6      	b.n	8006506 <__swsetup_r+0x1e>
 8006538:	0758      	lsls	r0, r3, #29
 800653a:	d512      	bpl.n	8006562 <__swsetup_r+0x7a>
 800653c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800653e:	b141      	cbz	r1, 8006552 <__swsetup_r+0x6a>
 8006540:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006544:	4299      	cmp	r1, r3
 8006546:	d002      	beq.n	800654e <__swsetup_r+0x66>
 8006548:	4630      	mov	r0, r6
 800654a:	f7fd fe41 	bl	80041d0 <_free_r>
 800654e:	2300      	movs	r3, #0
 8006550:	6363      	str	r3, [r4, #52]	; 0x34
 8006552:	89a3      	ldrh	r3, [r4, #12]
 8006554:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006558:	81a3      	strh	r3, [r4, #12]
 800655a:	2300      	movs	r3, #0
 800655c:	6063      	str	r3, [r4, #4]
 800655e:	6923      	ldr	r3, [r4, #16]
 8006560:	6023      	str	r3, [r4, #0]
 8006562:	89a3      	ldrh	r3, [r4, #12]
 8006564:	f043 0308 	orr.w	r3, r3, #8
 8006568:	81a3      	strh	r3, [r4, #12]
 800656a:	6923      	ldr	r3, [r4, #16]
 800656c:	b94b      	cbnz	r3, 8006582 <__swsetup_r+0x9a>
 800656e:	89a3      	ldrh	r3, [r4, #12]
 8006570:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006574:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006578:	d003      	beq.n	8006582 <__swsetup_r+0x9a>
 800657a:	4621      	mov	r1, r4
 800657c:	4630      	mov	r0, r6
 800657e:	f000 fa05 	bl	800698c <__smakebuf_r>
 8006582:	89a0      	ldrh	r0, [r4, #12]
 8006584:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006588:	f010 0301 	ands.w	r3, r0, #1
 800658c:	d00a      	beq.n	80065a4 <__swsetup_r+0xbc>
 800658e:	2300      	movs	r3, #0
 8006590:	60a3      	str	r3, [r4, #8]
 8006592:	6963      	ldr	r3, [r4, #20]
 8006594:	425b      	negs	r3, r3
 8006596:	61a3      	str	r3, [r4, #24]
 8006598:	6923      	ldr	r3, [r4, #16]
 800659a:	b943      	cbnz	r3, 80065ae <__swsetup_r+0xc6>
 800659c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80065a0:	d1ba      	bne.n	8006518 <__swsetup_r+0x30>
 80065a2:	bd70      	pop	{r4, r5, r6, pc}
 80065a4:	0781      	lsls	r1, r0, #30
 80065a6:	bf58      	it	pl
 80065a8:	6963      	ldrpl	r3, [r4, #20]
 80065aa:	60a3      	str	r3, [r4, #8]
 80065ac:	e7f4      	b.n	8006598 <__swsetup_r+0xb0>
 80065ae:	2000      	movs	r0, #0
 80065b0:	e7f7      	b.n	80065a2 <__swsetup_r+0xba>
 80065b2:	bf00      	nop
 80065b4:	20000020 	.word	0x20000020
 80065b8:	0800b244 	.word	0x0800b244
 80065bc:	0800b264 	.word	0x0800b264
 80065c0:	0800b224 	.word	0x0800b224

080065c4 <abort>:
 80065c4:	b508      	push	{r3, lr}
 80065c6:	2006      	movs	r0, #6
 80065c8:	f000 fa48 	bl	8006a5c <raise>
 80065cc:	2001      	movs	r0, #1
 80065ce:	f7fc fc9b 	bl	8002f08 <_exit>
	...

080065d4 <__sflush_r>:
 80065d4:	898a      	ldrh	r2, [r1, #12]
 80065d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065da:	4605      	mov	r5, r0
 80065dc:	0710      	lsls	r0, r2, #28
 80065de:	460c      	mov	r4, r1
 80065e0:	d458      	bmi.n	8006694 <__sflush_r+0xc0>
 80065e2:	684b      	ldr	r3, [r1, #4]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	dc05      	bgt.n	80065f4 <__sflush_r+0x20>
 80065e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	dc02      	bgt.n	80065f4 <__sflush_r+0x20>
 80065ee:	2000      	movs	r0, #0
 80065f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80065f6:	2e00      	cmp	r6, #0
 80065f8:	d0f9      	beq.n	80065ee <__sflush_r+0x1a>
 80065fa:	2300      	movs	r3, #0
 80065fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006600:	682f      	ldr	r7, [r5, #0]
 8006602:	602b      	str	r3, [r5, #0]
 8006604:	d032      	beq.n	800666c <__sflush_r+0x98>
 8006606:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006608:	89a3      	ldrh	r3, [r4, #12]
 800660a:	075a      	lsls	r2, r3, #29
 800660c:	d505      	bpl.n	800661a <__sflush_r+0x46>
 800660e:	6863      	ldr	r3, [r4, #4]
 8006610:	1ac0      	subs	r0, r0, r3
 8006612:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006614:	b10b      	cbz	r3, 800661a <__sflush_r+0x46>
 8006616:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006618:	1ac0      	subs	r0, r0, r3
 800661a:	2300      	movs	r3, #0
 800661c:	4602      	mov	r2, r0
 800661e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006620:	6a21      	ldr	r1, [r4, #32]
 8006622:	4628      	mov	r0, r5
 8006624:	47b0      	blx	r6
 8006626:	1c43      	adds	r3, r0, #1
 8006628:	89a3      	ldrh	r3, [r4, #12]
 800662a:	d106      	bne.n	800663a <__sflush_r+0x66>
 800662c:	6829      	ldr	r1, [r5, #0]
 800662e:	291d      	cmp	r1, #29
 8006630:	d82c      	bhi.n	800668c <__sflush_r+0xb8>
 8006632:	4a2a      	ldr	r2, [pc, #168]	; (80066dc <__sflush_r+0x108>)
 8006634:	40ca      	lsrs	r2, r1
 8006636:	07d6      	lsls	r6, r2, #31
 8006638:	d528      	bpl.n	800668c <__sflush_r+0xb8>
 800663a:	2200      	movs	r2, #0
 800663c:	6062      	str	r2, [r4, #4]
 800663e:	04d9      	lsls	r1, r3, #19
 8006640:	6922      	ldr	r2, [r4, #16]
 8006642:	6022      	str	r2, [r4, #0]
 8006644:	d504      	bpl.n	8006650 <__sflush_r+0x7c>
 8006646:	1c42      	adds	r2, r0, #1
 8006648:	d101      	bne.n	800664e <__sflush_r+0x7a>
 800664a:	682b      	ldr	r3, [r5, #0]
 800664c:	b903      	cbnz	r3, 8006650 <__sflush_r+0x7c>
 800664e:	6560      	str	r0, [r4, #84]	; 0x54
 8006650:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006652:	602f      	str	r7, [r5, #0]
 8006654:	2900      	cmp	r1, #0
 8006656:	d0ca      	beq.n	80065ee <__sflush_r+0x1a>
 8006658:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800665c:	4299      	cmp	r1, r3
 800665e:	d002      	beq.n	8006666 <__sflush_r+0x92>
 8006660:	4628      	mov	r0, r5
 8006662:	f7fd fdb5 	bl	80041d0 <_free_r>
 8006666:	2000      	movs	r0, #0
 8006668:	6360      	str	r0, [r4, #52]	; 0x34
 800666a:	e7c1      	b.n	80065f0 <__sflush_r+0x1c>
 800666c:	6a21      	ldr	r1, [r4, #32]
 800666e:	2301      	movs	r3, #1
 8006670:	4628      	mov	r0, r5
 8006672:	47b0      	blx	r6
 8006674:	1c41      	adds	r1, r0, #1
 8006676:	d1c7      	bne.n	8006608 <__sflush_r+0x34>
 8006678:	682b      	ldr	r3, [r5, #0]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d0c4      	beq.n	8006608 <__sflush_r+0x34>
 800667e:	2b1d      	cmp	r3, #29
 8006680:	d001      	beq.n	8006686 <__sflush_r+0xb2>
 8006682:	2b16      	cmp	r3, #22
 8006684:	d101      	bne.n	800668a <__sflush_r+0xb6>
 8006686:	602f      	str	r7, [r5, #0]
 8006688:	e7b1      	b.n	80065ee <__sflush_r+0x1a>
 800668a:	89a3      	ldrh	r3, [r4, #12]
 800668c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006690:	81a3      	strh	r3, [r4, #12]
 8006692:	e7ad      	b.n	80065f0 <__sflush_r+0x1c>
 8006694:	690f      	ldr	r7, [r1, #16]
 8006696:	2f00      	cmp	r7, #0
 8006698:	d0a9      	beq.n	80065ee <__sflush_r+0x1a>
 800669a:	0793      	lsls	r3, r2, #30
 800669c:	680e      	ldr	r6, [r1, #0]
 800669e:	bf08      	it	eq
 80066a0:	694b      	ldreq	r3, [r1, #20]
 80066a2:	600f      	str	r7, [r1, #0]
 80066a4:	bf18      	it	ne
 80066a6:	2300      	movne	r3, #0
 80066a8:	eba6 0807 	sub.w	r8, r6, r7
 80066ac:	608b      	str	r3, [r1, #8]
 80066ae:	f1b8 0f00 	cmp.w	r8, #0
 80066b2:	dd9c      	ble.n	80065ee <__sflush_r+0x1a>
 80066b4:	6a21      	ldr	r1, [r4, #32]
 80066b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80066b8:	4643      	mov	r3, r8
 80066ba:	463a      	mov	r2, r7
 80066bc:	4628      	mov	r0, r5
 80066be:	47b0      	blx	r6
 80066c0:	2800      	cmp	r0, #0
 80066c2:	dc06      	bgt.n	80066d2 <__sflush_r+0xfe>
 80066c4:	89a3      	ldrh	r3, [r4, #12]
 80066c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066ca:	81a3      	strh	r3, [r4, #12]
 80066cc:	f04f 30ff 	mov.w	r0, #4294967295
 80066d0:	e78e      	b.n	80065f0 <__sflush_r+0x1c>
 80066d2:	4407      	add	r7, r0
 80066d4:	eba8 0800 	sub.w	r8, r8, r0
 80066d8:	e7e9      	b.n	80066ae <__sflush_r+0xda>
 80066da:	bf00      	nop
 80066dc:	20400001 	.word	0x20400001

080066e0 <_fflush_r>:
 80066e0:	b538      	push	{r3, r4, r5, lr}
 80066e2:	690b      	ldr	r3, [r1, #16]
 80066e4:	4605      	mov	r5, r0
 80066e6:	460c      	mov	r4, r1
 80066e8:	b913      	cbnz	r3, 80066f0 <_fflush_r+0x10>
 80066ea:	2500      	movs	r5, #0
 80066ec:	4628      	mov	r0, r5
 80066ee:	bd38      	pop	{r3, r4, r5, pc}
 80066f0:	b118      	cbz	r0, 80066fa <_fflush_r+0x1a>
 80066f2:	6983      	ldr	r3, [r0, #24]
 80066f4:	b90b      	cbnz	r3, 80066fa <_fflush_r+0x1a>
 80066f6:	f000 f887 	bl	8006808 <__sinit>
 80066fa:	4b14      	ldr	r3, [pc, #80]	; (800674c <_fflush_r+0x6c>)
 80066fc:	429c      	cmp	r4, r3
 80066fe:	d11b      	bne.n	8006738 <_fflush_r+0x58>
 8006700:	686c      	ldr	r4, [r5, #4]
 8006702:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d0ef      	beq.n	80066ea <_fflush_r+0xa>
 800670a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800670c:	07d0      	lsls	r0, r2, #31
 800670e:	d404      	bmi.n	800671a <_fflush_r+0x3a>
 8006710:	0599      	lsls	r1, r3, #22
 8006712:	d402      	bmi.n	800671a <_fflush_r+0x3a>
 8006714:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006716:	f7ff fd1a 	bl	800614e <__retarget_lock_acquire_recursive>
 800671a:	4628      	mov	r0, r5
 800671c:	4621      	mov	r1, r4
 800671e:	f7ff ff59 	bl	80065d4 <__sflush_r>
 8006722:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006724:	07da      	lsls	r2, r3, #31
 8006726:	4605      	mov	r5, r0
 8006728:	d4e0      	bmi.n	80066ec <_fflush_r+0xc>
 800672a:	89a3      	ldrh	r3, [r4, #12]
 800672c:	059b      	lsls	r3, r3, #22
 800672e:	d4dd      	bmi.n	80066ec <_fflush_r+0xc>
 8006730:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006732:	f7ff fd0d 	bl	8006150 <__retarget_lock_release_recursive>
 8006736:	e7d9      	b.n	80066ec <_fflush_r+0xc>
 8006738:	4b05      	ldr	r3, [pc, #20]	; (8006750 <_fflush_r+0x70>)
 800673a:	429c      	cmp	r4, r3
 800673c:	d101      	bne.n	8006742 <_fflush_r+0x62>
 800673e:	68ac      	ldr	r4, [r5, #8]
 8006740:	e7df      	b.n	8006702 <_fflush_r+0x22>
 8006742:	4b04      	ldr	r3, [pc, #16]	; (8006754 <_fflush_r+0x74>)
 8006744:	429c      	cmp	r4, r3
 8006746:	bf08      	it	eq
 8006748:	68ec      	ldreq	r4, [r5, #12]
 800674a:	e7da      	b.n	8006702 <_fflush_r+0x22>
 800674c:	0800b244 	.word	0x0800b244
 8006750:	0800b264 	.word	0x0800b264
 8006754:	0800b224 	.word	0x0800b224

08006758 <std>:
 8006758:	2300      	movs	r3, #0
 800675a:	b510      	push	{r4, lr}
 800675c:	4604      	mov	r4, r0
 800675e:	e9c0 3300 	strd	r3, r3, [r0]
 8006762:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006766:	6083      	str	r3, [r0, #8]
 8006768:	8181      	strh	r1, [r0, #12]
 800676a:	6643      	str	r3, [r0, #100]	; 0x64
 800676c:	81c2      	strh	r2, [r0, #14]
 800676e:	6183      	str	r3, [r0, #24]
 8006770:	4619      	mov	r1, r3
 8006772:	2208      	movs	r2, #8
 8006774:	305c      	adds	r0, #92	; 0x5c
 8006776:	f7fd fd23 	bl	80041c0 <memset>
 800677a:	4b05      	ldr	r3, [pc, #20]	; (8006790 <std+0x38>)
 800677c:	6263      	str	r3, [r4, #36]	; 0x24
 800677e:	4b05      	ldr	r3, [pc, #20]	; (8006794 <std+0x3c>)
 8006780:	62a3      	str	r3, [r4, #40]	; 0x28
 8006782:	4b05      	ldr	r3, [pc, #20]	; (8006798 <std+0x40>)
 8006784:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006786:	4b05      	ldr	r3, [pc, #20]	; (800679c <std+0x44>)
 8006788:	6224      	str	r4, [r4, #32]
 800678a:	6323      	str	r3, [r4, #48]	; 0x30
 800678c:	bd10      	pop	{r4, pc}
 800678e:	bf00      	nop
 8006790:	08006a95 	.word	0x08006a95
 8006794:	08006ab7 	.word	0x08006ab7
 8006798:	08006aef 	.word	0x08006aef
 800679c:	08006b13 	.word	0x08006b13

080067a0 <_cleanup_r>:
 80067a0:	4901      	ldr	r1, [pc, #4]	; (80067a8 <_cleanup_r+0x8>)
 80067a2:	f000 b8af 	b.w	8006904 <_fwalk_reent>
 80067a6:	bf00      	nop
 80067a8:	080066e1 	.word	0x080066e1

080067ac <__sfmoreglue>:
 80067ac:	b570      	push	{r4, r5, r6, lr}
 80067ae:	2268      	movs	r2, #104	; 0x68
 80067b0:	1e4d      	subs	r5, r1, #1
 80067b2:	4355      	muls	r5, r2
 80067b4:	460e      	mov	r6, r1
 80067b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80067ba:	f7fd fd75 	bl	80042a8 <_malloc_r>
 80067be:	4604      	mov	r4, r0
 80067c0:	b140      	cbz	r0, 80067d4 <__sfmoreglue+0x28>
 80067c2:	2100      	movs	r1, #0
 80067c4:	e9c0 1600 	strd	r1, r6, [r0]
 80067c8:	300c      	adds	r0, #12
 80067ca:	60a0      	str	r0, [r4, #8]
 80067cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80067d0:	f7fd fcf6 	bl	80041c0 <memset>
 80067d4:	4620      	mov	r0, r4
 80067d6:	bd70      	pop	{r4, r5, r6, pc}

080067d8 <__sfp_lock_acquire>:
 80067d8:	4801      	ldr	r0, [pc, #4]	; (80067e0 <__sfp_lock_acquire+0x8>)
 80067da:	f7ff bcb8 	b.w	800614e <__retarget_lock_acquire_recursive>
 80067de:	bf00      	nop
 80067e0:	20000245 	.word	0x20000245

080067e4 <__sfp_lock_release>:
 80067e4:	4801      	ldr	r0, [pc, #4]	; (80067ec <__sfp_lock_release+0x8>)
 80067e6:	f7ff bcb3 	b.w	8006150 <__retarget_lock_release_recursive>
 80067ea:	bf00      	nop
 80067ec:	20000245 	.word	0x20000245

080067f0 <__sinit_lock_acquire>:
 80067f0:	4801      	ldr	r0, [pc, #4]	; (80067f8 <__sinit_lock_acquire+0x8>)
 80067f2:	f7ff bcac 	b.w	800614e <__retarget_lock_acquire_recursive>
 80067f6:	bf00      	nop
 80067f8:	20000246 	.word	0x20000246

080067fc <__sinit_lock_release>:
 80067fc:	4801      	ldr	r0, [pc, #4]	; (8006804 <__sinit_lock_release+0x8>)
 80067fe:	f7ff bca7 	b.w	8006150 <__retarget_lock_release_recursive>
 8006802:	bf00      	nop
 8006804:	20000246 	.word	0x20000246

08006808 <__sinit>:
 8006808:	b510      	push	{r4, lr}
 800680a:	4604      	mov	r4, r0
 800680c:	f7ff fff0 	bl	80067f0 <__sinit_lock_acquire>
 8006810:	69a3      	ldr	r3, [r4, #24]
 8006812:	b11b      	cbz	r3, 800681c <__sinit+0x14>
 8006814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006818:	f7ff bff0 	b.w	80067fc <__sinit_lock_release>
 800681c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006820:	6523      	str	r3, [r4, #80]	; 0x50
 8006822:	4b13      	ldr	r3, [pc, #76]	; (8006870 <__sinit+0x68>)
 8006824:	4a13      	ldr	r2, [pc, #76]	; (8006874 <__sinit+0x6c>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	62a2      	str	r2, [r4, #40]	; 0x28
 800682a:	42a3      	cmp	r3, r4
 800682c:	bf04      	itt	eq
 800682e:	2301      	moveq	r3, #1
 8006830:	61a3      	streq	r3, [r4, #24]
 8006832:	4620      	mov	r0, r4
 8006834:	f000 f820 	bl	8006878 <__sfp>
 8006838:	6060      	str	r0, [r4, #4]
 800683a:	4620      	mov	r0, r4
 800683c:	f000 f81c 	bl	8006878 <__sfp>
 8006840:	60a0      	str	r0, [r4, #8]
 8006842:	4620      	mov	r0, r4
 8006844:	f000 f818 	bl	8006878 <__sfp>
 8006848:	2200      	movs	r2, #0
 800684a:	60e0      	str	r0, [r4, #12]
 800684c:	2104      	movs	r1, #4
 800684e:	6860      	ldr	r0, [r4, #4]
 8006850:	f7ff ff82 	bl	8006758 <std>
 8006854:	68a0      	ldr	r0, [r4, #8]
 8006856:	2201      	movs	r2, #1
 8006858:	2109      	movs	r1, #9
 800685a:	f7ff ff7d 	bl	8006758 <std>
 800685e:	68e0      	ldr	r0, [r4, #12]
 8006860:	2202      	movs	r2, #2
 8006862:	2112      	movs	r1, #18
 8006864:	f7ff ff78 	bl	8006758 <std>
 8006868:	2301      	movs	r3, #1
 800686a:	61a3      	str	r3, [r4, #24]
 800686c:	e7d2      	b.n	8006814 <__sinit+0xc>
 800686e:	bf00      	nop
 8006870:	0800aea8 	.word	0x0800aea8
 8006874:	080067a1 	.word	0x080067a1

08006878 <__sfp>:
 8006878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800687a:	4607      	mov	r7, r0
 800687c:	f7ff ffac 	bl	80067d8 <__sfp_lock_acquire>
 8006880:	4b1e      	ldr	r3, [pc, #120]	; (80068fc <__sfp+0x84>)
 8006882:	681e      	ldr	r6, [r3, #0]
 8006884:	69b3      	ldr	r3, [r6, #24]
 8006886:	b913      	cbnz	r3, 800688e <__sfp+0x16>
 8006888:	4630      	mov	r0, r6
 800688a:	f7ff ffbd 	bl	8006808 <__sinit>
 800688e:	3648      	adds	r6, #72	; 0x48
 8006890:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006894:	3b01      	subs	r3, #1
 8006896:	d503      	bpl.n	80068a0 <__sfp+0x28>
 8006898:	6833      	ldr	r3, [r6, #0]
 800689a:	b30b      	cbz	r3, 80068e0 <__sfp+0x68>
 800689c:	6836      	ldr	r6, [r6, #0]
 800689e:	e7f7      	b.n	8006890 <__sfp+0x18>
 80068a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80068a4:	b9d5      	cbnz	r5, 80068dc <__sfp+0x64>
 80068a6:	4b16      	ldr	r3, [pc, #88]	; (8006900 <__sfp+0x88>)
 80068a8:	60e3      	str	r3, [r4, #12]
 80068aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80068ae:	6665      	str	r5, [r4, #100]	; 0x64
 80068b0:	f7ff fc4c 	bl	800614c <__retarget_lock_init_recursive>
 80068b4:	f7ff ff96 	bl	80067e4 <__sfp_lock_release>
 80068b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80068bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80068c0:	6025      	str	r5, [r4, #0]
 80068c2:	61a5      	str	r5, [r4, #24]
 80068c4:	2208      	movs	r2, #8
 80068c6:	4629      	mov	r1, r5
 80068c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80068cc:	f7fd fc78 	bl	80041c0 <memset>
 80068d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80068d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80068d8:	4620      	mov	r0, r4
 80068da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068dc:	3468      	adds	r4, #104	; 0x68
 80068de:	e7d9      	b.n	8006894 <__sfp+0x1c>
 80068e0:	2104      	movs	r1, #4
 80068e2:	4638      	mov	r0, r7
 80068e4:	f7ff ff62 	bl	80067ac <__sfmoreglue>
 80068e8:	4604      	mov	r4, r0
 80068ea:	6030      	str	r0, [r6, #0]
 80068ec:	2800      	cmp	r0, #0
 80068ee:	d1d5      	bne.n	800689c <__sfp+0x24>
 80068f0:	f7ff ff78 	bl	80067e4 <__sfp_lock_release>
 80068f4:	230c      	movs	r3, #12
 80068f6:	603b      	str	r3, [r7, #0]
 80068f8:	e7ee      	b.n	80068d8 <__sfp+0x60>
 80068fa:	bf00      	nop
 80068fc:	0800aea8 	.word	0x0800aea8
 8006900:	ffff0001 	.word	0xffff0001

08006904 <_fwalk_reent>:
 8006904:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006908:	4606      	mov	r6, r0
 800690a:	4688      	mov	r8, r1
 800690c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006910:	2700      	movs	r7, #0
 8006912:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006916:	f1b9 0901 	subs.w	r9, r9, #1
 800691a:	d505      	bpl.n	8006928 <_fwalk_reent+0x24>
 800691c:	6824      	ldr	r4, [r4, #0]
 800691e:	2c00      	cmp	r4, #0
 8006920:	d1f7      	bne.n	8006912 <_fwalk_reent+0xe>
 8006922:	4638      	mov	r0, r7
 8006924:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006928:	89ab      	ldrh	r3, [r5, #12]
 800692a:	2b01      	cmp	r3, #1
 800692c:	d907      	bls.n	800693e <_fwalk_reent+0x3a>
 800692e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006932:	3301      	adds	r3, #1
 8006934:	d003      	beq.n	800693e <_fwalk_reent+0x3a>
 8006936:	4629      	mov	r1, r5
 8006938:	4630      	mov	r0, r6
 800693a:	47c0      	blx	r8
 800693c:	4307      	orrs	r7, r0
 800693e:	3568      	adds	r5, #104	; 0x68
 8006940:	e7e9      	b.n	8006916 <_fwalk_reent+0x12>

08006942 <__swhatbuf_r>:
 8006942:	b570      	push	{r4, r5, r6, lr}
 8006944:	460e      	mov	r6, r1
 8006946:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800694a:	2900      	cmp	r1, #0
 800694c:	b096      	sub	sp, #88	; 0x58
 800694e:	4614      	mov	r4, r2
 8006950:	461d      	mov	r5, r3
 8006952:	da08      	bge.n	8006966 <__swhatbuf_r+0x24>
 8006954:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006958:	2200      	movs	r2, #0
 800695a:	602a      	str	r2, [r5, #0]
 800695c:	061a      	lsls	r2, r3, #24
 800695e:	d410      	bmi.n	8006982 <__swhatbuf_r+0x40>
 8006960:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006964:	e00e      	b.n	8006984 <__swhatbuf_r+0x42>
 8006966:	466a      	mov	r2, sp
 8006968:	f000 f8fa 	bl	8006b60 <_fstat_r>
 800696c:	2800      	cmp	r0, #0
 800696e:	dbf1      	blt.n	8006954 <__swhatbuf_r+0x12>
 8006970:	9a01      	ldr	r2, [sp, #4]
 8006972:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006976:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800697a:	425a      	negs	r2, r3
 800697c:	415a      	adcs	r2, r3
 800697e:	602a      	str	r2, [r5, #0]
 8006980:	e7ee      	b.n	8006960 <__swhatbuf_r+0x1e>
 8006982:	2340      	movs	r3, #64	; 0x40
 8006984:	2000      	movs	r0, #0
 8006986:	6023      	str	r3, [r4, #0]
 8006988:	b016      	add	sp, #88	; 0x58
 800698a:	bd70      	pop	{r4, r5, r6, pc}

0800698c <__smakebuf_r>:
 800698c:	898b      	ldrh	r3, [r1, #12]
 800698e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006990:	079d      	lsls	r5, r3, #30
 8006992:	4606      	mov	r6, r0
 8006994:	460c      	mov	r4, r1
 8006996:	d507      	bpl.n	80069a8 <__smakebuf_r+0x1c>
 8006998:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800699c:	6023      	str	r3, [r4, #0]
 800699e:	6123      	str	r3, [r4, #16]
 80069a0:	2301      	movs	r3, #1
 80069a2:	6163      	str	r3, [r4, #20]
 80069a4:	b002      	add	sp, #8
 80069a6:	bd70      	pop	{r4, r5, r6, pc}
 80069a8:	ab01      	add	r3, sp, #4
 80069aa:	466a      	mov	r2, sp
 80069ac:	f7ff ffc9 	bl	8006942 <__swhatbuf_r>
 80069b0:	9900      	ldr	r1, [sp, #0]
 80069b2:	4605      	mov	r5, r0
 80069b4:	4630      	mov	r0, r6
 80069b6:	f7fd fc77 	bl	80042a8 <_malloc_r>
 80069ba:	b948      	cbnz	r0, 80069d0 <__smakebuf_r+0x44>
 80069bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069c0:	059a      	lsls	r2, r3, #22
 80069c2:	d4ef      	bmi.n	80069a4 <__smakebuf_r+0x18>
 80069c4:	f023 0303 	bic.w	r3, r3, #3
 80069c8:	f043 0302 	orr.w	r3, r3, #2
 80069cc:	81a3      	strh	r3, [r4, #12]
 80069ce:	e7e3      	b.n	8006998 <__smakebuf_r+0xc>
 80069d0:	4b0d      	ldr	r3, [pc, #52]	; (8006a08 <__smakebuf_r+0x7c>)
 80069d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80069d4:	89a3      	ldrh	r3, [r4, #12]
 80069d6:	6020      	str	r0, [r4, #0]
 80069d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069dc:	81a3      	strh	r3, [r4, #12]
 80069de:	9b00      	ldr	r3, [sp, #0]
 80069e0:	6163      	str	r3, [r4, #20]
 80069e2:	9b01      	ldr	r3, [sp, #4]
 80069e4:	6120      	str	r0, [r4, #16]
 80069e6:	b15b      	cbz	r3, 8006a00 <__smakebuf_r+0x74>
 80069e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80069ec:	4630      	mov	r0, r6
 80069ee:	f000 f8c9 	bl	8006b84 <_isatty_r>
 80069f2:	b128      	cbz	r0, 8006a00 <__smakebuf_r+0x74>
 80069f4:	89a3      	ldrh	r3, [r4, #12]
 80069f6:	f023 0303 	bic.w	r3, r3, #3
 80069fa:	f043 0301 	orr.w	r3, r3, #1
 80069fe:	81a3      	strh	r3, [r4, #12]
 8006a00:	89a0      	ldrh	r0, [r4, #12]
 8006a02:	4305      	orrs	r5, r0
 8006a04:	81a5      	strh	r5, [r4, #12]
 8006a06:	e7cd      	b.n	80069a4 <__smakebuf_r+0x18>
 8006a08:	080067a1 	.word	0x080067a1

08006a0c <_raise_r>:
 8006a0c:	291f      	cmp	r1, #31
 8006a0e:	b538      	push	{r3, r4, r5, lr}
 8006a10:	4604      	mov	r4, r0
 8006a12:	460d      	mov	r5, r1
 8006a14:	d904      	bls.n	8006a20 <_raise_r+0x14>
 8006a16:	2316      	movs	r3, #22
 8006a18:	6003      	str	r3, [r0, #0]
 8006a1a:	f04f 30ff 	mov.w	r0, #4294967295
 8006a1e:	bd38      	pop	{r3, r4, r5, pc}
 8006a20:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006a22:	b112      	cbz	r2, 8006a2a <_raise_r+0x1e>
 8006a24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006a28:	b94b      	cbnz	r3, 8006a3e <_raise_r+0x32>
 8006a2a:	4620      	mov	r0, r4
 8006a2c:	f000 f830 	bl	8006a90 <_getpid_r>
 8006a30:	462a      	mov	r2, r5
 8006a32:	4601      	mov	r1, r0
 8006a34:	4620      	mov	r0, r4
 8006a36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a3a:	f000 b817 	b.w	8006a6c <_kill_r>
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d00a      	beq.n	8006a58 <_raise_r+0x4c>
 8006a42:	1c59      	adds	r1, r3, #1
 8006a44:	d103      	bne.n	8006a4e <_raise_r+0x42>
 8006a46:	2316      	movs	r3, #22
 8006a48:	6003      	str	r3, [r0, #0]
 8006a4a:	2001      	movs	r0, #1
 8006a4c:	e7e7      	b.n	8006a1e <_raise_r+0x12>
 8006a4e:	2400      	movs	r4, #0
 8006a50:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006a54:	4628      	mov	r0, r5
 8006a56:	4798      	blx	r3
 8006a58:	2000      	movs	r0, #0
 8006a5a:	e7e0      	b.n	8006a1e <_raise_r+0x12>

08006a5c <raise>:
 8006a5c:	4b02      	ldr	r3, [pc, #8]	; (8006a68 <raise+0xc>)
 8006a5e:	4601      	mov	r1, r0
 8006a60:	6818      	ldr	r0, [r3, #0]
 8006a62:	f7ff bfd3 	b.w	8006a0c <_raise_r>
 8006a66:	bf00      	nop
 8006a68:	20000020 	.word	0x20000020

08006a6c <_kill_r>:
 8006a6c:	b538      	push	{r3, r4, r5, lr}
 8006a6e:	4d07      	ldr	r5, [pc, #28]	; (8006a8c <_kill_r+0x20>)
 8006a70:	2300      	movs	r3, #0
 8006a72:	4604      	mov	r4, r0
 8006a74:	4608      	mov	r0, r1
 8006a76:	4611      	mov	r1, r2
 8006a78:	602b      	str	r3, [r5, #0]
 8006a7a:	f7fc fa35 	bl	8002ee8 <_kill>
 8006a7e:	1c43      	adds	r3, r0, #1
 8006a80:	d102      	bne.n	8006a88 <_kill_r+0x1c>
 8006a82:	682b      	ldr	r3, [r5, #0]
 8006a84:	b103      	cbz	r3, 8006a88 <_kill_r+0x1c>
 8006a86:	6023      	str	r3, [r4, #0]
 8006a88:	bd38      	pop	{r3, r4, r5, pc}
 8006a8a:	bf00      	nop
 8006a8c:	20000240 	.word	0x20000240

08006a90 <_getpid_r>:
 8006a90:	f7fc ba22 	b.w	8002ed8 <_getpid>

08006a94 <__sread>:
 8006a94:	b510      	push	{r4, lr}
 8006a96:	460c      	mov	r4, r1
 8006a98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a9c:	f000 f894 	bl	8006bc8 <_read_r>
 8006aa0:	2800      	cmp	r0, #0
 8006aa2:	bfab      	itete	ge
 8006aa4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006aa6:	89a3      	ldrhlt	r3, [r4, #12]
 8006aa8:	181b      	addge	r3, r3, r0
 8006aaa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006aae:	bfac      	ite	ge
 8006ab0:	6563      	strge	r3, [r4, #84]	; 0x54
 8006ab2:	81a3      	strhlt	r3, [r4, #12]
 8006ab4:	bd10      	pop	{r4, pc}

08006ab6 <__swrite>:
 8006ab6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006aba:	461f      	mov	r7, r3
 8006abc:	898b      	ldrh	r3, [r1, #12]
 8006abe:	05db      	lsls	r3, r3, #23
 8006ac0:	4605      	mov	r5, r0
 8006ac2:	460c      	mov	r4, r1
 8006ac4:	4616      	mov	r6, r2
 8006ac6:	d505      	bpl.n	8006ad4 <__swrite+0x1e>
 8006ac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006acc:	2302      	movs	r3, #2
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f000 f868 	bl	8006ba4 <_lseek_r>
 8006ad4:	89a3      	ldrh	r3, [r4, #12]
 8006ad6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ada:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ade:	81a3      	strh	r3, [r4, #12]
 8006ae0:	4632      	mov	r2, r6
 8006ae2:	463b      	mov	r3, r7
 8006ae4:	4628      	mov	r0, r5
 8006ae6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006aea:	f000 b817 	b.w	8006b1c <_write_r>

08006aee <__sseek>:
 8006aee:	b510      	push	{r4, lr}
 8006af0:	460c      	mov	r4, r1
 8006af2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006af6:	f000 f855 	bl	8006ba4 <_lseek_r>
 8006afa:	1c43      	adds	r3, r0, #1
 8006afc:	89a3      	ldrh	r3, [r4, #12]
 8006afe:	bf15      	itete	ne
 8006b00:	6560      	strne	r0, [r4, #84]	; 0x54
 8006b02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006b06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006b0a:	81a3      	strheq	r3, [r4, #12]
 8006b0c:	bf18      	it	ne
 8006b0e:	81a3      	strhne	r3, [r4, #12]
 8006b10:	bd10      	pop	{r4, pc}

08006b12 <__sclose>:
 8006b12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b16:	f000 b813 	b.w	8006b40 <_close_r>
	...

08006b1c <_write_r>:
 8006b1c:	b538      	push	{r3, r4, r5, lr}
 8006b1e:	4d07      	ldr	r5, [pc, #28]	; (8006b3c <_write_r+0x20>)
 8006b20:	4604      	mov	r4, r0
 8006b22:	4608      	mov	r0, r1
 8006b24:	4611      	mov	r1, r2
 8006b26:	2200      	movs	r2, #0
 8006b28:	602a      	str	r2, [r5, #0]
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	f7fc fa13 	bl	8002f56 <_write>
 8006b30:	1c43      	adds	r3, r0, #1
 8006b32:	d102      	bne.n	8006b3a <_write_r+0x1e>
 8006b34:	682b      	ldr	r3, [r5, #0]
 8006b36:	b103      	cbz	r3, 8006b3a <_write_r+0x1e>
 8006b38:	6023      	str	r3, [r4, #0]
 8006b3a:	bd38      	pop	{r3, r4, r5, pc}
 8006b3c:	20000240 	.word	0x20000240

08006b40 <_close_r>:
 8006b40:	b538      	push	{r3, r4, r5, lr}
 8006b42:	4d06      	ldr	r5, [pc, #24]	; (8006b5c <_close_r+0x1c>)
 8006b44:	2300      	movs	r3, #0
 8006b46:	4604      	mov	r4, r0
 8006b48:	4608      	mov	r0, r1
 8006b4a:	602b      	str	r3, [r5, #0]
 8006b4c:	f7fc fa1f 	bl	8002f8e <_close>
 8006b50:	1c43      	adds	r3, r0, #1
 8006b52:	d102      	bne.n	8006b5a <_close_r+0x1a>
 8006b54:	682b      	ldr	r3, [r5, #0]
 8006b56:	b103      	cbz	r3, 8006b5a <_close_r+0x1a>
 8006b58:	6023      	str	r3, [r4, #0]
 8006b5a:	bd38      	pop	{r3, r4, r5, pc}
 8006b5c:	20000240 	.word	0x20000240

08006b60 <_fstat_r>:
 8006b60:	b538      	push	{r3, r4, r5, lr}
 8006b62:	4d07      	ldr	r5, [pc, #28]	; (8006b80 <_fstat_r+0x20>)
 8006b64:	2300      	movs	r3, #0
 8006b66:	4604      	mov	r4, r0
 8006b68:	4608      	mov	r0, r1
 8006b6a:	4611      	mov	r1, r2
 8006b6c:	602b      	str	r3, [r5, #0]
 8006b6e:	f7fc fa1a 	bl	8002fa6 <_fstat>
 8006b72:	1c43      	adds	r3, r0, #1
 8006b74:	d102      	bne.n	8006b7c <_fstat_r+0x1c>
 8006b76:	682b      	ldr	r3, [r5, #0]
 8006b78:	b103      	cbz	r3, 8006b7c <_fstat_r+0x1c>
 8006b7a:	6023      	str	r3, [r4, #0]
 8006b7c:	bd38      	pop	{r3, r4, r5, pc}
 8006b7e:	bf00      	nop
 8006b80:	20000240 	.word	0x20000240

08006b84 <_isatty_r>:
 8006b84:	b538      	push	{r3, r4, r5, lr}
 8006b86:	4d06      	ldr	r5, [pc, #24]	; (8006ba0 <_isatty_r+0x1c>)
 8006b88:	2300      	movs	r3, #0
 8006b8a:	4604      	mov	r4, r0
 8006b8c:	4608      	mov	r0, r1
 8006b8e:	602b      	str	r3, [r5, #0]
 8006b90:	f7fc fa19 	bl	8002fc6 <_isatty>
 8006b94:	1c43      	adds	r3, r0, #1
 8006b96:	d102      	bne.n	8006b9e <_isatty_r+0x1a>
 8006b98:	682b      	ldr	r3, [r5, #0]
 8006b9a:	b103      	cbz	r3, 8006b9e <_isatty_r+0x1a>
 8006b9c:	6023      	str	r3, [r4, #0]
 8006b9e:	bd38      	pop	{r3, r4, r5, pc}
 8006ba0:	20000240 	.word	0x20000240

08006ba4 <_lseek_r>:
 8006ba4:	b538      	push	{r3, r4, r5, lr}
 8006ba6:	4d07      	ldr	r5, [pc, #28]	; (8006bc4 <_lseek_r+0x20>)
 8006ba8:	4604      	mov	r4, r0
 8006baa:	4608      	mov	r0, r1
 8006bac:	4611      	mov	r1, r2
 8006bae:	2200      	movs	r2, #0
 8006bb0:	602a      	str	r2, [r5, #0]
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	f7fc fa12 	bl	8002fdc <_lseek>
 8006bb8:	1c43      	adds	r3, r0, #1
 8006bba:	d102      	bne.n	8006bc2 <_lseek_r+0x1e>
 8006bbc:	682b      	ldr	r3, [r5, #0]
 8006bbe:	b103      	cbz	r3, 8006bc2 <_lseek_r+0x1e>
 8006bc0:	6023      	str	r3, [r4, #0]
 8006bc2:	bd38      	pop	{r3, r4, r5, pc}
 8006bc4:	20000240 	.word	0x20000240

08006bc8 <_read_r>:
 8006bc8:	b538      	push	{r3, r4, r5, lr}
 8006bca:	4d07      	ldr	r5, [pc, #28]	; (8006be8 <_read_r+0x20>)
 8006bcc:	4604      	mov	r4, r0
 8006bce:	4608      	mov	r0, r1
 8006bd0:	4611      	mov	r1, r2
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	602a      	str	r2, [r5, #0]
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	f7fc f9a0 	bl	8002f1c <_read>
 8006bdc:	1c43      	adds	r3, r0, #1
 8006bde:	d102      	bne.n	8006be6 <_read_r+0x1e>
 8006be0:	682b      	ldr	r3, [r5, #0]
 8006be2:	b103      	cbz	r3, 8006be6 <_read_r+0x1e>
 8006be4:	6023      	str	r3, [r4, #0]
 8006be6:	bd38      	pop	{r3, r4, r5, pc}
 8006be8:	20000240 	.word	0x20000240
 8006bec:	00000000 	.word	0x00000000

08006bf0 <atan>:
 8006bf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bf4:	ec55 4b10 	vmov	r4, r5, d0
 8006bf8:	4bc3      	ldr	r3, [pc, #780]	; (8006f08 <atan+0x318>)
 8006bfa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006bfe:	429e      	cmp	r6, r3
 8006c00:	46ab      	mov	fp, r5
 8006c02:	dd18      	ble.n	8006c36 <atan+0x46>
 8006c04:	4bc1      	ldr	r3, [pc, #772]	; (8006f0c <atan+0x31c>)
 8006c06:	429e      	cmp	r6, r3
 8006c08:	dc01      	bgt.n	8006c0e <atan+0x1e>
 8006c0a:	d109      	bne.n	8006c20 <atan+0x30>
 8006c0c:	b144      	cbz	r4, 8006c20 <atan+0x30>
 8006c0e:	4622      	mov	r2, r4
 8006c10:	462b      	mov	r3, r5
 8006c12:	4620      	mov	r0, r4
 8006c14:	4629      	mov	r1, r5
 8006c16:	f7f9 fb41 	bl	800029c <__adddf3>
 8006c1a:	4604      	mov	r4, r0
 8006c1c:	460d      	mov	r5, r1
 8006c1e:	e006      	b.n	8006c2e <atan+0x3e>
 8006c20:	f1bb 0f00 	cmp.w	fp, #0
 8006c24:	f300 8131 	bgt.w	8006e8a <atan+0x29a>
 8006c28:	a59b      	add	r5, pc, #620	; (adr r5, 8006e98 <atan+0x2a8>)
 8006c2a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006c2e:	ec45 4b10 	vmov	d0, r4, r5
 8006c32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c36:	4bb6      	ldr	r3, [pc, #728]	; (8006f10 <atan+0x320>)
 8006c38:	429e      	cmp	r6, r3
 8006c3a:	dc14      	bgt.n	8006c66 <atan+0x76>
 8006c3c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8006c40:	429e      	cmp	r6, r3
 8006c42:	dc0d      	bgt.n	8006c60 <atan+0x70>
 8006c44:	a396      	add	r3, pc, #600	; (adr r3, 8006ea0 <atan+0x2b0>)
 8006c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c4a:	ee10 0a10 	vmov	r0, s0
 8006c4e:	4629      	mov	r1, r5
 8006c50:	f7f9 fb24 	bl	800029c <__adddf3>
 8006c54:	4baf      	ldr	r3, [pc, #700]	; (8006f14 <atan+0x324>)
 8006c56:	2200      	movs	r2, #0
 8006c58:	f7f9 ff66 	bl	8000b28 <__aeabi_dcmpgt>
 8006c5c:	2800      	cmp	r0, #0
 8006c5e:	d1e6      	bne.n	8006c2e <atan+0x3e>
 8006c60:	f04f 3aff 	mov.w	sl, #4294967295
 8006c64:	e02b      	b.n	8006cbe <atan+0xce>
 8006c66:	f000 f9b7 	bl	8006fd8 <fabs>
 8006c6a:	4bab      	ldr	r3, [pc, #684]	; (8006f18 <atan+0x328>)
 8006c6c:	429e      	cmp	r6, r3
 8006c6e:	ec55 4b10 	vmov	r4, r5, d0
 8006c72:	f300 80bf 	bgt.w	8006df4 <atan+0x204>
 8006c76:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8006c7a:	429e      	cmp	r6, r3
 8006c7c:	f300 80a0 	bgt.w	8006dc0 <atan+0x1d0>
 8006c80:	ee10 2a10 	vmov	r2, s0
 8006c84:	ee10 0a10 	vmov	r0, s0
 8006c88:	462b      	mov	r3, r5
 8006c8a:	4629      	mov	r1, r5
 8006c8c:	f7f9 fb06 	bl	800029c <__adddf3>
 8006c90:	4ba0      	ldr	r3, [pc, #640]	; (8006f14 <atan+0x324>)
 8006c92:	2200      	movs	r2, #0
 8006c94:	f7f9 fb00 	bl	8000298 <__aeabi_dsub>
 8006c98:	2200      	movs	r2, #0
 8006c9a:	4606      	mov	r6, r0
 8006c9c:	460f      	mov	r7, r1
 8006c9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006ca2:	4620      	mov	r0, r4
 8006ca4:	4629      	mov	r1, r5
 8006ca6:	f7f9 faf9 	bl	800029c <__adddf3>
 8006caa:	4602      	mov	r2, r0
 8006cac:	460b      	mov	r3, r1
 8006cae:	4630      	mov	r0, r6
 8006cb0:	4639      	mov	r1, r7
 8006cb2:	f7f9 fdd3 	bl	800085c <__aeabi_ddiv>
 8006cb6:	f04f 0a00 	mov.w	sl, #0
 8006cba:	4604      	mov	r4, r0
 8006cbc:	460d      	mov	r5, r1
 8006cbe:	4622      	mov	r2, r4
 8006cc0:	462b      	mov	r3, r5
 8006cc2:	4620      	mov	r0, r4
 8006cc4:	4629      	mov	r1, r5
 8006cc6:	f7f9 fc9f 	bl	8000608 <__aeabi_dmul>
 8006cca:	4602      	mov	r2, r0
 8006ccc:	460b      	mov	r3, r1
 8006cce:	4680      	mov	r8, r0
 8006cd0:	4689      	mov	r9, r1
 8006cd2:	f7f9 fc99 	bl	8000608 <__aeabi_dmul>
 8006cd6:	a374      	add	r3, pc, #464	; (adr r3, 8006ea8 <atan+0x2b8>)
 8006cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cdc:	4606      	mov	r6, r0
 8006cde:	460f      	mov	r7, r1
 8006ce0:	f7f9 fc92 	bl	8000608 <__aeabi_dmul>
 8006ce4:	a372      	add	r3, pc, #456	; (adr r3, 8006eb0 <atan+0x2c0>)
 8006ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cea:	f7f9 fad7 	bl	800029c <__adddf3>
 8006cee:	4632      	mov	r2, r6
 8006cf0:	463b      	mov	r3, r7
 8006cf2:	f7f9 fc89 	bl	8000608 <__aeabi_dmul>
 8006cf6:	a370      	add	r3, pc, #448	; (adr r3, 8006eb8 <atan+0x2c8>)
 8006cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cfc:	f7f9 face 	bl	800029c <__adddf3>
 8006d00:	4632      	mov	r2, r6
 8006d02:	463b      	mov	r3, r7
 8006d04:	f7f9 fc80 	bl	8000608 <__aeabi_dmul>
 8006d08:	a36d      	add	r3, pc, #436	; (adr r3, 8006ec0 <atan+0x2d0>)
 8006d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d0e:	f7f9 fac5 	bl	800029c <__adddf3>
 8006d12:	4632      	mov	r2, r6
 8006d14:	463b      	mov	r3, r7
 8006d16:	f7f9 fc77 	bl	8000608 <__aeabi_dmul>
 8006d1a:	a36b      	add	r3, pc, #428	; (adr r3, 8006ec8 <atan+0x2d8>)
 8006d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d20:	f7f9 fabc 	bl	800029c <__adddf3>
 8006d24:	4632      	mov	r2, r6
 8006d26:	463b      	mov	r3, r7
 8006d28:	f7f9 fc6e 	bl	8000608 <__aeabi_dmul>
 8006d2c:	a368      	add	r3, pc, #416	; (adr r3, 8006ed0 <atan+0x2e0>)
 8006d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d32:	f7f9 fab3 	bl	800029c <__adddf3>
 8006d36:	4642      	mov	r2, r8
 8006d38:	464b      	mov	r3, r9
 8006d3a:	f7f9 fc65 	bl	8000608 <__aeabi_dmul>
 8006d3e:	a366      	add	r3, pc, #408	; (adr r3, 8006ed8 <atan+0x2e8>)
 8006d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d44:	4680      	mov	r8, r0
 8006d46:	4689      	mov	r9, r1
 8006d48:	4630      	mov	r0, r6
 8006d4a:	4639      	mov	r1, r7
 8006d4c:	f7f9 fc5c 	bl	8000608 <__aeabi_dmul>
 8006d50:	a363      	add	r3, pc, #396	; (adr r3, 8006ee0 <atan+0x2f0>)
 8006d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d56:	f7f9 fa9f 	bl	8000298 <__aeabi_dsub>
 8006d5a:	4632      	mov	r2, r6
 8006d5c:	463b      	mov	r3, r7
 8006d5e:	f7f9 fc53 	bl	8000608 <__aeabi_dmul>
 8006d62:	a361      	add	r3, pc, #388	; (adr r3, 8006ee8 <atan+0x2f8>)
 8006d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d68:	f7f9 fa96 	bl	8000298 <__aeabi_dsub>
 8006d6c:	4632      	mov	r2, r6
 8006d6e:	463b      	mov	r3, r7
 8006d70:	f7f9 fc4a 	bl	8000608 <__aeabi_dmul>
 8006d74:	a35e      	add	r3, pc, #376	; (adr r3, 8006ef0 <atan+0x300>)
 8006d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d7a:	f7f9 fa8d 	bl	8000298 <__aeabi_dsub>
 8006d7e:	4632      	mov	r2, r6
 8006d80:	463b      	mov	r3, r7
 8006d82:	f7f9 fc41 	bl	8000608 <__aeabi_dmul>
 8006d86:	a35c      	add	r3, pc, #368	; (adr r3, 8006ef8 <atan+0x308>)
 8006d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d8c:	f7f9 fa84 	bl	8000298 <__aeabi_dsub>
 8006d90:	4632      	mov	r2, r6
 8006d92:	463b      	mov	r3, r7
 8006d94:	f7f9 fc38 	bl	8000608 <__aeabi_dmul>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	460b      	mov	r3, r1
 8006d9c:	4640      	mov	r0, r8
 8006d9e:	4649      	mov	r1, r9
 8006da0:	f7f9 fa7c 	bl	800029c <__adddf3>
 8006da4:	4622      	mov	r2, r4
 8006da6:	462b      	mov	r3, r5
 8006da8:	f7f9 fc2e 	bl	8000608 <__aeabi_dmul>
 8006dac:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006db0:	4602      	mov	r2, r0
 8006db2:	460b      	mov	r3, r1
 8006db4:	d14b      	bne.n	8006e4e <atan+0x25e>
 8006db6:	4620      	mov	r0, r4
 8006db8:	4629      	mov	r1, r5
 8006dba:	f7f9 fa6d 	bl	8000298 <__aeabi_dsub>
 8006dbe:	e72c      	b.n	8006c1a <atan+0x2a>
 8006dc0:	ee10 0a10 	vmov	r0, s0
 8006dc4:	4b53      	ldr	r3, [pc, #332]	; (8006f14 <atan+0x324>)
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	4629      	mov	r1, r5
 8006dca:	f7f9 fa65 	bl	8000298 <__aeabi_dsub>
 8006dce:	4b51      	ldr	r3, [pc, #324]	; (8006f14 <atan+0x324>)
 8006dd0:	4606      	mov	r6, r0
 8006dd2:	460f      	mov	r7, r1
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	4620      	mov	r0, r4
 8006dd8:	4629      	mov	r1, r5
 8006dda:	f7f9 fa5f 	bl	800029c <__adddf3>
 8006dde:	4602      	mov	r2, r0
 8006de0:	460b      	mov	r3, r1
 8006de2:	4630      	mov	r0, r6
 8006de4:	4639      	mov	r1, r7
 8006de6:	f7f9 fd39 	bl	800085c <__aeabi_ddiv>
 8006dea:	f04f 0a01 	mov.w	sl, #1
 8006dee:	4604      	mov	r4, r0
 8006df0:	460d      	mov	r5, r1
 8006df2:	e764      	b.n	8006cbe <atan+0xce>
 8006df4:	4b49      	ldr	r3, [pc, #292]	; (8006f1c <atan+0x32c>)
 8006df6:	429e      	cmp	r6, r3
 8006df8:	da1d      	bge.n	8006e36 <atan+0x246>
 8006dfa:	ee10 0a10 	vmov	r0, s0
 8006dfe:	4b48      	ldr	r3, [pc, #288]	; (8006f20 <atan+0x330>)
 8006e00:	2200      	movs	r2, #0
 8006e02:	4629      	mov	r1, r5
 8006e04:	f7f9 fa48 	bl	8000298 <__aeabi_dsub>
 8006e08:	4b45      	ldr	r3, [pc, #276]	; (8006f20 <atan+0x330>)
 8006e0a:	4606      	mov	r6, r0
 8006e0c:	460f      	mov	r7, r1
 8006e0e:	2200      	movs	r2, #0
 8006e10:	4620      	mov	r0, r4
 8006e12:	4629      	mov	r1, r5
 8006e14:	f7f9 fbf8 	bl	8000608 <__aeabi_dmul>
 8006e18:	4b3e      	ldr	r3, [pc, #248]	; (8006f14 <atan+0x324>)
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	f7f9 fa3e 	bl	800029c <__adddf3>
 8006e20:	4602      	mov	r2, r0
 8006e22:	460b      	mov	r3, r1
 8006e24:	4630      	mov	r0, r6
 8006e26:	4639      	mov	r1, r7
 8006e28:	f7f9 fd18 	bl	800085c <__aeabi_ddiv>
 8006e2c:	f04f 0a02 	mov.w	sl, #2
 8006e30:	4604      	mov	r4, r0
 8006e32:	460d      	mov	r5, r1
 8006e34:	e743      	b.n	8006cbe <atan+0xce>
 8006e36:	462b      	mov	r3, r5
 8006e38:	ee10 2a10 	vmov	r2, s0
 8006e3c:	4939      	ldr	r1, [pc, #228]	; (8006f24 <atan+0x334>)
 8006e3e:	2000      	movs	r0, #0
 8006e40:	f7f9 fd0c 	bl	800085c <__aeabi_ddiv>
 8006e44:	f04f 0a03 	mov.w	sl, #3
 8006e48:	4604      	mov	r4, r0
 8006e4a:	460d      	mov	r5, r1
 8006e4c:	e737      	b.n	8006cbe <atan+0xce>
 8006e4e:	4b36      	ldr	r3, [pc, #216]	; (8006f28 <atan+0x338>)
 8006e50:	4e36      	ldr	r6, [pc, #216]	; (8006f2c <atan+0x33c>)
 8006e52:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8006e56:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8006e5a:	e9da 2300 	ldrd	r2, r3, [sl]
 8006e5e:	f7f9 fa1b 	bl	8000298 <__aeabi_dsub>
 8006e62:	4622      	mov	r2, r4
 8006e64:	462b      	mov	r3, r5
 8006e66:	f7f9 fa17 	bl	8000298 <__aeabi_dsub>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8006e72:	f7f9 fa11 	bl	8000298 <__aeabi_dsub>
 8006e76:	f1bb 0f00 	cmp.w	fp, #0
 8006e7a:	4604      	mov	r4, r0
 8006e7c:	460d      	mov	r5, r1
 8006e7e:	f6bf aed6 	bge.w	8006c2e <atan+0x3e>
 8006e82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006e86:	461d      	mov	r5, r3
 8006e88:	e6d1      	b.n	8006c2e <atan+0x3e>
 8006e8a:	a51d      	add	r5, pc, #116	; (adr r5, 8006f00 <atan+0x310>)
 8006e8c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006e90:	e6cd      	b.n	8006c2e <atan+0x3e>
 8006e92:	bf00      	nop
 8006e94:	f3af 8000 	nop.w
 8006e98:	54442d18 	.word	0x54442d18
 8006e9c:	bff921fb 	.word	0xbff921fb
 8006ea0:	8800759c 	.word	0x8800759c
 8006ea4:	7e37e43c 	.word	0x7e37e43c
 8006ea8:	e322da11 	.word	0xe322da11
 8006eac:	3f90ad3a 	.word	0x3f90ad3a
 8006eb0:	24760deb 	.word	0x24760deb
 8006eb4:	3fa97b4b 	.word	0x3fa97b4b
 8006eb8:	a0d03d51 	.word	0xa0d03d51
 8006ebc:	3fb10d66 	.word	0x3fb10d66
 8006ec0:	c54c206e 	.word	0xc54c206e
 8006ec4:	3fb745cd 	.word	0x3fb745cd
 8006ec8:	920083ff 	.word	0x920083ff
 8006ecc:	3fc24924 	.word	0x3fc24924
 8006ed0:	5555550d 	.word	0x5555550d
 8006ed4:	3fd55555 	.word	0x3fd55555
 8006ed8:	2c6a6c2f 	.word	0x2c6a6c2f
 8006edc:	bfa2b444 	.word	0xbfa2b444
 8006ee0:	52defd9a 	.word	0x52defd9a
 8006ee4:	3fadde2d 	.word	0x3fadde2d
 8006ee8:	af749a6d 	.word	0xaf749a6d
 8006eec:	3fb3b0f2 	.word	0x3fb3b0f2
 8006ef0:	fe231671 	.word	0xfe231671
 8006ef4:	3fbc71c6 	.word	0x3fbc71c6
 8006ef8:	9998ebc4 	.word	0x9998ebc4
 8006efc:	3fc99999 	.word	0x3fc99999
 8006f00:	54442d18 	.word	0x54442d18
 8006f04:	3ff921fb 	.word	0x3ff921fb
 8006f08:	440fffff 	.word	0x440fffff
 8006f0c:	7ff00000 	.word	0x7ff00000
 8006f10:	3fdbffff 	.word	0x3fdbffff
 8006f14:	3ff00000 	.word	0x3ff00000
 8006f18:	3ff2ffff 	.word	0x3ff2ffff
 8006f1c:	40038000 	.word	0x40038000
 8006f20:	3ff80000 	.word	0x3ff80000
 8006f24:	bff00000 	.word	0xbff00000
 8006f28:	0800b2a8 	.word	0x0800b2a8
 8006f2c:	0800b288 	.word	0x0800b288

08006f30 <cos>:
 8006f30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006f32:	ec53 2b10 	vmov	r2, r3, d0
 8006f36:	4826      	ldr	r0, [pc, #152]	; (8006fd0 <cos+0xa0>)
 8006f38:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006f3c:	4281      	cmp	r1, r0
 8006f3e:	dc06      	bgt.n	8006f4e <cos+0x1e>
 8006f40:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8006fc8 <cos+0x98>
 8006f44:	b005      	add	sp, #20
 8006f46:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f4a:	f000 baf9 	b.w	8007540 <__kernel_cos>
 8006f4e:	4821      	ldr	r0, [pc, #132]	; (8006fd4 <cos+0xa4>)
 8006f50:	4281      	cmp	r1, r0
 8006f52:	dd09      	ble.n	8006f68 <cos+0x38>
 8006f54:	ee10 0a10 	vmov	r0, s0
 8006f58:	4619      	mov	r1, r3
 8006f5a:	f7f9 f99d 	bl	8000298 <__aeabi_dsub>
 8006f5e:	ec41 0b10 	vmov	d0, r0, r1
 8006f62:	b005      	add	sp, #20
 8006f64:	f85d fb04 	ldr.w	pc, [sp], #4
 8006f68:	4668      	mov	r0, sp
 8006f6a:	f000 f8dd 	bl	8007128 <__ieee754_rem_pio2>
 8006f6e:	f000 0003 	and.w	r0, r0, #3
 8006f72:	2801      	cmp	r0, #1
 8006f74:	d00b      	beq.n	8006f8e <cos+0x5e>
 8006f76:	2802      	cmp	r0, #2
 8006f78:	d016      	beq.n	8006fa8 <cos+0x78>
 8006f7a:	b9e0      	cbnz	r0, 8006fb6 <cos+0x86>
 8006f7c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006f80:	ed9d 0b00 	vldr	d0, [sp]
 8006f84:	f000 fadc 	bl	8007540 <__kernel_cos>
 8006f88:	ec51 0b10 	vmov	r0, r1, d0
 8006f8c:	e7e7      	b.n	8006f5e <cos+0x2e>
 8006f8e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006f92:	ed9d 0b00 	vldr	d0, [sp]
 8006f96:	f000 feeb 	bl	8007d70 <__kernel_sin>
 8006f9a:	ec53 2b10 	vmov	r2, r3, d0
 8006f9e:	ee10 0a10 	vmov	r0, s0
 8006fa2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006fa6:	e7da      	b.n	8006f5e <cos+0x2e>
 8006fa8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006fac:	ed9d 0b00 	vldr	d0, [sp]
 8006fb0:	f000 fac6 	bl	8007540 <__kernel_cos>
 8006fb4:	e7f1      	b.n	8006f9a <cos+0x6a>
 8006fb6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006fba:	ed9d 0b00 	vldr	d0, [sp]
 8006fbe:	2001      	movs	r0, #1
 8006fc0:	f000 fed6 	bl	8007d70 <__kernel_sin>
 8006fc4:	e7e0      	b.n	8006f88 <cos+0x58>
 8006fc6:	bf00      	nop
	...
 8006fd0:	3fe921fb 	.word	0x3fe921fb
 8006fd4:	7fefffff 	.word	0x7fefffff

08006fd8 <fabs>:
 8006fd8:	ec51 0b10 	vmov	r0, r1, d0
 8006fdc:	ee10 2a10 	vmov	r2, s0
 8006fe0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006fe4:	ec43 2b10 	vmov	d0, r2, r3
 8006fe8:	4770      	bx	lr

08006fea <lround>:
 8006fea:	b570      	push	{r4, r5, r6, lr}
 8006fec:	ec55 4b10 	vmov	r4, r5, d0
 8006ff0:	1e2b      	subs	r3, r5, #0
 8006ff2:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8006ff6:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8006ffa:	bfb4      	ite	lt
 8006ffc:	f04f 30ff 	movlt.w	r0, #4294967295
 8007000:	2001      	movge	r0, #1
 8007002:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007006:	2e13      	cmp	r6, #19
 8007008:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800700c:	dc0f      	bgt.n	800702e <lround+0x44>
 800700e:	2e00      	cmp	r6, #0
 8007010:	da03      	bge.n	800701a <lround+0x30>
 8007012:	3601      	adds	r6, #1
 8007014:	bf18      	it	ne
 8007016:	2000      	movne	r0, #0
 8007018:	bd70      	pop	{r4, r5, r6, pc}
 800701a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800701e:	4132      	asrs	r2, r6
 8007020:	441a      	add	r2, r3
 8007022:	f1c6 0314 	rsb	r3, r6, #20
 8007026:	fa22 f303 	lsr.w	r3, r2, r3
 800702a:	4358      	muls	r0, r3
 800702c:	e7f4      	b.n	8007018 <lround+0x2e>
 800702e:	2e1e      	cmp	r6, #30
 8007030:	d819      	bhi.n	8007066 <lround+0x7c>
 8007032:	2e33      	cmp	r6, #51	; 0x33
 8007034:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 8007038:	dd05      	ble.n	8007046 <lround+0x5c>
 800703a:	f2a2 4233 	subw	r2, r2, #1075	; 0x433
 800703e:	4094      	lsls	r4, r2
 8007040:	408b      	lsls	r3, r1
 8007042:	4323      	orrs	r3, r4
 8007044:	e7f1      	b.n	800702a <lround+0x40>
 8007046:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800704a:	40ca      	lsrs	r2, r1
 800704c:	1912      	adds	r2, r2, r4
 800704e:	bf28      	it	cs
 8007050:	3301      	addcs	r3, #1
 8007052:	f1c6 0434 	rsb	r4, r6, #52	; 0x34
 8007056:	2e14      	cmp	r6, #20
 8007058:	fa03 f301 	lsl.w	r3, r3, r1
 800705c:	bf14      	ite	ne
 800705e:	40e2      	lsrne	r2, r4
 8007060:	2200      	moveq	r2, #0
 8007062:	4313      	orrs	r3, r2
 8007064:	e7e1      	b.n	800702a <lround+0x40>
 8007066:	ee10 0a10 	vmov	r0, s0
 800706a:	4629      	mov	r1, r5
 800706c:	f7f9 fd7c 	bl	8000b68 <__aeabi_d2iz>
 8007070:	e7d2      	b.n	8007018 <lround+0x2e>
 8007072:	0000      	movs	r0, r0
 8007074:	0000      	movs	r0, r0
	...

08007078 <sin>:
 8007078:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800707a:	ec53 2b10 	vmov	r2, r3, d0
 800707e:	4828      	ldr	r0, [pc, #160]	; (8007120 <sin+0xa8>)
 8007080:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007084:	4281      	cmp	r1, r0
 8007086:	dc07      	bgt.n	8007098 <sin+0x20>
 8007088:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8007118 <sin+0xa0>
 800708c:	2000      	movs	r0, #0
 800708e:	b005      	add	sp, #20
 8007090:	f85d eb04 	ldr.w	lr, [sp], #4
 8007094:	f000 be6c 	b.w	8007d70 <__kernel_sin>
 8007098:	4822      	ldr	r0, [pc, #136]	; (8007124 <sin+0xac>)
 800709a:	4281      	cmp	r1, r0
 800709c:	dd09      	ble.n	80070b2 <sin+0x3a>
 800709e:	ee10 0a10 	vmov	r0, s0
 80070a2:	4619      	mov	r1, r3
 80070a4:	f7f9 f8f8 	bl	8000298 <__aeabi_dsub>
 80070a8:	ec41 0b10 	vmov	d0, r0, r1
 80070ac:	b005      	add	sp, #20
 80070ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80070b2:	4668      	mov	r0, sp
 80070b4:	f000 f838 	bl	8007128 <__ieee754_rem_pio2>
 80070b8:	f000 0003 	and.w	r0, r0, #3
 80070bc:	2801      	cmp	r0, #1
 80070be:	d00c      	beq.n	80070da <sin+0x62>
 80070c0:	2802      	cmp	r0, #2
 80070c2:	d011      	beq.n	80070e8 <sin+0x70>
 80070c4:	b9f0      	cbnz	r0, 8007104 <sin+0x8c>
 80070c6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80070ca:	ed9d 0b00 	vldr	d0, [sp]
 80070ce:	2001      	movs	r0, #1
 80070d0:	f000 fe4e 	bl	8007d70 <__kernel_sin>
 80070d4:	ec51 0b10 	vmov	r0, r1, d0
 80070d8:	e7e6      	b.n	80070a8 <sin+0x30>
 80070da:	ed9d 1b02 	vldr	d1, [sp, #8]
 80070de:	ed9d 0b00 	vldr	d0, [sp]
 80070e2:	f000 fa2d 	bl	8007540 <__kernel_cos>
 80070e6:	e7f5      	b.n	80070d4 <sin+0x5c>
 80070e8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80070ec:	ed9d 0b00 	vldr	d0, [sp]
 80070f0:	2001      	movs	r0, #1
 80070f2:	f000 fe3d 	bl	8007d70 <__kernel_sin>
 80070f6:	ec53 2b10 	vmov	r2, r3, d0
 80070fa:	ee10 0a10 	vmov	r0, s0
 80070fe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007102:	e7d1      	b.n	80070a8 <sin+0x30>
 8007104:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007108:	ed9d 0b00 	vldr	d0, [sp]
 800710c:	f000 fa18 	bl	8007540 <__kernel_cos>
 8007110:	e7f1      	b.n	80070f6 <sin+0x7e>
 8007112:	bf00      	nop
 8007114:	f3af 8000 	nop.w
	...
 8007120:	3fe921fb 	.word	0x3fe921fb
 8007124:	7fefffff 	.word	0x7fefffff

08007128 <__ieee754_rem_pio2>:
 8007128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800712c:	ed2d 8b02 	vpush	{d8}
 8007130:	ec55 4b10 	vmov	r4, r5, d0
 8007134:	4bca      	ldr	r3, [pc, #808]	; (8007460 <__ieee754_rem_pio2+0x338>)
 8007136:	b08b      	sub	sp, #44	; 0x2c
 8007138:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800713c:	4598      	cmp	r8, r3
 800713e:	4682      	mov	sl, r0
 8007140:	9502      	str	r5, [sp, #8]
 8007142:	dc08      	bgt.n	8007156 <__ieee754_rem_pio2+0x2e>
 8007144:	2200      	movs	r2, #0
 8007146:	2300      	movs	r3, #0
 8007148:	ed80 0b00 	vstr	d0, [r0]
 800714c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007150:	f04f 0b00 	mov.w	fp, #0
 8007154:	e028      	b.n	80071a8 <__ieee754_rem_pio2+0x80>
 8007156:	4bc3      	ldr	r3, [pc, #780]	; (8007464 <__ieee754_rem_pio2+0x33c>)
 8007158:	4598      	cmp	r8, r3
 800715a:	dc78      	bgt.n	800724e <__ieee754_rem_pio2+0x126>
 800715c:	9b02      	ldr	r3, [sp, #8]
 800715e:	4ec2      	ldr	r6, [pc, #776]	; (8007468 <__ieee754_rem_pio2+0x340>)
 8007160:	2b00      	cmp	r3, #0
 8007162:	ee10 0a10 	vmov	r0, s0
 8007166:	a3b0      	add	r3, pc, #704	; (adr r3, 8007428 <__ieee754_rem_pio2+0x300>)
 8007168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800716c:	4629      	mov	r1, r5
 800716e:	dd39      	ble.n	80071e4 <__ieee754_rem_pio2+0xbc>
 8007170:	f7f9 f892 	bl	8000298 <__aeabi_dsub>
 8007174:	45b0      	cmp	r8, r6
 8007176:	4604      	mov	r4, r0
 8007178:	460d      	mov	r5, r1
 800717a:	d01b      	beq.n	80071b4 <__ieee754_rem_pio2+0x8c>
 800717c:	a3ac      	add	r3, pc, #688	; (adr r3, 8007430 <__ieee754_rem_pio2+0x308>)
 800717e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007182:	f7f9 f889 	bl	8000298 <__aeabi_dsub>
 8007186:	4602      	mov	r2, r0
 8007188:	460b      	mov	r3, r1
 800718a:	e9ca 2300 	strd	r2, r3, [sl]
 800718e:	4620      	mov	r0, r4
 8007190:	4629      	mov	r1, r5
 8007192:	f7f9 f881 	bl	8000298 <__aeabi_dsub>
 8007196:	a3a6      	add	r3, pc, #664	; (adr r3, 8007430 <__ieee754_rem_pio2+0x308>)
 8007198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800719c:	f7f9 f87c 	bl	8000298 <__aeabi_dsub>
 80071a0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80071a4:	f04f 0b01 	mov.w	fp, #1
 80071a8:	4658      	mov	r0, fp
 80071aa:	b00b      	add	sp, #44	; 0x2c
 80071ac:	ecbd 8b02 	vpop	{d8}
 80071b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071b4:	a3a0      	add	r3, pc, #640	; (adr r3, 8007438 <__ieee754_rem_pio2+0x310>)
 80071b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ba:	f7f9 f86d 	bl	8000298 <__aeabi_dsub>
 80071be:	a3a0      	add	r3, pc, #640	; (adr r3, 8007440 <__ieee754_rem_pio2+0x318>)
 80071c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c4:	4604      	mov	r4, r0
 80071c6:	460d      	mov	r5, r1
 80071c8:	f7f9 f866 	bl	8000298 <__aeabi_dsub>
 80071cc:	4602      	mov	r2, r0
 80071ce:	460b      	mov	r3, r1
 80071d0:	e9ca 2300 	strd	r2, r3, [sl]
 80071d4:	4620      	mov	r0, r4
 80071d6:	4629      	mov	r1, r5
 80071d8:	f7f9 f85e 	bl	8000298 <__aeabi_dsub>
 80071dc:	a398      	add	r3, pc, #608	; (adr r3, 8007440 <__ieee754_rem_pio2+0x318>)
 80071de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e2:	e7db      	b.n	800719c <__ieee754_rem_pio2+0x74>
 80071e4:	f7f9 f85a 	bl	800029c <__adddf3>
 80071e8:	45b0      	cmp	r8, r6
 80071ea:	4604      	mov	r4, r0
 80071ec:	460d      	mov	r5, r1
 80071ee:	d016      	beq.n	800721e <__ieee754_rem_pio2+0xf6>
 80071f0:	a38f      	add	r3, pc, #572	; (adr r3, 8007430 <__ieee754_rem_pio2+0x308>)
 80071f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f6:	f7f9 f851 	bl	800029c <__adddf3>
 80071fa:	4602      	mov	r2, r0
 80071fc:	460b      	mov	r3, r1
 80071fe:	e9ca 2300 	strd	r2, r3, [sl]
 8007202:	4620      	mov	r0, r4
 8007204:	4629      	mov	r1, r5
 8007206:	f7f9 f847 	bl	8000298 <__aeabi_dsub>
 800720a:	a389      	add	r3, pc, #548	; (adr r3, 8007430 <__ieee754_rem_pio2+0x308>)
 800720c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007210:	f7f9 f844 	bl	800029c <__adddf3>
 8007214:	f04f 3bff 	mov.w	fp, #4294967295
 8007218:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800721c:	e7c4      	b.n	80071a8 <__ieee754_rem_pio2+0x80>
 800721e:	a386      	add	r3, pc, #536	; (adr r3, 8007438 <__ieee754_rem_pio2+0x310>)
 8007220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007224:	f7f9 f83a 	bl	800029c <__adddf3>
 8007228:	a385      	add	r3, pc, #532	; (adr r3, 8007440 <__ieee754_rem_pio2+0x318>)
 800722a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800722e:	4604      	mov	r4, r0
 8007230:	460d      	mov	r5, r1
 8007232:	f7f9 f833 	bl	800029c <__adddf3>
 8007236:	4602      	mov	r2, r0
 8007238:	460b      	mov	r3, r1
 800723a:	e9ca 2300 	strd	r2, r3, [sl]
 800723e:	4620      	mov	r0, r4
 8007240:	4629      	mov	r1, r5
 8007242:	f7f9 f829 	bl	8000298 <__aeabi_dsub>
 8007246:	a37e      	add	r3, pc, #504	; (adr r3, 8007440 <__ieee754_rem_pio2+0x318>)
 8007248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800724c:	e7e0      	b.n	8007210 <__ieee754_rem_pio2+0xe8>
 800724e:	4b87      	ldr	r3, [pc, #540]	; (800746c <__ieee754_rem_pio2+0x344>)
 8007250:	4598      	cmp	r8, r3
 8007252:	f300 80d9 	bgt.w	8007408 <__ieee754_rem_pio2+0x2e0>
 8007256:	f7ff febf 	bl	8006fd8 <fabs>
 800725a:	ec55 4b10 	vmov	r4, r5, d0
 800725e:	ee10 0a10 	vmov	r0, s0
 8007262:	a379      	add	r3, pc, #484	; (adr r3, 8007448 <__ieee754_rem_pio2+0x320>)
 8007264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007268:	4629      	mov	r1, r5
 800726a:	f7f9 f9cd 	bl	8000608 <__aeabi_dmul>
 800726e:	4b80      	ldr	r3, [pc, #512]	; (8007470 <__ieee754_rem_pio2+0x348>)
 8007270:	2200      	movs	r2, #0
 8007272:	f7f9 f813 	bl	800029c <__adddf3>
 8007276:	f7f9 fc77 	bl	8000b68 <__aeabi_d2iz>
 800727a:	4683      	mov	fp, r0
 800727c:	f7f9 f95a 	bl	8000534 <__aeabi_i2d>
 8007280:	4602      	mov	r2, r0
 8007282:	460b      	mov	r3, r1
 8007284:	ec43 2b18 	vmov	d8, r2, r3
 8007288:	a367      	add	r3, pc, #412	; (adr r3, 8007428 <__ieee754_rem_pio2+0x300>)
 800728a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800728e:	f7f9 f9bb 	bl	8000608 <__aeabi_dmul>
 8007292:	4602      	mov	r2, r0
 8007294:	460b      	mov	r3, r1
 8007296:	4620      	mov	r0, r4
 8007298:	4629      	mov	r1, r5
 800729a:	f7f8 fffd 	bl	8000298 <__aeabi_dsub>
 800729e:	a364      	add	r3, pc, #400	; (adr r3, 8007430 <__ieee754_rem_pio2+0x308>)
 80072a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a4:	4606      	mov	r6, r0
 80072a6:	460f      	mov	r7, r1
 80072a8:	ec51 0b18 	vmov	r0, r1, d8
 80072ac:	f7f9 f9ac 	bl	8000608 <__aeabi_dmul>
 80072b0:	f1bb 0f1f 	cmp.w	fp, #31
 80072b4:	4604      	mov	r4, r0
 80072b6:	460d      	mov	r5, r1
 80072b8:	dc0d      	bgt.n	80072d6 <__ieee754_rem_pio2+0x1ae>
 80072ba:	4b6e      	ldr	r3, [pc, #440]	; (8007474 <__ieee754_rem_pio2+0x34c>)
 80072bc:	f10b 32ff 	add.w	r2, fp, #4294967295
 80072c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072c4:	4543      	cmp	r3, r8
 80072c6:	d006      	beq.n	80072d6 <__ieee754_rem_pio2+0x1ae>
 80072c8:	4622      	mov	r2, r4
 80072ca:	462b      	mov	r3, r5
 80072cc:	4630      	mov	r0, r6
 80072ce:	4639      	mov	r1, r7
 80072d0:	f7f8 ffe2 	bl	8000298 <__aeabi_dsub>
 80072d4:	e00f      	b.n	80072f6 <__ieee754_rem_pio2+0x1ce>
 80072d6:	462b      	mov	r3, r5
 80072d8:	4622      	mov	r2, r4
 80072da:	4630      	mov	r0, r6
 80072dc:	4639      	mov	r1, r7
 80072de:	f7f8 ffdb 	bl	8000298 <__aeabi_dsub>
 80072e2:	ea4f 5328 	mov.w	r3, r8, asr #20
 80072e6:	9303      	str	r3, [sp, #12]
 80072e8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80072ec:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80072f0:	f1b8 0f10 	cmp.w	r8, #16
 80072f4:	dc02      	bgt.n	80072fc <__ieee754_rem_pio2+0x1d4>
 80072f6:	e9ca 0100 	strd	r0, r1, [sl]
 80072fa:	e039      	b.n	8007370 <__ieee754_rem_pio2+0x248>
 80072fc:	a34e      	add	r3, pc, #312	; (adr r3, 8007438 <__ieee754_rem_pio2+0x310>)
 80072fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007302:	ec51 0b18 	vmov	r0, r1, d8
 8007306:	f7f9 f97f 	bl	8000608 <__aeabi_dmul>
 800730a:	4604      	mov	r4, r0
 800730c:	460d      	mov	r5, r1
 800730e:	4602      	mov	r2, r0
 8007310:	460b      	mov	r3, r1
 8007312:	4630      	mov	r0, r6
 8007314:	4639      	mov	r1, r7
 8007316:	f7f8 ffbf 	bl	8000298 <__aeabi_dsub>
 800731a:	4602      	mov	r2, r0
 800731c:	460b      	mov	r3, r1
 800731e:	4680      	mov	r8, r0
 8007320:	4689      	mov	r9, r1
 8007322:	4630      	mov	r0, r6
 8007324:	4639      	mov	r1, r7
 8007326:	f7f8 ffb7 	bl	8000298 <__aeabi_dsub>
 800732a:	4622      	mov	r2, r4
 800732c:	462b      	mov	r3, r5
 800732e:	f7f8 ffb3 	bl	8000298 <__aeabi_dsub>
 8007332:	a343      	add	r3, pc, #268	; (adr r3, 8007440 <__ieee754_rem_pio2+0x318>)
 8007334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007338:	4604      	mov	r4, r0
 800733a:	460d      	mov	r5, r1
 800733c:	ec51 0b18 	vmov	r0, r1, d8
 8007340:	f7f9 f962 	bl	8000608 <__aeabi_dmul>
 8007344:	4622      	mov	r2, r4
 8007346:	462b      	mov	r3, r5
 8007348:	f7f8 ffa6 	bl	8000298 <__aeabi_dsub>
 800734c:	4602      	mov	r2, r0
 800734e:	460b      	mov	r3, r1
 8007350:	4604      	mov	r4, r0
 8007352:	460d      	mov	r5, r1
 8007354:	4640      	mov	r0, r8
 8007356:	4649      	mov	r1, r9
 8007358:	f7f8 ff9e 	bl	8000298 <__aeabi_dsub>
 800735c:	9a03      	ldr	r2, [sp, #12]
 800735e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007362:	1ad3      	subs	r3, r2, r3
 8007364:	2b31      	cmp	r3, #49	; 0x31
 8007366:	dc24      	bgt.n	80073b2 <__ieee754_rem_pio2+0x28a>
 8007368:	e9ca 0100 	strd	r0, r1, [sl]
 800736c:	4646      	mov	r6, r8
 800736e:	464f      	mov	r7, r9
 8007370:	e9da 8900 	ldrd	r8, r9, [sl]
 8007374:	4630      	mov	r0, r6
 8007376:	4642      	mov	r2, r8
 8007378:	464b      	mov	r3, r9
 800737a:	4639      	mov	r1, r7
 800737c:	f7f8 ff8c 	bl	8000298 <__aeabi_dsub>
 8007380:	462b      	mov	r3, r5
 8007382:	4622      	mov	r2, r4
 8007384:	f7f8 ff88 	bl	8000298 <__aeabi_dsub>
 8007388:	9b02      	ldr	r3, [sp, #8]
 800738a:	2b00      	cmp	r3, #0
 800738c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007390:	f6bf af0a 	bge.w	80071a8 <__ieee754_rem_pio2+0x80>
 8007394:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007398:	f8ca 3004 	str.w	r3, [sl, #4]
 800739c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80073a0:	f8ca 8000 	str.w	r8, [sl]
 80073a4:	f8ca 0008 	str.w	r0, [sl, #8]
 80073a8:	f8ca 300c 	str.w	r3, [sl, #12]
 80073ac:	f1cb 0b00 	rsb	fp, fp, #0
 80073b0:	e6fa      	b.n	80071a8 <__ieee754_rem_pio2+0x80>
 80073b2:	a327      	add	r3, pc, #156	; (adr r3, 8007450 <__ieee754_rem_pio2+0x328>)
 80073b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b8:	ec51 0b18 	vmov	r0, r1, d8
 80073bc:	f7f9 f924 	bl	8000608 <__aeabi_dmul>
 80073c0:	4604      	mov	r4, r0
 80073c2:	460d      	mov	r5, r1
 80073c4:	4602      	mov	r2, r0
 80073c6:	460b      	mov	r3, r1
 80073c8:	4640      	mov	r0, r8
 80073ca:	4649      	mov	r1, r9
 80073cc:	f7f8 ff64 	bl	8000298 <__aeabi_dsub>
 80073d0:	4602      	mov	r2, r0
 80073d2:	460b      	mov	r3, r1
 80073d4:	4606      	mov	r6, r0
 80073d6:	460f      	mov	r7, r1
 80073d8:	4640      	mov	r0, r8
 80073da:	4649      	mov	r1, r9
 80073dc:	f7f8 ff5c 	bl	8000298 <__aeabi_dsub>
 80073e0:	4622      	mov	r2, r4
 80073e2:	462b      	mov	r3, r5
 80073e4:	f7f8 ff58 	bl	8000298 <__aeabi_dsub>
 80073e8:	a31b      	add	r3, pc, #108	; (adr r3, 8007458 <__ieee754_rem_pio2+0x330>)
 80073ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ee:	4604      	mov	r4, r0
 80073f0:	460d      	mov	r5, r1
 80073f2:	ec51 0b18 	vmov	r0, r1, d8
 80073f6:	f7f9 f907 	bl	8000608 <__aeabi_dmul>
 80073fa:	4622      	mov	r2, r4
 80073fc:	462b      	mov	r3, r5
 80073fe:	f7f8 ff4b 	bl	8000298 <__aeabi_dsub>
 8007402:	4604      	mov	r4, r0
 8007404:	460d      	mov	r5, r1
 8007406:	e75f      	b.n	80072c8 <__ieee754_rem_pio2+0x1a0>
 8007408:	4b1b      	ldr	r3, [pc, #108]	; (8007478 <__ieee754_rem_pio2+0x350>)
 800740a:	4598      	cmp	r8, r3
 800740c:	dd36      	ble.n	800747c <__ieee754_rem_pio2+0x354>
 800740e:	ee10 2a10 	vmov	r2, s0
 8007412:	462b      	mov	r3, r5
 8007414:	4620      	mov	r0, r4
 8007416:	4629      	mov	r1, r5
 8007418:	f7f8 ff3e 	bl	8000298 <__aeabi_dsub>
 800741c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007420:	e9ca 0100 	strd	r0, r1, [sl]
 8007424:	e694      	b.n	8007150 <__ieee754_rem_pio2+0x28>
 8007426:	bf00      	nop
 8007428:	54400000 	.word	0x54400000
 800742c:	3ff921fb 	.word	0x3ff921fb
 8007430:	1a626331 	.word	0x1a626331
 8007434:	3dd0b461 	.word	0x3dd0b461
 8007438:	1a600000 	.word	0x1a600000
 800743c:	3dd0b461 	.word	0x3dd0b461
 8007440:	2e037073 	.word	0x2e037073
 8007444:	3ba3198a 	.word	0x3ba3198a
 8007448:	6dc9c883 	.word	0x6dc9c883
 800744c:	3fe45f30 	.word	0x3fe45f30
 8007450:	2e000000 	.word	0x2e000000
 8007454:	3ba3198a 	.word	0x3ba3198a
 8007458:	252049c1 	.word	0x252049c1
 800745c:	397b839a 	.word	0x397b839a
 8007460:	3fe921fb 	.word	0x3fe921fb
 8007464:	4002d97b 	.word	0x4002d97b
 8007468:	3ff921fb 	.word	0x3ff921fb
 800746c:	413921fb 	.word	0x413921fb
 8007470:	3fe00000 	.word	0x3fe00000
 8007474:	0800b2c8 	.word	0x0800b2c8
 8007478:	7fefffff 	.word	0x7fefffff
 800747c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8007480:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8007484:	ee10 0a10 	vmov	r0, s0
 8007488:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800748c:	ee10 6a10 	vmov	r6, s0
 8007490:	460f      	mov	r7, r1
 8007492:	f7f9 fb69 	bl	8000b68 <__aeabi_d2iz>
 8007496:	f7f9 f84d 	bl	8000534 <__aeabi_i2d>
 800749a:	4602      	mov	r2, r0
 800749c:	460b      	mov	r3, r1
 800749e:	4630      	mov	r0, r6
 80074a0:	4639      	mov	r1, r7
 80074a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80074a6:	f7f8 fef7 	bl	8000298 <__aeabi_dsub>
 80074aa:	4b23      	ldr	r3, [pc, #140]	; (8007538 <__ieee754_rem_pio2+0x410>)
 80074ac:	2200      	movs	r2, #0
 80074ae:	f7f9 f8ab 	bl	8000608 <__aeabi_dmul>
 80074b2:	460f      	mov	r7, r1
 80074b4:	4606      	mov	r6, r0
 80074b6:	f7f9 fb57 	bl	8000b68 <__aeabi_d2iz>
 80074ba:	f7f9 f83b 	bl	8000534 <__aeabi_i2d>
 80074be:	4602      	mov	r2, r0
 80074c0:	460b      	mov	r3, r1
 80074c2:	4630      	mov	r0, r6
 80074c4:	4639      	mov	r1, r7
 80074c6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80074ca:	f7f8 fee5 	bl	8000298 <__aeabi_dsub>
 80074ce:	4b1a      	ldr	r3, [pc, #104]	; (8007538 <__ieee754_rem_pio2+0x410>)
 80074d0:	2200      	movs	r2, #0
 80074d2:	f7f9 f899 	bl	8000608 <__aeabi_dmul>
 80074d6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80074da:	ad04      	add	r5, sp, #16
 80074dc:	f04f 0803 	mov.w	r8, #3
 80074e0:	46a9      	mov	r9, r5
 80074e2:	2600      	movs	r6, #0
 80074e4:	2700      	movs	r7, #0
 80074e6:	4632      	mov	r2, r6
 80074e8:	463b      	mov	r3, r7
 80074ea:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80074ee:	46c3      	mov	fp, r8
 80074f0:	3d08      	subs	r5, #8
 80074f2:	f108 38ff 	add.w	r8, r8, #4294967295
 80074f6:	f7f9 faef 	bl	8000ad8 <__aeabi_dcmpeq>
 80074fa:	2800      	cmp	r0, #0
 80074fc:	d1f3      	bne.n	80074e6 <__ieee754_rem_pio2+0x3be>
 80074fe:	4b0f      	ldr	r3, [pc, #60]	; (800753c <__ieee754_rem_pio2+0x414>)
 8007500:	9301      	str	r3, [sp, #4]
 8007502:	2302      	movs	r3, #2
 8007504:	9300      	str	r3, [sp, #0]
 8007506:	4622      	mov	r2, r4
 8007508:	465b      	mov	r3, fp
 800750a:	4651      	mov	r1, sl
 800750c:	4648      	mov	r0, r9
 800750e:	f000 f8df 	bl	80076d0 <__kernel_rem_pio2>
 8007512:	9b02      	ldr	r3, [sp, #8]
 8007514:	2b00      	cmp	r3, #0
 8007516:	4683      	mov	fp, r0
 8007518:	f6bf ae46 	bge.w	80071a8 <__ieee754_rem_pio2+0x80>
 800751c:	e9da 2100 	ldrd	r2, r1, [sl]
 8007520:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007524:	e9ca 2300 	strd	r2, r3, [sl]
 8007528:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800752c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007530:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8007534:	e73a      	b.n	80073ac <__ieee754_rem_pio2+0x284>
 8007536:	bf00      	nop
 8007538:	41700000 	.word	0x41700000
 800753c:	0800b348 	.word	0x0800b348

08007540 <__kernel_cos>:
 8007540:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007544:	ec57 6b10 	vmov	r6, r7, d0
 8007548:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800754c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8007550:	ed8d 1b00 	vstr	d1, [sp]
 8007554:	da07      	bge.n	8007566 <__kernel_cos+0x26>
 8007556:	ee10 0a10 	vmov	r0, s0
 800755a:	4639      	mov	r1, r7
 800755c:	f7f9 fb04 	bl	8000b68 <__aeabi_d2iz>
 8007560:	2800      	cmp	r0, #0
 8007562:	f000 8088 	beq.w	8007676 <__kernel_cos+0x136>
 8007566:	4632      	mov	r2, r6
 8007568:	463b      	mov	r3, r7
 800756a:	4630      	mov	r0, r6
 800756c:	4639      	mov	r1, r7
 800756e:	f7f9 f84b 	bl	8000608 <__aeabi_dmul>
 8007572:	4b51      	ldr	r3, [pc, #324]	; (80076b8 <__kernel_cos+0x178>)
 8007574:	2200      	movs	r2, #0
 8007576:	4604      	mov	r4, r0
 8007578:	460d      	mov	r5, r1
 800757a:	f7f9 f845 	bl	8000608 <__aeabi_dmul>
 800757e:	a340      	add	r3, pc, #256	; (adr r3, 8007680 <__kernel_cos+0x140>)
 8007580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007584:	4682      	mov	sl, r0
 8007586:	468b      	mov	fp, r1
 8007588:	4620      	mov	r0, r4
 800758a:	4629      	mov	r1, r5
 800758c:	f7f9 f83c 	bl	8000608 <__aeabi_dmul>
 8007590:	a33d      	add	r3, pc, #244	; (adr r3, 8007688 <__kernel_cos+0x148>)
 8007592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007596:	f7f8 fe81 	bl	800029c <__adddf3>
 800759a:	4622      	mov	r2, r4
 800759c:	462b      	mov	r3, r5
 800759e:	f7f9 f833 	bl	8000608 <__aeabi_dmul>
 80075a2:	a33b      	add	r3, pc, #236	; (adr r3, 8007690 <__kernel_cos+0x150>)
 80075a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a8:	f7f8 fe76 	bl	8000298 <__aeabi_dsub>
 80075ac:	4622      	mov	r2, r4
 80075ae:	462b      	mov	r3, r5
 80075b0:	f7f9 f82a 	bl	8000608 <__aeabi_dmul>
 80075b4:	a338      	add	r3, pc, #224	; (adr r3, 8007698 <__kernel_cos+0x158>)
 80075b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ba:	f7f8 fe6f 	bl	800029c <__adddf3>
 80075be:	4622      	mov	r2, r4
 80075c0:	462b      	mov	r3, r5
 80075c2:	f7f9 f821 	bl	8000608 <__aeabi_dmul>
 80075c6:	a336      	add	r3, pc, #216	; (adr r3, 80076a0 <__kernel_cos+0x160>)
 80075c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075cc:	f7f8 fe64 	bl	8000298 <__aeabi_dsub>
 80075d0:	4622      	mov	r2, r4
 80075d2:	462b      	mov	r3, r5
 80075d4:	f7f9 f818 	bl	8000608 <__aeabi_dmul>
 80075d8:	a333      	add	r3, pc, #204	; (adr r3, 80076a8 <__kernel_cos+0x168>)
 80075da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075de:	f7f8 fe5d 	bl	800029c <__adddf3>
 80075e2:	4622      	mov	r2, r4
 80075e4:	462b      	mov	r3, r5
 80075e6:	f7f9 f80f 	bl	8000608 <__aeabi_dmul>
 80075ea:	4622      	mov	r2, r4
 80075ec:	462b      	mov	r3, r5
 80075ee:	f7f9 f80b 	bl	8000608 <__aeabi_dmul>
 80075f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80075f6:	4604      	mov	r4, r0
 80075f8:	460d      	mov	r5, r1
 80075fa:	4630      	mov	r0, r6
 80075fc:	4639      	mov	r1, r7
 80075fe:	f7f9 f803 	bl	8000608 <__aeabi_dmul>
 8007602:	460b      	mov	r3, r1
 8007604:	4602      	mov	r2, r0
 8007606:	4629      	mov	r1, r5
 8007608:	4620      	mov	r0, r4
 800760a:	f7f8 fe45 	bl	8000298 <__aeabi_dsub>
 800760e:	4b2b      	ldr	r3, [pc, #172]	; (80076bc <__kernel_cos+0x17c>)
 8007610:	4598      	cmp	r8, r3
 8007612:	4606      	mov	r6, r0
 8007614:	460f      	mov	r7, r1
 8007616:	dc10      	bgt.n	800763a <__kernel_cos+0xfa>
 8007618:	4602      	mov	r2, r0
 800761a:	460b      	mov	r3, r1
 800761c:	4650      	mov	r0, sl
 800761e:	4659      	mov	r1, fp
 8007620:	f7f8 fe3a 	bl	8000298 <__aeabi_dsub>
 8007624:	460b      	mov	r3, r1
 8007626:	4926      	ldr	r1, [pc, #152]	; (80076c0 <__kernel_cos+0x180>)
 8007628:	4602      	mov	r2, r0
 800762a:	2000      	movs	r0, #0
 800762c:	f7f8 fe34 	bl	8000298 <__aeabi_dsub>
 8007630:	ec41 0b10 	vmov	d0, r0, r1
 8007634:	b003      	add	sp, #12
 8007636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800763a:	4b22      	ldr	r3, [pc, #136]	; (80076c4 <__kernel_cos+0x184>)
 800763c:	4920      	ldr	r1, [pc, #128]	; (80076c0 <__kernel_cos+0x180>)
 800763e:	4598      	cmp	r8, r3
 8007640:	bfcc      	ite	gt
 8007642:	4d21      	ldrgt	r5, [pc, #132]	; (80076c8 <__kernel_cos+0x188>)
 8007644:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8007648:	2400      	movs	r4, #0
 800764a:	4622      	mov	r2, r4
 800764c:	462b      	mov	r3, r5
 800764e:	2000      	movs	r0, #0
 8007650:	f7f8 fe22 	bl	8000298 <__aeabi_dsub>
 8007654:	4622      	mov	r2, r4
 8007656:	4680      	mov	r8, r0
 8007658:	4689      	mov	r9, r1
 800765a:	462b      	mov	r3, r5
 800765c:	4650      	mov	r0, sl
 800765e:	4659      	mov	r1, fp
 8007660:	f7f8 fe1a 	bl	8000298 <__aeabi_dsub>
 8007664:	4632      	mov	r2, r6
 8007666:	463b      	mov	r3, r7
 8007668:	f7f8 fe16 	bl	8000298 <__aeabi_dsub>
 800766c:	4602      	mov	r2, r0
 800766e:	460b      	mov	r3, r1
 8007670:	4640      	mov	r0, r8
 8007672:	4649      	mov	r1, r9
 8007674:	e7da      	b.n	800762c <__kernel_cos+0xec>
 8007676:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80076b0 <__kernel_cos+0x170>
 800767a:	e7db      	b.n	8007634 <__kernel_cos+0xf4>
 800767c:	f3af 8000 	nop.w
 8007680:	be8838d4 	.word	0xbe8838d4
 8007684:	bda8fae9 	.word	0xbda8fae9
 8007688:	bdb4b1c4 	.word	0xbdb4b1c4
 800768c:	3e21ee9e 	.word	0x3e21ee9e
 8007690:	809c52ad 	.word	0x809c52ad
 8007694:	3e927e4f 	.word	0x3e927e4f
 8007698:	19cb1590 	.word	0x19cb1590
 800769c:	3efa01a0 	.word	0x3efa01a0
 80076a0:	16c15177 	.word	0x16c15177
 80076a4:	3f56c16c 	.word	0x3f56c16c
 80076a8:	5555554c 	.word	0x5555554c
 80076ac:	3fa55555 	.word	0x3fa55555
 80076b0:	00000000 	.word	0x00000000
 80076b4:	3ff00000 	.word	0x3ff00000
 80076b8:	3fe00000 	.word	0x3fe00000
 80076bc:	3fd33332 	.word	0x3fd33332
 80076c0:	3ff00000 	.word	0x3ff00000
 80076c4:	3fe90000 	.word	0x3fe90000
 80076c8:	3fd20000 	.word	0x3fd20000
 80076cc:	00000000 	.word	0x00000000

080076d0 <__kernel_rem_pio2>:
 80076d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076d4:	ed2d 8b02 	vpush	{d8}
 80076d8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80076dc:	f112 0f14 	cmn.w	r2, #20
 80076e0:	9308      	str	r3, [sp, #32]
 80076e2:	9101      	str	r1, [sp, #4]
 80076e4:	4bc4      	ldr	r3, [pc, #784]	; (80079f8 <__kernel_rem_pio2+0x328>)
 80076e6:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80076e8:	900b      	str	r0, [sp, #44]	; 0x2c
 80076ea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80076ee:	9302      	str	r3, [sp, #8]
 80076f0:	9b08      	ldr	r3, [sp, #32]
 80076f2:	f103 33ff 	add.w	r3, r3, #4294967295
 80076f6:	bfa8      	it	ge
 80076f8:	1ed4      	subge	r4, r2, #3
 80076fa:	9306      	str	r3, [sp, #24]
 80076fc:	bfb2      	itee	lt
 80076fe:	2400      	movlt	r4, #0
 8007700:	2318      	movge	r3, #24
 8007702:	fb94 f4f3 	sdivge	r4, r4, r3
 8007706:	f06f 0317 	mvn.w	r3, #23
 800770a:	fb04 3303 	mla	r3, r4, r3, r3
 800770e:	eb03 0a02 	add.w	sl, r3, r2
 8007712:	9b02      	ldr	r3, [sp, #8]
 8007714:	9a06      	ldr	r2, [sp, #24]
 8007716:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 80079e8 <__kernel_rem_pio2+0x318>
 800771a:	eb03 0802 	add.w	r8, r3, r2
 800771e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8007720:	1aa7      	subs	r7, r4, r2
 8007722:	ae22      	add	r6, sp, #136	; 0x88
 8007724:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007728:	2500      	movs	r5, #0
 800772a:	4545      	cmp	r5, r8
 800772c:	dd13      	ble.n	8007756 <__kernel_rem_pio2+0x86>
 800772e:	9b08      	ldr	r3, [sp, #32]
 8007730:	ed9f 8bad 	vldr	d8, [pc, #692]	; 80079e8 <__kernel_rem_pio2+0x318>
 8007734:	aa22      	add	r2, sp, #136	; 0x88
 8007736:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800773a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800773e:	f04f 0800 	mov.w	r8, #0
 8007742:	9b02      	ldr	r3, [sp, #8]
 8007744:	4598      	cmp	r8, r3
 8007746:	dc2f      	bgt.n	80077a8 <__kernel_rem_pio2+0xd8>
 8007748:	ed8d 8b04 	vstr	d8, [sp, #16]
 800774c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8007750:	462f      	mov	r7, r5
 8007752:	2600      	movs	r6, #0
 8007754:	e01b      	b.n	800778e <__kernel_rem_pio2+0xbe>
 8007756:	42ef      	cmn	r7, r5
 8007758:	d407      	bmi.n	800776a <__kernel_rem_pio2+0x9a>
 800775a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800775e:	f7f8 fee9 	bl	8000534 <__aeabi_i2d>
 8007762:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007766:	3501      	adds	r5, #1
 8007768:	e7df      	b.n	800772a <__kernel_rem_pio2+0x5a>
 800776a:	ec51 0b18 	vmov	r0, r1, d8
 800776e:	e7f8      	b.n	8007762 <__kernel_rem_pio2+0x92>
 8007770:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007774:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007778:	f7f8 ff46 	bl	8000608 <__aeabi_dmul>
 800777c:	4602      	mov	r2, r0
 800777e:	460b      	mov	r3, r1
 8007780:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007784:	f7f8 fd8a 	bl	800029c <__adddf3>
 8007788:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800778c:	3601      	adds	r6, #1
 800778e:	9b06      	ldr	r3, [sp, #24]
 8007790:	429e      	cmp	r6, r3
 8007792:	f1a7 0708 	sub.w	r7, r7, #8
 8007796:	ddeb      	ble.n	8007770 <__kernel_rem_pio2+0xa0>
 8007798:	ed9d 7b04 	vldr	d7, [sp, #16]
 800779c:	f108 0801 	add.w	r8, r8, #1
 80077a0:	ecab 7b02 	vstmia	fp!, {d7}
 80077a4:	3508      	adds	r5, #8
 80077a6:	e7cc      	b.n	8007742 <__kernel_rem_pio2+0x72>
 80077a8:	9b02      	ldr	r3, [sp, #8]
 80077aa:	aa0e      	add	r2, sp, #56	; 0x38
 80077ac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80077b0:	930d      	str	r3, [sp, #52]	; 0x34
 80077b2:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80077b4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80077b8:	9c02      	ldr	r4, [sp, #8]
 80077ba:	930c      	str	r3, [sp, #48]	; 0x30
 80077bc:	00e3      	lsls	r3, r4, #3
 80077be:	930a      	str	r3, [sp, #40]	; 0x28
 80077c0:	ab9a      	add	r3, sp, #616	; 0x268
 80077c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80077c6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80077ca:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80077ce:	ab72      	add	r3, sp, #456	; 0x1c8
 80077d0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80077d4:	46c3      	mov	fp, r8
 80077d6:	46a1      	mov	r9, r4
 80077d8:	f1b9 0f00 	cmp.w	r9, #0
 80077dc:	f1a5 0508 	sub.w	r5, r5, #8
 80077e0:	dc77      	bgt.n	80078d2 <__kernel_rem_pio2+0x202>
 80077e2:	ec47 6b10 	vmov	d0, r6, r7
 80077e6:	4650      	mov	r0, sl
 80077e8:	f000 fc02 	bl	8007ff0 <scalbn>
 80077ec:	ec57 6b10 	vmov	r6, r7, d0
 80077f0:	2200      	movs	r2, #0
 80077f2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80077f6:	ee10 0a10 	vmov	r0, s0
 80077fa:	4639      	mov	r1, r7
 80077fc:	f7f8 ff04 	bl	8000608 <__aeabi_dmul>
 8007800:	ec41 0b10 	vmov	d0, r0, r1
 8007804:	f000 fb74 	bl	8007ef0 <floor>
 8007808:	4b7c      	ldr	r3, [pc, #496]	; (80079fc <__kernel_rem_pio2+0x32c>)
 800780a:	ec51 0b10 	vmov	r0, r1, d0
 800780e:	2200      	movs	r2, #0
 8007810:	f7f8 fefa 	bl	8000608 <__aeabi_dmul>
 8007814:	4602      	mov	r2, r0
 8007816:	460b      	mov	r3, r1
 8007818:	4630      	mov	r0, r6
 800781a:	4639      	mov	r1, r7
 800781c:	f7f8 fd3c 	bl	8000298 <__aeabi_dsub>
 8007820:	460f      	mov	r7, r1
 8007822:	4606      	mov	r6, r0
 8007824:	f7f9 f9a0 	bl	8000b68 <__aeabi_d2iz>
 8007828:	9004      	str	r0, [sp, #16]
 800782a:	f7f8 fe83 	bl	8000534 <__aeabi_i2d>
 800782e:	4602      	mov	r2, r0
 8007830:	460b      	mov	r3, r1
 8007832:	4630      	mov	r0, r6
 8007834:	4639      	mov	r1, r7
 8007836:	f7f8 fd2f 	bl	8000298 <__aeabi_dsub>
 800783a:	f1ba 0f00 	cmp.w	sl, #0
 800783e:	4606      	mov	r6, r0
 8007840:	460f      	mov	r7, r1
 8007842:	dd6d      	ble.n	8007920 <__kernel_rem_pio2+0x250>
 8007844:	1e62      	subs	r2, r4, #1
 8007846:	ab0e      	add	r3, sp, #56	; 0x38
 8007848:	9d04      	ldr	r5, [sp, #16]
 800784a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800784e:	f1ca 0118 	rsb	r1, sl, #24
 8007852:	fa40 f301 	asr.w	r3, r0, r1
 8007856:	441d      	add	r5, r3
 8007858:	408b      	lsls	r3, r1
 800785a:	1ac0      	subs	r0, r0, r3
 800785c:	ab0e      	add	r3, sp, #56	; 0x38
 800785e:	9504      	str	r5, [sp, #16]
 8007860:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8007864:	f1ca 0317 	rsb	r3, sl, #23
 8007868:	fa40 fb03 	asr.w	fp, r0, r3
 800786c:	f1bb 0f00 	cmp.w	fp, #0
 8007870:	dd65      	ble.n	800793e <__kernel_rem_pio2+0x26e>
 8007872:	9b04      	ldr	r3, [sp, #16]
 8007874:	2200      	movs	r2, #0
 8007876:	3301      	adds	r3, #1
 8007878:	9304      	str	r3, [sp, #16]
 800787a:	4615      	mov	r5, r2
 800787c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007880:	4294      	cmp	r4, r2
 8007882:	f300 809c 	bgt.w	80079be <__kernel_rem_pio2+0x2ee>
 8007886:	f1ba 0f00 	cmp.w	sl, #0
 800788a:	dd07      	ble.n	800789c <__kernel_rem_pio2+0x1cc>
 800788c:	f1ba 0f01 	cmp.w	sl, #1
 8007890:	f000 80c0 	beq.w	8007a14 <__kernel_rem_pio2+0x344>
 8007894:	f1ba 0f02 	cmp.w	sl, #2
 8007898:	f000 80c6 	beq.w	8007a28 <__kernel_rem_pio2+0x358>
 800789c:	f1bb 0f02 	cmp.w	fp, #2
 80078a0:	d14d      	bne.n	800793e <__kernel_rem_pio2+0x26e>
 80078a2:	4632      	mov	r2, r6
 80078a4:	463b      	mov	r3, r7
 80078a6:	4956      	ldr	r1, [pc, #344]	; (8007a00 <__kernel_rem_pio2+0x330>)
 80078a8:	2000      	movs	r0, #0
 80078aa:	f7f8 fcf5 	bl	8000298 <__aeabi_dsub>
 80078ae:	4606      	mov	r6, r0
 80078b0:	460f      	mov	r7, r1
 80078b2:	2d00      	cmp	r5, #0
 80078b4:	d043      	beq.n	800793e <__kernel_rem_pio2+0x26e>
 80078b6:	4650      	mov	r0, sl
 80078b8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 80079f0 <__kernel_rem_pio2+0x320>
 80078bc:	f000 fb98 	bl	8007ff0 <scalbn>
 80078c0:	4630      	mov	r0, r6
 80078c2:	4639      	mov	r1, r7
 80078c4:	ec53 2b10 	vmov	r2, r3, d0
 80078c8:	f7f8 fce6 	bl	8000298 <__aeabi_dsub>
 80078cc:	4606      	mov	r6, r0
 80078ce:	460f      	mov	r7, r1
 80078d0:	e035      	b.n	800793e <__kernel_rem_pio2+0x26e>
 80078d2:	4b4c      	ldr	r3, [pc, #304]	; (8007a04 <__kernel_rem_pio2+0x334>)
 80078d4:	2200      	movs	r2, #0
 80078d6:	4630      	mov	r0, r6
 80078d8:	4639      	mov	r1, r7
 80078da:	f7f8 fe95 	bl	8000608 <__aeabi_dmul>
 80078de:	f7f9 f943 	bl	8000b68 <__aeabi_d2iz>
 80078e2:	f7f8 fe27 	bl	8000534 <__aeabi_i2d>
 80078e6:	4602      	mov	r2, r0
 80078e8:	460b      	mov	r3, r1
 80078ea:	ec43 2b18 	vmov	d8, r2, r3
 80078ee:	4b46      	ldr	r3, [pc, #280]	; (8007a08 <__kernel_rem_pio2+0x338>)
 80078f0:	2200      	movs	r2, #0
 80078f2:	f7f8 fe89 	bl	8000608 <__aeabi_dmul>
 80078f6:	4602      	mov	r2, r0
 80078f8:	460b      	mov	r3, r1
 80078fa:	4630      	mov	r0, r6
 80078fc:	4639      	mov	r1, r7
 80078fe:	f7f8 fccb 	bl	8000298 <__aeabi_dsub>
 8007902:	f7f9 f931 	bl	8000b68 <__aeabi_d2iz>
 8007906:	e9d5 2300 	ldrd	r2, r3, [r5]
 800790a:	f84b 0b04 	str.w	r0, [fp], #4
 800790e:	ec51 0b18 	vmov	r0, r1, d8
 8007912:	f7f8 fcc3 	bl	800029c <__adddf3>
 8007916:	f109 39ff 	add.w	r9, r9, #4294967295
 800791a:	4606      	mov	r6, r0
 800791c:	460f      	mov	r7, r1
 800791e:	e75b      	b.n	80077d8 <__kernel_rem_pio2+0x108>
 8007920:	d106      	bne.n	8007930 <__kernel_rem_pio2+0x260>
 8007922:	1e63      	subs	r3, r4, #1
 8007924:	aa0e      	add	r2, sp, #56	; 0x38
 8007926:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800792a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800792e:	e79d      	b.n	800786c <__kernel_rem_pio2+0x19c>
 8007930:	4b36      	ldr	r3, [pc, #216]	; (8007a0c <__kernel_rem_pio2+0x33c>)
 8007932:	2200      	movs	r2, #0
 8007934:	f7f9 f8ee 	bl	8000b14 <__aeabi_dcmpge>
 8007938:	2800      	cmp	r0, #0
 800793a:	d13d      	bne.n	80079b8 <__kernel_rem_pio2+0x2e8>
 800793c:	4683      	mov	fp, r0
 800793e:	2200      	movs	r2, #0
 8007940:	2300      	movs	r3, #0
 8007942:	4630      	mov	r0, r6
 8007944:	4639      	mov	r1, r7
 8007946:	f7f9 f8c7 	bl	8000ad8 <__aeabi_dcmpeq>
 800794a:	2800      	cmp	r0, #0
 800794c:	f000 80c0 	beq.w	8007ad0 <__kernel_rem_pio2+0x400>
 8007950:	1e65      	subs	r5, r4, #1
 8007952:	462b      	mov	r3, r5
 8007954:	2200      	movs	r2, #0
 8007956:	9902      	ldr	r1, [sp, #8]
 8007958:	428b      	cmp	r3, r1
 800795a:	da6c      	bge.n	8007a36 <__kernel_rem_pio2+0x366>
 800795c:	2a00      	cmp	r2, #0
 800795e:	f000 8089 	beq.w	8007a74 <__kernel_rem_pio2+0x3a4>
 8007962:	ab0e      	add	r3, sp, #56	; 0x38
 8007964:	f1aa 0a18 	sub.w	sl, sl, #24
 8007968:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800796c:	2b00      	cmp	r3, #0
 800796e:	f000 80ad 	beq.w	8007acc <__kernel_rem_pio2+0x3fc>
 8007972:	4650      	mov	r0, sl
 8007974:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 80079f0 <__kernel_rem_pio2+0x320>
 8007978:	f000 fb3a 	bl	8007ff0 <scalbn>
 800797c:	ab9a      	add	r3, sp, #616	; 0x268
 800797e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007982:	ec57 6b10 	vmov	r6, r7, d0
 8007986:	00ec      	lsls	r4, r5, #3
 8007988:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800798c:	46aa      	mov	sl, r5
 800798e:	f1ba 0f00 	cmp.w	sl, #0
 8007992:	f280 80d6 	bge.w	8007b42 <__kernel_rem_pio2+0x472>
 8007996:	ed9f 8b14 	vldr	d8, [pc, #80]	; 80079e8 <__kernel_rem_pio2+0x318>
 800799a:	462e      	mov	r6, r5
 800799c:	2e00      	cmp	r6, #0
 800799e:	f2c0 8104 	blt.w	8007baa <__kernel_rem_pio2+0x4da>
 80079a2:	ab72      	add	r3, sp, #456	; 0x1c8
 80079a4:	ed8d 8b06 	vstr	d8, [sp, #24]
 80079a8:	f8df a064 	ldr.w	sl, [pc, #100]	; 8007a10 <__kernel_rem_pio2+0x340>
 80079ac:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80079b0:	f04f 0800 	mov.w	r8, #0
 80079b4:	1baf      	subs	r7, r5, r6
 80079b6:	e0ea      	b.n	8007b8e <__kernel_rem_pio2+0x4be>
 80079b8:	f04f 0b02 	mov.w	fp, #2
 80079bc:	e759      	b.n	8007872 <__kernel_rem_pio2+0x1a2>
 80079be:	f8d8 3000 	ldr.w	r3, [r8]
 80079c2:	b955      	cbnz	r5, 80079da <__kernel_rem_pio2+0x30a>
 80079c4:	b123      	cbz	r3, 80079d0 <__kernel_rem_pio2+0x300>
 80079c6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80079ca:	f8c8 3000 	str.w	r3, [r8]
 80079ce:	2301      	movs	r3, #1
 80079d0:	3201      	adds	r2, #1
 80079d2:	f108 0804 	add.w	r8, r8, #4
 80079d6:	461d      	mov	r5, r3
 80079d8:	e752      	b.n	8007880 <__kernel_rem_pio2+0x1b0>
 80079da:	1acb      	subs	r3, r1, r3
 80079dc:	f8c8 3000 	str.w	r3, [r8]
 80079e0:	462b      	mov	r3, r5
 80079e2:	e7f5      	b.n	80079d0 <__kernel_rem_pio2+0x300>
 80079e4:	f3af 8000 	nop.w
	...
 80079f4:	3ff00000 	.word	0x3ff00000
 80079f8:	0800b490 	.word	0x0800b490
 80079fc:	40200000 	.word	0x40200000
 8007a00:	3ff00000 	.word	0x3ff00000
 8007a04:	3e700000 	.word	0x3e700000
 8007a08:	41700000 	.word	0x41700000
 8007a0c:	3fe00000 	.word	0x3fe00000
 8007a10:	0800b450 	.word	0x0800b450
 8007a14:	1e62      	subs	r2, r4, #1
 8007a16:	ab0e      	add	r3, sp, #56	; 0x38
 8007a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a1c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007a20:	a90e      	add	r1, sp, #56	; 0x38
 8007a22:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007a26:	e739      	b.n	800789c <__kernel_rem_pio2+0x1cc>
 8007a28:	1e62      	subs	r2, r4, #1
 8007a2a:	ab0e      	add	r3, sp, #56	; 0x38
 8007a2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a30:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007a34:	e7f4      	b.n	8007a20 <__kernel_rem_pio2+0x350>
 8007a36:	a90e      	add	r1, sp, #56	; 0x38
 8007a38:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007a3c:	3b01      	subs	r3, #1
 8007a3e:	430a      	orrs	r2, r1
 8007a40:	e789      	b.n	8007956 <__kernel_rem_pio2+0x286>
 8007a42:	3301      	adds	r3, #1
 8007a44:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007a48:	2900      	cmp	r1, #0
 8007a4a:	d0fa      	beq.n	8007a42 <__kernel_rem_pio2+0x372>
 8007a4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a4e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8007a52:	446a      	add	r2, sp
 8007a54:	3a98      	subs	r2, #152	; 0x98
 8007a56:	920a      	str	r2, [sp, #40]	; 0x28
 8007a58:	9a08      	ldr	r2, [sp, #32]
 8007a5a:	18e3      	adds	r3, r4, r3
 8007a5c:	18a5      	adds	r5, r4, r2
 8007a5e:	aa22      	add	r2, sp, #136	; 0x88
 8007a60:	f104 0801 	add.w	r8, r4, #1
 8007a64:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8007a68:	9304      	str	r3, [sp, #16]
 8007a6a:	9b04      	ldr	r3, [sp, #16]
 8007a6c:	4543      	cmp	r3, r8
 8007a6e:	da04      	bge.n	8007a7a <__kernel_rem_pio2+0x3aa>
 8007a70:	461c      	mov	r4, r3
 8007a72:	e6a3      	b.n	80077bc <__kernel_rem_pio2+0xec>
 8007a74:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007a76:	2301      	movs	r3, #1
 8007a78:	e7e4      	b.n	8007a44 <__kernel_rem_pio2+0x374>
 8007a7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a7c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007a80:	f7f8 fd58 	bl	8000534 <__aeabi_i2d>
 8007a84:	e8e5 0102 	strd	r0, r1, [r5], #8
 8007a88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a8a:	46ab      	mov	fp, r5
 8007a8c:	461c      	mov	r4, r3
 8007a8e:	f04f 0900 	mov.w	r9, #0
 8007a92:	2600      	movs	r6, #0
 8007a94:	2700      	movs	r7, #0
 8007a96:	9b06      	ldr	r3, [sp, #24]
 8007a98:	4599      	cmp	r9, r3
 8007a9a:	dd06      	ble.n	8007aaa <__kernel_rem_pio2+0x3da>
 8007a9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a9e:	e8e3 6702 	strd	r6, r7, [r3], #8
 8007aa2:	f108 0801 	add.w	r8, r8, #1
 8007aa6:	930a      	str	r3, [sp, #40]	; 0x28
 8007aa8:	e7df      	b.n	8007a6a <__kernel_rem_pio2+0x39a>
 8007aaa:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8007aae:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8007ab2:	f7f8 fda9 	bl	8000608 <__aeabi_dmul>
 8007ab6:	4602      	mov	r2, r0
 8007ab8:	460b      	mov	r3, r1
 8007aba:	4630      	mov	r0, r6
 8007abc:	4639      	mov	r1, r7
 8007abe:	f7f8 fbed 	bl	800029c <__adddf3>
 8007ac2:	f109 0901 	add.w	r9, r9, #1
 8007ac6:	4606      	mov	r6, r0
 8007ac8:	460f      	mov	r7, r1
 8007aca:	e7e4      	b.n	8007a96 <__kernel_rem_pio2+0x3c6>
 8007acc:	3d01      	subs	r5, #1
 8007ace:	e748      	b.n	8007962 <__kernel_rem_pio2+0x292>
 8007ad0:	ec47 6b10 	vmov	d0, r6, r7
 8007ad4:	f1ca 0000 	rsb	r0, sl, #0
 8007ad8:	f000 fa8a 	bl	8007ff0 <scalbn>
 8007adc:	ec57 6b10 	vmov	r6, r7, d0
 8007ae0:	4ba0      	ldr	r3, [pc, #640]	; (8007d64 <__kernel_rem_pio2+0x694>)
 8007ae2:	ee10 0a10 	vmov	r0, s0
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	4639      	mov	r1, r7
 8007aea:	f7f9 f813 	bl	8000b14 <__aeabi_dcmpge>
 8007aee:	b1f8      	cbz	r0, 8007b30 <__kernel_rem_pio2+0x460>
 8007af0:	4b9d      	ldr	r3, [pc, #628]	; (8007d68 <__kernel_rem_pio2+0x698>)
 8007af2:	2200      	movs	r2, #0
 8007af4:	4630      	mov	r0, r6
 8007af6:	4639      	mov	r1, r7
 8007af8:	f7f8 fd86 	bl	8000608 <__aeabi_dmul>
 8007afc:	f7f9 f834 	bl	8000b68 <__aeabi_d2iz>
 8007b00:	4680      	mov	r8, r0
 8007b02:	f7f8 fd17 	bl	8000534 <__aeabi_i2d>
 8007b06:	4b97      	ldr	r3, [pc, #604]	; (8007d64 <__kernel_rem_pio2+0x694>)
 8007b08:	2200      	movs	r2, #0
 8007b0a:	f7f8 fd7d 	bl	8000608 <__aeabi_dmul>
 8007b0e:	460b      	mov	r3, r1
 8007b10:	4602      	mov	r2, r0
 8007b12:	4639      	mov	r1, r7
 8007b14:	4630      	mov	r0, r6
 8007b16:	f7f8 fbbf 	bl	8000298 <__aeabi_dsub>
 8007b1a:	f7f9 f825 	bl	8000b68 <__aeabi_d2iz>
 8007b1e:	1c65      	adds	r5, r4, #1
 8007b20:	ab0e      	add	r3, sp, #56	; 0x38
 8007b22:	f10a 0a18 	add.w	sl, sl, #24
 8007b26:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007b2a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8007b2e:	e720      	b.n	8007972 <__kernel_rem_pio2+0x2a2>
 8007b30:	4630      	mov	r0, r6
 8007b32:	4639      	mov	r1, r7
 8007b34:	f7f9 f818 	bl	8000b68 <__aeabi_d2iz>
 8007b38:	ab0e      	add	r3, sp, #56	; 0x38
 8007b3a:	4625      	mov	r5, r4
 8007b3c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007b40:	e717      	b.n	8007972 <__kernel_rem_pio2+0x2a2>
 8007b42:	ab0e      	add	r3, sp, #56	; 0x38
 8007b44:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8007b48:	f7f8 fcf4 	bl	8000534 <__aeabi_i2d>
 8007b4c:	4632      	mov	r2, r6
 8007b4e:	463b      	mov	r3, r7
 8007b50:	f7f8 fd5a 	bl	8000608 <__aeabi_dmul>
 8007b54:	4b84      	ldr	r3, [pc, #528]	; (8007d68 <__kernel_rem_pio2+0x698>)
 8007b56:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	4630      	mov	r0, r6
 8007b5e:	4639      	mov	r1, r7
 8007b60:	f7f8 fd52 	bl	8000608 <__aeabi_dmul>
 8007b64:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007b68:	4606      	mov	r6, r0
 8007b6a:	460f      	mov	r7, r1
 8007b6c:	e70f      	b.n	800798e <__kernel_rem_pio2+0x2be>
 8007b6e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8007b72:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8007b76:	f7f8 fd47 	bl	8000608 <__aeabi_dmul>
 8007b7a:	4602      	mov	r2, r0
 8007b7c:	460b      	mov	r3, r1
 8007b7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b82:	f7f8 fb8b 	bl	800029c <__adddf3>
 8007b86:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007b8a:	f108 0801 	add.w	r8, r8, #1
 8007b8e:	9b02      	ldr	r3, [sp, #8]
 8007b90:	4598      	cmp	r8, r3
 8007b92:	dc01      	bgt.n	8007b98 <__kernel_rem_pio2+0x4c8>
 8007b94:	45b8      	cmp	r8, r7
 8007b96:	ddea      	ble.n	8007b6e <__kernel_rem_pio2+0x49e>
 8007b98:	ed9d 7b06 	vldr	d7, [sp, #24]
 8007b9c:	ab4a      	add	r3, sp, #296	; 0x128
 8007b9e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007ba2:	ed87 7b00 	vstr	d7, [r7]
 8007ba6:	3e01      	subs	r6, #1
 8007ba8:	e6f8      	b.n	800799c <__kernel_rem_pio2+0x2cc>
 8007baa:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8007bac:	2b02      	cmp	r3, #2
 8007bae:	dc0b      	bgt.n	8007bc8 <__kernel_rem_pio2+0x4f8>
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	dc35      	bgt.n	8007c20 <__kernel_rem_pio2+0x550>
 8007bb4:	d059      	beq.n	8007c6a <__kernel_rem_pio2+0x59a>
 8007bb6:	9b04      	ldr	r3, [sp, #16]
 8007bb8:	f003 0007 	and.w	r0, r3, #7
 8007bbc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8007bc0:	ecbd 8b02 	vpop	{d8}
 8007bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bc8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8007bca:	2b03      	cmp	r3, #3
 8007bcc:	d1f3      	bne.n	8007bb6 <__kernel_rem_pio2+0x4e6>
 8007bce:	ab4a      	add	r3, sp, #296	; 0x128
 8007bd0:	4423      	add	r3, r4
 8007bd2:	9306      	str	r3, [sp, #24]
 8007bd4:	461c      	mov	r4, r3
 8007bd6:	469a      	mov	sl, r3
 8007bd8:	9502      	str	r5, [sp, #8]
 8007bda:	9b02      	ldr	r3, [sp, #8]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	f1aa 0a08 	sub.w	sl, sl, #8
 8007be2:	dc6b      	bgt.n	8007cbc <__kernel_rem_pio2+0x5ec>
 8007be4:	46aa      	mov	sl, r5
 8007be6:	f1ba 0f01 	cmp.w	sl, #1
 8007bea:	f1a4 0408 	sub.w	r4, r4, #8
 8007bee:	f300 8085 	bgt.w	8007cfc <__kernel_rem_pio2+0x62c>
 8007bf2:	9c06      	ldr	r4, [sp, #24]
 8007bf4:	2000      	movs	r0, #0
 8007bf6:	3408      	adds	r4, #8
 8007bf8:	2100      	movs	r1, #0
 8007bfa:	2d01      	cmp	r5, #1
 8007bfc:	f300 809d 	bgt.w	8007d3a <__kernel_rem_pio2+0x66a>
 8007c00:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8007c04:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8007c08:	f1bb 0f00 	cmp.w	fp, #0
 8007c0c:	f040 809b 	bne.w	8007d46 <__kernel_rem_pio2+0x676>
 8007c10:	9b01      	ldr	r3, [sp, #4]
 8007c12:	e9c3 5600 	strd	r5, r6, [r3]
 8007c16:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8007c1a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8007c1e:	e7ca      	b.n	8007bb6 <__kernel_rem_pio2+0x4e6>
 8007c20:	3408      	adds	r4, #8
 8007c22:	ab4a      	add	r3, sp, #296	; 0x128
 8007c24:	441c      	add	r4, r3
 8007c26:	462e      	mov	r6, r5
 8007c28:	2000      	movs	r0, #0
 8007c2a:	2100      	movs	r1, #0
 8007c2c:	2e00      	cmp	r6, #0
 8007c2e:	da36      	bge.n	8007c9e <__kernel_rem_pio2+0x5ce>
 8007c30:	f1bb 0f00 	cmp.w	fp, #0
 8007c34:	d039      	beq.n	8007caa <__kernel_rem_pio2+0x5da>
 8007c36:	4602      	mov	r2, r0
 8007c38:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c3c:	9c01      	ldr	r4, [sp, #4]
 8007c3e:	e9c4 2300 	strd	r2, r3, [r4]
 8007c42:	4602      	mov	r2, r0
 8007c44:	460b      	mov	r3, r1
 8007c46:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8007c4a:	f7f8 fb25 	bl	8000298 <__aeabi_dsub>
 8007c4e:	ae4c      	add	r6, sp, #304	; 0x130
 8007c50:	2401      	movs	r4, #1
 8007c52:	42a5      	cmp	r5, r4
 8007c54:	da2c      	bge.n	8007cb0 <__kernel_rem_pio2+0x5e0>
 8007c56:	f1bb 0f00 	cmp.w	fp, #0
 8007c5a:	d002      	beq.n	8007c62 <__kernel_rem_pio2+0x592>
 8007c5c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c60:	4619      	mov	r1, r3
 8007c62:	9b01      	ldr	r3, [sp, #4]
 8007c64:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8007c68:	e7a5      	b.n	8007bb6 <__kernel_rem_pio2+0x4e6>
 8007c6a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8007c6e:	eb0d 0403 	add.w	r4, sp, r3
 8007c72:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8007c76:	2000      	movs	r0, #0
 8007c78:	2100      	movs	r1, #0
 8007c7a:	2d00      	cmp	r5, #0
 8007c7c:	da09      	bge.n	8007c92 <__kernel_rem_pio2+0x5c2>
 8007c7e:	f1bb 0f00 	cmp.w	fp, #0
 8007c82:	d002      	beq.n	8007c8a <__kernel_rem_pio2+0x5ba>
 8007c84:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c88:	4619      	mov	r1, r3
 8007c8a:	9b01      	ldr	r3, [sp, #4]
 8007c8c:	e9c3 0100 	strd	r0, r1, [r3]
 8007c90:	e791      	b.n	8007bb6 <__kernel_rem_pio2+0x4e6>
 8007c92:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007c96:	f7f8 fb01 	bl	800029c <__adddf3>
 8007c9a:	3d01      	subs	r5, #1
 8007c9c:	e7ed      	b.n	8007c7a <__kernel_rem_pio2+0x5aa>
 8007c9e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007ca2:	f7f8 fafb 	bl	800029c <__adddf3>
 8007ca6:	3e01      	subs	r6, #1
 8007ca8:	e7c0      	b.n	8007c2c <__kernel_rem_pio2+0x55c>
 8007caa:	4602      	mov	r2, r0
 8007cac:	460b      	mov	r3, r1
 8007cae:	e7c5      	b.n	8007c3c <__kernel_rem_pio2+0x56c>
 8007cb0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8007cb4:	f7f8 faf2 	bl	800029c <__adddf3>
 8007cb8:	3401      	adds	r4, #1
 8007cba:	e7ca      	b.n	8007c52 <__kernel_rem_pio2+0x582>
 8007cbc:	e9da 8900 	ldrd	r8, r9, [sl]
 8007cc0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8007cc4:	9b02      	ldr	r3, [sp, #8]
 8007cc6:	3b01      	subs	r3, #1
 8007cc8:	9302      	str	r3, [sp, #8]
 8007cca:	4632      	mov	r2, r6
 8007ccc:	463b      	mov	r3, r7
 8007cce:	4640      	mov	r0, r8
 8007cd0:	4649      	mov	r1, r9
 8007cd2:	f7f8 fae3 	bl	800029c <__adddf3>
 8007cd6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007cda:	4602      	mov	r2, r0
 8007cdc:	460b      	mov	r3, r1
 8007cde:	4640      	mov	r0, r8
 8007ce0:	4649      	mov	r1, r9
 8007ce2:	f7f8 fad9 	bl	8000298 <__aeabi_dsub>
 8007ce6:	4632      	mov	r2, r6
 8007ce8:	463b      	mov	r3, r7
 8007cea:	f7f8 fad7 	bl	800029c <__adddf3>
 8007cee:	ed9d 7b08 	vldr	d7, [sp, #32]
 8007cf2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007cf6:	ed8a 7b00 	vstr	d7, [sl]
 8007cfa:	e76e      	b.n	8007bda <__kernel_rem_pio2+0x50a>
 8007cfc:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007d00:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8007d04:	4640      	mov	r0, r8
 8007d06:	4632      	mov	r2, r6
 8007d08:	463b      	mov	r3, r7
 8007d0a:	4649      	mov	r1, r9
 8007d0c:	f7f8 fac6 	bl	800029c <__adddf3>
 8007d10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d14:	4602      	mov	r2, r0
 8007d16:	460b      	mov	r3, r1
 8007d18:	4640      	mov	r0, r8
 8007d1a:	4649      	mov	r1, r9
 8007d1c:	f7f8 fabc 	bl	8000298 <__aeabi_dsub>
 8007d20:	4632      	mov	r2, r6
 8007d22:	463b      	mov	r3, r7
 8007d24:	f7f8 faba 	bl	800029c <__adddf3>
 8007d28:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007d2c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007d30:	ed84 7b00 	vstr	d7, [r4]
 8007d34:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007d38:	e755      	b.n	8007be6 <__kernel_rem_pio2+0x516>
 8007d3a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007d3e:	f7f8 faad 	bl	800029c <__adddf3>
 8007d42:	3d01      	subs	r5, #1
 8007d44:	e759      	b.n	8007bfa <__kernel_rem_pio2+0x52a>
 8007d46:	9b01      	ldr	r3, [sp, #4]
 8007d48:	9a01      	ldr	r2, [sp, #4]
 8007d4a:	601d      	str	r5, [r3, #0]
 8007d4c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8007d50:	605c      	str	r4, [r3, #4]
 8007d52:	609f      	str	r7, [r3, #8]
 8007d54:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8007d58:	60d3      	str	r3, [r2, #12]
 8007d5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007d5e:	6110      	str	r0, [r2, #16]
 8007d60:	6153      	str	r3, [r2, #20]
 8007d62:	e728      	b.n	8007bb6 <__kernel_rem_pio2+0x4e6>
 8007d64:	41700000 	.word	0x41700000
 8007d68:	3e700000 	.word	0x3e700000
 8007d6c:	00000000 	.word	0x00000000

08007d70 <__kernel_sin>:
 8007d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d74:	ed2d 8b04 	vpush	{d8-d9}
 8007d78:	eeb0 8a41 	vmov.f32	s16, s2
 8007d7c:	eef0 8a61 	vmov.f32	s17, s3
 8007d80:	ec55 4b10 	vmov	r4, r5, d0
 8007d84:	b083      	sub	sp, #12
 8007d86:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007d8a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8007d8e:	9001      	str	r0, [sp, #4]
 8007d90:	da06      	bge.n	8007da0 <__kernel_sin+0x30>
 8007d92:	ee10 0a10 	vmov	r0, s0
 8007d96:	4629      	mov	r1, r5
 8007d98:	f7f8 fee6 	bl	8000b68 <__aeabi_d2iz>
 8007d9c:	2800      	cmp	r0, #0
 8007d9e:	d051      	beq.n	8007e44 <__kernel_sin+0xd4>
 8007da0:	4622      	mov	r2, r4
 8007da2:	462b      	mov	r3, r5
 8007da4:	4620      	mov	r0, r4
 8007da6:	4629      	mov	r1, r5
 8007da8:	f7f8 fc2e 	bl	8000608 <__aeabi_dmul>
 8007dac:	4682      	mov	sl, r0
 8007dae:	468b      	mov	fp, r1
 8007db0:	4602      	mov	r2, r0
 8007db2:	460b      	mov	r3, r1
 8007db4:	4620      	mov	r0, r4
 8007db6:	4629      	mov	r1, r5
 8007db8:	f7f8 fc26 	bl	8000608 <__aeabi_dmul>
 8007dbc:	a341      	add	r3, pc, #260	; (adr r3, 8007ec4 <__kernel_sin+0x154>)
 8007dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc2:	4680      	mov	r8, r0
 8007dc4:	4689      	mov	r9, r1
 8007dc6:	4650      	mov	r0, sl
 8007dc8:	4659      	mov	r1, fp
 8007dca:	f7f8 fc1d 	bl	8000608 <__aeabi_dmul>
 8007dce:	a33f      	add	r3, pc, #252	; (adr r3, 8007ecc <__kernel_sin+0x15c>)
 8007dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd4:	f7f8 fa60 	bl	8000298 <__aeabi_dsub>
 8007dd8:	4652      	mov	r2, sl
 8007dda:	465b      	mov	r3, fp
 8007ddc:	f7f8 fc14 	bl	8000608 <__aeabi_dmul>
 8007de0:	a33c      	add	r3, pc, #240	; (adr r3, 8007ed4 <__kernel_sin+0x164>)
 8007de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de6:	f7f8 fa59 	bl	800029c <__adddf3>
 8007dea:	4652      	mov	r2, sl
 8007dec:	465b      	mov	r3, fp
 8007dee:	f7f8 fc0b 	bl	8000608 <__aeabi_dmul>
 8007df2:	a33a      	add	r3, pc, #232	; (adr r3, 8007edc <__kernel_sin+0x16c>)
 8007df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df8:	f7f8 fa4e 	bl	8000298 <__aeabi_dsub>
 8007dfc:	4652      	mov	r2, sl
 8007dfe:	465b      	mov	r3, fp
 8007e00:	f7f8 fc02 	bl	8000608 <__aeabi_dmul>
 8007e04:	a337      	add	r3, pc, #220	; (adr r3, 8007ee4 <__kernel_sin+0x174>)
 8007e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e0a:	f7f8 fa47 	bl	800029c <__adddf3>
 8007e0e:	9b01      	ldr	r3, [sp, #4]
 8007e10:	4606      	mov	r6, r0
 8007e12:	460f      	mov	r7, r1
 8007e14:	b9eb      	cbnz	r3, 8007e52 <__kernel_sin+0xe2>
 8007e16:	4602      	mov	r2, r0
 8007e18:	460b      	mov	r3, r1
 8007e1a:	4650      	mov	r0, sl
 8007e1c:	4659      	mov	r1, fp
 8007e1e:	f7f8 fbf3 	bl	8000608 <__aeabi_dmul>
 8007e22:	a325      	add	r3, pc, #148	; (adr r3, 8007eb8 <__kernel_sin+0x148>)
 8007e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e28:	f7f8 fa36 	bl	8000298 <__aeabi_dsub>
 8007e2c:	4642      	mov	r2, r8
 8007e2e:	464b      	mov	r3, r9
 8007e30:	f7f8 fbea 	bl	8000608 <__aeabi_dmul>
 8007e34:	4602      	mov	r2, r0
 8007e36:	460b      	mov	r3, r1
 8007e38:	4620      	mov	r0, r4
 8007e3a:	4629      	mov	r1, r5
 8007e3c:	f7f8 fa2e 	bl	800029c <__adddf3>
 8007e40:	4604      	mov	r4, r0
 8007e42:	460d      	mov	r5, r1
 8007e44:	ec45 4b10 	vmov	d0, r4, r5
 8007e48:	b003      	add	sp, #12
 8007e4a:	ecbd 8b04 	vpop	{d8-d9}
 8007e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e52:	4b1b      	ldr	r3, [pc, #108]	; (8007ec0 <__kernel_sin+0x150>)
 8007e54:	ec51 0b18 	vmov	r0, r1, d8
 8007e58:	2200      	movs	r2, #0
 8007e5a:	f7f8 fbd5 	bl	8000608 <__aeabi_dmul>
 8007e5e:	4632      	mov	r2, r6
 8007e60:	ec41 0b19 	vmov	d9, r0, r1
 8007e64:	463b      	mov	r3, r7
 8007e66:	4640      	mov	r0, r8
 8007e68:	4649      	mov	r1, r9
 8007e6a:	f7f8 fbcd 	bl	8000608 <__aeabi_dmul>
 8007e6e:	4602      	mov	r2, r0
 8007e70:	460b      	mov	r3, r1
 8007e72:	ec51 0b19 	vmov	r0, r1, d9
 8007e76:	f7f8 fa0f 	bl	8000298 <__aeabi_dsub>
 8007e7a:	4652      	mov	r2, sl
 8007e7c:	465b      	mov	r3, fp
 8007e7e:	f7f8 fbc3 	bl	8000608 <__aeabi_dmul>
 8007e82:	ec53 2b18 	vmov	r2, r3, d8
 8007e86:	f7f8 fa07 	bl	8000298 <__aeabi_dsub>
 8007e8a:	a30b      	add	r3, pc, #44	; (adr r3, 8007eb8 <__kernel_sin+0x148>)
 8007e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e90:	4606      	mov	r6, r0
 8007e92:	460f      	mov	r7, r1
 8007e94:	4640      	mov	r0, r8
 8007e96:	4649      	mov	r1, r9
 8007e98:	f7f8 fbb6 	bl	8000608 <__aeabi_dmul>
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	460b      	mov	r3, r1
 8007ea0:	4630      	mov	r0, r6
 8007ea2:	4639      	mov	r1, r7
 8007ea4:	f7f8 f9fa 	bl	800029c <__adddf3>
 8007ea8:	4602      	mov	r2, r0
 8007eaa:	460b      	mov	r3, r1
 8007eac:	4620      	mov	r0, r4
 8007eae:	4629      	mov	r1, r5
 8007eb0:	f7f8 f9f2 	bl	8000298 <__aeabi_dsub>
 8007eb4:	e7c4      	b.n	8007e40 <__kernel_sin+0xd0>
 8007eb6:	bf00      	nop
 8007eb8:	55555549 	.word	0x55555549
 8007ebc:	3fc55555 	.word	0x3fc55555
 8007ec0:	3fe00000 	.word	0x3fe00000
 8007ec4:	5acfd57c 	.word	0x5acfd57c
 8007ec8:	3de5d93a 	.word	0x3de5d93a
 8007ecc:	8a2b9ceb 	.word	0x8a2b9ceb
 8007ed0:	3e5ae5e6 	.word	0x3e5ae5e6
 8007ed4:	57b1fe7d 	.word	0x57b1fe7d
 8007ed8:	3ec71de3 	.word	0x3ec71de3
 8007edc:	19c161d5 	.word	0x19c161d5
 8007ee0:	3f2a01a0 	.word	0x3f2a01a0
 8007ee4:	1110f8a6 	.word	0x1110f8a6
 8007ee8:	3f811111 	.word	0x3f811111
 8007eec:	00000000 	.word	0x00000000

08007ef0 <floor>:
 8007ef0:	ec51 0b10 	vmov	r0, r1, d0
 8007ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ef8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8007efc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8007f00:	2e13      	cmp	r6, #19
 8007f02:	ee10 5a10 	vmov	r5, s0
 8007f06:	ee10 8a10 	vmov	r8, s0
 8007f0a:	460c      	mov	r4, r1
 8007f0c:	dc32      	bgt.n	8007f74 <floor+0x84>
 8007f0e:	2e00      	cmp	r6, #0
 8007f10:	da14      	bge.n	8007f3c <floor+0x4c>
 8007f12:	a333      	add	r3, pc, #204	; (adr r3, 8007fe0 <floor+0xf0>)
 8007f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f18:	f7f8 f9c0 	bl	800029c <__adddf3>
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	2300      	movs	r3, #0
 8007f20:	f7f8 fe02 	bl	8000b28 <__aeabi_dcmpgt>
 8007f24:	b138      	cbz	r0, 8007f36 <floor+0x46>
 8007f26:	2c00      	cmp	r4, #0
 8007f28:	da57      	bge.n	8007fda <floor+0xea>
 8007f2a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007f2e:	431d      	orrs	r5, r3
 8007f30:	d001      	beq.n	8007f36 <floor+0x46>
 8007f32:	4c2d      	ldr	r4, [pc, #180]	; (8007fe8 <floor+0xf8>)
 8007f34:	2500      	movs	r5, #0
 8007f36:	4621      	mov	r1, r4
 8007f38:	4628      	mov	r0, r5
 8007f3a:	e025      	b.n	8007f88 <floor+0x98>
 8007f3c:	4f2b      	ldr	r7, [pc, #172]	; (8007fec <floor+0xfc>)
 8007f3e:	4137      	asrs	r7, r6
 8007f40:	ea01 0307 	and.w	r3, r1, r7
 8007f44:	4303      	orrs	r3, r0
 8007f46:	d01f      	beq.n	8007f88 <floor+0x98>
 8007f48:	a325      	add	r3, pc, #148	; (adr r3, 8007fe0 <floor+0xf0>)
 8007f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f4e:	f7f8 f9a5 	bl	800029c <__adddf3>
 8007f52:	2200      	movs	r2, #0
 8007f54:	2300      	movs	r3, #0
 8007f56:	f7f8 fde7 	bl	8000b28 <__aeabi_dcmpgt>
 8007f5a:	2800      	cmp	r0, #0
 8007f5c:	d0eb      	beq.n	8007f36 <floor+0x46>
 8007f5e:	2c00      	cmp	r4, #0
 8007f60:	bfbe      	ittt	lt
 8007f62:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8007f66:	fa43 f606 	asrlt.w	r6, r3, r6
 8007f6a:	19a4      	addlt	r4, r4, r6
 8007f6c:	ea24 0407 	bic.w	r4, r4, r7
 8007f70:	2500      	movs	r5, #0
 8007f72:	e7e0      	b.n	8007f36 <floor+0x46>
 8007f74:	2e33      	cmp	r6, #51	; 0x33
 8007f76:	dd0b      	ble.n	8007f90 <floor+0xa0>
 8007f78:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007f7c:	d104      	bne.n	8007f88 <floor+0x98>
 8007f7e:	ee10 2a10 	vmov	r2, s0
 8007f82:	460b      	mov	r3, r1
 8007f84:	f7f8 f98a 	bl	800029c <__adddf3>
 8007f88:	ec41 0b10 	vmov	d0, r0, r1
 8007f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f90:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8007f94:	f04f 33ff 	mov.w	r3, #4294967295
 8007f98:	fa23 f707 	lsr.w	r7, r3, r7
 8007f9c:	4207      	tst	r7, r0
 8007f9e:	d0f3      	beq.n	8007f88 <floor+0x98>
 8007fa0:	a30f      	add	r3, pc, #60	; (adr r3, 8007fe0 <floor+0xf0>)
 8007fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa6:	f7f8 f979 	bl	800029c <__adddf3>
 8007faa:	2200      	movs	r2, #0
 8007fac:	2300      	movs	r3, #0
 8007fae:	f7f8 fdbb 	bl	8000b28 <__aeabi_dcmpgt>
 8007fb2:	2800      	cmp	r0, #0
 8007fb4:	d0bf      	beq.n	8007f36 <floor+0x46>
 8007fb6:	2c00      	cmp	r4, #0
 8007fb8:	da02      	bge.n	8007fc0 <floor+0xd0>
 8007fba:	2e14      	cmp	r6, #20
 8007fbc:	d103      	bne.n	8007fc6 <floor+0xd6>
 8007fbe:	3401      	adds	r4, #1
 8007fc0:	ea25 0507 	bic.w	r5, r5, r7
 8007fc4:	e7b7      	b.n	8007f36 <floor+0x46>
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007fcc:	fa03 f606 	lsl.w	r6, r3, r6
 8007fd0:	4435      	add	r5, r6
 8007fd2:	4545      	cmp	r5, r8
 8007fd4:	bf38      	it	cc
 8007fd6:	18e4      	addcc	r4, r4, r3
 8007fd8:	e7f2      	b.n	8007fc0 <floor+0xd0>
 8007fda:	2500      	movs	r5, #0
 8007fdc:	462c      	mov	r4, r5
 8007fde:	e7aa      	b.n	8007f36 <floor+0x46>
 8007fe0:	8800759c 	.word	0x8800759c
 8007fe4:	7e37e43c 	.word	0x7e37e43c
 8007fe8:	bff00000 	.word	0xbff00000
 8007fec:	000fffff 	.word	0x000fffff

08007ff0 <scalbn>:
 8007ff0:	b570      	push	{r4, r5, r6, lr}
 8007ff2:	ec55 4b10 	vmov	r4, r5, d0
 8007ff6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007ffa:	4606      	mov	r6, r0
 8007ffc:	462b      	mov	r3, r5
 8007ffe:	b99a      	cbnz	r2, 8008028 <scalbn+0x38>
 8008000:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008004:	4323      	orrs	r3, r4
 8008006:	d036      	beq.n	8008076 <scalbn+0x86>
 8008008:	4b39      	ldr	r3, [pc, #228]	; (80080f0 <scalbn+0x100>)
 800800a:	4629      	mov	r1, r5
 800800c:	ee10 0a10 	vmov	r0, s0
 8008010:	2200      	movs	r2, #0
 8008012:	f7f8 faf9 	bl	8000608 <__aeabi_dmul>
 8008016:	4b37      	ldr	r3, [pc, #220]	; (80080f4 <scalbn+0x104>)
 8008018:	429e      	cmp	r6, r3
 800801a:	4604      	mov	r4, r0
 800801c:	460d      	mov	r5, r1
 800801e:	da10      	bge.n	8008042 <scalbn+0x52>
 8008020:	a32b      	add	r3, pc, #172	; (adr r3, 80080d0 <scalbn+0xe0>)
 8008022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008026:	e03a      	b.n	800809e <scalbn+0xae>
 8008028:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800802c:	428a      	cmp	r2, r1
 800802e:	d10c      	bne.n	800804a <scalbn+0x5a>
 8008030:	ee10 2a10 	vmov	r2, s0
 8008034:	4620      	mov	r0, r4
 8008036:	4629      	mov	r1, r5
 8008038:	f7f8 f930 	bl	800029c <__adddf3>
 800803c:	4604      	mov	r4, r0
 800803e:	460d      	mov	r5, r1
 8008040:	e019      	b.n	8008076 <scalbn+0x86>
 8008042:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008046:	460b      	mov	r3, r1
 8008048:	3a36      	subs	r2, #54	; 0x36
 800804a:	4432      	add	r2, r6
 800804c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008050:	428a      	cmp	r2, r1
 8008052:	dd08      	ble.n	8008066 <scalbn+0x76>
 8008054:	2d00      	cmp	r5, #0
 8008056:	a120      	add	r1, pc, #128	; (adr r1, 80080d8 <scalbn+0xe8>)
 8008058:	e9d1 0100 	ldrd	r0, r1, [r1]
 800805c:	da1c      	bge.n	8008098 <scalbn+0xa8>
 800805e:	a120      	add	r1, pc, #128	; (adr r1, 80080e0 <scalbn+0xf0>)
 8008060:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008064:	e018      	b.n	8008098 <scalbn+0xa8>
 8008066:	2a00      	cmp	r2, #0
 8008068:	dd08      	ble.n	800807c <scalbn+0x8c>
 800806a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800806e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008072:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008076:	ec45 4b10 	vmov	d0, r4, r5
 800807a:	bd70      	pop	{r4, r5, r6, pc}
 800807c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008080:	da19      	bge.n	80080b6 <scalbn+0xc6>
 8008082:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008086:	429e      	cmp	r6, r3
 8008088:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800808c:	dd0a      	ble.n	80080a4 <scalbn+0xb4>
 800808e:	a112      	add	r1, pc, #72	; (adr r1, 80080d8 <scalbn+0xe8>)
 8008090:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d1e2      	bne.n	800805e <scalbn+0x6e>
 8008098:	a30f      	add	r3, pc, #60	; (adr r3, 80080d8 <scalbn+0xe8>)
 800809a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800809e:	f7f8 fab3 	bl	8000608 <__aeabi_dmul>
 80080a2:	e7cb      	b.n	800803c <scalbn+0x4c>
 80080a4:	a10a      	add	r1, pc, #40	; (adr r1, 80080d0 <scalbn+0xe0>)
 80080a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d0b8      	beq.n	8008020 <scalbn+0x30>
 80080ae:	a10e      	add	r1, pc, #56	; (adr r1, 80080e8 <scalbn+0xf8>)
 80080b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080b4:	e7b4      	b.n	8008020 <scalbn+0x30>
 80080b6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80080ba:	3236      	adds	r2, #54	; 0x36
 80080bc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80080c0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80080c4:	4620      	mov	r0, r4
 80080c6:	4b0c      	ldr	r3, [pc, #48]	; (80080f8 <scalbn+0x108>)
 80080c8:	2200      	movs	r2, #0
 80080ca:	e7e8      	b.n	800809e <scalbn+0xae>
 80080cc:	f3af 8000 	nop.w
 80080d0:	c2f8f359 	.word	0xc2f8f359
 80080d4:	01a56e1f 	.word	0x01a56e1f
 80080d8:	8800759c 	.word	0x8800759c
 80080dc:	7e37e43c 	.word	0x7e37e43c
 80080e0:	8800759c 	.word	0x8800759c
 80080e4:	fe37e43c 	.word	0xfe37e43c
 80080e8:	c2f8f359 	.word	0xc2f8f359
 80080ec:	81a56e1f 	.word	0x81a56e1f
 80080f0:	43500000 	.word	0x43500000
 80080f4:	ffff3cb0 	.word	0xffff3cb0
 80080f8:	3c900000 	.word	0x3c900000

080080fc <_init>:
 80080fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080fe:	bf00      	nop
 8008100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008102:	bc08      	pop	{r3}
 8008104:	469e      	mov	lr, r3
 8008106:	4770      	bx	lr

08008108 <_fini>:
 8008108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800810a:	bf00      	nop
 800810c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800810e:	bc08      	pop	{r3}
 8008110:	469e      	mov	lr, r3
 8008112:	4770      	bx	lr
