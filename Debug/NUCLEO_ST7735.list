
NUCLEO_ST7735.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ffc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003320  080071a0  080071a0  000171a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a4c0  0800a4c0  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800a4c0  0800a4c0  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a4c0  0800a4c0  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a4c0  0800a4c0  0001a4c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a4c4  0800a4c4  0001a4c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800a4c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  200001e4  0800a6ac  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000240  0800a6ac  00020240  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004d43  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000101d  00000000  00000000  00024f57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000500  00000000  00000000  00025f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00011047  00000000  00000000  00026478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000528e  00000000  00000000  000374bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000570d6  00000000  00000000  0003c74d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00093823  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000450  00000000  00000000  00093878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000025ac  00000000  00000000  00093cc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007184 	.word	0x08007184

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	08007184 	.word	0x08007184

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <commandList>:
static uint16_t _fg = ST7735_GREEN;
static uint16_t _bg = ST7735_BLACK;

// Companion code to the above tables.  Reads and issues
// a series of LCD commands stored in PROGMEM byte array.
static void commandList(const uint8_t *addr) {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
	uint8_t  numCommands, numArgs;
	uint16_t ms;

	numCommands = *addr++;   // Number of commands to follow
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	1c5a      	adds	r2, r3, #1
 8000bc4:	607a      	str	r2, [r7, #4]
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	73fb      	strb	r3, [r7, #15]
	while(numCommands--) {                 // For each command...
 8000bca:	e033      	b.n	8000c34 <commandList+0x7c>
		lcd7735_sendCmd(*addr++); //   Read, issue command
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	1c5a      	adds	r2, r3, #1
 8000bd0:	607a      	str	r2, [r7, #4]
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f001 fa65 	bl	80020a4 <lcd7735_sendCmd>
		numArgs  = *addr++;    //   Number of args to follow
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	1c5a      	adds	r2, r3, #1
 8000bde:	607a      	str	r2, [r7, #4]
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	73bb      	strb	r3, [r7, #14]
		ms       = numArgs & DELAY;          //   If hibit set, delay follows args
 8000be4:	7bbb      	ldrb	r3, [r7, #14]
 8000be6:	b29b      	uxth	r3, r3
 8000be8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bec:	81bb      	strh	r3, [r7, #12]
		numArgs &= ~DELAY;                   //   Mask out delay bit
 8000bee:	7bbb      	ldrb	r3, [r7, #14]
 8000bf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000bf4:	73bb      	strb	r3, [r7, #14]
		while(numArgs--) {                   //   For each argument...
 8000bf6:	e006      	b.n	8000c06 <commandList+0x4e>
			lcd7735_sendData(*addr++);  //     Read, issue argument
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	1c5a      	adds	r2, r3, #1
 8000bfc:	607a      	str	r2, [r7, #4]
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	4618      	mov	r0, r3
 8000c02:	f001 fa63 	bl	80020cc <lcd7735_sendData>
		while(numArgs--) {                   //   For each argument...
 8000c06:	7bbb      	ldrb	r3, [r7, #14]
 8000c08:	1e5a      	subs	r2, r3, #1
 8000c0a:	73ba      	strb	r2, [r7, #14]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d1f3      	bne.n	8000bf8 <commandList+0x40>
		}

		if(ms) {
 8000c10:	89bb      	ldrh	r3, [r7, #12]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d00e      	beq.n	8000c34 <commandList+0x7c>
			ms = *addr++; // Read post-command delay time (ms)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	1c5a      	adds	r2, r3, #1
 8000c1a:	607a      	str	r2, [r7, #4]
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	81bb      	strh	r3, [r7, #12]
			if(ms == 255) ms = 500;     // If 255, delay for 500 ms
 8000c20:	89bb      	ldrh	r3, [r7, #12]
 8000c22:	2bff      	cmp	r3, #255	; 0xff
 8000c24:	d102      	bne.n	8000c2c <commandList+0x74>
 8000c26:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c2a:	81bb      	strh	r3, [r7, #12]
			delay_ms(ms);
 8000c2c:	89bb      	ldrh	r3, [r7, #12]
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f001 fa0c 	bl	800204c <delay_ms>
	while(numCommands--) {                 // For each command...
 8000c34:	7bfb      	ldrb	r3, [r7, #15]
 8000c36:	1e5a      	subs	r2, r3, #1
 8000c38:	73fa      	strb	r2, [r7, #15]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d1c6      	bne.n	8000bcc <commandList+0x14>
		}
	}
}
 8000c3e:	bf00      	nop
 8000c40:	bf00      	nop
 8000c42:	3710      	adds	r7, #16
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <commonInit>:

// Initialization code common to both 'B' and 'R' type displays
static void commonInit(const uint8_t *cmdList) {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
	// toggle RST low to reset; CS low so it'll listen to us
	ST7735_CS0;
 8000c50:	2106      	movs	r1, #6
 8000c52:	480c      	ldr	r0, [pc, #48]	; (8000c84 <commonInit+0x3c>)
 8000c54:	f002 f810 	bl	8002c78 <gpioResetPin>
	lcd7735_sendCmd(ST7735_SWRESET);
	delay_ms(500);
#else
	//ST7735_RST1;
	//delay_ms(500);
	ST7735_RST0;
 8000c58:	2109      	movs	r1, #9
 8000c5a:	480b      	ldr	r0, [pc, #44]	; (8000c88 <commonInit+0x40>)
 8000c5c:	f002 f80c 	bl	8002c78 <gpioResetPin>
	delay_ms(50);  //default value 500
 8000c60:	2032      	movs	r0, #50	; 0x32
 8000c62:	f001 f9f3 	bl	800204c <delay_ms>
	ST7735_RST1;
 8000c66:	2109      	movs	r1, #9
 8000c68:	4807      	ldr	r0, [pc, #28]	; (8000c88 <commonInit+0x40>)
 8000c6a:	f001 ffda 	bl	8002c22 <gpioSetPin>
	//delay_ms(500);
#endif    
	if(cmdList) commandList(cmdList);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d002      	beq.n	8000c7a <commonInit+0x32>
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f7ff ff9f 	bl	8000bb8 <commandList>
}
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40020400 	.word	0x40020400
 8000c88:	40020000 	.word	0x40020000

08000c8c <lcd7735_initR>:
	commonInit(Bcmd);
}


// Initialization for ST7735R screens (green or red tabs)
void lcd7735_initR(uint8_t options) {
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	71fb      	strb	r3, [r7, #7]
	delay_ms(50);
 8000c96:	2032      	movs	r0, #50	; 0x32
 8000c98:	f001 f9d8 	bl	800204c <delay_ms>
	commonInit(Rcmd1);
 8000c9c:	4811      	ldr	r0, [pc, #68]	; (8000ce4 <lcd7735_initR+0x58>)
 8000c9e:	f7ff ffd3 	bl	8000c48 <commonInit>
	if(options == INITR_GREENTAB) {
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d109      	bne.n	8000cbc <lcd7735_initR+0x30>
		commandList(Rcmd2green);
 8000ca8:	480f      	ldr	r0, [pc, #60]	; (8000ce8 <lcd7735_initR+0x5c>)
 8000caa:	f7ff ff85 	bl	8000bb8 <commandList>
		colstart = 2;
 8000cae:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <lcd7735_initR+0x60>)
 8000cb0:	2202      	movs	r2, #2
 8000cb2:	601a      	str	r2, [r3, #0]
		rowstart = 1;
 8000cb4:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <lcd7735_initR+0x64>)
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	e002      	b.n	8000cc2 <lcd7735_initR+0x36>
	} else {
		// colstart, rowstart left at default '0' values
		commandList(Rcmd2red);
 8000cbc:	480d      	ldr	r0, [pc, #52]	; (8000cf4 <lcd7735_initR+0x68>)
 8000cbe:	f7ff ff7b 	bl	8000bb8 <commandList>
	}
	commandList(Rcmd3);
 8000cc2:	480d      	ldr	r0, [pc, #52]	; (8000cf8 <lcd7735_initR+0x6c>)
 8000cc4:	f7ff ff78 	bl	8000bb8 <commandList>

	// if black, change MADCTL color filter
	if (options == INITR_BLACKTAB) {
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	2b02      	cmp	r3, #2
 8000ccc:	d105      	bne.n	8000cda <lcd7735_initR+0x4e>
		lcd7735_sendCmd(ST7735_MADCTL);
 8000cce:	2036      	movs	r0, #54	; 0x36
 8000cd0:	f001 f9e8 	bl	80020a4 <lcd7735_sendCmd>
		lcd7735_sendData(0xC0);
 8000cd4:	20c0      	movs	r0, #192	; 0xc0
 8000cd6:	f001 f9f9 	bl	80020cc <lcd7735_sendData>
	}

	//  tabcolor = options;
}
 8000cda:	bf00      	nop
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	08008a20 	.word	0x08008a20
 8000ce8:	08008a5c 	.word	0x08008a5c
 8000cec:	20000200 	.word	0x20000200
 8000cf0:	20000204 	.word	0x20000204
 8000cf4:	08008a6c 	.word	0x08008a6c
 8000cf8:	08008a7c 	.word	0x08008a7c

08000cfc <lcd7735_setAddrWindow>:


void lcd7735_setAddrWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8000cfc:	b590      	push	{r4, r7, lr}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4604      	mov	r4, r0
 8000d04:	4608      	mov	r0, r1
 8000d06:	4611      	mov	r1, r2
 8000d08:	461a      	mov	r2, r3
 8000d0a:	4623      	mov	r3, r4
 8000d0c:	71fb      	strb	r3, [r7, #7]
 8000d0e:	4603      	mov	r3, r0
 8000d10:	71bb      	strb	r3, [r7, #6]
 8000d12:	460b      	mov	r3, r1
 8000d14:	717b      	strb	r3, [r7, #5]
 8000d16:	4613      	mov	r3, r2
 8000d18:	713b      	strb	r3, [r7, #4]
	lcd7735_sendCmd(ST7735_CASET);		// Column addr set
 8000d1a:	202a      	movs	r0, #42	; 0x2a
 8000d1c:	f001 f9c2 	bl	80020a4 <lcd7735_sendCmd>
	lcd7735_sendData(0x00);
 8000d20:	2000      	movs	r0, #0
 8000d22:	f001 f9d3 	bl	80020cc <lcd7735_sendData>
	lcd7735_sendData(x0+colstart);     // XSTART 
 8000d26:	4b1b      	ldr	r3, [pc, #108]	; (8000d94 <lcd7735_setAddrWindow+0x98>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	b2da      	uxtb	r2, r3
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	4413      	add	r3, r2
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	4618      	mov	r0, r3
 8000d34:	f001 f9ca 	bl	80020cc <lcd7735_sendData>
	lcd7735_sendData(0x00);
 8000d38:	2000      	movs	r0, #0
 8000d3a:	f001 f9c7 	bl	80020cc <lcd7735_sendData>
	lcd7735_sendData(x1+colstart);     // XEND
 8000d3e:	4b15      	ldr	r3, [pc, #84]	; (8000d94 <lcd7735_setAddrWindow+0x98>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	b2da      	uxtb	r2, r3
 8000d44:	797b      	ldrb	r3, [r7, #5]
 8000d46:	4413      	add	r3, r2
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f001 f9be 	bl	80020cc <lcd7735_sendData>

	lcd7735_sendCmd(ST7735_RASET); // Row addr set
 8000d50:	202b      	movs	r0, #43	; 0x2b
 8000d52:	f001 f9a7 	bl	80020a4 <lcd7735_sendCmd>
	lcd7735_sendData(0x00);
 8000d56:	2000      	movs	r0, #0
 8000d58:	f001 f9b8 	bl	80020cc <lcd7735_sendData>
	lcd7735_sendData(y0+rowstart);     // YSTART
 8000d5c:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <lcd7735_setAddrWindow+0x9c>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	b2da      	uxtb	r2, r3
 8000d62:	79bb      	ldrb	r3, [r7, #6]
 8000d64:	4413      	add	r3, r2
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f001 f9af 	bl	80020cc <lcd7735_sendData>
	lcd7735_sendData(0x00);
 8000d6e:	2000      	movs	r0, #0
 8000d70:	f001 f9ac 	bl	80020cc <lcd7735_sendData>
	lcd7735_sendData(y1+rowstart);     // YEND
 8000d74:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <lcd7735_setAddrWindow+0x9c>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	b2da      	uxtb	r2, r3
 8000d7a:	793b      	ldrb	r3, [r7, #4]
 8000d7c:	4413      	add	r3, r2
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	4618      	mov	r0, r3
 8000d82:	f001 f9a3 	bl	80020cc <lcd7735_sendData>

	lcd7735_sendCmd(ST7735_RAMWR); // write to RAM
 8000d86:	202c      	movs	r0, #44	; 0x2c
 8000d88:	f001 f98c 	bl	80020a4 <lcd7735_sendCmd>
}
 8000d8c:	bf00      	nop
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd90      	pop	{r4, r7, pc}
 8000d94:	20000200 	.word	0x20000200
 8000d98:	20000204 	.word	0x20000204

08000d9c <lcd7735_pushColor>:
void lcd7735_pushColor(uint16_t color) {
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	80fb      	strh	r3, [r7, #6]
	ST7735_DC1;
 8000da6:	2107      	movs	r1, #7
 8000da8:	4809      	ldr	r0, [pc, #36]	; (8000dd0 <lcd7735_pushColor+0x34>)
 8000daa:	f001 ff3a 	bl	8002c22 <gpioSetPin>
	putpix(color);
 8000dae:	88fb      	ldrh	r3, [r7, #6]
 8000db0:	0a1b      	lsrs	r3, r3, #8
 8000db2:	b29b      	uxth	r3, r3
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	4618      	mov	r0, r3
 8000db8:	f001 f960 	bl	800207c <lcd7735_senddata>
 8000dbc:	88fb      	ldrh	r3, [r7, #6]
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f001 f95b 	bl	800207c <lcd7735_senddata>
}
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40020800 	.word	0x40020800

08000dd4 <lcd7735_drawPixel>:

// draw color pixel on screen
void lcd7735_drawPixel(int16_t x, int16_t y, uint16_t color) {
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	80fb      	strh	r3, [r7, #6]
 8000dde:	460b      	mov	r3, r1
 8000de0:	80bb      	strh	r3, [r7, #4]
 8000de2:	4613      	mov	r3, r2
 8000de4:	807b      	strh	r3, [r7, #2]

	if((x < 0) ||(x >= _width) || (y < 0) || (y >= _height)) return;
 8000de6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	db22      	blt.n	8000e34 <lcd7735_drawPixel+0x60>
 8000dee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000df2:	4a12      	ldr	r2, [pc, #72]	; (8000e3c <lcd7735_drawPixel+0x68>)
 8000df4:	8812      	ldrh	r2, [r2, #0]
 8000df6:	4293      	cmp	r3, r2
 8000df8:	da1c      	bge.n	8000e34 <lcd7735_drawPixel+0x60>
 8000dfa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	db18      	blt.n	8000e34 <lcd7735_drawPixel+0x60>
 8000e02:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e06:	4a0e      	ldr	r2, [pc, #56]	; (8000e40 <lcd7735_drawPixel+0x6c>)
 8000e08:	8812      	ldrh	r2, [r2, #0]
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	da12      	bge.n	8000e34 <lcd7735_drawPixel+0x60>

	lcd7735_setAddrWindow(x,y,x+1,y+1);
 8000e0e:	88fb      	ldrh	r3, [r7, #6]
 8000e10:	b2d8      	uxtb	r0, r3
 8000e12:	88bb      	ldrh	r3, [r7, #4]
 8000e14:	b2d9      	uxtb	r1, r3
 8000e16:	88fb      	ldrh	r3, [r7, #6]
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	b2da      	uxtb	r2, r3
 8000e1e:	88bb      	ldrh	r3, [r7, #4]
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	3301      	adds	r3, #1
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	f7ff ff69 	bl	8000cfc <lcd7735_setAddrWindow>
	lcd7735_pushColor(color);
 8000e2a:	887b      	ldrh	r3, [r7, #2]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff ffb5 	bl	8000d9c <lcd7735_pushColor>
 8000e32:	e000      	b.n	8000e36 <lcd7735_drawPixel+0x62>
	if((x < 0) ||(x >= _width) || (y < 0) || (y >= _height)) return;
 8000e34:	bf00      	nop
}
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	20000000 	.word	0x20000000
 8000e40:	20000002 	.word	0x20000002

08000e44 <lcd7735_fillRect>:

// fill a rectangle
void lcd7735_fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {	
 8000e44:	b590      	push	{r4, r7, lr}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4604      	mov	r4, r0
 8000e4c:	4608      	mov	r0, r1
 8000e4e:	4611      	mov	r1, r2
 8000e50:	461a      	mov	r2, r3
 8000e52:	4623      	mov	r3, r4
 8000e54:	80fb      	strh	r3, [r7, #6]
 8000e56:	4603      	mov	r3, r0
 8000e58:	80bb      	strh	r3, [r7, #4]
 8000e5a:	460b      	mov	r3, r1
 8000e5c:	807b      	strh	r3, [r7, #2]
 8000e5e:	4613      	mov	r3, r2
 8000e60:	803b      	strh	r3, [r7, #0]
	// rudimentary clipping (drawChar w/big text requires this)
	if((x >= _width) || (y >= _height)) return;
 8000e62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e66:	4a37      	ldr	r2, [pc, #220]	; (8000f44 <lcd7735_fillRect+0x100>)
 8000e68:	8812      	ldrh	r2, [r2, #0]
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	da65      	bge.n	8000f3a <lcd7735_fillRect+0xf6>
 8000e6e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e72:	4a35      	ldr	r2, [pc, #212]	; (8000f48 <lcd7735_fillRect+0x104>)
 8000e74:	8812      	ldrh	r2, [r2, #0]
 8000e76:	4293      	cmp	r3, r2
 8000e78:	da5f      	bge.n	8000f3a <lcd7735_fillRect+0xf6>
	if((x + w - 1) >= _width)  w = _width  - x;
 8000e7a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000e7e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000e82:	4413      	add	r3, r2
 8000e84:	4a2f      	ldr	r2, [pc, #188]	; (8000f44 <lcd7735_fillRect+0x100>)
 8000e86:	8812      	ldrh	r2, [r2, #0]
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	dd05      	ble.n	8000e98 <lcd7735_fillRect+0x54>
 8000e8c:	4b2d      	ldr	r3, [pc, #180]	; (8000f44 <lcd7735_fillRect+0x100>)
 8000e8e:	881a      	ldrh	r2, [r3, #0]
 8000e90:	88fb      	ldrh	r3, [r7, #6]
 8000e92:	1ad3      	subs	r3, r2, r3
 8000e94:	b29b      	uxth	r3, r3
 8000e96:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= _height) h = _height - y;
 8000e98:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000e9c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	4a29      	ldr	r2, [pc, #164]	; (8000f48 <lcd7735_fillRect+0x104>)
 8000ea4:	8812      	ldrh	r2, [r2, #0]
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	dd05      	ble.n	8000eb6 <lcd7735_fillRect+0x72>
 8000eaa:	4b27      	ldr	r3, [pc, #156]	; (8000f48 <lcd7735_fillRect+0x104>)
 8000eac:	881a      	ldrh	r2, [r3, #0]
 8000eae:	88bb      	ldrh	r3, [r7, #4]
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	803b      	strh	r3, [r7, #0]

	lcd7735_setAddrWindow(x, y, x+w-1, y+h-1);
 8000eb6:	88fb      	ldrh	r3, [r7, #6]
 8000eb8:	b2d8      	uxtb	r0, r3
 8000eba:	88bb      	ldrh	r3, [r7, #4]
 8000ebc:	b2d9      	uxtb	r1, r3
 8000ebe:	88fb      	ldrh	r3, [r7, #6]
 8000ec0:	b2da      	uxtb	r2, r3
 8000ec2:	887b      	ldrh	r3, [r7, #2]
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	4413      	add	r3, r2
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	b2dc      	uxtb	r4, r3
 8000ece:	88bb      	ldrh	r3, [r7, #4]
 8000ed0:	b2da      	uxtb	r2, r3
 8000ed2:	883b      	ldrh	r3, [r7, #0]
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	4413      	add	r3, r2
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	3b01      	subs	r3, #1
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	4622      	mov	r2, r4
 8000ee0:	f7ff ff0c 	bl	8000cfc <lcd7735_setAddrWindow>

	ST7735_DC1;
 8000ee4:	2107      	movs	r1, #7
 8000ee6:	4819      	ldr	r0, [pc, #100]	; (8000f4c <lcd7735_fillRect+0x108>)
 8000ee8:	f001 fe9b 	bl	8002c22 <gpioSetPin>
	for(y=h; y>0; y--) {
 8000eec:	883b      	ldrh	r3, [r7, #0]
 8000eee:	80bb      	strh	r3, [r7, #4]
 8000ef0:	e01e      	b.n	8000f30 <lcd7735_fillRect+0xec>
		for(x=w; x>0; x--) {
 8000ef2:	887b      	ldrh	r3, [r7, #2]
 8000ef4:	80fb      	strh	r3, [r7, #6]
 8000ef6:	e011      	b.n	8000f1c <lcd7735_fillRect+0xd8>
			putpix(color);
 8000ef8:	8b3b      	ldrh	r3, [r7, #24]
 8000efa:	0a1b      	lsrs	r3, r3, #8
 8000efc:	b29b      	uxth	r3, r3
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	4618      	mov	r0, r3
 8000f02:	f001 f8bb 	bl	800207c <lcd7735_senddata>
 8000f06:	8b3b      	ldrh	r3, [r7, #24]
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f001 f8b6 	bl	800207c <lcd7735_senddata>
		for(x=w; x>0; x--) {
 8000f10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f14:	b29b      	uxth	r3, r3
 8000f16:	3b01      	subs	r3, #1
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	80fb      	strh	r3, [r7, #6]
 8000f1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	dce9      	bgt.n	8000ef8 <lcd7735_fillRect+0xb4>
	for(y=h; y>0; y--) {
 8000f24:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	b29b      	uxth	r3, r3
 8000f2e:	80bb      	strh	r3, [r7, #4]
 8000f30:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	dcdc      	bgt.n	8000ef2 <lcd7735_fillRect+0xae>
 8000f38:	e000      	b.n	8000f3c <lcd7735_fillRect+0xf8>
	if((x >= _width) || (y >= _height)) return;
 8000f3a:	bf00      	nop
		}
	}
}
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd90      	pop	{r4, r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20000000 	.word	0x20000000
 8000f48:	20000002 	.word	0x20000002
 8000f4c:	40020800 	.word	0x40020800

08000f50 <lcd7735_drawFastVLine>:
//
// for optimize code size if graphics features not need
//
#ifndef ONLY_TERMINAL_EMULATOR

void lcd7735_drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 8000f50:	b590      	push	{r4, r7, lr}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4604      	mov	r4, r0
 8000f58:	4608      	mov	r0, r1
 8000f5a:	4611      	mov	r1, r2
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	4623      	mov	r3, r4
 8000f60:	80fb      	strh	r3, [r7, #6]
 8000f62:	4603      	mov	r3, r0
 8000f64:	80bb      	strh	r3, [r7, #4]
 8000f66:	460b      	mov	r3, r1
 8000f68:	807b      	strh	r3, [r7, #2]
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	803b      	strh	r3, [r7, #0]
	// Rudimentary clipping
	if((x >= _width) || (y >= _height)) return;
 8000f6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f72:	4a24      	ldr	r2, [pc, #144]	; (8001004 <lcd7735_drawFastVLine+0xb4>)
 8000f74:	8812      	ldrh	r2, [r2, #0]
 8000f76:	4293      	cmp	r3, r2
 8000f78:	da3f      	bge.n	8000ffa <lcd7735_drawFastVLine+0xaa>
 8000f7a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f7e:	4a22      	ldr	r2, [pc, #136]	; (8001008 <lcd7735_drawFastVLine+0xb8>)
 8000f80:	8812      	ldrh	r2, [r2, #0]
 8000f82:	4293      	cmp	r3, r2
 8000f84:	da39      	bge.n	8000ffa <lcd7735_drawFastVLine+0xaa>
	if((y+h-1) >= _height) h = _height-y;
 8000f86:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000f8a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000f8e:	4413      	add	r3, r2
 8000f90:	4a1d      	ldr	r2, [pc, #116]	; (8001008 <lcd7735_drawFastVLine+0xb8>)
 8000f92:	8812      	ldrh	r2, [r2, #0]
 8000f94:	4293      	cmp	r3, r2
 8000f96:	dd05      	ble.n	8000fa4 <lcd7735_drawFastVLine+0x54>
 8000f98:	4b1b      	ldr	r3, [pc, #108]	; (8001008 <lcd7735_drawFastVLine+0xb8>)
 8000f9a:	881a      	ldrh	r2, [r3, #0]
 8000f9c:	88bb      	ldrh	r3, [r7, #4]
 8000f9e:	1ad3      	subs	r3, r2, r3
 8000fa0:	b29b      	uxth	r3, r3
 8000fa2:	807b      	strh	r3, [r7, #2]
	lcd7735_setAddrWindow(x, y, x, y+h-1);
 8000fa4:	88fb      	ldrh	r3, [r7, #6]
 8000fa6:	b2d8      	uxtb	r0, r3
 8000fa8:	88bb      	ldrh	r3, [r7, #4]
 8000faa:	b2d9      	uxtb	r1, r3
 8000fac:	88fb      	ldrh	r3, [r7, #6]
 8000fae:	b2dc      	uxtb	r4, r3
 8000fb0:	88bb      	ldrh	r3, [r7, #4]
 8000fb2:	b2da      	uxtb	r2, r3
 8000fb4:	887b      	ldrh	r3, [r7, #2]
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	4413      	add	r3, r2
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	3b01      	subs	r3, #1
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	4622      	mov	r2, r4
 8000fc2:	f7ff fe9b 	bl	8000cfc <lcd7735_setAddrWindow>

	ST7735_DC1;
 8000fc6:	2107      	movs	r1, #7
 8000fc8:	4810      	ldr	r0, [pc, #64]	; (800100c <lcd7735_drawFastVLine+0xbc>)
 8000fca:	f001 fe2a 	bl	8002c22 <gpioSetPin>
	while (h--) {
 8000fce:	e00b      	b.n	8000fe8 <lcd7735_drawFastVLine+0x98>
		putpix(color);
 8000fd0:	883b      	ldrh	r3, [r7, #0]
 8000fd2:	0a1b      	lsrs	r3, r3, #8
 8000fd4:	b29b      	uxth	r3, r3
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f001 f84f 	bl	800207c <lcd7735_senddata>
 8000fde:	883b      	ldrh	r3, [r7, #0]
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f001 f84a 	bl	800207c <lcd7735_senddata>
	while (h--) {
 8000fe8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000fec:	b29a      	uxth	r2, r3
 8000fee:	3a01      	subs	r2, #1
 8000ff0:	b292      	uxth	r2, r2
 8000ff2:	807a      	strh	r2, [r7, #2]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d1eb      	bne.n	8000fd0 <lcd7735_drawFastVLine+0x80>
 8000ff8:	e000      	b.n	8000ffc <lcd7735_drawFastVLine+0xac>
	if((x >= _width) || (y >= _height)) return;
 8000ffa:	bf00      	nop
	}
}
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd90      	pop	{r4, r7, pc}
 8001002:	bf00      	nop
 8001004:	20000000 	.word	0x20000000
 8001008:	20000002 	.word	0x20000002
 800100c:	40020800 	.word	0x40020800

08001010 <lcd7735_drawFastHLine>:

void lcd7735_drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
 8001010:	b590      	push	{r4, r7, lr}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	4604      	mov	r4, r0
 8001018:	4608      	mov	r0, r1
 800101a:	4611      	mov	r1, r2
 800101c:	461a      	mov	r2, r3
 800101e:	4623      	mov	r3, r4
 8001020:	80fb      	strh	r3, [r7, #6]
 8001022:	4603      	mov	r3, r0
 8001024:	80bb      	strh	r3, [r7, #4]
 8001026:	460b      	mov	r3, r1
 8001028:	807b      	strh	r3, [r7, #2]
 800102a:	4613      	mov	r3, r2
 800102c:	803b      	strh	r3, [r7, #0]
	// Rudimentary clipping
	if((x >= _width) || (y >= _height)) return;
 800102e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001032:	4a23      	ldr	r2, [pc, #140]	; (80010c0 <lcd7735_drawFastHLine+0xb0>)
 8001034:	8812      	ldrh	r2, [r2, #0]
 8001036:	4293      	cmp	r3, r2
 8001038:	da3e      	bge.n	80010b8 <lcd7735_drawFastHLine+0xa8>
 800103a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800103e:	4a21      	ldr	r2, [pc, #132]	; (80010c4 <lcd7735_drawFastHLine+0xb4>)
 8001040:	8812      	ldrh	r2, [r2, #0]
 8001042:	4293      	cmp	r3, r2
 8001044:	da38      	bge.n	80010b8 <lcd7735_drawFastHLine+0xa8>
	if((x+w-1) >= _width)  w = _width-x;
 8001046:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800104a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800104e:	4413      	add	r3, r2
 8001050:	4a1b      	ldr	r2, [pc, #108]	; (80010c0 <lcd7735_drawFastHLine+0xb0>)
 8001052:	8812      	ldrh	r2, [r2, #0]
 8001054:	4293      	cmp	r3, r2
 8001056:	dd05      	ble.n	8001064 <lcd7735_drawFastHLine+0x54>
 8001058:	4b19      	ldr	r3, [pc, #100]	; (80010c0 <lcd7735_drawFastHLine+0xb0>)
 800105a:	881a      	ldrh	r2, [r3, #0]
 800105c:	88fb      	ldrh	r3, [r7, #6]
 800105e:	1ad3      	subs	r3, r2, r3
 8001060:	b29b      	uxth	r3, r3
 8001062:	807b      	strh	r3, [r7, #2]
	lcd7735_setAddrWindow(x, y, x+w-1, y);
 8001064:	88fb      	ldrh	r3, [r7, #6]
 8001066:	b2d8      	uxtb	r0, r3
 8001068:	88bb      	ldrh	r3, [r7, #4]
 800106a:	b2d9      	uxtb	r1, r3
 800106c:	88fb      	ldrh	r3, [r7, #6]
 800106e:	b2da      	uxtb	r2, r3
 8001070:	887b      	ldrh	r3, [r7, #2]
 8001072:	b2db      	uxtb	r3, r3
 8001074:	4413      	add	r3, r2
 8001076:	b2db      	uxtb	r3, r3
 8001078:	3b01      	subs	r3, #1
 800107a:	b2da      	uxtb	r2, r3
 800107c:	88bb      	ldrh	r3, [r7, #4]
 800107e:	b2db      	uxtb	r3, r3
 8001080:	f7ff fe3c 	bl	8000cfc <lcd7735_setAddrWindow>

	ST7735_DC1;
 8001084:	2107      	movs	r1, #7
 8001086:	4810      	ldr	r0, [pc, #64]	; (80010c8 <lcd7735_drawFastHLine+0xb8>)
 8001088:	f001 fdcb 	bl	8002c22 <gpioSetPin>
	while (w--) {
 800108c:	e00b      	b.n	80010a6 <lcd7735_drawFastHLine+0x96>
		putpix(color);
 800108e:	883b      	ldrh	r3, [r7, #0]
 8001090:	0a1b      	lsrs	r3, r3, #8
 8001092:	b29b      	uxth	r3, r3
 8001094:	b2db      	uxtb	r3, r3
 8001096:	4618      	mov	r0, r3
 8001098:	f000 fff0 	bl	800207c <lcd7735_senddata>
 800109c:	883b      	ldrh	r3, [r7, #0]
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	4618      	mov	r0, r3
 80010a2:	f000 ffeb 	bl	800207c <lcd7735_senddata>
	while (w--) {
 80010a6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80010aa:	b29a      	uxth	r2, r3
 80010ac:	3a01      	subs	r2, #1
 80010ae:	b292      	uxth	r2, r2
 80010b0:	807a      	strh	r2, [r7, #2]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d1eb      	bne.n	800108e <lcd7735_drawFastHLine+0x7e>
 80010b6:	e000      	b.n	80010ba <lcd7735_drawFastHLine+0xaa>
	if((x >= _width) || (y >= _height)) return;
 80010b8:	bf00      	nop
	}
}
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd90      	pop	{r4, r7, pc}
 80010c0:	20000000 	.word	0x20000000
 80010c4:	20000002 	.word	0x20000002
 80010c8:	40020800 	.word	0x40020800

080010cc <lcd7735_drawFastLine>:

void lcd7735_drawFastLine(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, uint16_t color) {
 80010cc:	b590      	push	{r4, r7, lr}
 80010ce:	b089      	sub	sp, #36	; 0x24
 80010d0:	af02      	add	r7, sp, #8
 80010d2:	4604      	mov	r4, r0
 80010d4:	4608      	mov	r0, r1
 80010d6:	4611      	mov	r1, r2
 80010d8:	461a      	mov	r2, r3
 80010da:	4623      	mov	r3, r4
 80010dc:	71fb      	strb	r3, [r7, #7]
 80010de:	4603      	mov	r3, r0
 80010e0:	71bb      	strb	r3, [r7, #6]
 80010e2:	460b      	mov	r3, r1
 80010e4:	717b      	strb	r3, [r7, #5]
 80010e6:	4613      	mov	r3, r2
 80010e8:	713b      	strb	r3, [r7, #4]
	signed char   dx, dy, sx, sy;
	unsigned char  x,  y, mdx, mdy, l;

	if (x1==x2) {
 80010ea:	79fa      	ldrb	r2, [r7, #7]
 80010ec:	797b      	ldrb	r3, [r7, #5]
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d10d      	bne.n	800110e <lcd7735_drawFastLine+0x42>
		lcd7735_fillRect(x1,y1, x1,y2, color);
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	b218      	sxth	r0, r3
 80010f6:	79bb      	ldrb	r3, [r7, #6]
 80010f8:	b219      	sxth	r1, r3
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	b21a      	sxth	r2, r3
 80010fe:	793b      	ldrb	r3, [r7, #4]
 8001100:	b21c      	sxth	r4, r3
 8001102:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001104:	9300      	str	r3, [sp, #0]
 8001106:	4623      	mov	r3, r4
 8001108:	f7ff fe9c 	bl	8000e44 <lcd7735_fillRect>
		return;
 800110c:	e0b2      	b.n	8001274 <lcd7735_drawFastLine+0x1a8>
	}

	if (y1==y2) {
 800110e:	79ba      	ldrb	r2, [r7, #6]
 8001110:	793b      	ldrb	r3, [r7, #4]
 8001112:	429a      	cmp	r2, r3
 8001114:	d10d      	bne.n	8001132 <lcd7735_drawFastLine+0x66>
		lcd7735_fillRect(x1,y1, x2,y1, color);
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	b218      	sxth	r0, r3
 800111a:	79bb      	ldrb	r3, [r7, #6]
 800111c:	b219      	sxth	r1, r3
 800111e:	797b      	ldrb	r3, [r7, #5]
 8001120:	b21a      	sxth	r2, r3
 8001122:	79bb      	ldrb	r3, [r7, #6]
 8001124:	b21c      	sxth	r4, r3
 8001126:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001128:	9300      	str	r3, [sp, #0]
 800112a:	4623      	mov	r3, r4
 800112c:	f7ff fe8a 	bl	8000e44 <lcd7735_fillRect>
		return;
 8001130:	e0a0      	b.n	8001274 <lcd7735_drawFastLine+0x1a8>
	}

	dx=x2-x1; dy=y2-y1;
 8001132:	797a      	ldrb	r2, [r7, #5]
 8001134:	79fb      	ldrb	r3, [r7, #7]
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	b2db      	uxtb	r3, r3
 800113a:	743b      	strb	r3, [r7, #16]
 800113c:	793a      	ldrb	r2, [r7, #4]
 800113e:	79bb      	ldrb	r3, [r7, #6]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	b2db      	uxtb	r3, r3
 8001144:	73fb      	strb	r3, [r7, #15]

	if (dx>=0) { mdx=dx; sx=1; } else { mdx=x1-x2; sx=-1; }
 8001146:	f997 3010 	ldrsb.w	r3, [r7, #16]
 800114a:	2b00      	cmp	r3, #0
 800114c:	db04      	blt.n	8001158 <lcd7735_drawFastLine+0x8c>
 800114e:	7c3b      	ldrb	r3, [r7, #16]
 8001150:	74fb      	strb	r3, [r7, #19]
 8001152:	2301      	movs	r3, #1
 8001154:	75fb      	strb	r3, [r7, #23]
 8001156:	e005      	b.n	8001164 <lcd7735_drawFastLine+0x98>
 8001158:	79fa      	ldrb	r2, [r7, #7]
 800115a:	797b      	ldrb	r3, [r7, #5]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	74fb      	strb	r3, [r7, #19]
 8001160:	23ff      	movs	r3, #255	; 0xff
 8001162:	75fb      	strb	r3, [r7, #23]
	if (dy>=0) { mdy=dy; sy=1; } else { mdy=y1-y2; sy=-1; }
 8001164:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001168:	2b00      	cmp	r3, #0
 800116a:	db04      	blt.n	8001176 <lcd7735_drawFastLine+0xaa>
 800116c:	7bfb      	ldrb	r3, [r7, #15]
 800116e:	74bb      	strb	r3, [r7, #18]
 8001170:	2301      	movs	r3, #1
 8001172:	75bb      	strb	r3, [r7, #22]
 8001174:	e005      	b.n	8001182 <lcd7735_drawFastLine+0xb6>
 8001176:	79ba      	ldrb	r2, [r7, #6]
 8001178:	793b      	ldrb	r3, [r7, #4]
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	74bb      	strb	r3, [r7, #18]
 800117e:	23ff      	movs	r3, #255	; 0xff
 8001180:	75bb      	strb	r3, [r7, #22]

	x=x1; y=y1;
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	757b      	strb	r3, [r7, #21]
 8001186:	79bb      	ldrb	r3, [r7, #6]
 8001188:	753b      	strb	r3, [r7, #20]

	if (mdx>=mdy) {
 800118a:	7cfa      	ldrb	r2, [r7, #19]
 800118c:	7cbb      	ldrb	r3, [r7, #18]
 800118e:	429a      	cmp	r2, r3
 8001190:	d334      	bcc.n	80011fc <lcd7735_drawFastLine+0x130>
		l=mdx;
 8001192:	7cfb      	ldrb	r3, [r7, #19]
 8001194:	747b      	strb	r3, [r7, #17]
		while (l>0) {
 8001196:	e02d      	b.n	80011f4 <lcd7735_drawFastLine+0x128>
			if (dy>0) { y=y1+mdy*(x-x1)/mdx; }
 8001198:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800119c:	2b00      	cmp	r3, #0
 800119e:	dd0d      	ble.n	80011bc <lcd7735_drawFastLine+0xf0>
 80011a0:	7cbb      	ldrb	r3, [r7, #18]
 80011a2:	7d79      	ldrb	r1, [r7, #21]
 80011a4:	79fa      	ldrb	r2, [r7, #7]
 80011a6:	1a8a      	subs	r2, r1, r2
 80011a8:	fb03 f202 	mul.w	r2, r3, r2
 80011ac:	7cfb      	ldrb	r3, [r7, #19]
 80011ae:	fb92 f3f3 	sdiv	r3, r2, r3
 80011b2:	b2da      	uxtb	r2, r3
 80011b4:	79bb      	ldrb	r3, [r7, #6]
 80011b6:	4413      	add	r3, r2
 80011b8:	753b      	strb	r3, [r7, #20]
 80011ba:	e00c      	b.n	80011d6 <lcd7735_drawFastLine+0x10a>
			else { y=y1-mdy*(x-x1)/mdx; }
 80011bc:	7cbb      	ldrb	r3, [r7, #18]
 80011be:	7d79      	ldrb	r1, [r7, #21]
 80011c0:	79fa      	ldrb	r2, [r7, #7]
 80011c2:	1a8a      	subs	r2, r1, r2
 80011c4:	fb03 f202 	mul.w	r2, r3, r2
 80011c8:	7cfb      	ldrb	r3, [r7, #19]
 80011ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	79ba      	ldrb	r2, [r7, #6]
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	753b      	strb	r3, [r7, #20]
			lcd7735_drawPixel(x,y,color);
 80011d6:	7d7b      	ldrb	r3, [r7, #21]
 80011d8:	b21b      	sxth	r3, r3
 80011da:	7d3a      	ldrb	r2, [r7, #20]
 80011dc:	b211      	sxth	r1, r2
 80011de:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff fdf7 	bl	8000dd4 <lcd7735_drawPixel>
			x=x+sx;
 80011e6:	7dfa      	ldrb	r2, [r7, #23]
 80011e8:	7d7b      	ldrb	r3, [r7, #21]
 80011ea:	4413      	add	r3, r2
 80011ec:	757b      	strb	r3, [r7, #21]
			l--;
 80011ee:	7c7b      	ldrb	r3, [r7, #17]
 80011f0:	3b01      	subs	r3, #1
 80011f2:	747b      	strb	r3, [r7, #17]
		while (l>0) {
 80011f4:	7c7b      	ldrb	r3, [r7, #17]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d1ce      	bne.n	8001198 <lcd7735_drawFastLine+0xcc>
 80011fa:	e033      	b.n	8001264 <lcd7735_drawFastLine+0x198>
		}
	} else {
		l=mdy;
 80011fc:	7cbb      	ldrb	r3, [r7, #18]
 80011fe:	747b      	strb	r3, [r7, #17]
		while (l>0) {
 8001200:	e02d      	b.n	800125e <lcd7735_drawFastLine+0x192>
			if (dy>0) { x=x1+((mdx*(y-y1))/mdy); }
 8001202:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001206:	2b00      	cmp	r3, #0
 8001208:	dd0d      	ble.n	8001226 <lcd7735_drawFastLine+0x15a>
 800120a:	7cfb      	ldrb	r3, [r7, #19]
 800120c:	7d39      	ldrb	r1, [r7, #20]
 800120e:	79ba      	ldrb	r2, [r7, #6]
 8001210:	1a8a      	subs	r2, r1, r2
 8001212:	fb03 f202 	mul.w	r2, r3, r2
 8001216:	7cbb      	ldrb	r3, [r7, #18]
 8001218:	fb92 f3f3 	sdiv	r3, r2, r3
 800121c:	b2da      	uxtb	r2, r3
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	4413      	add	r3, r2
 8001222:	757b      	strb	r3, [r7, #21]
 8001224:	e00c      	b.n	8001240 <lcd7735_drawFastLine+0x174>
			else { x=x1+((mdx*(y1-y))/mdy); }
 8001226:	7cfb      	ldrb	r3, [r7, #19]
 8001228:	79b9      	ldrb	r1, [r7, #6]
 800122a:	7d3a      	ldrb	r2, [r7, #20]
 800122c:	1a8a      	subs	r2, r1, r2
 800122e:	fb03 f202 	mul.w	r2, r3, r2
 8001232:	7cbb      	ldrb	r3, [r7, #18]
 8001234:	fb92 f3f3 	sdiv	r3, r2, r3
 8001238:	b2da      	uxtb	r2, r3
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	4413      	add	r3, r2
 800123e:	757b      	strb	r3, [r7, #21]
			lcd7735_drawPixel(x,y,color);
 8001240:	7d7b      	ldrb	r3, [r7, #21]
 8001242:	b21b      	sxth	r3, r3
 8001244:	7d3a      	ldrb	r2, [r7, #20]
 8001246:	b211      	sxth	r1, r2
 8001248:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff fdc2 	bl	8000dd4 <lcd7735_drawPixel>
			y=y+sy;
 8001250:	7dba      	ldrb	r2, [r7, #22]
 8001252:	7d3b      	ldrb	r3, [r7, #20]
 8001254:	4413      	add	r3, r2
 8001256:	753b      	strb	r3, [r7, #20]
			l--;
 8001258:	7c7b      	ldrb	r3, [r7, #17]
 800125a:	3b01      	subs	r3, #1
 800125c:	747b      	strb	r3, [r7, #17]
		while (l>0) {
 800125e:	7c7b      	ldrb	r3, [r7, #17]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d1ce      	bne.n	8001202 <lcd7735_drawFastLine+0x136>
		}
	}
	lcd7735_drawPixel(x2, y2, color);
 8001264:	797b      	ldrb	r3, [r7, #5]
 8001266:	b21b      	sxth	r3, r3
 8001268:	793a      	ldrb	r2, [r7, #4]
 800126a:	b211      	sxth	r1, r2
 800126c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff fdb0 	bl	8000dd4 <lcd7735_drawPixel>
}
 8001274:	371c      	adds	r7, #28
 8001276:	46bd      	mov	sp, r7
 8001278:	bd90      	pop	{r4, r7, pc}

0800127a <lcd7735_drawRect>:

void lcd7735_drawRect(uint8_t x1,uint8_t y1,uint8_t x2,uint8_t y2, uint16_t color) {
 800127a:	b590      	push	{r4, r7, lr}
 800127c:	b083      	sub	sp, #12
 800127e:	af00      	add	r7, sp, #0
 8001280:	4604      	mov	r4, r0
 8001282:	4608      	mov	r0, r1
 8001284:	4611      	mov	r1, r2
 8001286:	461a      	mov	r2, r3
 8001288:	4623      	mov	r3, r4
 800128a:	71fb      	strb	r3, [r7, #7]
 800128c:	4603      	mov	r3, r0
 800128e:	71bb      	strb	r3, [r7, #6]
 8001290:	460b      	mov	r3, r1
 8001292:	717b      	strb	r3, [r7, #5]
 8001294:	4613      	mov	r3, r2
 8001296:	713b      	strb	r3, [r7, #4]
	lcd7735_drawFastHLine(x1,y1,x2-x1, color);
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	b218      	sxth	r0, r3
 800129c:	79bb      	ldrb	r3, [r7, #6]
 800129e:	b219      	sxth	r1, r3
 80012a0:	797b      	ldrb	r3, [r7, #5]
 80012a2:	b29a      	uxth	r2, r3
 80012a4:	79fb      	ldrb	r3, [r7, #7]
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	b21a      	sxth	r2, r3
 80012ae:	8b3b      	ldrh	r3, [r7, #24]
 80012b0:	f7ff feae 	bl	8001010 <lcd7735_drawFastHLine>
	lcd7735_drawFastVLine(x2,y1,y2-y1, color);
 80012b4:	797b      	ldrb	r3, [r7, #5]
 80012b6:	b218      	sxth	r0, r3
 80012b8:	79bb      	ldrb	r3, [r7, #6]
 80012ba:	b219      	sxth	r1, r3
 80012bc:	793b      	ldrb	r3, [r7, #4]
 80012be:	b29a      	uxth	r2, r3
 80012c0:	79bb      	ldrb	r3, [r7, #6]
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	b21a      	sxth	r2, r3
 80012ca:	8b3b      	ldrh	r3, [r7, #24]
 80012cc:	f7ff fe40 	bl	8000f50 <lcd7735_drawFastVLine>
	lcd7735_drawFastHLine(x1,y2,x2-x1, color);
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	b218      	sxth	r0, r3
 80012d4:	793b      	ldrb	r3, [r7, #4]
 80012d6:	b219      	sxth	r1, r3
 80012d8:	797b      	ldrb	r3, [r7, #5]
 80012da:	b29a      	uxth	r2, r3
 80012dc:	79fb      	ldrb	r3, [r7, #7]
 80012de:	b29b      	uxth	r3, r3
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	b21a      	sxth	r2, r3
 80012e6:	8b3b      	ldrh	r3, [r7, #24]
 80012e8:	f7ff fe92 	bl	8001010 <lcd7735_drawFastHLine>
	lcd7735_drawFastVLine(x1,y1,y2-y1, color);
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	b218      	sxth	r0, r3
 80012f0:	79bb      	ldrb	r3, [r7, #6]
 80012f2:	b219      	sxth	r1, r3
 80012f4:	793b      	ldrb	r3, [r7, #4]
 80012f6:	b29a      	uxth	r2, r3
 80012f8:	79bb      	ldrb	r3, [r7, #6]
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	b29b      	uxth	r3, r3
 8001300:	b21a      	sxth	r2, r3
 8001302:	8b3b      	ldrh	r3, [r7, #24]
 8001304:	f7ff fe24 	bl	8000f50 <lcd7735_drawFastVLine>
}
 8001308:	bf00      	nop
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	bd90      	pop	{r4, r7, pc}

08001310 <lcd7735_drawCircle>:

void lcd7735_drawCircle(int16_t x, int16_t y, int radius, uint16_t color) {
 8001310:	b590      	push	{r4, r7, lr}
 8001312:	b08b      	sub	sp, #44	; 0x2c
 8001314:	af00      	add	r7, sp, #0
 8001316:	60ba      	str	r2, [r7, #8]
 8001318:	461a      	mov	r2, r3
 800131a:	4603      	mov	r3, r0
 800131c:	81fb      	strh	r3, [r7, #14]
 800131e:	460b      	mov	r3, r1
 8001320:	81bb      	strh	r3, [r7, #12]
 8001322:	4613      	mov	r3, r2
 8001324:	80fb      	strh	r3, [r7, #6]
	int f = 1 - radius;
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	f1c3 0301 	rsb	r3, r3, #1
 800132c:	627b      	str	r3, [r7, #36]	; 0x24
	int ddF_x = 1;
 800132e:	2301      	movs	r3, #1
 8001330:	623b      	str	r3, [r7, #32]
	int ddF_y = -2 * radius;
 8001332:	68ba      	ldr	r2, [r7, #8]
 8001334:	4613      	mov	r3, r2
 8001336:	07db      	lsls	r3, r3, #31
 8001338:	1a9b      	subs	r3, r3, r2
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	61fb      	str	r3, [r7, #28]
	int x1 = 0;
 800133e:	2300      	movs	r3, #0
 8001340:	61bb      	str	r3, [r7, #24]
	int y1 = radius;
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	617b      	str	r3, [r7, #20]

	lcd7735_setAddrWindow(x, y + radius, x, y + radius);
 8001346:	89fb      	ldrh	r3, [r7, #14]
 8001348:	b2d8      	uxtb	r0, r3
 800134a:	89bb      	ldrh	r3, [r7, #12]
 800134c:	b2da      	uxtb	r2, r3
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	b2db      	uxtb	r3, r3
 8001352:	4413      	add	r3, r2
 8001354:	b2d9      	uxtb	r1, r3
 8001356:	89fb      	ldrh	r3, [r7, #14]
 8001358:	b2dc      	uxtb	r4, r3
 800135a:	89bb      	ldrh	r3, [r7, #12]
 800135c:	b2da      	uxtb	r2, r3
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	b2db      	uxtb	r3, r3
 8001362:	4413      	add	r3, r2
 8001364:	b2db      	uxtb	r3, r3
 8001366:	4622      	mov	r2, r4
 8001368:	f7ff fcc8 	bl	8000cfc <lcd7735_setAddrWindow>
	lcd7735_pushColor(color);
 800136c:	88fb      	ldrh	r3, [r7, #6]
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff fd14 	bl	8000d9c <lcd7735_pushColor>
	lcd7735_setAddrWindow(x, y - radius, x, y - radius);
 8001374:	89fb      	ldrh	r3, [r7, #14]
 8001376:	b2d8      	uxtb	r0, r3
 8001378:	89bb      	ldrh	r3, [r7, #12]
 800137a:	b2da      	uxtb	r2, r3
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	b2db      	uxtb	r3, r3
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	b2d9      	uxtb	r1, r3
 8001384:	89fb      	ldrh	r3, [r7, #14]
 8001386:	b2dc      	uxtb	r4, r3
 8001388:	89bb      	ldrh	r3, [r7, #12]
 800138a:	b2da      	uxtb	r2, r3
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	b2db      	uxtb	r3, r3
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	b2db      	uxtb	r3, r3
 8001394:	4622      	mov	r2, r4
 8001396:	f7ff fcb1 	bl	8000cfc <lcd7735_setAddrWindow>
	lcd7735_pushColor(color);
 800139a:	88fb      	ldrh	r3, [r7, #6]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff fcfd 	bl	8000d9c <lcd7735_pushColor>
	lcd7735_setAddrWindow(x + radius, y, x + radius, y);
 80013a2:	89fb      	ldrh	r3, [r7, #14]
 80013a4:	b2da      	uxtb	r2, r3
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	4413      	add	r3, r2
 80013ac:	b2d8      	uxtb	r0, r3
 80013ae:	89bb      	ldrh	r3, [r7, #12]
 80013b0:	b2d9      	uxtb	r1, r3
 80013b2:	89fb      	ldrh	r3, [r7, #14]
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	4413      	add	r3, r2
 80013bc:	b2da      	uxtb	r2, r3
 80013be:	89bb      	ldrh	r3, [r7, #12]
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	f7ff fc9b 	bl	8000cfc <lcd7735_setAddrWindow>
	lcd7735_pushColor(color);
 80013c6:	88fb      	ldrh	r3, [r7, #6]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff fce7 	bl	8000d9c <lcd7735_pushColor>
	lcd7735_setAddrWindow(x - radius, y, x - radius, y);
 80013ce:	89fb      	ldrh	r3, [r7, #14]
 80013d0:	b2da      	uxtb	r2, r3
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	b2d8      	uxtb	r0, r3
 80013da:	89bb      	ldrh	r3, [r7, #12]
 80013dc:	b2d9      	uxtb	r1, r3
 80013de:	89fb      	ldrh	r3, [r7, #14]
 80013e0:	b2da      	uxtb	r2, r3
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	89bb      	ldrh	r3, [r7, #12]
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	f7ff fc85 	bl	8000cfc <lcd7735_setAddrWindow>
	lcd7735_pushColor(color);
 80013f2:	88fb      	ldrh	r3, [r7, #6]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff fcd1 	bl	8000d9c <lcd7735_pushColor>
	while(x1 < y1) {
 80013fa:	e10e      	b.n	800161a <lcd7735_drawCircle+0x30a>
		if(f >= 0) 
 80013fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fe:	2b00      	cmp	r3, #0
 8001400:	db09      	blt.n	8001416 <lcd7735_drawCircle+0x106>
		{
			y1--;
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	3b01      	subs	r3, #1
 8001406:	617b      	str	r3, [r7, #20]
			ddF_y += 2;
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	3302      	adds	r3, #2
 800140c:	61fb      	str	r3, [r7, #28]
			f += ddF_y;
 800140e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	4413      	add	r3, r2
 8001414:	627b      	str	r3, [r7, #36]	; 0x24
		}
		x1++;
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	3301      	adds	r3, #1
 800141a:	61bb      	str	r3, [r7, #24]
		ddF_x += 2;
 800141c:	6a3b      	ldr	r3, [r7, #32]
 800141e:	3302      	adds	r3, #2
 8001420:	623b      	str	r3, [r7, #32]
		f += ddF_x;    
 8001422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001424:	6a3b      	ldr	r3, [r7, #32]
 8001426:	4413      	add	r3, r2
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
		lcd7735_setAddrWindow(x + x1, y + y1, x + x1, y + y1);
 800142a:	89fb      	ldrh	r3, [r7, #14]
 800142c:	b2da      	uxtb	r2, r3
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	b2db      	uxtb	r3, r3
 8001432:	4413      	add	r3, r2
 8001434:	b2d8      	uxtb	r0, r3
 8001436:	89bb      	ldrh	r3, [r7, #12]
 8001438:	b2da      	uxtb	r2, r3
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	b2db      	uxtb	r3, r3
 800143e:	4413      	add	r3, r2
 8001440:	b2d9      	uxtb	r1, r3
 8001442:	89fb      	ldrh	r3, [r7, #14]
 8001444:	b2da      	uxtb	r2, r3
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	b2db      	uxtb	r3, r3
 800144a:	4413      	add	r3, r2
 800144c:	b2dc      	uxtb	r4, r3
 800144e:	89bb      	ldrh	r3, [r7, #12]
 8001450:	b2da      	uxtb	r2, r3
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	b2db      	uxtb	r3, r3
 8001456:	4413      	add	r3, r2
 8001458:	b2db      	uxtb	r3, r3
 800145a:	4622      	mov	r2, r4
 800145c:	f7ff fc4e 	bl	8000cfc <lcd7735_setAddrWindow>
		lcd7735_pushColor(color);
 8001460:	88fb      	ldrh	r3, [r7, #6]
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff fc9a 	bl	8000d9c <lcd7735_pushColor>
		lcd7735_setAddrWindow(x - x1, y + y1, x - x1, y + y1);
 8001468:	89fb      	ldrh	r3, [r7, #14]
 800146a:	b2da      	uxtb	r2, r3
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	b2db      	uxtb	r3, r3
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	b2d8      	uxtb	r0, r3
 8001474:	89bb      	ldrh	r3, [r7, #12]
 8001476:	b2da      	uxtb	r2, r3
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	b2db      	uxtb	r3, r3
 800147c:	4413      	add	r3, r2
 800147e:	b2d9      	uxtb	r1, r3
 8001480:	89fb      	ldrh	r3, [r7, #14]
 8001482:	b2da      	uxtb	r2, r3
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	b2db      	uxtb	r3, r3
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	b2dc      	uxtb	r4, r3
 800148c:	89bb      	ldrh	r3, [r7, #12]
 800148e:	b2da      	uxtb	r2, r3
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	b2db      	uxtb	r3, r3
 8001494:	4413      	add	r3, r2
 8001496:	b2db      	uxtb	r3, r3
 8001498:	4622      	mov	r2, r4
 800149a:	f7ff fc2f 	bl	8000cfc <lcd7735_setAddrWindow>
		lcd7735_pushColor(color);
 800149e:	88fb      	ldrh	r3, [r7, #6]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff fc7b 	bl	8000d9c <lcd7735_pushColor>
		lcd7735_setAddrWindow(x + x1, y - y1, x + x1, y - y1);
 80014a6:	89fb      	ldrh	r3, [r7, #14]
 80014a8:	b2da      	uxtb	r2, r3
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	4413      	add	r3, r2
 80014b0:	b2d8      	uxtb	r0, r3
 80014b2:	89bb      	ldrh	r3, [r7, #12]
 80014b4:	b2da      	uxtb	r2, r3
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	b2d9      	uxtb	r1, r3
 80014be:	89fb      	ldrh	r3, [r7, #14]
 80014c0:	b2da      	uxtb	r2, r3
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	4413      	add	r3, r2
 80014c8:	b2dc      	uxtb	r4, r3
 80014ca:	89bb      	ldrh	r3, [r7, #12]
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	4622      	mov	r2, r4
 80014d8:	f7ff fc10 	bl	8000cfc <lcd7735_setAddrWindow>
		lcd7735_pushColor(color);
 80014dc:	88fb      	ldrh	r3, [r7, #6]
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff fc5c 	bl	8000d9c <lcd7735_pushColor>
		lcd7735_setAddrWindow(x - x1, y - y1, x - x1, y - y1);
 80014e4:	89fb      	ldrh	r3, [r7, #14]
 80014e6:	b2da      	uxtb	r2, r3
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	b2d8      	uxtb	r0, r3
 80014f0:	89bb      	ldrh	r3, [r7, #12]
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	b2d9      	uxtb	r1, r3
 80014fc:	89fb      	ldrh	r3, [r7, #14]
 80014fe:	b2da      	uxtb	r2, r3
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	b2db      	uxtb	r3, r3
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	b2dc      	uxtb	r4, r3
 8001508:	89bb      	ldrh	r3, [r7, #12]
 800150a:	b2da      	uxtb	r2, r3
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	b2db      	uxtb	r3, r3
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	b2db      	uxtb	r3, r3
 8001514:	4622      	mov	r2, r4
 8001516:	f7ff fbf1 	bl	8000cfc <lcd7735_setAddrWindow>
		lcd7735_pushColor(color);
 800151a:	88fb      	ldrh	r3, [r7, #6]
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff fc3d 	bl	8000d9c <lcd7735_pushColor>
		lcd7735_setAddrWindow(x + y1, y + x1, x + y1, y + x1);
 8001522:	89fb      	ldrh	r3, [r7, #14]
 8001524:	b2da      	uxtb	r2, r3
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	b2db      	uxtb	r3, r3
 800152a:	4413      	add	r3, r2
 800152c:	b2d8      	uxtb	r0, r3
 800152e:	89bb      	ldrh	r3, [r7, #12]
 8001530:	b2da      	uxtb	r2, r3
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	b2db      	uxtb	r3, r3
 8001536:	4413      	add	r3, r2
 8001538:	b2d9      	uxtb	r1, r3
 800153a:	89fb      	ldrh	r3, [r7, #14]
 800153c:	b2da      	uxtb	r2, r3
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	b2db      	uxtb	r3, r3
 8001542:	4413      	add	r3, r2
 8001544:	b2dc      	uxtb	r4, r3
 8001546:	89bb      	ldrh	r3, [r7, #12]
 8001548:	b2da      	uxtb	r2, r3
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	b2db      	uxtb	r3, r3
 800154e:	4413      	add	r3, r2
 8001550:	b2db      	uxtb	r3, r3
 8001552:	4622      	mov	r2, r4
 8001554:	f7ff fbd2 	bl	8000cfc <lcd7735_setAddrWindow>
		lcd7735_pushColor(color);
 8001558:	88fb      	ldrh	r3, [r7, #6]
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff fc1e 	bl	8000d9c <lcd7735_pushColor>
		lcd7735_setAddrWindow(x - y1, y + x1, x - y1, y + x1);
 8001560:	89fb      	ldrh	r3, [r7, #14]
 8001562:	b2da      	uxtb	r2, r3
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	b2db      	uxtb	r3, r3
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	b2d8      	uxtb	r0, r3
 800156c:	89bb      	ldrh	r3, [r7, #12]
 800156e:	b2da      	uxtb	r2, r3
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	b2db      	uxtb	r3, r3
 8001574:	4413      	add	r3, r2
 8001576:	b2d9      	uxtb	r1, r3
 8001578:	89fb      	ldrh	r3, [r7, #14]
 800157a:	b2da      	uxtb	r2, r3
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	b2db      	uxtb	r3, r3
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	b2dc      	uxtb	r4, r3
 8001584:	89bb      	ldrh	r3, [r7, #12]
 8001586:	b2da      	uxtb	r2, r3
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	b2db      	uxtb	r3, r3
 800158c:	4413      	add	r3, r2
 800158e:	b2db      	uxtb	r3, r3
 8001590:	4622      	mov	r2, r4
 8001592:	f7ff fbb3 	bl	8000cfc <lcd7735_setAddrWindow>
		lcd7735_pushColor(color);
 8001596:	88fb      	ldrh	r3, [r7, #6]
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff fbff 	bl	8000d9c <lcd7735_pushColor>
		lcd7735_setAddrWindow(x + y1, y - x1, x + y1, y - x1);
 800159e:	89fb      	ldrh	r3, [r7, #14]
 80015a0:	b2da      	uxtb	r2, r3
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	4413      	add	r3, r2
 80015a8:	b2d8      	uxtb	r0, r3
 80015aa:	89bb      	ldrh	r3, [r7, #12]
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	b2d9      	uxtb	r1, r3
 80015b6:	89fb      	ldrh	r3, [r7, #14]
 80015b8:	b2da      	uxtb	r2, r3
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	4413      	add	r3, r2
 80015c0:	b2dc      	uxtb	r4, r3
 80015c2:	89bb      	ldrh	r3, [r7, #12]
 80015c4:	b2da      	uxtb	r2, r3
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	4622      	mov	r2, r4
 80015d0:	f7ff fb94 	bl	8000cfc <lcd7735_setAddrWindow>
		lcd7735_pushColor(color);
 80015d4:	88fb      	ldrh	r3, [r7, #6]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff fbe0 	bl	8000d9c <lcd7735_pushColor>
		lcd7735_setAddrWindow(x - y1, y - x1, x - y1, y - x1);
 80015dc:	89fb      	ldrh	r3, [r7, #14]
 80015de:	b2da      	uxtb	r2, r3
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	b2d8      	uxtb	r0, r3
 80015e8:	89bb      	ldrh	r3, [r7, #12]
 80015ea:	b2da      	uxtb	r2, r3
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	b2d9      	uxtb	r1, r3
 80015f4:	89fb      	ldrh	r3, [r7, #14]
 80015f6:	b2da      	uxtb	r2, r3
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	b2dc      	uxtb	r4, r3
 8001600:	89bb      	ldrh	r3, [r7, #12]
 8001602:	b2da      	uxtb	r2, r3
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	b2db      	uxtb	r3, r3
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	b2db      	uxtb	r3, r3
 800160c:	4622      	mov	r2, r4
 800160e:	f7ff fb75 	bl	8000cfc <lcd7735_setAddrWindow>
		lcd7735_pushColor(color);
 8001612:	88fb      	ldrh	r3, [r7, #6]
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff fbc1 	bl	8000d9c <lcd7735_pushColor>
	while(x1 < y1) {
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	429a      	cmp	r2, r3
 8001620:	f6ff aeec 	blt.w	80013fc <lcd7735_drawCircle+0xec>
	}
}
 8001624:	bf00      	nop
 8001626:	bf00      	nop
 8001628:	372c      	adds	r7, #44	; 0x2c
 800162a:	46bd      	mov	sp, r7
 800162c:	bd90      	pop	{r4, r7, pc}

0800162e <lcd7735_fillCircle>:

void lcd7735_fillCircle(int16_t x, int16_t y, int radius, uint16_t color) {
 800162e:	b580      	push	{r7, lr}
 8001630:	b086      	sub	sp, #24
 8001632:	af00      	add	r7, sp, #0
 8001634:	60ba      	str	r2, [r7, #8]
 8001636:	461a      	mov	r2, r3
 8001638:	4603      	mov	r3, r0
 800163a:	81fb      	strh	r3, [r7, #14]
 800163c:	460b      	mov	r3, r1
 800163e:	81bb      	strh	r3, [r7, #12]
 8001640:	4613      	mov	r3, r2
 8001642:	80fb      	strh	r3, [r7, #6]
	int x1,y1;
	for(y1=-radius; y1<=0; y1++) 
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	425b      	negs	r3, r3
 8001648:	613b      	str	r3, [r7, #16]
 800164a:	e047      	b.n	80016dc <lcd7735_fillCircle+0xae>
		for(x1=-radius; x1<=0; x1++)
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	425b      	negs	r3, r3
 8001650:	617b      	str	r3, [r7, #20]
 8001652:	e03d      	b.n	80016d0 <lcd7735_fillCircle+0xa2>
			if(x1*x1+y1*y1 <= radius*radius) {
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	fb03 f203 	mul.w	r2, r3, r3
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	fb03 f303 	mul.w	r3, r3, r3
 8001660:	441a      	add	r2, r3
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	fb03 f303 	mul.w	r3, r3, r3
 8001668:	429a      	cmp	r2, r3
 800166a:	dc2e      	bgt.n	80016ca <lcd7735_fillCircle+0x9c>
				lcd7735_drawFastHLine(x+x1, y+y1, 2*(-x1), color);
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	b29a      	uxth	r2, r3
 8001670:	89fb      	ldrh	r3, [r7, #14]
 8001672:	4413      	add	r3, r2
 8001674:	b29b      	uxth	r3, r3
 8001676:	b218      	sxth	r0, r3
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	b29a      	uxth	r2, r3
 800167c:	89bb      	ldrh	r3, [r7, #12]
 800167e:	4413      	add	r3, r2
 8001680:	b29b      	uxth	r3, r3
 8001682:	b219      	sxth	r1, r3
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	b29b      	uxth	r3, r3
 8001688:	461a      	mov	r2, r3
 800168a:	03d2      	lsls	r2, r2, #15
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	b29b      	uxth	r3, r3
 8001692:	b21a      	sxth	r2, r3
 8001694:	88fb      	ldrh	r3, [r7, #6]
 8001696:	f7ff fcbb 	bl	8001010 <lcd7735_drawFastHLine>
				lcd7735_drawFastHLine(x+x1, y-y1, 2*(-x1), color);
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	b29a      	uxth	r2, r3
 800169e:	89fb      	ldrh	r3, [r7, #14]
 80016a0:	4413      	add	r3, r2
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	b218      	sxth	r0, r3
 80016a6:	89ba      	ldrh	r2, [r7, #12]
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	b219      	sxth	r1, r3
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	461a      	mov	r2, r3
 80016b8:	03d2      	lsls	r2, r2, #15
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	b29b      	uxth	r3, r3
 80016c0:	b21a      	sxth	r2, r3
 80016c2:	88fb      	ldrh	r3, [r7, #6]
 80016c4:	f7ff fca4 	bl	8001010 <lcd7735_drawFastHLine>
				break;
 80016c8:	e005      	b.n	80016d6 <lcd7735_fillCircle+0xa8>
		for(x1=-radius; x1<=0; x1++)
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	3301      	adds	r3, #1
 80016ce:	617b      	str	r3, [r7, #20]
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	ddbe      	ble.n	8001654 <lcd7735_fillCircle+0x26>
	for(y1=-radius; y1<=0; y1++) 
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	3301      	adds	r3, #1
 80016da:	613b      	str	r3, [r7, #16]
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	ddb4      	ble.n	800164c <lcd7735_fillCircle+0x1e>
			}
}
 80016e2:	bf00      	nop
 80016e4:	bf00      	nop
 80016e6:	3718      	adds	r7, #24
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <lcd7735_drawBitmap>:

void lcd7735_drawBitmap(int x, int y, int sx, int sy, bitmapdatatype data, int scale) {
 80016ec:	b590      	push	{r4, r7, lr}
 80016ee:	b08b      	sub	sp, #44	; 0x2c
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	607a      	str	r2, [r7, #4]
 80016f8:	603b      	str	r3, [r7, #0]
	int tx, ty, tc, tsx, tsy;

	if (scale==1) {
 80016fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	f040 8095 	bne.w	800182c <lcd7735_drawBitmap+0x140>
		if (orientation == PORTRAIT || orientation == PORTRAIT_FLIP)
 8001702:	4b82      	ldr	r3, [pc, #520]	; (800190c <lcd7735_drawBitmap+0x220>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d003      	beq.n	8001712 <lcd7735_drawBitmap+0x26>
 800170a:	4b80      	ldr	r3, [pc, #512]	; (800190c <lcd7735_drawBitmap+0x220>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	2b02      	cmp	r3, #2
 8001710:	d13c      	bne.n	800178c <lcd7735_drawBitmap+0xa0>
		{
			lcd7735_setAddrWindow(x, y, x+sx-1, y+sy-1);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	b2d8      	uxtb	r0, r3
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	b2d9      	uxtb	r1, r3
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	b2da      	uxtb	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	b2db      	uxtb	r3, r3
 8001722:	4413      	add	r3, r2
 8001724:	b2db      	uxtb	r3, r3
 8001726:	3b01      	subs	r3, #1
 8001728:	b2dc      	uxtb	r4, r3
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	b2da      	uxtb	r2, r3
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	b2db      	uxtb	r3, r3
 8001732:	4413      	add	r3, r2
 8001734:	b2db      	uxtb	r3, r3
 8001736:	3b01      	subs	r3, #1
 8001738:	b2db      	uxtb	r3, r3
 800173a:	4622      	mov	r2, r4
 800173c:	f7ff fade 	bl	8000cfc <lcd7735_setAddrWindow>
			ST7735_DC1;
 8001740:	2107      	movs	r1, #7
 8001742:	4873      	ldr	r0, [pc, #460]	; (8001910 <lcd7735_drawBitmap+0x224>)
 8001744:	f001 fa6d 	bl	8002c22 <gpioSetPin>
			for (tc=0; tc<(sx*sy); tc++)
 8001748:	2300      	movs	r3, #0
 800174a:	61fb      	str	r3, [r7, #28]
 800174c:	e016      	b.n	800177c <lcd7735_drawBitmap+0x90>
				putpix(data[tc]);
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001754:	4413      	add	r3, r2
 8001756:	881b      	ldrh	r3, [r3, #0]
 8001758:	0a1b      	lsrs	r3, r3, #8
 800175a:	b29b      	uxth	r3, r3
 800175c:	b2db      	uxtb	r3, r3
 800175e:	4618      	mov	r0, r3
 8001760:	f000 fc8c 	bl	800207c <lcd7735_senddata>
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800176a:	4413      	add	r3, r2
 800176c:	881b      	ldrh	r3, [r3, #0]
 800176e:	b2db      	uxtb	r3, r3
 8001770:	4618      	mov	r0, r3
 8001772:	f000 fc83 	bl	800207c <lcd7735_senddata>
			for (tc=0; tc<(sx*sy); tc++)
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	3301      	adds	r3, #1
 800177a:	61fb      	str	r3, [r7, #28]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	683a      	ldr	r2, [r7, #0]
 8001780:	fb02 f303 	mul.w	r3, r2, r3
 8001784:	69fa      	ldr	r2, [r7, #28]
 8001786:	429a      	cmp	r2, r3
 8001788:	dbe1      	blt.n	800174e <lcd7735_drawBitmap+0x62>
		if (orientation == PORTRAIT || orientation == PORTRAIT_FLIP)
 800178a:	e123      	b.n	80019d4 <lcd7735_drawBitmap+0x2e8>
		} else {
			for (ty=0; ty<sy; ty++) {
 800178c:	2300      	movs	r3, #0
 800178e:	623b      	str	r3, [r7, #32]
 8001790:	e047      	b.n	8001822 <lcd7735_drawBitmap+0x136>
				lcd7735_setAddrWindow(x, y+ty, x+sx-1, y+ty);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	b2d8      	uxtb	r0, r3
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	b2da      	uxtb	r2, r3
 800179a:	6a3b      	ldr	r3, [r7, #32]
 800179c:	b2db      	uxtb	r3, r3
 800179e:	4413      	add	r3, r2
 80017a0:	b2d9      	uxtb	r1, r3
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	4413      	add	r3, r2
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	3b01      	subs	r3, #1
 80017b0:	b2dc      	uxtb	r4, r3
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	6a3b      	ldr	r3, [r7, #32]
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	4413      	add	r3, r2
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	4622      	mov	r2, r4
 80017c0:	f7ff fa9c 	bl	8000cfc <lcd7735_setAddrWindow>
				ST7735_DC1;
 80017c4:	2107      	movs	r1, #7
 80017c6:	4852      	ldr	r0, [pc, #328]	; (8001910 <lcd7735_drawBitmap+0x224>)
 80017c8:	f001 fa2b 	bl	8002c22 <gpioSetPin>
				for (tx=sx-1; tx>=0; tx--)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3b01      	subs	r3, #1
 80017d0:	627b      	str	r3, [r7, #36]	; 0x24
 80017d2:	e020      	b.n	8001816 <lcd7735_drawBitmap+0x12a>
					putpix(data[(ty*sx)+tx]);
 80017d4:	6a3b      	ldr	r3, [r7, #32]
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	fb03 f202 	mul.w	r2, r3, r2
 80017dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017de:	4413      	add	r3, r2
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80017e4:	4413      	add	r3, r2
 80017e6:	881b      	ldrh	r3, [r3, #0]
 80017e8:	0a1b      	lsrs	r3, r3, #8
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	4618      	mov	r0, r3
 80017f0:	f000 fc44 	bl	800207c <lcd7735_senddata>
 80017f4:	6a3b      	ldr	r3, [r7, #32]
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	fb03 f202 	mul.w	r2, r3, r2
 80017fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fe:	4413      	add	r3, r2
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001804:	4413      	add	r3, r2
 8001806:	881b      	ldrh	r3, [r3, #0]
 8001808:	b2db      	uxtb	r3, r3
 800180a:	4618      	mov	r0, r3
 800180c:	f000 fc36 	bl	800207c <lcd7735_senddata>
				for (tx=sx-1; tx>=0; tx--)
 8001810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001812:	3b01      	subs	r3, #1
 8001814:	627b      	str	r3, [r7, #36]	; 0x24
 8001816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001818:	2b00      	cmp	r3, #0
 800181a:	dadb      	bge.n	80017d4 <lcd7735_drawBitmap+0xe8>
			for (ty=0; ty<sy; ty++) {
 800181c:	6a3b      	ldr	r3, [r7, #32]
 800181e:	3301      	adds	r3, #1
 8001820:	623b      	str	r3, [r7, #32]
 8001822:	6a3a      	ldr	r2, [r7, #32]
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	429a      	cmp	r2, r3
 8001828:	dbb3      	blt.n	8001792 <lcd7735_drawBitmap+0xa6>
					}
				}
			}
		}
	}
}
 800182a:	e0d3      	b.n	80019d4 <lcd7735_drawBitmap+0x2e8>
		if (orientation == PORTRAIT || orientation == PORTRAIT_FLIP) {
 800182c:	4b37      	ldr	r3, [pc, #220]	; (800190c <lcd7735_drawBitmap+0x220>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d003      	beq.n	800183c <lcd7735_drawBitmap+0x150>
 8001834:	4b35      	ldr	r3, [pc, #212]	; (800190c <lcd7735_drawBitmap+0x220>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	2b02      	cmp	r3, #2
 800183a:	d161      	bne.n	8001900 <lcd7735_drawBitmap+0x214>
			for (ty=0; ty<sy; ty++) {
 800183c:	2300      	movs	r3, #0
 800183e:	623b      	str	r3, [r7, #32]
 8001840:	e059      	b.n	80018f6 <lcd7735_drawBitmap+0x20a>
				lcd7735_setAddrWindow(x, y+(ty*scale), x+((sx*scale)-1), y+(ty*scale)+scale);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	b2d8      	uxtb	r0, r3
 8001846:	6a3b      	ldr	r3, [r7, #32]
 8001848:	b2da      	uxtb	r2, r3
 800184a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800184c:	b2db      	uxtb	r3, r3
 800184e:	fb12 f303 	smulbb	r3, r2, r3
 8001852:	b2da      	uxtb	r2, r3
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	b2db      	uxtb	r3, r3
 8001858:	4413      	add	r3, r2
 800185a:	b2d9      	uxtb	r1, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	b2da      	uxtb	r2, r3
 8001860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001862:	b2db      	uxtb	r3, r3
 8001864:	fb12 f303 	smulbb	r3, r2, r3
 8001868:	b2da      	uxtb	r2, r3
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	b2db      	uxtb	r3, r3
 800186e:	4413      	add	r3, r2
 8001870:	b2db      	uxtb	r3, r3
 8001872:	3b01      	subs	r3, #1
 8001874:	b2dc      	uxtb	r4, r3
 8001876:	6a3b      	ldr	r3, [r7, #32]
 8001878:	b2da      	uxtb	r2, r3
 800187a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800187c:	b2db      	uxtb	r3, r3
 800187e:	fb12 f303 	smulbb	r3, r2, r3
 8001882:	b2da      	uxtb	r2, r3
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	b2db      	uxtb	r3, r3
 8001888:	4413      	add	r3, r2
 800188a:	b2da      	uxtb	r2, r3
 800188c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800188e:	b2db      	uxtb	r3, r3
 8001890:	4413      	add	r3, r2
 8001892:	b2db      	uxtb	r3, r3
 8001894:	4622      	mov	r2, r4
 8001896:	f7ff fa31 	bl	8000cfc <lcd7735_setAddrWindow>
				for (tsy=0; tsy<scale; tsy++)
 800189a:	2300      	movs	r3, #0
 800189c:	617b      	str	r3, [r7, #20]
 800189e:	e023      	b.n	80018e8 <lcd7735_drawBitmap+0x1fc>
					for (tx=0; tx<sx; tx++) {
 80018a0:	2300      	movs	r3, #0
 80018a2:	627b      	str	r3, [r7, #36]	; 0x24
 80018a4:	e019      	b.n	80018da <lcd7735_drawBitmap+0x1ee>
						for (tsx=0; tsx<scale; tsx++)
 80018a6:	2300      	movs	r3, #0
 80018a8:	61bb      	str	r3, [r7, #24]
 80018aa:	e00f      	b.n	80018cc <lcd7735_drawBitmap+0x1e0>
							lcd7735_pushColor(data[(ty*sx)+tx]);
 80018ac:	6a3b      	ldr	r3, [r7, #32]
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	fb03 f202 	mul.w	r2, r3, r2
 80018b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b6:	4413      	add	r3, r2
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80018bc:	4413      	add	r3, r2
 80018be:	881b      	ldrh	r3, [r3, #0]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff fa6b 	bl	8000d9c <lcd7735_pushColor>
						for (tsx=0; tsx<scale; tsx++)
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	3301      	adds	r3, #1
 80018ca:	61bb      	str	r3, [r7, #24]
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018d0:	429a      	cmp	r2, r3
 80018d2:	dbeb      	blt.n	80018ac <lcd7735_drawBitmap+0x1c0>
					for (tx=0; tx<sx; tx++) {
 80018d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d6:	3301      	adds	r3, #1
 80018d8:	627b      	str	r3, [r7, #36]	; 0x24
 80018da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	429a      	cmp	r2, r3
 80018e0:	dbe1      	blt.n	80018a6 <lcd7735_drawBitmap+0x1ba>
				for (tsy=0; tsy<scale; tsy++)
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	3301      	adds	r3, #1
 80018e6:	617b      	str	r3, [r7, #20]
 80018e8:	697a      	ldr	r2, [r7, #20]
 80018ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018ec:	429a      	cmp	r2, r3
 80018ee:	dbd7      	blt.n	80018a0 <lcd7735_drawBitmap+0x1b4>
			for (ty=0; ty<sy; ty++) {
 80018f0:	6a3b      	ldr	r3, [r7, #32]
 80018f2:	3301      	adds	r3, #1
 80018f4:	623b      	str	r3, [r7, #32]
 80018f6:	6a3a      	ldr	r2, [r7, #32]
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	dba1      	blt.n	8001842 <lcd7735_drawBitmap+0x156>
		if (orientation == PORTRAIT || orientation == PORTRAIT_FLIP) {
 80018fe:	e069      	b.n	80019d4 <lcd7735_drawBitmap+0x2e8>
			for (ty=0; ty<sy; ty++) {
 8001900:	2300      	movs	r3, #0
 8001902:	623b      	str	r3, [r7, #32]
 8001904:	e061      	b.n	80019ca <lcd7735_drawBitmap+0x2de>
				for (tsy=0; tsy<scale; tsy++) {
 8001906:	2300      	movs	r3, #0
 8001908:	617b      	str	r3, [r7, #20]
 800190a:	e057      	b.n	80019bc <lcd7735_drawBitmap+0x2d0>
 800190c:	20000208 	.word	0x20000208
 8001910:	40020800 	.word	0x40020800
					lcd7735_setAddrWindow(x, y+(ty*scale)+tsy, x+((sx*scale)-1), y+(ty*scale)+tsy);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	b2d8      	uxtb	r0, r3
 8001918:	6a3b      	ldr	r3, [r7, #32]
 800191a:	b2da      	uxtb	r2, r3
 800191c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800191e:	b2db      	uxtb	r3, r3
 8001920:	fb12 f303 	smulbb	r3, r2, r3
 8001924:	b2da      	uxtb	r2, r3
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	b2db      	uxtb	r3, r3
 800192a:	4413      	add	r3, r2
 800192c:	b2da      	uxtb	r2, r3
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	b2db      	uxtb	r3, r3
 8001932:	4413      	add	r3, r2
 8001934:	b2d9      	uxtb	r1, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	b2da      	uxtb	r2, r3
 800193a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800193c:	b2db      	uxtb	r3, r3
 800193e:	fb12 f303 	smulbb	r3, r2, r3
 8001942:	b2da      	uxtb	r2, r3
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	b2db      	uxtb	r3, r3
 8001948:	4413      	add	r3, r2
 800194a:	b2db      	uxtb	r3, r3
 800194c:	3b01      	subs	r3, #1
 800194e:	b2dc      	uxtb	r4, r3
 8001950:	6a3b      	ldr	r3, [r7, #32]
 8001952:	b2da      	uxtb	r2, r3
 8001954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001956:	b2db      	uxtb	r3, r3
 8001958:	fb12 f303 	smulbb	r3, r2, r3
 800195c:	b2da      	uxtb	r2, r3
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	b2db      	uxtb	r3, r3
 8001962:	4413      	add	r3, r2
 8001964:	b2da      	uxtb	r2, r3
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	b2db      	uxtb	r3, r3
 800196a:	4413      	add	r3, r2
 800196c:	b2db      	uxtb	r3, r3
 800196e:	4622      	mov	r2, r4
 8001970:	f7ff f9c4 	bl	8000cfc <lcd7735_setAddrWindow>
					for (tx=sx-1; tx>=0; tx--) {
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	3b01      	subs	r3, #1
 8001978:	627b      	str	r3, [r7, #36]	; 0x24
 800197a:	e019      	b.n	80019b0 <lcd7735_drawBitmap+0x2c4>
						for (tsx=0; tsx<scale; tsx++)
 800197c:	2300      	movs	r3, #0
 800197e:	61bb      	str	r3, [r7, #24]
 8001980:	e00f      	b.n	80019a2 <lcd7735_drawBitmap+0x2b6>
							lcd7735_pushColor(data[(ty*sx)+tx]);
 8001982:	6a3b      	ldr	r3, [r7, #32]
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	fb03 f202 	mul.w	r2, r3, r2
 800198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198c:	4413      	add	r3, r2
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001992:	4413      	add	r3, r2
 8001994:	881b      	ldrh	r3, [r3, #0]
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff fa00 	bl	8000d9c <lcd7735_pushColor>
						for (tsx=0; tsx<scale; tsx++)
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	3301      	adds	r3, #1
 80019a0:	61bb      	str	r3, [r7, #24]
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019a6:	429a      	cmp	r2, r3
 80019a8:	dbeb      	blt.n	8001982 <lcd7735_drawBitmap+0x296>
					for (tx=sx-1; tx>=0; tx--) {
 80019aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ac:	3b01      	subs	r3, #1
 80019ae:	627b      	str	r3, [r7, #36]	; 0x24
 80019b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	dae2      	bge.n	800197c <lcd7735_drawBitmap+0x290>
				for (tsy=0; tsy<scale; tsy++) {
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	3301      	adds	r3, #1
 80019ba:	617b      	str	r3, [r7, #20]
 80019bc:	697a      	ldr	r2, [r7, #20]
 80019be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019c0:	429a      	cmp	r2, r3
 80019c2:	dba7      	blt.n	8001914 <lcd7735_drawBitmap+0x228>
			for (ty=0; ty<sy; ty++) {
 80019c4:	6a3b      	ldr	r3, [r7, #32]
 80019c6:	3301      	adds	r3, #1
 80019c8:	623b      	str	r3, [r7, #32]
 80019ca:	6a3a      	ldr	r2, [r7, #32]
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	db99      	blt.n	8001906 <lcd7735_drawBitmap+0x21a>
}
 80019d2:	e7ff      	b.n	80019d4 <lcd7735_drawBitmap+0x2e8>
 80019d4:	bf00      	nop
 80019d6:	372c      	adds	r7, #44	; 0x2c
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd90      	pop	{r4, r7, pc}

080019dc <lcd7735_setFont>:
				lcd7735_pushColor(data[(ty*sx)+tx]);
			}
	}
}

void lcd7735_setFont(uint8_t* font) {
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
	cfont.font=font;
 80019e4:	4a0d      	ldr	r2, [pc, #52]	; (8001a1c <lcd7735_setFont+0x40>)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6013      	str	r3, [r2, #0]
	cfont.x_size=font[0];
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	781a      	ldrb	r2, [r3, #0]
 80019ee:	4b0b      	ldr	r3, [pc, #44]	; (8001a1c <lcd7735_setFont+0x40>)
 80019f0:	711a      	strb	r2, [r3, #4]
	cfont.y_size=font[1];
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	785a      	ldrb	r2, [r3, #1]
 80019f6:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <lcd7735_setFont+0x40>)
 80019f8:	715a      	strb	r2, [r3, #5]
	cfont.offset=font[2];
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	789a      	ldrb	r2, [r3, #2]
 80019fe:	4b07      	ldr	r3, [pc, #28]	; (8001a1c <lcd7735_setFont+0x40>)
 8001a00:	719a      	strb	r2, [r3, #6]
	cfont.numchars=font[3];
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	3303      	adds	r3, #3
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	b29a      	uxth	r2, r3
 8001a0a:	4b04      	ldr	r3, [pc, #16]	; (8001a1c <lcd7735_setFont+0x40>)
 8001a0c:	811a      	strh	r2, [r3, #8]
}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	2000020c 	.word	0x2000020c

08001a20 <printChar>:

void printChar(uint8_t c, int x, int y) {
 8001a20:	b590      	push	{r4, r7, lr}
 8001a22:	b089      	sub	sp, #36	; 0x24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	4603      	mov	r3, r0
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
 8001a2c:	73fb      	strb	r3, [r7, #15]
	uint8_t i,ch,fz;
	uint16_t j;
	uint16_t temp; 
	int zz;

	if( cfont.x_size < 8 ) 
 8001a2e:	4b74      	ldr	r3, [pc, #464]	; (8001c00 <printChar+0x1e0>)
 8001a30:	791b      	ldrb	r3, [r3, #4]
 8001a32:	2b07      	cmp	r3, #7
 8001a34:	d803      	bhi.n	8001a3e <printChar+0x1e>
		fz = cfont.x_size;
 8001a36:	4b72      	ldr	r3, [pc, #456]	; (8001c00 <printChar+0x1e0>)
 8001a38:	791b      	ldrb	r3, [r3, #4]
 8001a3a:	77bb      	strb	r3, [r7, #30]
 8001a3c:	e003      	b.n	8001a46 <printChar+0x26>
	else
		fz = cfont.x_size/8;
 8001a3e:	4b70      	ldr	r3, [pc, #448]	; (8001c00 <printChar+0x1e0>)
 8001a40:	791b      	ldrb	r3, [r3, #4]
 8001a42:	08db      	lsrs	r3, r3, #3
 8001a44:	77bb      	strb	r3, [r7, #30]
	if (!_transparent) {
 8001a46:	4b6f      	ldr	r3, [pc, #444]	; (8001c04 <printChar+0x1e4>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d15e      	bne.n	8001b0c <printChar+0xec>
		lcd7735_setAddrWindow(x,y,x+cfont.x_size-1,y+cfont.y_size-1);
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	b2d8      	uxtb	r0, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	b2d9      	uxtb	r1, r3
 8001a56:	4b6a      	ldr	r3, [pc, #424]	; (8001c00 <printChar+0x1e0>)
 8001a58:	791a      	ldrb	r2, [r3, #4]
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	4413      	add	r3, r2
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	3b01      	subs	r3, #1
 8001a64:	b2dc      	uxtb	r4, r3
 8001a66:	4b66      	ldr	r3, [pc, #408]	; (8001c00 <printChar+0x1e0>)
 8001a68:	795a      	ldrb	r2, [r3, #5]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	4413      	add	r3, r2
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	3b01      	subs	r3, #1
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	4622      	mov	r2, r4
 8001a78:	f7ff f940 	bl	8000cfc <lcd7735_setAddrWindow>

		temp=((c-cfont.offset)*((fz)*cfont.y_size))+4;
 8001a7c:	7bfb      	ldrb	r3, [r7, #15]
 8001a7e:	4a60      	ldr	r2, [pc, #384]	; (8001c00 <printChar+0x1e0>)
 8001a80:	7992      	ldrb	r2, [r2, #6]
 8001a82:	1a9b      	subs	r3, r3, r2
 8001a84:	b29a      	uxth	r2, r3
 8001a86:	7fbb      	ldrb	r3, [r7, #30]
 8001a88:	b299      	uxth	r1, r3
 8001a8a:	4b5d      	ldr	r3, [pc, #372]	; (8001c00 <printChar+0x1e0>)
 8001a8c:	795b      	ldrb	r3, [r3, #5]
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	fb11 f303 	smulbb	r3, r1, r3
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	fb12 f303 	smulbb	r3, r2, r3
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	3304      	adds	r3, #4
 8001a9e:	837b      	strh	r3, [r7, #26]
		for(j=0;j<((fz)*cfont.y_size);j++) {
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	83bb      	strh	r3, [r7, #28]
 8001aa4:	e029      	b.n	8001afa <printChar+0xda>
			ch = cfont.font[temp];
 8001aa6:	4b56      	ldr	r3, [pc, #344]	; (8001c00 <printChar+0x1e0>)
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	8b7b      	ldrh	r3, [r7, #26]
 8001aac:	4413      	add	r3, r2
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	74fb      	strb	r3, [r7, #19]
			for(i=0;i<8;i++) {   
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	77fb      	strb	r3, [r7, #31]
 8001ab6:	e017      	b.n	8001ae8 <printChar+0xc8>
				if((ch&(1<<(7-i)))!=0)   
 8001ab8:	7cfa      	ldrb	r2, [r7, #19]
 8001aba:	7ffb      	ldrb	r3, [r7, #31]
 8001abc:	f1c3 0307 	rsb	r3, r3, #7
 8001ac0:	fa42 f303 	asr.w	r3, r2, r3
 8001ac4:	f003 0301 	and.w	r3, r3, #1
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d005      	beq.n	8001ad8 <printChar+0xb8>
				{
					lcd7735_pushColor(_fg);
 8001acc:	4b4e      	ldr	r3, [pc, #312]	; (8001c08 <printChar+0x1e8>)
 8001ace:	881b      	ldrh	r3, [r3, #0]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff f963 	bl	8000d9c <lcd7735_pushColor>
 8001ad6:	e004      	b.n	8001ae2 <printChar+0xc2>
				} 
				else
				{
					lcd7735_pushColor(_bg);
 8001ad8:	4b4c      	ldr	r3, [pc, #304]	; (8001c0c <printChar+0x1ec>)
 8001ada:	881b      	ldrh	r3, [r3, #0]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff f95d 	bl	8000d9c <lcd7735_pushColor>
			for(i=0;i<8;i++) {   
 8001ae2:	7ffb      	ldrb	r3, [r7, #31]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	77fb      	strb	r3, [r7, #31]
 8001ae8:	7ffb      	ldrb	r3, [r7, #31]
 8001aea:	2b07      	cmp	r3, #7
 8001aec:	d9e4      	bls.n	8001ab8 <printChar+0x98>
				}   
			}
			temp++;
 8001aee:	8b7b      	ldrh	r3, [r7, #26]
 8001af0:	3301      	adds	r3, #1
 8001af2:	837b      	strh	r3, [r7, #26]
		for(j=0;j<((fz)*cfont.y_size);j++) {
 8001af4:	8bbb      	ldrh	r3, [r7, #28]
 8001af6:	3301      	adds	r3, #1
 8001af8:	83bb      	strh	r3, [r7, #28]
 8001afa:	8bba      	ldrh	r2, [r7, #28]
 8001afc:	7fbb      	ldrb	r3, [r7, #30]
 8001afe:	4940      	ldr	r1, [pc, #256]	; (8001c00 <printChar+0x1e0>)
 8001b00:	7949      	ldrb	r1, [r1, #5]
 8001b02:	fb01 f303 	mul.w	r3, r1, r3
 8001b06:	429a      	cmp	r2, r3
 8001b08:	dbcd      	blt.n	8001aa6 <printChar+0x86>
				}
			}
			temp+=(fz);
		}
	}
}
 8001b0a:	e075      	b.n	8001bf8 <printChar+0x1d8>
		temp=((c-cfont.offset)*((fz)*cfont.y_size))+4;
 8001b0c:	7bfb      	ldrb	r3, [r7, #15]
 8001b0e:	4a3c      	ldr	r2, [pc, #240]	; (8001c00 <printChar+0x1e0>)
 8001b10:	7992      	ldrb	r2, [r2, #6]
 8001b12:	1a9b      	subs	r3, r3, r2
 8001b14:	b29a      	uxth	r2, r3
 8001b16:	7fbb      	ldrb	r3, [r7, #30]
 8001b18:	b299      	uxth	r1, r3
 8001b1a:	4b39      	ldr	r3, [pc, #228]	; (8001c00 <printChar+0x1e0>)
 8001b1c:	795b      	ldrb	r3, [r3, #5]
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	fb11 f303 	smulbb	r3, r1, r3
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	fb12 f303 	smulbb	r3, r2, r3
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	3304      	adds	r3, #4
 8001b2e:	837b      	strh	r3, [r7, #26]
		for(j=0;j<cfont.y_size;j++) 
 8001b30:	2300      	movs	r3, #0
 8001b32:	83bb      	strh	r3, [r7, #28]
 8001b34:	e05a      	b.n	8001bec <printChar+0x1cc>
			for (zz=0; zz<(fz); zz++)
 8001b36:	2300      	movs	r3, #0
 8001b38:	617b      	str	r3, [r7, #20]
 8001b3a:	e04b      	b.n	8001bd4 <printChar+0x1b4>
				ch = cfont.font[temp+zz]; 
 8001b3c:	4b30      	ldr	r3, [pc, #192]	; (8001c00 <printChar+0x1e0>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	8b79      	ldrh	r1, [r7, #26]
 8001b42:	697a      	ldr	r2, [r7, #20]
 8001b44:	440a      	add	r2, r1
 8001b46:	4413      	add	r3, r2
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	74fb      	strb	r3, [r7, #19]
				for(i=0;i<8;i++)
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	77fb      	strb	r3, [r7, #31]
 8001b50:	e03a      	b.n	8001bc8 <printChar+0x1a8>
					lcd7735_setAddrWindow(x+i+(zz*8),y+j,x+i+(zz*8)+1,y+j+1);
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	b2da      	uxtb	r2, r3
 8001b56:	7ffb      	ldrb	r3, [r7, #31]
 8001b58:	4413      	add	r3, r2
 8001b5a:	b2da      	uxtb	r2, r3
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	00db      	lsls	r3, r3, #3
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	4413      	add	r3, r2
 8001b66:	b2d8      	uxtb	r0, r3
 8001b68:	8bbb      	ldrh	r3, [r7, #28]
 8001b6a:	b2da      	uxtb	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	4413      	add	r3, r2
 8001b72:	b2d9      	uxtb	r1, r3
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	b2da      	uxtb	r2, r3
 8001b78:	7ffb      	ldrb	r3, [r7, #31]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	b2da      	uxtb	r2, r3
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	00db      	lsls	r3, r3, #3
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	4413      	add	r3, r2
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	b2dc      	uxtb	r4, r3
 8001b8e:	8bbb      	ldrh	r3, [r7, #28]
 8001b90:	b2da      	uxtb	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	4413      	add	r3, r2
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	4622      	mov	r2, r4
 8001ba0:	f7ff f8ac 	bl	8000cfc <lcd7735_setAddrWindow>
					if((ch&(1<<(7-i)))!=0)   
 8001ba4:	7cfa      	ldrb	r2, [r7, #19]
 8001ba6:	7ffb      	ldrb	r3, [r7, #31]
 8001ba8:	f1c3 0307 	rsb	r3, r3, #7
 8001bac:	fa42 f303 	asr.w	r3, r2, r3
 8001bb0:	f003 0301 	and.w	r3, r3, #1
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d004      	beq.n	8001bc2 <printChar+0x1a2>
						lcd7735_pushColor(_fg);
 8001bb8:	4b13      	ldr	r3, [pc, #76]	; (8001c08 <printChar+0x1e8>)
 8001bba:	881b      	ldrh	r3, [r3, #0]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff f8ed 	bl	8000d9c <lcd7735_pushColor>
				for(i=0;i<8;i++)
 8001bc2:	7ffb      	ldrb	r3, [r7, #31]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	77fb      	strb	r3, [r7, #31]
 8001bc8:	7ffb      	ldrb	r3, [r7, #31]
 8001bca:	2b07      	cmp	r3, #7
 8001bcc:	d9c1      	bls.n	8001b52 <printChar+0x132>
			for (zz=0; zz<(fz); zz++)
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	617b      	str	r3, [r7, #20]
 8001bd4:	7fbb      	ldrb	r3, [r7, #30]
 8001bd6:	697a      	ldr	r2, [r7, #20]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	dbaf      	blt.n	8001b3c <printChar+0x11c>
			temp+=(fz);
 8001bdc:	7fbb      	ldrb	r3, [r7, #30]
 8001bde:	b29a      	uxth	r2, r3
 8001be0:	8b7b      	ldrh	r3, [r7, #26]
 8001be2:	4413      	add	r3, r2
 8001be4:	837b      	strh	r3, [r7, #26]
		for(j=0;j<cfont.y_size;j++) 
 8001be6:	8bbb      	ldrh	r3, [r7, #28]
 8001be8:	3301      	adds	r3, #1
 8001bea:	83bb      	strh	r3, [r7, #28]
 8001bec:	4b04      	ldr	r3, [pc, #16]	; (8001c00 <printChar+0x1e0>)
 8001bee:	795b      	ldrb	r3, [r3, #5]
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	8bba      	ldrh	r2, [r7, #28]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d39e      	bcc.n	8001b36 <printChar+0x116>
}
 8001bf8:	bf00      	nop
 8001bfa:	3724      	adds	r7, #36	; 0x24
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd90      	pop	{r4, r7, pc}
 8001c00:	2000020c 	.word	0x2000020c
 8001c04:	20000218 	.word	0x20000218
 8001c08:	20000004 	.word	0x20000004
 8001c0c:	2000021a 	.word	0x2000021a

08001c10 <rotateChar>:

void rotateChar(uint8_t c, int x, int y, int pos, int deg) {
 8001c10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c14:	b08e      	sub	sp, #56	; 0x38
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	607a      	str	r2, [r7, #4]
 8001c1c:	603b      	str	r3, [r7, #0]
 8001c1e:	4603      	mov	r3, r0
 8001c20:	73fb      	strb	r3, [r7, #15]
	uint8_t i,j,ch,fz;
	uint16_t temp; 
	int newx,newy;
	double radian = deg*0.0175;
 8001c22:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001c24:	f7fe fc86 	bl	8000534 <__aeabi_i2d>
 8001c28:	a395      	add	r3, pc, #596	; (adr r3, 8001e80 <rotateChar+0x270>)
 8001c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c2e:	f7fe fceb 	bl	8000608 <__aeabi_dmul>
 8001c32:	4602      	mov	r2, r0
 8001c34:	460b      	mov	r3, r1
 8001c36:	e9c7 2308 	strd	r2, r3, [r7, #32]
	int zz;

	if( cfont.x_size < 8 ) 
 8001c3a:	4b8d      	ldr	r3, [pc, #564]	; (8001e70 <rotateChar+0x260>)
 8001c3c:	791b      	ldrb	r3, [r3, #4]
 8001c3e:	2b07      	cmp	r3, #7
 8001c40:	d804      	bhi.n	8001c4c <rotateChar+0x3c>
		fz = cfont.x_size;
 8001c42:	4b8b      	ldr	r3, [pc, #556]	; (8001e70 <rotateChar+0x260>)
 8001c44:	791b      	ldrb	r3, [r3, #4]
 8001c46:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8001c4a:	e004      	b.n	8001c56 <rotateChar+0x46>
	else
		fz = cfont.x_size/8;	
 8001c4c:	4b88      	ldr	r3, [pc, #544]	; (8001e70 <rotateChar+0x260>)
 8001c4e:	791b      	ldrb	r3, [r3, #4]
 8001c50:	08db      	lsrs	r3, r3, #3
 8001c52:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	temp=((c-cfont.offset)*((fz)*cfont.y_size))+4;
 8001c56:	7bfb      	ldrb	r3, [r7, #15]
 8001c58:	4a85      	ldr	r2, [pc, #532]	; (8001e70 <rotateChar+0x260>)
 8001c5a:	7992      	ldrb	r2, [r2, #6]
 8001c5c:	1a9b      	subs	r3, r3, r2
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001c64:	b299      	uxth	r1, r3
 8001c66:	4b82      	ldr	r3, [pc, #520]	; (8001e70 <rotateChar+0x260>)
 8001c68:	795b      	ldrb	r3, [r3, #5]
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	fb11 f303 	smulbb	r3, r1, r3
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	fb12 f303 	smulbb	r3, r2, r3
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	3304      	adds	r3, #4
 8001c7a:	867b      	strh	r3, [r7, #50]	; 0x32
	for(j=0;j<cfont.y_size;j++) {
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001c82:	e0e6      	b.n	8001e52 <rotateChar+0x242>
		for (zz=0; zz<(fz); zz++) {
 8001c84:	2300      	movs	r3, #0
 8001c86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c88:	e0d2      	b.n	8001e30 <rotateChar+0x220>
			ch = cfont.font[temp+zz]; 
 8001c8a:	4b79      	ldr	r3, [pc, #484]	; (8001e70 <rotateChar+0x260>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 8001c90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c92:	440a      	add	r2, r1
 8001c94:	4413      	add	r3, r2
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	77fb      	strb	r3, [r7, #31]
			for(i=0;i<8;i++) {   
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001ca0:	e0be      	b.n	8001e20 <rotateChar+0x210>
				newx=x+(((i+(zz*8)+(pos*cfont.x_size))*cos(radian))-((j)*sin(radian)));
 8001ca2:	68b8      	ldr	r0, [r7, #8]
 8001ca4:	f7fe fc46 	bl	8000534 <__aeabi_i2d>
 8001ca8:	4604      	mov	r4, r0
 8001caa:	460d      	mov	r5, r1
 8001cac:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	441a      	add	r2, r3
 8001cb6:	4b6e      	ldr	r3, [pc, #440]	; (8001e70 <rotateChar+0x260>)
 8001cb8:	791b      	ldrb	r3, [r3, #4]
 8001cba:	4619      	mov	r1, r3
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	fb01 f303 	mul.w	r3, r1, r3
 8001cc2:	4413      	add	r3, r2
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7fe fc35 	bl	8000534 <__aeabi_i2d>
 8001cca:	4680      	mov	r8, r0
 8001ccc:	4689      	mov	r9, r1
 8001cce:	ed97 0b08 	vldr	d0, [r7, #32]
 8001cd2:	f004 f9b9 	bl	8006048 <cos>
 8001cd6:	ec53 2b10 	vmov	r2, r3, d0
 8001cda:	4640      	mov	r0, r8
 8001cdc:	4649      	mov	r1, r9
 8001cde:	f7fe fc93 	bl	8000608 <__aeabi_dmul>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	4692      	mov	sl, r2
 8001ce8:	469b      	mov	fp, r3
 8001cea:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7fe fc20 	bl	8000534 <__aeabi_i2d>
 8001cf4:	4680      	mov	r8, r0
 8001cf6:	4689      	mov	r9, r1
 8001cf8:	ed97 0b08 	vldr	d0, [r7, #32]
 8001cfc:	f004 f9f8 	bl	80060f0 <sin>
 8001d00:	ec53 2b10 	vmov	r2, r3, d0
 8001d04:	4640      	mov	r0, r8
 8001d06:	4649      	mov	r1, r9
 8001d08:	f7fe fc7e 	bl	8000608 <__aeabi_dmul>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	4650      	mov	r0, sl
 8001d12:	4659      	mov	r1, fp
 8001d14:	f7fe fac0 	bl	8000298 <__aeabi_dsub>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	4620      	mov	r0, r4
 8001d1e:	4629      	mov	r1, r5
 8001d20:	f7fe fabc 	bl	800029c <__adddf3>
 8001d24:	4602      	mov	r2, r0
 8001d26:	460b      	mov	r3, r1
 8001d28:	4610      	mov	r0, r2
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	f7fe ff1c 	bl	8000b68 <__aeabi_d2iz>
 8001d30:	4603      	mov	r3, r0
 8001d32:	61bb      	str	r3, [r7, #24]
				newy=y+(((j)*cos(radian))+((i+(zz*8)+(pos*cfont.x_size))*sin(radian)));
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f7fe fbfd 	bl	8000534 <__aeabi_i2d>
 8001d3a:	4604      	mov	r4, r0
 8001d3c:	460d      	mov	r5, r1
 8001d3e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7fe fbf6 	bl	8000534 <__aeabi_i2d>
 8001d48:	4680      	mov	r8, r0
 8001d4a:	4689      	mov	r9, r1
 8001d4c:	ed97 0b08 	vldr	d0, [r7, #32]
 8001d50:	f004 f97a 	bl	8006048 <cos>
 8001d54:	ec53 2b10 	vmov	r2, r3, d0
 8001d58:	4640      	mov	r0, r8
 8001d5a:	4649      	mov	r1, r9
 8001d5c:	f7fe fc54 	bl	8000608 <__aeabi_dmul>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	4692      	mov	sl, r2
 8001d66:	469b      	mov	fp, r3
 8001d68:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d6e:	00db      	lsls	r3, r3, #3
 8001d70:	441a      	add	r2, r3
 8001d72:	4b3f      	ldr	r3, [pc, #252]	; (8001e70 <rotateChar+0x260>)
 8001d74:	791b      	ldrb	r3, [r3, #4]
 8001d76:	4619      	mov	r1, r3
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	fb01 f303 	mul.w	r3, r1, r3
 8001d7e:	4413      	add	r3, r2
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7fe fbd7 	bl	8000534 <__aeabi_i2d>
 8001d86:	4680      	mov	r8, r0
 8001d88:	4689      	mov	r9, r1
 8001d8a:	ed97 0b08 	vldr	d0, [r7, #32]
 8001d8e:	f004 f9af 	bl	80060f0 <sin>
 8001d92:	ec53 2b10 	vmov	r2, r3, d0
 8001d96:	4640      	mov	r0, r8
 8001d98:	4649      	mov	r1, r9
 8001d9a:	f7fe fc35 	bl	8000608 <__aeabi_dmul>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	460b      	mov	r3, r1
 8001da2:	4650      	mov	r0, sl
 8001da4:	4659      	mov	r1, fp
 8001da6:	f7fe fa79 	bl	800029c <__adddf3>
 8001daa:	4602      	mov	r2, r0
 8001dac:	460b      	mov	r3, r1
 8001dae:	4620      	mov	r0, r4
 8001db0:	4629      	mov	r1, r5
 8001db2:	f7fe fa73 	bl	800029c <__adddf3>
 8001db6:	4602      	mov	r2, r0
 8001db8:	460b      	mov	r3, r1
 8001dba:	4610      	mov	r0, r2
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	f7fe fed3 	bl	8000b68 <__aeabi_d2iz>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	617b      	str	r3, [r7, #20]

				lcd7735_setAddrWindow(newx,newy,newx+1,newy+1);
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	b2d8      	uxtb	r0, r3
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	b2d9      	uxtb	r1, r3
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	b2da      	uxtb	r2, r3
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	3301      	adds	r3, #1
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	f7fe ff8d 	bl	8000cfc <lcd7735_setAddrWindow>

				if((ch&(1<<(7-i)))!=0) {
 8001de2:	7ffa      	ldrb	r2, [r7, #31]
 8001de4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001de8:	f1c3 0307 	rsb	r3, r3, #7
 8001dec:	fa42 f303 	asr.w	r3, r2, r3
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d005      	beq.n	8001e04 <rotateChar+0x1f4>
					lcd7735_pushColor(_fg);
 8001df8:	4b1e      	ldr	r3, [pc, #120]	; (8001e74 <rotateChar+0x264>)
 8001dfa:	881b      	ldrh	r3, [r3, #0]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7fe ffcd 	bl	8000d9c <lcd7735_pushColor>
 8001e02:	e008      	b.n	8001e16 <rotateChar+0x206>
				} else  {
					if (!_transparent)
 8001e04:	4b1c      	ldr	r3, [pc, #112]	; (8001e78 <rotateChar+0x268>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d104      	bne.n	8001e16 <rotateChar+0x206>
						lcd7735_pushColor(_bg);
 8001e0c:	4b1b      	ldr	r3, [pc, #108]	; (8001e7c <rotateChar+0x26c>)
 8001e0e:	881b      	ldrh	r3, [r3, #0]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7fe ffc3 	bl	8000d9c <lcd7735_pushColor>
			for(i=0;i<8;i++) {   
 8001e16:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001e20:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001e24:	2b07      	cmp	r3, #7
 8001e26:	f67f af3c 	bls.w	8001ca2 <rotateChar+0x92>
		for (zz=0; zz<(fz); zz++) {
 8001e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e30:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001e34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e36:	429a      	cmp	r2, r3
 8001e38:	f6ff af27 	blt.w	8001c8a <rotateChar+0x7a>
				}   
			}
		}
		temp+=(fz);
 8001e3c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001e40:	b29a      	uxth	r2, r3
 8001e42:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001e44:	4413      	add	r3, r2
 8001e46:	867b      	strh	r3, [r7, #50]	; 0x32
	for(j=0;j<cfont.y_size;j++) {
 8001e48:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001e52:	4b07      	ldr	r3, [pc, #28]	; (8001e70 <rotateChar+0x260>)
 8001e54:	795b      	ldrb	r3, [r3, #5]
 8001e56:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	f4ff af12 	bcc.w	8001c84 <rotateChar+0x74>
	}
}
 8001e60:	bf00      	nop
 8001e62:	bf00      	nop
 8001e64:	3738      	adds	r7, #56	; 0x38
 8001e66:	46bd      	mov	sp, r7
 8001e68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e6c:	f3af 8000 	nop.w
 8001e70:	2000020c 	.word	0x2000020c
 8001e74:	20000004 	.word	0x20000004
 8001e78:	20000218 	.word	0x20000218
 8001e7c:	2000021a 	.word	0x2000021a
 8001e80:	1eb851ec 	.word	0x1eb851ec
 8001e84:	3f91eb85 	.word	0x3f91eb85

08001e88 <lcd7735_print>:

void lcd7735_print(char *st, int x, int y, int deg) {
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b088      	sub	sp, #32
 8001e8c:	af02      	add	r7, sp, #8
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
 8001e94:	603b      	str	r3, [r7, #0]
	int stl, i;

	stl = strlen(st);
 8001e96:	68f8      	ldr	r0, [r7, #12]
 8001e98:	f7fe f9a2 	bl	80001e0 <strlen>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	613b      	str	r3, [r7, #16]

	if (x==RIGHT)
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	f113 0f02 	cmn.w	r3, #2
 8001ea6:	d10a      	bne.n	8001ebe <lcd7735_print+0x36>
		x=(_width+1)-(stl*cfont.x_size);
 8001ea8:	4b25      	ldr	r3, [pc, #148]	; (8001f40 <lcd7735_print+0xb8>)
 8001eaa:	881b      	ldrh	r3, [r3, #0]
 8001eac:	1c5a      	adds	r2, r3, #1
 8001eae:	4b25      	ldr	r3, [pc, #148]	; (8001f44 <lcd7735_print+0xbc>)
 8001eb0:	791b      	ldrb	r3, [r3, #4]
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	fb01 f303 	mul.w	r3, r1, r3
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	60bb      	str	r3, [r7, #8]
	if (x==CENTER)
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ec4:	d10d      	bne.n	8001ee2 <lcd7735_print+0x5a>
		x=((_height+1)-(stl*cfont.x_size))/2;
 8001ec6:	4b20      	ldr	r3, [pc, #128]	; (8001f48 <lcd7735_print+0xc0>)
 8001ec8:	881b      	ldrh	r3, [r3, #0]
 8001eca:	1c5a      	adds	r2, r3, #1
 8001ecc:	4b1d      	ldr	r3, [pc, #116]	; (8001f44 <lcd7735_print+0xbc>)
 8001ece:	791b      	ldrb	r3, [r3, #4]
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	fb01 f303 	mul.w	r3, r1, r3
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	0fda      	lsrs	r2, r3, #31
 8001edc:	4413      	add	r3, r2
 8001ede:	105b      	asrs	r3, r3, #1
 8001ee0:	60bb      	str	r3, [r7, #8]

	for (i=0; i<stl; i++)
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	617b      	str	r3, [r7, #20]
 8001ee6:	e021      	b.n	8001f2c <lcd7735_print+0xa4>
		if (deg==0)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d110      	bne.n	8001f10 <lcd7735_print+0x88>
			printChar(*st++, x + (i*(cfont.x_size)), y);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	1c5a      	adds	r2, r3, #1
 8001ef2:	60fa      	str	r2, [r7, #12]
 8001ef4:	7818      	ldrb	r0, [r3, #0]
 8001ef6:	4b13      	ldr	r3, [pc, #76]	; (8001f44 <lcd7735_print+0xbc>)
 8001ef8:	791b      	ldrb	r3, [r3, #4]
 8001efa:	461a      	mov	r2, r3
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	fb03 f202 	mul.w	r2, r3, r2
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	4413      	add	r3, r2
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	4619      	mov	r1, r3
 8001f0a:	f7ff fd89 	bl	8001a20 <printChar>
 8001f0e:	e00a      	b.n	8001f26 <lcd7735_print+0x9e>
		else
			rotateChar(*st++, x, y, i, deg);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	1c5a      	adds	r2, r3, #1
 8001f14:	60fa      	str	r2, [r7, #12]
 8001f16:	7818      	ldrb	r0, [r3, #0]
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	9300      	str	r3, [sp, #0]
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	68b9      	ldr	r1, [r7, #8]
 8001f22:	f7ff fe75 	bl	8001c10 <rotateChar>
	for (i=0; i<stl; i++)
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	617b      	str	r3, [r7, #20]
 8001f2c:	697a      	ldr	r2, [r7, #20]
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	dbd9      	blt.n	8001ee8 <lcd7735_print+0x60>
}
 8001f34:	bf00      	nop
 8001f36:	bf00      	nop
 8001f38:	3718      	adds	r7, #24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	20000000 	.word	0x20000000
 8001f44:	2000020c 	.word	0x2000020c
 8001f48:	20000002 	.word	0x20000002

08001f4c <lcd7735_fillScreen>:
*********************************************************************
*********************** Service functions ***************************
*********************************************************************
*********************************************************************/

void lcd7735_fillScreen(uint16_t color) {
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af02      	add	r7, sp, #8
 8001f52:	4603      	mov	r3, r0
 8001f54:	80fb      	strh	r3, [r7, #6]
	lcd7735_fillRect(0, 0,  _width, _height, color);
 8001f56:	4b08      	ldr	r3, [pc, #32]	; (8001f78 <lcd7735_fillScreen+0x2c>)
 8001f58:	881b      	ldrh	r3, [r3, #0]
 8001f5a:	b21a      	sxth	r2, r3
 8001f5c:	4b07      	ldr	r3, [pc, #28]	; (8001f7c <lcd7735_fillScreen+0x30>)
 8001f5e:	881b      	ldrh	r3, [r3, #0]
 8001f60:	b219      	sxth	r1, r3
 8001f62:	88fb      	ldrh	r3, [r7, #6]
 8001f64:	9300      	str	r3, [sp, #0]
 8001f66:	460b      	mov	r3, r1
 8001f68:	2100      	movs	r1, #0
 8001f6a:	2000      	movs	r0, #0
 8001f6c:	f7fe ff6a 	bl	8000e44 <lcd7735_fillRect>
}
 8001f70:	bf00      	nop
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	20000000 	.word	0x20000000
 8001f7c:	20000002 	.word	0x20000002

08001f80 <lcd7735_setRotation>:
// Pass 8-bit (each) R,G,B, get back 16-bit packed color
uint16_t lcd7735_Color565(uint8_t r, uint8_t g, uint8_t b) {
	return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | (b >> 3);
}

void lcd7735_setRotation(uint8_t m) {
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	4603      	mov	r3, r0
 8001f88:	71fb      	strb	r3, [r7, #7]
	uint8_t rotation = m % 4; // can't be higher than 3
 8001f8a:	79fb      	ldrb	r3, [r7, #7]
 8001f8c:	f003 0303 	and.w	r3, r3, #3
 8001f90:	73fb      	strb	r3, [r7, #15]

	lcd7735_sendCmd(ST7735_MADCTL);
 8001f92:	2036      	movs	r0, #54	; 0x36
 8001f94:	f000 f886 	bl	80020a4 <lcd7735_sendCmd>
	switch (rotation) {
 8001f98:	7bfb      	ldrb	r3, [r7, #15]
 8001f9a:	2b03      	cmp	r3, #3
 8001f9c:	d836      	bhi.n	800200c <lcd7735_setRotation+0x8c>
 8001f9e:	a201      	add	r2, pc, #4	; (adr r2, 8001fa4 <lcd7735_setRotation+0x24>)
 8001fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fa4:	08001fb5 	.word	0x08001fb5
 8001fa8:	08001fc9 	.word	0x08001fc9
 8001fac:	08001fdd 	.word	0x08001fdd
 8001fb0:	08001ff1 	.word	0x08001ff1
   case PORTRAIT:
	   lcd7735_sendData(MADCTL_MX | MADCTL_MY | MADCTL_RGB);
 8001fb4:	20c0      	movs	r0, #192	; 0xc0
 8001fb6:	f000 f889 	bl	80020cc <lcd7735_sendData>
	   _width  = ST7735_TFTWIDTH;
 8001fba:	4b16      	ldr	r3, [pc, #88]	; (8002014 <lcd7735_setRotation+0x94>)
 8001fbc:	2280      	movs	r2, #128	; 0x80
 8001fbe:	801a      	strh	r2, [r3, #0]
	   _height = ST7735_TFTHEIGHT;
 8001fc0:	4b15      	ldr	r3, [pc, #84]	; (8002018 <lcd7735_setRotation+0x98>)
 8001fc2:	22a0      	movs	r2, #160	; 0xa0
 8001fc4:	801a      	strh	r2, [r3, #0]
	   break;
 8001fc6:	e01d      	b.n	8002004 <lcd7735_setRotation+0x84>
   case LANDSCAPE:
	   lcd7735_sendData(MADCTL_MY | MADCTL_MV | MADCTL_RGB);
 8001fc8:	20a0      	movs	r0, #160	; 0xa0
 8001fca:	f000 f87f 	bl	80020cc <lcd7735_sendData>
	   _width  = ST7735_TFTHEIGHT;
 8001fce:	4b11      	ldr	r3, [pc, #68]	; (8002014 <lcd7735_setRotation+0x94>)
 8001fd0:	22a0      	movs	r2, #160	; 0xa0
 8001fd2:	801a      	strh	r2, [r3, #0]
	   _height = ST7735_TFTWIDTH;
 8001fd4:	4b10      	ldr	r3, [pc, #64]	; (8002018 <lcd7735_setRotation+0x98>)
 8001fd6:	2280      	movs	r2, #128	; 0x80
 8001fd8:	801a      	strh	r2, [r3, #0]
	   break;
 8001fda:	e013      	b.n	8002004 <lcd7735_setRotation+0x84>
   case PORTRAIT_FLIP:
	   lcd7735_sendData(MADCTL_RGB);
 8001fdc:	2000      	movs	r0, #0
 8001fde:	f000 f875 	bl	80020cc <lcd7735_sendData>
	   _width  = ST7735_TFTWIDTH;
 8001fe2:	4b0c      	ldr	r3, [pc, #48]	; (8002014 <lcd7735_setRotation+0x94>)
 8001fe4:	2280      	movs	r2, #128	; 0x80
 8001fe6:	801a      	strh	r2, [r3, #0]
	   _height = ST7735_TFTHEIGHT;
 8001fe8:	4b0b      	ldr	r3, [pc, #44]	; (8002018 <lcd7735_setRotation+0x98>)
 8001fea:	22a0      	movs	r2, #160	; 0xa0
 8001fec:	801a      	strh	r2, [r3, #0]
	   break;
 8001fee:	e009      	b.n	8002004 <lcd7735_setRotation+0x84>
   case LANDSCAPE_FLIP:
	   lcd7735_sendData(MADCTL_MX | MADCTL_MV | MADCTL_RGB);
 8001ff0:	2060      	movs	r0, #96	; 0x60
 8001ff2:	f000 f86b 	bl	80020cc <lcd7735_sendData>
	   _width  = ST7735_TFTHEIGHT;
 8001ff6:	4b07      	ldr	r3, [pc, #28]	; (8002014 <lcd7735_setRotation+0x94>)
 8001ff8:	22a0      	movs	r2, #160	; 0xa0
 8001ffa:	801a      	strh	r2, [r3, #0]
	   _height = ST7735_TFTWIDTH;
 8001ffc:	4b06      	ldr	r3, [pc, #24]	; (8002018 <lcd7735_setRotation+0x98>)
 8001ffe:	2280      	movs	r2, #128	; 0x80
 8002000:	801a      	strh	r2, [r3, #0]
	   break;
 8002002:	bf00      	nop
   default:
	   return;
	}
	orientation = m;
 8002004:	4a05      	ldr	r2, [pc, #20]	; (800201c <lcd7735_setRotation+0x9c>)
 8002006:	79fb      	ldrb	r3, [r7, #7]
 8002008:	7013      	strb	r3, [r2, #0]
 800200a:	e000      	b.n	800200e <lcd7735_setRotation+0x8e>
	   return;
 800200c:	bf00      	nop
}
 800200e:	3710      	adds	r7, #16
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	20000000 	.word	0x20000000
 8002018:	20000002 	.word	0x20000002
 800201c:	20000208 	.word	0x20000208

08002020 <lcd7735_invertDisplay>:

void lcd7735_invertDisplay(const uint8_t mode) {
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	71fb      	strb	r3, [r7, #7]
	if( mode == INVERT_ON ) lcd7735_sendCmd(ST7735_INVON);
 800202a:	79fb      	ldrb	r3, [r7, #7]
 800202c:	2b01      	cmp	r3, #1
 800202e:	d103      	bne.n	8002038 <lcd7735_invertDisplay+0x18>
 8002030:	2021      	movs	r0, #33	; 0x21
 8002032:	f000 f837 	bl	80020a4 <lcd7735_sendCmd>
	else if( mode == INVERT_OFF ) lcd7735_sendCmd(ST7735_INVOFF);
}
 8002036:	e005      	b.n	8002044 <lcd7735_invertDisplay+0x24>
	else if( mode == INVERT_OFF ) lcd7735_sendCmd(ST7735_INVOFF);
 8002038:	79fb      	ldrb	r3, [r7, #7]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d102      	bne.n	8002044 <lcd7735_invertDisplay+0x24>
 800203e:	2020      	movs	r0, #32
 8002040:	f000 f830 	bl	80020a4 <lcd7735_sendCmd>
}
 8002044:	bf00      	nop
 8002046:	3708      	adds	r7, #8
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <delay_ms>:
#include <mcalSPI.h>
#include "hw_config.h"

static SPI_TypeDef  *spi  = SPI1;

void delay_ms(uint32_t delay_value) {
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
    //TimingDelay = delay_value;
	LED_blue_on;			// for Debug only
 8002054:	210a      	movs	r1, #10
 8002056:	4807      	ldr	r0, [pc, #28]	; (8002074 <delay_ms+0x28>)
 8002058:	f000 fe0e 	bl	8002c78 <gpioResetPin>
	systickDelay(&ST7735_Timer, delay_value);
 800205c:	6879      	ldr	r1, [r7, #4]
 800205e:	4806      	ldr	r0, [pc, #24]	; (8002078 <delay_ms+0x2c>)
 8002060:	f001 fa84 	bl	800356c <systickDelay>
	LED_blue_off;			//for Debug only
 8002064:	210a      	movs	r1, #10
 8002066:	4803      	ldr	r0, [pc, #12]	; (8002074 <delay_ms+0x28>)
 8002068:	f000 fddb 	bl	8002c22 <gpioSetPin>
}
 800206c:	bf00      	nop
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40020400 	.word	0x40020400
 8002078:	20000224 	.word	0x20000224

0800207c <lcd7735_senddata>:

// Send byte via SPI to controller
void lcd7735_senddata(const uint8_t data)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	4603      	mov	r3, r0
 8002084:	71fb      	strb	r3, [r7, #7]
	spiWriteByte(spi, ST7735_CS_PORT, ST7735_CS, data);
 8002086:	4b05      	ldr	r3, [pc, #20]	; (800209c <lcd7735_senddata+0x20>)
 8002088:	6818      	ldr	r0, [r3, #0]
 800208a:	79fb      	ldrb	r3, [r7, #7]
 800208c:	2206      	movs	r2, #6
 800208e:	4904      	ldr	r1, [pc, #16]	; (80020a0 <lcd7735_senddata+0x24>)
 8002090:	f001 f936 	bl	8003300 <spiWriteByte>
}
 8002094:	bf00      	nop
 8002096:	3708      	adds	r7, #8
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	20000008 	.word	0x20000008
 80020a0:	40020400 	.word	0x40020400

080020a4 <lcd7735_sendCmd>:
	spiWriteWord(spi, ST7735_CS_PORT, ST7735_CS, data);
}

// Send control command to controller
void lcd7735_sendCmd(const uint8_t cmd)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	4603      	mov	r3, r0
 80020ac:	71fb      	strb	r3, [r7, #7]
	ST7735_DC0;
 80020ae:	2107      	movs	r1, #7
 80020b0:	4805      	ldr	r0, [pc, #20]	; (80020c8 <lcd7735_sendCmd+0x24>)
 80020b2:	f000 fde1 	bl	8002c78 <gpioResetPin>
    lcd7735_senddata(cmd);
 80020b6:	79fb      	ldrb	r3, [r7, #7]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff ffdf 	bl	800207c <lcd7735_senddata>
}
 80020be:	bf00      	nop
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40020800 	.word	0x40020800

080020cc <lcd7735_sendData>:

// Send parameters o command to controller
void lcd7735_sendData(const uint8_t data)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	4603      	mov	r3, r0
 80020d4:	71fb      	strb	r3, [r7, #7]
    ST7735_DC1;
 80020d6:	2107      	movs	r1, #7
 80020d8:	4805      	ldr	r0, [pc, #20]	; (80020f0 <lcd7735_sendData+0x24>)
 80020da:	f000 fda2 	bl	8002c22 <gpioSetPin>
    lcd7735_senddata(data);
 80020de:	79fb      	ldrb	r3, [r7, #7]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff ffcb 	bl	800207c <lcd7735_senddata>
}
 80020e6:	bf00      	nop
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	40020800 	.word	0x40020800

080020f4 <lcd7735_setup>:

// Init hardware
void lcd7735_setup(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af04      	add	r7, sp, #16
    // Configuration LED Pin
    gpioSelectPort(LED_GPIO);
 80020fa:	4843      	ldr	r0, [pc, #268]	; (8002208 <lcd7735_setup+0x114>)
 80020fc:	f000 fce2 	bl	8002ac4 <gpioSelectPort>
    gpioSelectPinMode(LED_GPIO, LED_red, OUTPUT);
 8002100:	2201      	movs	r2, #1
 8002102:	2103      	movs	r1, #3
 8002104:	4840      	ldr	r0, [pc, #256]	; (8002208 <lcd7735_setup+0x114>)
 8002106:	f000 fd41 	bl	8002b8c <gpioSelectPinMode>
    gpioSetOutputType(LED_GPIO, LED_red	, PUSHPULL);
 800210a:	2200      	movs	r2, #0
 800210c:	2103      	movs	r1, #3
 800210e:	483e      	ldr	r0, [pc, #248]	; (8002208 <lcd7735_setup+0x114>)
 8002110:	f000 fe47 	bl	8002da2 <gpioSetOutputType>
    gpioSelectPushPullMode(LED_GPIO, LED_red, PULLUP);
 8002114:	2201      	movs	r2, #1
 8002116:	2103      	movs	r1, #3
 8002118:	483b      	ldr	r0, [pc, #236]	; (8002208 <lcd7735_setup+0x114>)
 800211a:	f000 fe8b 	bl	8002e34 <gpioSelectPushPullMode>
    LED_red_off;
 800211e:	2103      	movs	r1, #3
 8002120:	4839      	ldr	r0, [pc, #228]	; (8002208 <lcd7735_setup+0x114>)
 8002122:	f000 fd7e 	bl	8002c22 <gpioSetPin>

    gpioSelectPinMode(LED_GPIO, LED_green, OUTPUT);
 8002126:	2201      	movs	r2, #1
 8002128:	2104      	movs	r1, #4
 800212a:	4837      	ldr	r0, [pc, #220]	; (8002208 <lcd7735_setup+0x114>)
 800212c:	f000 fd2e 	bl	8002b8c <gpioSelectPinMode>
    gpioSetOutputType(LED_GPIO, LED_green, PUSHPULL);
 8002130:	2200      	movs	r2, #0
 8002132:	2104      	movs	r1, #4
 8002134:	4834      	ldr	r0, [pc, #208]	; (8002208 <lcd7735_setup+0x114>)
 8002136:	f000 fe34 	bl	8002da2 <gpioSetOutputType>
    gpioSelectPushPullMode(LED_GPIO, LED_green, PULLUP);
 800213a:	2201      	movs	r2, #1
 800213c:	2104      	movs	r1, #4
 800213e:	4832      	ldr	r0, [pc, #200]	; (8002208 <lcd7735_setup+0x114>)
 8002140:	f000 fe78 	bl	8002e34 <gpioSelectPushPullMode>
    LED_green_off;
 8002144:	2104      	movs	r1, #4
 8002146:	4830      	ldr	r0, [pc, #192]	; (8002208 <lcd7735_setup+0x114>)
 8002148:	f000 fd6b 	bl	8002c22 <gpioSetPin>

    gpioSelectPinMode(LED_GPIO, LED_blue, OUTPUT);
 800214c:	2201      	movs	r2, #1
 800214e:	210a      	movs	r1, #10
 8002150:	482d      	ldr	r0, [pc, #180]	; (8002208 <lcd7735_setup+0x114>)
 8002152:	f000 fd1b 	bl	8002b8c <gpioSelectPinMode>
    gpioSetOutputType(LED_GPIO, LED_blue, PUSHPULL);
 8002156:	2200      	movs	r2, #0
 8002158:	210a      	movs	r1, #10
 800215a:	482b      	ldr	r0, [pc, #172]	; (8002208 <lcd7735_setup+0x114>)
 800215c:	f000 fe21 	bl	8002da2 <gpioSetOutputType>
    gpioSelectPushPullMode(LED_GPIO, LED_blue, PULLUP);
 8002160:	2201      	movs	r2, #1
 8002162:	210a      	movs	r1, #10
 8002164:	4828      	ldr	r0, [pc, #160]	; (8002208 <lcd7735_setup+0x114>)
 8002166:	f000 fe65 	bl	8002e34 <gpioSelectPushPullMode>
    LED_blue_off;
 800216a:	210a      	movs	r1, #10
 800216c:	4826      	ldr	r0, [pc, #152]	; (8002208 <lcd7735_setup+0x114>)
 800216e:	f000 fd58 	bl	8002c22 <gpioSetPin>
    /* Declartion of SPI & IO Pins für ST7735-Port
     *
     *
     */

    gpioSelectPort(ST7735_RST_PORT);
 8002172:	4826      	ldr	r0, [pc, #152]	; (800220c <lcd7735_setup+0x118>)
 8002174:	f000 fca6 	bl	8002ac4 <gpioSelectPort>
    gpioSelectPinMode(ST7735_RST_PORT, ST7735_RST, OUTPUT);		// RESET
 8002178:	2201      	movs	r2, #1
 800217a:	2109      	movs	r1, #9
 800217c:	4823      	ldr	r0, [pc, #140]	; (800220c <lcd7735_setup+0x118>)
 800217e:	f000 fd05 	bl	8002b8c <gpioSelectPinMode>
    gpioSelectPort(ST7735_DC_PORT);
 8002182:	4823      	ldr	r0, [pc, #140]	; (8002210 <lcd7735_setup+0x11c>)
 8002184:	f000 fc9e 	bl	8002ac4 <gpioSelectPort>
    gpioSelectPinMode(ST7735_DC_PORT, ST7735_DC, OUTPUT);		// DATA/Command
 8002188:	2201      	movs	r2, #1
 800218a:	2107      	movs	r1, #7
 800218c:	4820      	ldr	r0, [pc, #128]	; (8002210 <lcd7735_setup+0x11c>)
 800218e:	f000 fcfd 	bl	8002b8c <gpioSelectPinMode>

    gpioInitPort(ST7735_CS_PORT);
 8002192:	481d      	ldr	r0, [pc, #116]	; (8002208 <lcd7735_setup+0x114>)
 8002194:	f000 fc34 	bl	8002a00 <gpioInitPort>
    gpioSelectPinMode(ST7735_CS_PORT,ST7735_CS, OUTPUT);        // CS
 8002198:	2201      	movs	r2, #1
 800219a:	2106      	movs	r1, #6
 800219c:	481a      	ldr	r0, [pc, #104]	; (8002208 <lcd7735_setup+0x114>)
 800219e:	f000 fcf5 	bl	8002b8c <gpioSelectPinMode>
    gpioSelectPushPullMode(ST7735_CS_PORT, ST7735_CS, PULLUP);
 80021a2:	2201      	movs	r2, #1
 80021a4:	2106      	movs	r1, #6
 80021a6:	4818      	ldr	r0, [pc, #96]	; (8002208 <lcd7735_setup+0x114>)
 80021a8:	f000 fe44 	bl	8002e34 <gpioSelectPushPullMode>

    gpioInitPort(ST7735_SPI_PORT);
 80021ac:	4817      	ldr	r0, [pc, #92]	; (800220c <lcd7735_setup+0x118>)
 80021ae:	f000 fc27 	bl	8002a00 <gpioInitPort>
    gpioSelectPinMode(ST7735_SPI_PORT, ST7735_CLK, ALTFUNC);     // SPI1 Clock
 80021b2:	2202      	movs	r2, #2
 80021b4:	2105      	movs	r1, #5
 80021b6:	4815      	ldr	r0, [pc, #84]	; (800220c <lcd7735_setup+0x118>)
 80021b8:	f000 fce8 	bl	8002b8c <gpioSelectPinMode>
    gpioSelectAltFunc(ST7735_SPI_PORT, ST7735_CLK, AF5);
 80021bc:	2205      	movs	r2, #5
 80021be:	2105      	movs	r1, #5
 80021c0:	4812      	ldr	r0, [pc, #72]	; (800220c <lcd7735_setup+0x118>)
 80021c2:	f000 fd85 	bl	8002cd0 <gpioSelectAltFunc>
    gpioSelectPinMode(ST7735_SPI_PORT, ST7735_MOSI, ALTFUNC);    // SPI1 MOSI
 80021c6:	2202      	movs	r2, #2
 80021c8:	2107      	movs	r1, #7
 80021ca:	4810      	ldr	r0, [pc, #64]	; (800220c <lcd7735_setup+0x118>)
 80021cc:	f000 fcde 	bl	8002b8c <gpioSelectPinMode>
    gpioSelectAltFunc(ST7735_SPI_PORT, ST7735_MOSI, AF5);
 80021d0:	2205      	movs	r2, #5
 80021d2:	2107      	movs	r1, #7
 80021d4:	480d      	ldr	r0, [pc, #52]	; (800220c <lcd7735_setup+0x118>)
 80021d6:	f000 fd7b 	bl	8002cd0 <gpioSelectAltFunc>

    // Init SPI1
    spiSelectSPI(spi);
 80021da:	4b0e      	ldr	r3, [pc, #56]	; (8002214 <lcd7735_setup+0x120>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4618      	mov	r0, r3
 80021e0:	f001 f832 	bl	8003248 <spiSelectSPI>

    spiInitSPI(spi, CLK_DIV_16, DATA_FORMAT_8, SSM_ON, SSI_LVL_HIGH, MASTER, SPI_PHASE_EDGE_1, SPI_IDLE_LOW);
 80021e4:	4b0b      	ldr	r3, [pc, #44]	; (8002214 <lcd7735_setup+0x120>)
 80021e6:	6818      	ldr	r0, [r3, #0]
 80021e8:	2300      	movs	r3, #0
 80021ea:	9303      	str	r3, [sp, #12]
 80021ec:	2300      	movs	r3, #0
 80021ee:	9302      	str	r3, [sp, #8]
 80021f0:	2300      	movs	r3, #0
 80021f2:	9301      	str	r3, [sp, #4]
 80021f4:	2301      	movs	r3, #1
 80021f6:	9300      	str	r3, [sp, #0]
 80021f8:	2301      	movs	r3, #1
 80021fa:	2200      	movs	r2, #0
 80021fc:	2103      	movs	r1, #3
 80021fe:	f000 ff27 	bl	8003050 <spiInitSPI>

}
 8002202:	bf00      	nop
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40020400 	.word	0x40020400
 800220c:	40020000 	.word	0x40020000
 8002210:	40020800 	.word	0x40020800
 8002214:	20000008 	.word	0x20000008

08002218 <main>:
/* Private function prototypes -----------------------------------------------*/
void test_ascii_screen(void);
void test_graphics(void);

int main(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af00      	add	r7, sp, #0
	int testmode = 1;
 800221e:	2301      	movs	r3, #1
 8002220:	617b      	str	r3, [r7, #20]
   	unsigned int r = 0;
 8002222:	2300      	movs	r3, #0
 8002224:	613b      	str	r3, [r7, #16]

    // Dies ist das Array, das die Adressen aller Timer-Variablen enthaelt.
       // Auch die Groesse des Arrays wird berechnet.
       uint32_t *timerList[] = { &Timer1, &ST7735_Timer /*, weitere Timer */ };
 8002226:	4a32      	ldr	r2, [pc, #200]	; (80022f0 <main+0xd8>)
 8002228:	1d3b      	adds	r3, r7, #4
 800222a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800222e:	e883 0003 	stmia.w	r3, {r0, r1}
       size_t    arraySize = sizeof(timerList)/sizeof(timerList[0]);
 8002232:	2302      	movs	r3, #2
 8002234:	60fb      	str	r3, [r7, #12]


    // Initialisiert den Systick-Timer
    systickInit(SYSTICK_1MS);
 8002236:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800223a:	f001 f915 	bl	8003468 <systickInit>
    systickSetMillis(&Timer1, 500);
 800223e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002242:	482c      	ldr	r0, [pc, #176]	; (80022f4 <main+0xdc>)
 8002244:	f001 f902 	bl	800344c <systickSetMillis>

    lcd7735_setup();
 8002248:	f7ff ff54 	bl	80020f4 <lcd7735_setup>
    LED_red_on;
 800224c:	2103      	movs	r1, #3
 800224e:	482a      	ldr	r0, [pc, #168]	; (80022f8 <main+0xe0>)
 8002250:	f000 fd12 	bl	8002c78 <gpioResetPin>
    lcd7735_initR(INITR_REDTAB);
 8002254:	2001      	movs	r0, #1
 8002256:	f7fe fd19 	bl	8000c8c <lcd7735_initR>
    lcd7735_setRotation(LANDSCAPE);
 800225a:	2001      	movs	r0, #1
 800225c:	f7ff fe90 	bl	8001f80 <lcd7735_setRotation>
    //lcd7735_init_screen((uint8_t *)&SmallFont[0],ST7735_GREEN,ST7735_BLACK,LANDSCAPE); // not OK
    lcd7735_setFont((uint8_t *)&SmallFont[0]);
 8002260:	4826      	ldr	r0, [pc, #152]	; (80022fc <main+0xe4>)
 8002262:	f7ff fbbb 	bl	80019dc <lcd7735_setFont>
    LED_red_off;
 8002266:	2103      	movs	r1, #3
 8002268:	4823      	ldr	r0, [pc, #140]	; (80022f8 <main+0xe0>)
 800226a:	f000 fcda 	bl	8002c22 <gpioSetPin>
    lcd7735_fillScreen(ST7735_BLACK);
 800226e:	2000      	movs	r0, #0
 8002270:	f7ff fe6c 	bl	8001f4c <lcd7735_fillScreen>
    while (1)
    {
	   if (true == timerTrigger)
 8002274:	4b22      	ldr	r3, [pc, #136]	; (8002300 <main+0xe8>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d006      	beq.n	800228a <main+0x72>
	   {
			systickUpdateTimerList((uint32_t *) timerList, arraySize);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	b2da      	uxtb	r2, r3
 8002280:	1d3b      	adds	r3, r7, #4
 8002282:	4611      	mov	r1, r2
 8002284:	4618      	mov	r0, r3
 8002286:	f001 f947 	bl	8003518 <systickUpdateTimerList>
	   }

	   if (isSystickExpired(Timer1))
 800228a:	4b1a      	ldr	r3, [pc, #104]	; (80022f4 <main+0xdc>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4618      	mov	r0, r3
 8002290:	f001 f90c 	bl	80034ac <isSystickExpired>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d0ec      	beq.n	8002274 <main+0x5c>
	   {
		   LED_green_off;
 800229a:	2104      	movs	r1, #4
 800229c:	4816      	ldr	r0, [pc, #88]	; (80022f8 <main+0xe0>)
 800229e:	f000 fcc0 	bl	8002c22 <gpioSetPin>
		   systickSetTicktime(&Timer1, DELAY_green);
 80022a2:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80022a6:	4813      	ldr	r0, [pc, #76]	; (80022f4 <main+0xdc>)
 80022a8:	f001 f8f2 	bl	8003490 <systickSetTicktime>
		   switch (testmode)
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d003      	beq.n	80022ba <main+0xa2>
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d003      	beq.n	80022c0 <main+0xa8>
 80022b8:	e011      	b.n	80022de <main+0xc6>
		   {
		   	   case 1:
				{
					test_graphics();
 80022ba:	f000 f825 	bl	8002308 <test_graphics>
				break;
 80022be:	e011      	b.n	80022e4 <main+0xcc>
				}
		   	   case 2:
				{
				    if (r++ > 360)
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	1c5a      	adds	r2, r3, #1
 80022c4:	613a      	str	r2, [r7, #16]
 80022c6:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80022ca:	d901      	bls.n	80022d0 <main+0xb8>
					{
					   r = 0;
 80022cc:	2300      	movs	r3, #0
 80022ce:	613b      	str	r3, [r7, #16]
					}
					lcd7735_print("Rotation",80,40,r);
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	2228      	movs	r2, #40	; 0x28
 80022d4:	2150      	movs	r1, #80	; 0x50
 80022d6:	480b      	ldr	r0, [pc, #44]	; (8002304 <main+0xec>)
 80022d8:	f7ff fdd6 	bl	8001e88 <lcd7735_print>
				break;
 80022dc:	e002      	b.n	80022e4 <main+0xcc>
				}
		   	   default:
				{
					testmode = 1;
 80022de:	2301      	movs	r3, #1
 80022e0:	617b      	str	r3, [r7, #20]
				} break;
 80022e2:	bf00      	nop
		   }
		   LED_green_on;
 80022e4:	2104      	movs	r1, #4
 80022e6:	4804      	ldr	r0, [pc, #16]	; (80022f8 <main+0xe0>)
 80022e8:	f000 fcc6 	bl	8002c78 <gpioResetPin>
	   if (true == timerTrigger)
 80022ec:	e7c2      	b.n	8002274 <main+0x5c>
 80022ee:	bf00      	nop
 80022f0:	080071ac 	.word	0x080071ac
 80022f4:	20000220 	.word	0x20000220
 80022f8:	40020400 	.word	0x40020400
 80022fc:	080071f0 	.word	0x080071f0
 8002300:	2000021c 	.word	0x2000021c
 8002304:	080071a0 	.word	0x080071a0

08002308 <test_graphics>:
    return 0;
}


    void test_graphics(void)
    {
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af02      	add	r7, sp, #8
   	switch (testcount--)
 800230e:	4b75      	ldr	r3, [pc, #468]	; (80024e4 <test_graphics+0x1dc>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	1e5a      	subs	r2, r3, #1
 8002314:	4973      	ldr	r1, [pc, #460]	; (80024e4 <test_graphics+0x1dc>)
 8002316:	600a      	str	r2, [r1, #0]
 8002318:	3b01      	subs	r3, #1
 800231a:	2b14      	cmp	r3, #20
 800231c:	f200 80d7 	bhi.w	80024ce <test_graphics+0x1c6>
 8002320:	a201      	add	r2, pc, #4	; (adr r2, 8002328 <test_graphics+0x20>)
 8002322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002326:	bf00      	nop
 8002328:	080024c7 	.word	0x080024c7
 800232c:	080024bf 	.word	0x080024bf
 8002330:	080024ab 	.word	0x080024ab
 8002334:	0800249b 	.word	0x0800249b
 8002338:	08002487 	.word	0x08002487
 800233c:	08002477 	.word	0x08002477
 8002340:	08002465 	.word	0x08002465
 8002344:	0800245d 	.word	0x0800245d
 8002348:	08002455 	.word	0x08002455
 800234c:	0800244b 	.word	0x0800244b
 8002350:	08002441 	.word	0x08002441
 8002354:	08002439 	.word	0x08002439
 8002358:	08002431 	.word	0x08002431
 800235c:	08002415 	.word	0x08002415
 8002360:	080023ff 	.word	0x080023ff
 8002364:	080023e9 	.word	0x080023e9
 8002368:	080023db 	.word	0x080023db
 800236c:	080023bf 	.word	0x080023bf
 8002370:	080023ab 	.word	0x080023ab
 8002374:	08002397 	.word	0x08002397
 8002378:	0800237d 	.word	0x0800237d
    	{
   		case 21:
   		{
   			lcd7735_setRotation(LANDSCAPE);
 800237c:	2001      	movs	r0, #1
 800237e:	f7ff fdff 	bl	8001f80 <lcd7735_setRotation>
   			lcd7735_setFont((uint8_t *)&SmallFont[0]);
 8002382:	4859      	ldr	r0, [pc, #356]	; (80024e8 <test_graphics+0x1e0>)
 8002384:	f7ff fb2a 	bl	80019dc <lcd7735_setFont>
   			lcd7735_print("Hi the 1st output",0,0,0);
 8002388:	2300      	movs	r3, #0
 800238a:	2200      	movs	r2, #0
 800238c:	2100      	movs	r1, #0
 800238e:	4857      	ldr	r0, [pc, #348]	; (80024ec <test_graphics+0x1e4>)
 8002390:	f7ff fd7a 	bl	8001e88 <lcd7735_print>
   		break;
 8002394:	e0a2      	b.n	80024dc <test_graphics+0x1d4>
   		}
   		case 20:
		{
			lcd7735_setFont((uint8_t *)&BigFont[0]);
 8002396:	4856      	ldr	r0, [pc, #344]	; (80024f0 <test_graphics+0x1e8>)
 8002398:	f7ff fb20 	bl	80019dc <lcd7735_setFont>
			lcd7735_print("BigFont",0,20,0);
 800239c:	2300      	movs	r3, #0
 800239e:	2214      	movs	r2, #20
 80023a0:	2100      	movs	r1, #0
 80023a2:	4854      	ldr	r0, [pc, #336]	; (80024f4 <test_graphics+0x1ec>)
 80023a4:	f7ff fd70 	bl	8001e88 <lcd7735_print>
		break;
 80023a8:	e098      	b.n	80024dc <test_graphics+0x1d4>
		}
   		case 19:
   		{
   			lcd7735_setFont((uint8_t *)&SevenSegNumFont[0]);
 80023aa:	4853      	ldr	r0, [pc, #332]	; (80024f8 <test_graphics+0x1f0>)
 80023ac:	f7ff fb16 	bl	80019dc <lcd7735_setFont>
   			lcd7735_print("01234",0,60,0);
 80023b0:	2300      	movs	r3, #0
 80023b2:	223c      	movs	r2, #60	; 0x3c
 80023b4:	2100      	movs	r1, #0
 80023b6:	4851      	ldr	r0, [pc, #324]	; (80024fc <test_graphics+0x1f4>)
 80023b8:	f7ff fd66 	bl	8001e88 <lcd7735_print>
   		break;
 80023bc:	e08e      	b.n	80024dc <test_graphics+0x1d4>
   		}
   		case 18:
   		{
   			lcd7735_setFont((uint8_t *)&BigFont[0]);
 80023be:	484c      	ldr	r0, [pc, #304]	; (80024f0 <test_graphics+0x1e8>)
 80023c0:	f7ff fb0c 	bl	80019dc <lcd7735_setFont>
   			lcd7735_fillScreen(ST7735_MAGENTA);
 80023c4:	f64f 001f 	movw	r0, #63519	; 0xf81f
 80023c8:	f7ff fdc0 	bl	8001f4c <lcd7735_fillScreen>
   			lcd7735_print("Hello!",20,10,0);
 80023cc:	2300      	movs	r3, #0
 80023ce:	220a      	movs	r2, #10
 80023d0:	2114      	movs	r1, #20
 80023d2:	484b      	ldr	r0, [pc, #300]	; (8002500 <test_graphics+0x1f8>)
 80023d4:	f7ff fd58 	bl	8001e88 <lcd7735_print>
   		break;
 80023d8:	e080      	b.n	80024dc <test_graphics+0x1d4>
   		}
    	case 17:	lcd7735_print("37deg Hello!",10,5,37);break;
 80023da:	2325      	movs	r3, #37	; 0x25
 80023dc:	2205      	movs	r2, #5
 80023de:	210a      	movs	r1, #10
 80023e0:	4848      	ldr	r0, [pc, #288]	; (8002504 <test_graphics+0x1fc>)
 80023e2:	f7ff fd51 	bl	8001e88 <lcd7735_print>
 80023e6:	e079      	b.n	80024dc <test_graphics+0x1d4>
    	case 16:	lcd7735_drawBitmap(0,0,50,52,(bitmapdatatype)tux_50_ad,1);break;
 80023e8:	2301      	movs	r3, #1
 80023ea:	9301      	str	r3, [sp, #4]
 80023ec:	4b46      	ldr	r3, [pc, #280]	; (8002508 <test_graphics+0x200>)
 80023ee:	9300      	str	r3, [sp, #0]
 80023f0:	2334      	movs	r3, #52	; 0x34
 80023f2:	2232      	movs	r2, #50	; 0x32
 80023f4:	2100      	movs	r1, #0
 80023f6:	2000      	movs	r0, #0
 80023f8:	f7ff f978 	bl	80016ec <lcd7735_drawBitmap>
 80023fc:	e06e      	b.n	80024dc <test_graphics+0x1d4>
    	case 15:	lcd7735_drawBitmap(55,0,50,52,(bitmapdatatype)tux_50_ad,2);break;
 80023fe:	2302      	movs	r3, #2
 8002400:	9301      	str	r3, [sp, #4]
 8002402:	4b41      	ldr	r3, [pc, #260]	; (8002508 <test_graphics+0x200>)
 8002404:	9300      	str	r3, [sp, #0]
 8002406:	2334      	movs	r3, #52	; 0x34
 8002408:	2232      	movs	r2, #50	; 0x32
 800240a:	2100      	movs	r1, #0
 800240c:	2037      	movs	r0, #55	; 0x37
 800240e:	f7ff f96d 	bl	80016ec <lcd7735_drawBitmap>
 8002412:	e063      	b.n	80024dc <test_graphics+0x1d4>
    	case 14:
    	{
    		lcd7735_setRotation(PORTRAIT);
 8002414:	2000      	movs	r0, #0
 8002416:	f7ff fdb3 	bl	8001f80 <lcd7735_setRotation>
    		lcd7735_drawBitmap(0,0,50,52,(bitmapdatatype)tux_50_ad,1);
 800241a:	2301      	movs	r3, #1
 800241c:	9301      	str	r3, [sp, #4]
 800241e:	4b3a      	ldr	r3, [pc, #232]	; (8002508 <test_graphics+0x200>)
 8002420:	9300      	str	r3, [sp, #0]
 8002422:	2334      	movs	r3, #52	; 0x34
 8002424:	2232      	movs	r2, #50	; 0x32
 8002426:	2100      	movs	r1, #0
 8002428:	2000      	movs	r0, #0
 800242a:	f7ff f95f 	bl	80016ec <lcd7735_drawBitmap>
    	break;
 800242e:	e055      	b.n	80024dc <test_graphics+0x1d4>
    	}
    	case 13:	lcd7735_invertDisplay(INVERT_ON);break;
 8002430:	2001      	movs	r0, #1
 8002432:	f7ff fdf5 	bl	8002020 <lcd7735_invertDisplay>
 8002436:	e051      	b.n	80024dc <test_graphics+0x1d4>
    	case 12:	lcd7735_invertDisplay(INVERT_OFF);break;
 8002438:	2000      	movs	r0, #0
 800243a:	f7ff fdf1 	bl	8002020 <lcd7735_invertDisplay>
 800243e:	e04d      	b.n	80024dc <test_graphics+0x1d4>
    	case 11:	lcd7735_fillScreen(ST7735_RED);break;
 8002440:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8002444:	f7ff fd82 	bl	8001f4c <lcd7735_fillScreen>
 8002448:	e048      	b.n	80024dc <test_graphics+0x1d4>
    	case 10:	lcd7735_fillScreen(ST7735_GREEN);break;
 800244a:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 800244e:	f7ff fd7d 	bl	8001f4c <lcd7735_fillScreen>
 8002452:	e043      	b.n	80024dc <test_graphics+0x1d4>
    	case  9:	lcd7735_fillScreen(ST7735_BLUE);break;
 8002454:	201f      	movs	r0, #31
 8002456:	f7ff fd79 	bl	8001f4c <lcd7735_fillScreen>
 800245a:	e03f      	b.n	80024dc <test_graphics+0x1d4>
    	case  8:	lcd7735_fillScreen(ST7735_BLACK);break;
 800245c:	2000      	movs	r0, #0
 800245e:	f7ff fd75 	bl	8001f4c <lcd7735_fillScreen>
 8002462:	e03b      	b.n	80024dc <test_graphics+0x1d4>
    	case  7:	lcd7735_fillRect(20,15,40,35,ST7735_BLUE);break;
 8002464:	231f      	movs	r3, #31
 8002466:	9300      	str	r3, [sp, #0]
 8002468:	2323      	movs	r3, #35	; 0x23
 800246a:	2228      	movs	r2, #40	; 0x28
 800246c:	210f      	movs	r1, #15
 800246e:	2014      	movs	r0, #20
 8002470:	f7fe fce8 	bl	8000e44 <lcd7735_fillRect>
 8002474:	e032      	b.n	80024dc <test_graphics+0x1d4>
    	case  6:	lcd7735_fillCircle(70,70,30,ST7735_YELLOW);break;
 8002476:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800247a:	221e      	movs	r2, #30
 800247c:	2146      	movs	r1, #70	; 0x46
 800247e:	2046      	movs	r0, #70	; 0x46
 8002480:	f7ff f8d5 	bl	800162e <lcd7735_fillCircle>
 8002484:	e02a      	b.n	80024dc <test_graphics+0x1d4>
    	case  5:	lcd7735_drawRect(10,20,90,100,ST7735_MAGENTA);break;
 8002486:	f64f 031f 	movw	r3, #63519	; 0xf81f
 800248a:	9300      	str	r3, [sp, #0]
 800248c:	2364      	movs	r3, #100	; 0x64
 800248e:	225a      	movs	r2, #90	; 0x5a
 8002490:	2114      	movs	r1, #20
 8002492:	200a      	movs	r0, #10
 8002494:	f7fe fef1 	bl	800127a <lcd7735_drawRect>
 8002498:	e020      	b.n	80024dc <test_graphics+0x1d4>
    	case  4:	lcd7735_drawCircle(60,120,35,ST7735_CYAN);break;
 800249a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800249e:	2223      	movs	r2, #35	; 0x23
 80024a0:	2178      	movs	r1, #120	; 0x78
 80024a2:	203c      	movs	r0, #60	; 0x3c
 80024a4:	f7fe ff34 	bl	8001310 <lcd7735_drawCircle>
 80024a8:	e018      	b.n	80024dc <test_graphics+0x1d4>
    	case  3:	lcd7735_drawFastLine(10,5,110,120,ST7735_WHITE);break;
 80024aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	2378      	movs	r3, #120	; 0x78
 80024b2:	226e      	movs	r2, #110	; 0x6e
 80024b4:	2105      	movs	r1, #5
 80024b6:	200a      	movs	r0, #10
 80024b8:	f7fe fe08 	bl	80010cc <lcd7735_drawFastLine>
 80024bc:	e00e      	b.n	80024dc <test_graphics+0x1d4>
    	case  2:	lcd7735_invertDisplay(INVERT_ON);break;
 80024be:	2001      	movs	r0, #1
 80024c0:	f7ff fdae 	bl	8002020 <lcd7735_invertDisplay>
 80024c4:	e00a      	b.n	80024dc <test_graphics+0x1d4>
        case  1:	lcd7735_invertDisplay(INVERT_OFF);break;
 80024c6:	2000      	movs	r0, #0
 80024c8:	f7ff fdaa 	bl	8002020 <lcd7735_invertDisplay>
 80024cc:	e006      	b.n	80024dc <test_graphics+0x1d4>
        	default:
        	{
        		testcount = GrafikTests;
 80024ce:	4b05      	ldr	r3, [pc, #20]	; (80024e4 <test_graphics+0x1dc>)
 80024d0:	2215      	movs	r2, #21
 80024d2:	601a      	str	r2, [r3, #0]
        		lcd7735_fillScreen(ST7735_BLACK);
 80024d4:	2000      	movs	r0, #0
 80024d6:	f7ff fd39 	bl	8001f4c <lcd7735_fillScreen>
        		break;
 80024da:	bf00      	nop
        	}
    	}
    }
 80024dc:	bf00      	nop
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	2000000c 	.word	0x2000000c
 80024e8:	080071f0 	.word	0x080071f0
 80024ec:	080071b4 	.word	0x080071b4
 80024f0:	08007668 	.word	0x08007668
 80024f4:	080071c8 	.word	0x080071c8
 80024f8:	0800824c 	.word	0x0800824c
 80024fc:	080071d0 	.word	0x080071d0
 8002500:	080071d8 	.word	0x080071d8
 8002504:	080071e0 	.word	0x080071e0
 8002508:	08008aa8 	.word	0x08008aa8

0800250c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
	return 1;
 8002510:	2301      	movs	r3, #1
}
 8002512:	4618      	mov	r0, r3
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <_kill>:

int _kill(int pid, int sig)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002526:	f001 f845 	bl	80035b4 <__errno>
 800252a:	4603      	mov	r3, r0
 800252c:	2216      	movs	r2, #22
 800252e:	601a      	str	r2, [r3, #0]
	return -1;
 8002530:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002534:	4618      	mov	r0, r3
 8002536:	3708      	adds	r7, #8
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <_exit>:

void _exit (int status)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002544:	f04f 31ff 	mov.w	r1, #4294967295
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f7ff ffe7 	bl	800251c <_kill>
	while (1) {}		/* Make sure we hang here */
 800254e:	e7fe      	b.n	800254e <_exit+0x12>

08002550 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800255c:	2300      	movs	r3, #0
 800255e:	617b      	str	r3, [r7, #20]
 8002560:	e00a      	b.n	8002578 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002562:	f3af 8000 	nop.w
 8002566:	4601      	mov	r1, r0
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	1c5a      	adds	r2, r3, #1
 800256c:	60ba      	str	r2, [r7, #8]
 800256e:	b2ca      	uxtb	r2, r1
 8002570:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	3301      	adds	r3, #1
 8002576:	617b      	str	r3, [r7, #20]
 8002578:	697a      	ldr	r2, [r7, #20]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	429a      	cmp	r2, r3
 800257e:	dbf0      	blt.n	8002562 <_read+0x12>
	}

return len;
 8002580:	687b      	ldr	r3, [r7, #4]
}
 8002582:	4618      	mov	r0, r3
 8002584:	3718      	adds	r7, #24
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b086      	sub	sp, #24
 800258e:	af00      	add	r7, sp, #0
 8002590:	60f8      	str	r0, [r7, #12]
 8002592:	60b9      	str	r1, [r7, #8]
 8002594:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002596:	2300      	movs	r3, #0
 8002598:	617b      	str	r3, [r7, #20]
 800259a:	e009      	b.n	80025b0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	1c5a      	adds	r2, r3, #1
 80025a0:	60ba      	str	r2, [r7, #8]
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	3301      	adds	r3, #1
 80025ae:	617b      	str	r3, [r7, #20]
 80025b0:	697a      	ldr	r2, [r7, #20]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	dbf1      	blt.n	800259c <_write+0x12>
	}
	return len;
 80025b8:	687b      	ldr	r3, [r7, #4]
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3718      	adds	r7, #24
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <_close>:

int _close(int file)
{
 80025c2:	b480      	push	{r7}
 80025c4:	b083      	sub	sp, #12
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
	return -1;
 80025ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr

080025da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025da:	b480      	push	{r7}
 80025dc:	b083      	sub	sp, #12
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
 80025e2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025ea:	605a      	str	r2, [r3, #4]
	return 0;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr

080025fa <_isatty>:

int _isatty(int file)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b083      	sub	sp, #12
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
	return 1;
 8002602:	2301      	movs	r3, #1
}
 8002604:	4618      	mov	r0, r3
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	607a      	str	r2, [r7, #4]
	return 0;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3714      	adds	r7, #20
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
	...

0800262c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b086      	sub	sp, #24
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002634:	4a14      	ldr	r2, [pc, #80]	; (8002688 <_sbrk+0x5c>)
 8002636:	4b15      	ldr	r3, [pc, #84]	; (800268c <_sbrk+0x60>)
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002640:	4b13      	ldr	r3, [pc, #76]	; (8002690 <_sbrk+0x64>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d102      	bne.n	800264e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002648:	4b11      	ldr	r3, [pc, #68]	; (8002690 <_sbrk+0x64>)
 800264a:	4a12      	ldr	r2, [pc, #72]	; (8002694 <_sbrk+0x68>)
 800264c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800264e:	4b10      	ldr	r3, [pc, #64]	; (8002690 <_sbrk+0x64>)
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4413      	add	r3, r2
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	429a      	cmp	r2, r3
 800265a:	d207      	bcs.n	800266c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800265c:	f000 ffaa 	bl	80035b4 <__errno>
 8002660:	4603      	mov	r3, r0
 8002662:	220c      	movs	r2, #12
 8002664:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002666:	f04f 33ff 	mov.w	r3, #4294967295
 800266a:	e009      	b.n	8002680 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800266c:	4b08      	ldr	r3, [pc, #32]	; (8002690 <_sbrk+0x64>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002672:	4b07      	ldr	r3, [pc, #28]	; (8002690 <_sbrk+0x64>)
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4413      	add	r3, r2
 800267a:	4a05      	ldr	r2, [pc, #20]	; (8002690 <_sbrk+0x64>)
 800267c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800267e:	68fb      	ldr	r3, [r7, #12]
}
 8002680:	4618      	mov	r0, r3
 8002682:	3718      	adds	r7, #24
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	20018000 	.word	0x20018000
 800268c:	00000400 	.word	0x00000400
 8002690:	20000228 	.word	0x20000228
 8002694:	20000240 	.word	0x20000240

08002698 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800269c:	4b08      	ldr	r3, [pc, #32]	; (80026c0 <SystemInit+0x28>)
 800269e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a2:	4a07      	ldr	r2, [pc, #28]	; (80026c0 <SystemInit+0x28>)
 80026a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80026ac:	4b04      	ldr	r3, [pc, #16]	; (80026c0 <SystemInit+0x28>)
 80026ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80026b2:	609a      	str	r2, [r3, #8]
#endif
}
 80026b4:	bf00      	nop
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	e000ed00 	.word	0xe000ed00

080026c4 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b087      	sub	sp, #28
 80026c8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80026ca:	2300      	movs	r3, #0
 80026cc:	613b      	str	r3, [r7, #16]
 80026ce:	2300      	movs	r3, #0
 80026d0:	617b      	str	r3, [r7, #20]
 80026d2:	2302      	movs	r3, #2
 80026d4:	60fb      	str	r3, [r7, #12]
 80026d6:	2300      	movs	r3, #0
 80026d8:	60bb      	str	r3, [r7, #8]
 80026da:	2302      	movs	r3, #2
 80026dc:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80026de:	4b34      	ldr	r3, [pc, #208]	; (80027b0 <SystemCoreClockUpdate+0xec>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f003 030c 	and.w	r3, r3, #12
 80026e6:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	2b08      	cmp	r3, #8
 80026ec:	d011      	beq.n	8002712 <SystemCoreClockUpdate+0x4e>
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	2b08      	cmp	r3, #8
 80026f2:	d844      	bhi.n	800277e <SystemCoreClockUpdate+0xba>
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d003      	beq.n	8002702 <SystemCoreClockUpdate+0x3e>
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	2b04      	cmp	r3, #4
 80026fe:	d004      	beq.n	800270a <SystemCoreClockUpdate+0x46>
 8002700:	e03d      	b.n	800277e <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8002702:	4b2c      	ldr	r3, [pc, #176]	; (80027b4 <SystemCoreClockUpdate+0xf0>)
 8002704:	4a2c      	ldr	r2, [pc, #176]	; (80027b8 <SystemCoreClockUpdate+0xf4>)
 8002706:	601a      	str	r2, [r3, #0]
      break;
 8002708:	e03d      	b.n	8002786 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800270a:	4b2a      	ldr	r3, [pc, #168]	; (80027b4 <SystemCoreClockUpdate+0xf0>)
 800270c:	4a2b      	ldr	r2, [pc, #172]	; (80027bc <SystemCoreClockUpdate+0xf8>)
 800270e:	601a      	str	r2, [r3, #0]
      break;
 8002710:	e039      	b.n	8002786 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8002712:	4b27      	ldr	r3, [pc, #156]	; (80027b0 <SystemCoreClockUpdate+0xec>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	0d9b      	lsrs	r3, r3, #22
 8002718:	f003 0301 	and.w	r3, r3, #1
 800271c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800271e:	4b24      	ldr	r3, [pc, #144]	; (80027b0 <SystemCoreClockUpdate+0xec>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002726:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00c      	beq.n	8002748 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800272e:	4a23      	ldr	r2, [pc, #140]	; (80027bc <SystemCoreClockUpdate+0xf8>)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	fbb2 f3f3 	udiv	r3, r2, r3
 8002736:	4a1e      	ldr	r2, [pc, #120]	; (80027b0 <SystemCoreClockUpdate+0xec>)
 8002738:	6852      	ldr	r2, [r2, #4]
 800273a:	0992      	lsrs	r2, r2, #6
 800273c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002740:	fb02 f303 	mul.w	r3, r2, r3
 8002744:	617b      	str	r3, [r7, #20]
 8002746:	e00b      	b.n	8002760 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8002748:	4a1b      	ldr	r2, [pc, #108]	; (80027b8 <SystemCoreClockUpdate+0xf4>)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002750:	4a17      	ldr	r2, [pc, #92]	; (80027b0 <SystemCoreClockUpdate+0xec>)
 8002752:	6852      	ldr	r2, [r2, #4]
 8002754:	0992      	lsrs	r2, r2, #6
 8002756:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800275a:	fb02 f303 	mul.w	r3, r2, r3
 800275e:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8002760:	4b13      	ldr	r3, [pc, #76]	; (80027b0 <SystemCoreClockUpdate+0xec>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	0c1b      	lsrs	r3, r3, #16
 8002766:	f003 0303 	and.w	r3, r3, #3
 800276a:	3301      	adds	r3, #1
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8002770:	697a      	ldr	r2, [r7, #20]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	fbb2 f3f3 	udiv	r3, r2, r3
 8002778:	4a0e      	ldr	r2, [pc, #56]	; (80027b4 <SystemCoreClockUpdate+0xf0>)
 800277a:	6013      	str	r3, [r2, #0]
      break;
 800277c:	e003      	b.n	8002786 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 800277e:	4b0d      	ldr	r3, [pc, #52]	; (80027b4 <SystemCoreClockUpdate+0xf0>)
 8002780:	4a0d      	ldr	r2, [pc, #52]	; (80027b8 <SystemCoreClockUpdate+0xf4>)
 8002782:	601a      	str	r2, [r3, #0]
      break;
 8002784:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8002786:	4b0a      	ldr	r3, [pc, #40]	; (80027b0 <SystemCoreClockUpdate+0xec>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	091b      	lsrs	r3, r3, #4
 800278c:	f003 030f 	and.w	r3, r3, #15
 8002790:	4a0b      	ldr	r2, [pc, #44]	; (80027c0 <SystemCoreClockUpdate+0xfc>)
 8002792:	5cd3      	ldrb	r3, [r2, r3]
 8002794:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8002796:	4b07      	ldr	r3, [pc, #28]	; (80027b4 <SystemCoreClockUpdate+0xf0>)
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	fa22 f303 	lsr.w	r3, r2, r3
 80027a0:	4a04      	ldr	r2, [pc, #16]	; (80027b4 <SystemCoreClockUpdate+0xf0>)
 80027a2:	6013      	str	r3, [r2, #0]
}
 80027a4:	bf00      	nop
 80027a6:	371c      	adds	r7, #28
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr
 80027b0:	40023800 	.word	0x40023800
 80027b4:	20000010 	.word	0x20000010
 80027b8:	00f42400 	.word	0x00f42400
 80027bc:	007a1200 	.word	0x007a1200
 80027c0:	08009ef8 	.word	0x08009ef8

080027c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80027c4:	480d      	ldr	r0, [pc, #52]	; (80027fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80027c6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80027c8:	f7ff ff66 	bl	8002698 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027cc:	480c      	ldr	r0, [pc, #48]	; (8002800 <LoopForever+0x6>)
  ldr r1, =_edata
 80027ce:	490d      	ldr	r1, [pc, #52]	; (8002804 <LoopForever+0xa>)
  ldr r2, =_sidata
 80027d0:	4a0d      	ldr	r2, [pc, #52]	; (8002808 <LoopForever+0xe>)
  movs r3, #0
 80027d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027d4:	e002      	b.n	80027dc <LoopCopyDataInit>

080027d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027da:	3304      	adds	r3, #4

080027dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027e0:	d3f9      	bcc.n	80027d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027e2:	4a0a      	ldr	r2, [pc, #40]	; (800280c <LoopForever+0x12>)
  ldr r4, =_ebss
 80027e4:	4c0a      	ldr	r4, [pc, #40]	; (8002810 <LoopForever+0x16>)
  movs r3, #0
 80027e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027e8:	e001      	b.n	80027ee <LoopFillZerobss>

080027ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027ec:	3204      	adds	r2, #4

080027ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027f0:	d3fb      	bcc.n	80027ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80027f2:	f000 fee5 	bl	80035c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80027f6:	f7ff fd0f 	bl	8002218 <main>

080027fa <LoopForever>:

LoopForever:
  b LoopForever
 80027fa:	e7fe      	b.n	80027fa <LoopForever>
  ldr   r0, =_estack
 80027fc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002800:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002804:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002808:	0800a4c8 	.word	0x0800a4c8
  ldr r2, =_sbss
 800280c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002810:	20000240 	.word	0x20000240

08002814 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002814:	e7fe      	b.n	8002814 <ADC_IRQHandler>
	...

08002818 <gpioVerifyPort>:
 * Function to verify the integrity of the **port** parameter.
 *
 * @param *port : Pointer to the GPIO port
 */
bool gpioVerifyPort(GPIO_TypeDef *port)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
    if ((GPIOA == port) || (GPIOB == port) || (GPIOC == port) ||
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a10      	ldr	r2, [pc, #64]	; (8002864 <gpioVerifyPort+0x4c>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d013      	beq.n	8002850 <gpioVerifyPort+0x38>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a0f      	ldr	r2, [pc, #60]	; (8002868 <gpioVerifyPort+0x50>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d00f      	beq.n	8002850 <gpioVerifyPort+0x38>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a0e      	ldr	r2, [pc, #56]	; (800286c <gpioVerifyPort+0x54>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d00b      	beq.n	8002850 <gpioVerifyPort+0x38>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4a0d      	ldr	r2, [pc, #52]	; (8002870 <gpioVerifyPort+0x58>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d007      	beq.n	8002850 <gpioVerifyPort+0x38>
        (GPIOD == port) || (GPIOE == port) || (GPIOH == port))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4a0c      	ldr	r2, [pc, #48]	; (8002874 <gpioVerifyPort+0x5c>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d003      	beq.n	8002850 <gpioVerifyPort+0x38>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a0b      	ldr	r2, [pc, #44]	; (8002878 <gpioVerifyPort+0x60>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d101      	bne.n	8002854 <gpioVerifyPort+0x3c>
    {
        return true;
 8002850:	2301      	movs	r3, #1
 8002852:	e000      	b.n	8002856 <gpioVerifyPort+0x3e>
    }
    return false;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	40020000 	.word	0x40020000
 8002868:	40020400 	.word	0x40020400
 800286c:	40020800 	.word	0x40020800
 8002870:	40020c00 	.word	0x40020c00
 8002874:	40021000 	.word	0x40021000
 8002878:	40021c00 	.word	0x40021c00

0800287c <gpioVerifyPin>:
 * Function to verify the integrity of the **pin** parameter.
 *
 * @param pin : The pin number of any of the GPIO ports
 */
bool gpioVerifyPin(PIN_NUM_t pin)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	4603      	mov	r3, r0
 8002884:	71fb      	strb	r3, [r7, #7]
    if ((PIN0  == pin) || (PIN1  == pin) || (PIN2  == pin) || (PIN3  == pin) ||
 8002886:	79fb      	ldrb	r3, [r7, #7]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d02c      	beq.n	80028e6 <gpioVerifyPin+0x6a>
 800288c:	79fb      	ldrb	r3, [r7, #7]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d029      	beq.n	80028e6 <gpioVerifyPin+0x6a>
 8002892:	79fb      	ldrb	r3, [r7, #7]
 8002894:	2b02      	cmp	r3, #2
 8002896:	d026      	beq.n	80028e6 <gpioVerifyPin+0x6a>
 8002898:	79fb      	ldrb	r3, [r7, #7]
 800289a:	2b03      	cmp	r3, #3
 800289c:	d023      	beq.n	80028e6 <gpioVerifyPin+0x6a>
 800289e:	79fb      	ldrb	r3, [r7, #7]
 80028a0:	2b04      	cmp	r3, #4
 80028a2:	d020      	beq.n	80028e6 <gpioVerifyPin+0x6a>
        (PIN4  == pin) || (PIN5  == pin) || (PIN6  == pin) || (PIN7  == pin) ||
 80028a4:	79fb      	ldrb	r3, [r7, #7]
 80028a6:	2b05      	cmp	r3, #5
 80028a8:	d01d      	beq.n	80028e6 <gpioVerifyPin+0x6a>
 80028aa:	79fb      	ldrb	r3, [r7, #7]
 80028ac:	2b06      	cmp	r3, #6
 80028ae:	d01a      	beq.n	80028e6 <gpioVerifyPin+0x6a>
 80028b0:	79fb      	ldrb	r3, [r7, #7]
 80028b2:	2b07      	cmp	r3, #7
 80028b4:	d017      	beq.n	80028e6 <gpioVerifyPin+0x6a>
 80028b6:	79fb      	ldrb	r3, [r7, #7]
 80028b8:	2b08      	cmp	r3, #8
 80028ba:	d014      	beq.n	80028e6 <gpioVerifyPin+0x6a>
        (PIN8  == pin) || (PIN9  == pin) || (PIN10 == pin) || (PIN11 == pin) ||
 80028bc:	79fb      	ldrb	r3, [r7, #7]
 80028be:	2b09      	cmp	r3, #9
 80028c0:	d011      	beq.n	80028e6 <gpioVerifyPin+0x6a>
 80028c2:	79fb      	ldrb	r3, [r7, #7]
 80028c4:	2b0a      	cmp	r3, #10
 80028c6:	d00e      	beq.n	80028e6 <gpioVerifyPin+0x6a>
 80028c8:	79fb      	ldrb	r3, [r7, #7]
 80028ca:	2b0b      	cmp	r3, #11
 80028cc:	d00b      	beq.n	80028e6 <gpioVerifyPin+0x6a>
 80028ce:	79fb      	ldrb	r3, [r7, #7]
 80028d0:	2b0c      	cmp	r3, #12
 80028d2:	d008      	beq.n	80028e6 <gpioVerifyPin+0x6a>
        (PIN12 == pin) || (PIN13 == pin) || (PIN14 == pin) || (PIN15 == pin))
 80028d4:	79fb      	ldrb	r3, [r7, #7]
 80028d6:	2b0d      	cmp	r3, #13
 80028d8:	d005      	beq.n	80028e6 <gpioVerifyPin+0x6a>
 80028da:	79fb      	ldrb	r3, [r7, #7]
 80028dc:	2b0e      	cmp	r3, #14
 80028de:	d002      	beq.n	80028e6 <gpioVerifyPin+0x6a>
 80028e0:	79fb      	ldrb	r3, [r7, #7]
 80028e2:	2b0f      	cmp	r3, #15
 80028e4:	d101      	bne.n	80028ea <gpioVerifyPin+0x6e>
    {
        return true;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e000      	b.n	80028ec <gpioVerifyPin+0x70>
    }
    return false;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <gpioVerifyAltFunc>:
 * Function to verify the integrity of the **af** parameter.
 *
 * @param af : The number of the alternative function.
 */
bool gpioVerifyAltFunc(ALT_FUNC_t af)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	4603      	mov	r3, r0
 8002900:	71fb      	strb	r3, [r7, #7]
    if ((AF0  == af) || (AF1  == af) || (AF2  == af) || (AF3  == af) || (AF4  == af) ||
 8002902:	79fb      	ldrb	r3, [r7, #7]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d02c      	beq.n	8002962 <gpioVerifyAltFunc+0x6a>
 8002908:	79fb      	ldrb	r3, [r7, #7]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d029      	beq.n	8002962 <gpioVerifyAltFunc+0x6a>
 800290e:	79fb      	ldrb	r3, [r7, #7]
 8002910:	2b02      	cmp	r3, #2
 8002912:	d026      	beq.n	8002962 <gpioVerifyAltFunc+0x6a>
 8002914:	79fb      	ldrb	r3, [r7, #7]
 8002916:	2b03      	cmp	r3, #3
 8002918:	d023      	beq.n	8002962 <gpioVerifyAltFunc+0x6a>
 800291a:	79fb      	ldrb	r3, [r7, #7]
 800291c:	2b04      	cmp	r3, #4
 800291e:	d020      	beq.n	8002962 <gpioVerifyAltFunc+0x6a>
 8002920:	79fb      	ldrb	r3, [r7, #7]
 8002922:	2b05      	cmp	r3, #5
 8002924:	d01d      	beq.n	8002962 <gpioVerifyAltFunc+0x6a>
        (AF5  == af) || (AF6  == af) || (AF7  == af) || (AF8  == af) || (AF9  == af) ||
 8002926:	79fb      	ldrb	r3, [r7, #7]
 8002928:	2b06      	cmp	r3, #6
 800292a:	d01a      	beq.n	8002962 <gpioVerifyAltFunc+0x6a>
 800292c:	79fb      	ldrb	r3, [r7, #7]
 800292e:	2b07      	cmp	r3, #7
 8002930:	d017      	beq.n	8002962 <gpioVerifyAltFunc+0x6a>
 8002932:	79fb      	ldrb	r3, [r7, #7]
 8002934:	2b08      	cmp	r3, #8
 8002936:	d014      	beq.n	8002962 <gpioVerifyAltFunc+0x6a>
 8002938:	79fb      	ldrb	r3, [r7, #7]
 800293a:	2b09      	cmp	r3, #9
 800293c:	d011      	beq.n	8002962 <gpioVerifyAltFunc+0x6a>
 800293e:	79fb      	ldrb	r3, [r7, #7]
 8002940:	2b0a      	cmp	r3, #10
 8002942:	d00e      	beq.n	8002962 <gpioVerifyAltFunc+0x6a>
        (AF10 == af) || (AF11 == af) || (AF12 == af) || (AF13 == af) || (AF14 == af) ||
 8002944:	79fb      	ldrb	r3, [r7, #7]
 8002946:	2b0b      	cmp	r3, #11
 8002948:	d00b      	beq.n	8002962 <gpioVerifyAltFunc+0x6a>
 800294a:	79fb      	ldrb	r3, [r7, #7]
 800294c:	2b0c      	cmp	r3, #12
 800294e:	d008      	beq.n	8002962 <gpioVerifyAltFunc+0x6a>
 8002950:	79fb      	ldrb	r3, [r7, #7]
 8002952:	2b0d      	cmp	r3, #13
 8002954:	d005      	beq.n	8002962 <gpioVerifyAltFunc+0x6a>
 8002956:	79fb      	ldrb	r3, [r7, #7]
 8002958:	2b0e      	cmp	r3, #14
 800295a:	d002      	beq.n	8002962 <gpioVerifyAltFunc+0x6a>
 800295c:	79fb      	ldrb	r3, [r7, #7]
 800295e:	2b0f      	cmp	r3, #15
 8002960:	d101      	bne.n	8002966 <gpioVerifyAltFunc+0x6e>
        (AF15 == af))
    {
        return true;
 8002962:	2301      	movs	r3, #1
 8002964:	e000      	b.n	8002968 <gpioVerifyAltFunc+0x70>
    }

    return false;
 8002966:	2300      	movs	r3, #0
}
 8002968:	4618      	mov	r0, r3
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <gpioVerifyPinMode>:
 * Function to verify the integrity of the **pinMode** parameter.
 *
 * @param pinMode : The operational mode in which the GPIO pin shall work.
 */
bool gpioVerifyPinMode(PIN_MODE_t pinMode)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	4603      	mov	r3, r0
 800297c:	71fb      	strb	r3, [r7, #7]
    if ((INPUT == pinMode) || (OUTPUT == pinMode) || (ALTFUNC == pinMode) || (ANALOG == pinMode))
 800297e:	79fb      	ldrb	r3, [r7, #7]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d008      	beq.n	8002996 <gpioVerifyPinMode+0x22>
 8002984:	79fb      	ldrb	r3, [r7, #7]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d005      	beq.n	8002996 <gpioVerifyPinMode+0x22>
 800298a:	79fb      	ldrb	r3, [r7, #7]
 800298c:	2b02      	cmp	r3, #2
 800298e:	d002      	beq.n	8002996 <gpioVerifyPinMode+0x22>
 8002990:	79fb      	ldrb	r3, [r7, #7]
 8002992:	2b03      	cmp	r3, #3
 8002994:	d101      	bne.n	800299a <gpioVerifyPinMode+0x26>
    {
        return true;
 8002996:	2301      	movs	r3, #1
 8002998:	e000      	b.n	800299c <gpioVerifyPinMode+0x28>
    }

    return false;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <gpioVerifyOutputType>:
 * Function to verify the integrity of the **outType** parameter.
 *
 * @param outType : Verifies whether the passed value is PUSHPULL or OPENDRAIN.
 */
bool gpioVerifyOutputType(OUTPUT_TYPE_t outType)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	4603      	mov	r3, r0
 80029b0:	71fb      	strb	r3, [r7, #7]
    if ((PUSHPULL == outType) || (OPENDRAIN == outType))
 80029b2:	79fb      	ldrb	r3, [r7, #7]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d002      	beq.n	80029be <gpioVerifyOutputType+0x16>
 80029b8:	79fb      	ldrb	r3, [r7, #7]
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d101      	bne.n	80029c2 <gpioVerifyOutputType+0x1a>
    {
        return true;
 80029be:	2301      	movs	r3, #1
 80029c0:	e000      	b.n	80029c4 <gpioVerifyOutputType+0x1c>
    }

    return false;
 80029c2:	2300      	movs	r3, #0
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <gpioVerifyPushPullMode>:
 * Function to verify the integrity of the Pullup/Pulldown parameter.
 *
 * @param mode : Verifies the Pullup/Pulldown mode
 */
bool gpioVerifyPushPullMode(PUPD_MODE_t mode)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	4603      	mov	r3, r0
 80029d8:	71fb      	strb	r3, [r7, #7]
    if ((NO_PULLUP_PULLDOWN == mode) || (PULLUP == mode) || (PULLDOWN == mode))
 80029da:	79fb      	ldrb	r3, [r7, #7]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d005      	beq.n	80029ec <gpioVerifyPushPullMode+0x1c>
 80029e0:	79fb      	ldrb	r3, [r7, #7]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d002      	beq.n	80029ec <gpioVerifyPushPullMode+0x1c>
 80029e6:	79fb      	ldrb	r3, [r7, #7]
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d101      	bne.n	80029f0 <gpioVerifyPushPullMode+0x20>
    {
        return true;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e000      	b.n	80029f2 <gpioVerifyPushPullMode+0x22>
    }
    return false;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	370c      	adds	r7, #12
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
	...

08002a00 <gpioInitPort>:
 *          <td rowspan="1">7...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioInitPort(GPIO_TypeDef *port)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
    if (gpioVerifyPort(port) == true)
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f7ff ff05 	bl	8002818 <gpioVerifyPort>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d042      	beq.n	8002a9a <gpioInitPort+0x9a>
    {
        if (GPIOA == port)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a24      	ldr	r2, [pc, #144]	; (8002aa8 <gpioInitPort+0xa8>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d106      	bne.n	8002a2a <gpioInitPort+0x2a>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8002a1c:	4b23      	ldr	r3, [pc, #140]	; (8002aac <gpioInitPort+0xac>)
 8002a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a20:	4a22      	ldr	r2, [pc, #136]	; (8002aac <gpioInitPort+0xac>)
 8002a22:	f043 0301 	orr.w	r3, r3, #1
 8002a26:	6313      	str	r3, [r2, #48]	; 0x30
 8002a28:	e035      	b.n	8002a96 <gpioInitPort+0x96>
        }
        else if (GPIOB == port)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a20      	ldr	r2, [pc, #128]	; (8002ab0 <gpioInitPort+0xb0>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d106      	bne.n	8002a40 <gpioInitPort+0x40>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8002a32:	4b1e      	ldr	r3, [pc, #120]	; (8002aac <gpioInitPort+0xac>)
 8002a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a36:	4a1d      	ldr	r2, [pc, #116]	; (8002aac <gpioInitPort+0xac>)
 8002a38:	f043 0302 	orr.w	r3, r3, #2
 8002a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a3e:	e02a      	b.n	8002a96 <gpioInitPort+0x96>
        }
        else if (GPIOC == port)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a1c      	ldr	r2, [pc, #112]	; (8002ab4 <gpioInitPort+0xb4>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d106      	bne.n	8002a56 <gpioInitPort+0x56>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8002a48:	4b18      	ldr	r3, [pc, #96]	; (8002aac <gpioInitPort+0xac>)
 8002a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4c:	4a17      	ldr	r2, [pc, #92]	; (8002aac <gpioInitPort+0xac>)
 8002a4e:	f043 0304 	orr.w	r3, r3, #4
 8002a52:	6313      	str	r3, [r2, #48]	; 0x30
 8002a54:	e01f      	b.n	8002a96 <gpioInitPort+0x96>
        }
        else if (GPIOD == port)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a17      	ldr	r2, [pc, #92]	; (8002ab8 <gpioInitPort+0xb8>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d106      	bne.n	8002a6c <gpioInitPort+0x6c>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 8002a5e:	4b13      	ldr	r3, [pc, #76]	; (8002aac <gpioInitPort+0xac>)
 8002a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a62:	4a12      	ldr	r2, [pc, #72]	; (8002aac <gpioInitPort+0xac>)
 8002a64:	f043 0308 	orr.w	r3, r3, #8
 8002a68:	6313      	str	r3, [r2, #48]	; 0x30
 8002a6a:	e014      	b.n	8002a96 <gpioInitPort+0x96>
        }
        else if (GPIOE == port)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4a13      	ldr	r2, [pc, #76]	; (8002abc <gpioInitPort+0xbc>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d106      	bne.n	8002a82 <gpioInitPort+0x82>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 8002a74:	4b0d      	ldr	r3, [pc, #52]	; (8002aac <gpioInitPort+0xac>)
 8002a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a78:	4a0c      	ldr	r2, [pc, #48]	; (8002aac <gpioInitPort+0xac>)
 8002a7a:	f043 0310 	orr.w	r3, r3, #16
 8002a7e:	6313      	str	r3, [r2, #48]	; 0x30
 8002a80:	e009      	b.n	8002a96 <gpioInitPort+0x96>
        }
        else if (GPIOH == port)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a0e      	ldr	r2, [pc, #56]	; (8002ac0 <gpioInitPort+0xc0>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d105      	bne.n	8002a96 <gpioInitPort+0x96>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN;
 8002a8a:	4b08      	ldr	r3, [pc, #32]	; (8002aac <gpioInitPort+0xac>)
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8e:	4a07      	ldr	r2, [pc, #28]	; (8002aac <gpioInitPort+0xac>)
 8002a90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a94:	6313      	str	r3, [r2, #48]	; 0x30
        }
        return GPIO_OK;
 8002a96:	2300      	movs	r3, #0
 8002a98:	e001      	b.n	8002a9e <gpioInitPort+0x9e>
    }
    return GPIO_INVALID_PORT;
 8002a9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	40020000 	.word	0x40020000
 8002aac:	40023800 	.word	0x40023800
 8002ab0:	40020400 	.word	0x40020400
 8002ab4:	40020800 	.word	0x40020800
 8002ab8:	40020c00 	.word	0x40020c00
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	40021c00 	.word	0x40021c00

08002ac4 <gpioSelectPort>:
 *          <td rowspan="1">7...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectPort(GPIO_TypeDef *port)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
    if (gpioVerifyPort(port) != true)
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f7ff fea3 	bl	8002818 <gpioVerifyPort>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	f083 0301 	eor.w	r3, r3, #1
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d002      	beq.n	8002ae4 <gpioSelectPort+0x20>
    {
        return GPIO_INVALID_PORT;
 8002ade:	f04f 33ff 	mov.w	r3, #4294967295
 8002ae2:	e041      	b.n	8002b68 <gpioSelectPort+0xa4>
    }

    if (GPIOA == port)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a22      	ldr	r2, [pc, #136]	; (8002b70 <gpioSelectPort+0xac>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d106      	bne.n	8002afa <gpioSelectPort+0x36>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8002aec:	4b21      	ldr	r3, [pc, #132]	; (8002b74 <gpioSelectPort+0xb0>)
 8002aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af0:	4a20      	ldr	r2, [pc, #128]	; (8002b74 <gpioSelectPort+0xb0>)
 8002af2:	f043 0301 	orr.w	r3, r3, #1
 8002af6:	6313      	str	r3, [r2, #48]	; 0x30
 8002af8:	e035      	b.n	8002b66 <gpioSelectPort+0xa2>
    }
    else if (GPIOB == port)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a1e      	ldr	r2, [pc, #120]	; (8002b78 <gpioSelectPort+0xb4>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d106      	bne.n	8002b10 <gpioSelectPort+0x4c>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8002b02:	4b1c      	ldr	r3, [pc, #112]	; (8002b74 <gpioSelectPort+0xb0>)
 8002b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b06:	4a1b      	ldr	r2, [pc, #108]	; (8002b74 <gpioSelectPort+0xb0>)
 8002b08:	f043 0302 	orr.w	r3, r3, #2
 8002b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b0e:	e02a      	b.n	8002b66 <gpioSelectPort+0xa2>
    }
    else if (GPIOC == port)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a1a      	ldr	r2, [pc, #104]	; (8002b7c <gpioSelectPort+0xb8>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d106      	bne.n	8002b26 <gpioSelectPort+0x62>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8002b18:	4b16      	ldr	r3, [pc, #88]	; (8002b74 <gpioSelectPort+0xb0>)
 8002b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1c:	4a15      	ldr	r2, [pc, #84]	; (8002b74 <gpioSelectPort+0xb0>)
 8002b1e:	f043 0304 	orr.w	r3, r3, #4
 8002b22:	6313      	str	r3, [r2, #48]	; 0x30
 8002b24:	e01f      	b.n	8002b66 <gpioSelectPort+0xa2>
    }
    else if (GPIOD == port)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a15      	ldr	r2, [pc, #84]	; (8002b80 <gpioSelectPort+0xbc>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d106      	bne.n	8002b3c <gpioSelectPort+0x78>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 8002b2e:	4b11      	ldr	r3, [pc, #68]	; (8002b74 <gpioSelectPort+0xb0>)
 8002b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b32:	4a10      	ldr	r2, [pc, #64]	; (8002b74 <gpioSelectPort+0xb0>)
 8002b34:	f043 0308 	orr.w	r3, r3, #8
 8002b38:	6313      	str	r3, [r2, #48]	; 0x30
 8002b3a:	e014      	b.n	8002b66 <gpioSelectPort+0xa2>
    }
    else if (GPIOE == port)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	4a11      	ldr	r2, [pc, #68]	; (8002b84 <gpioSelectPort+0xc0>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d106      	bne.n	8002b52 <gpioSelectPort+0x8e>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 8002b44:	4b0b      	ldr	r3, [pc, #44]	; (8002b74 <gpioSelectPort+0xb0>)
 8002b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b48:	4a0a      	ldr	r2, [pc, #40]	; (8002b74 <gpioSelectPort+0xb0>)
 8002b4a:	f043 0310 	orr.w	r3, r3, #16
 8002b4e:	6313      	str	r3, [r2, #48]	; 0x30
 8002b50:	e009      	b.n	8002b66 <gpioSelectPort+0xa2>
    }
    else if (GPIOH == port)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a0c      	ldr	r2, [pc, #48]	; (8002b88 <gpioSelectPort+0xc4>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d105      	bne.n	8002b66 <gpioSelectPort+0xa2>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN;
 8002b5a:	4b06      	ldr	r3, [pc, #24]	; (8002b74 <gpioSelectPort+0xb0>)
 8002b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5e:	4a05      	ldr	r2, [pc, #20]	; (8002b74 <gpioSelectPort+0xb0>)
 8002b60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b64:	6313      	str	r3, [r2, #48]	; 0x30
    }
    return GPIO_OK;
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3708      	adds	r7, #8
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	40020000 	.word	0x40020000
 8002b74:	40023800 	.word	0x40023800
 8002b78:	40020400 	.word	0x40020400
 8002b7c:	40020800 	.word	0x40020800
 8002b80:	40020c00 	.word	0x40020c00
 8002b84:	40021000 	.word	0x40021000
 8002b88:	40021c00 	.word	0x40021c00

08002b8c <gpioSelectPinMode>:
 *          <td rowspan="1">Sets the pin function either to input, output, alternate function, or analog mode</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectPinMode(GPIO_TypeDef *port, PIN_NUM_t pin, PIN_MODE_t mode)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	460b      	mov	r3, r1
 8002b96:	70fb      	strb	r3, [r7, #3]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f7ff fe3b 	bl	8002818 <gpioVerifyPort>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	f083 0301 	eor.w	r3, r3, #1
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d002      	beq.n	8002bb4 <gpioSelectPinMode+0x28>
    {
        return GPIO_INVALID_PORT;
 8002bae:	f04f 33ff 	mov.w	r3, #4294967295
 8002bb2:	e032      	b.n	8002c1a <gpioSelectPinMode+0x8e>
    }
    if (gpioVerifyPin(pin) != true)
 8002bb4:	78fb      	ldrb	r3, [r7, #3]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7ff fe60 	bl	800287c <gpioVerifyPin>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	f083 0301 	eor.w	r3, r3, #1
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d002      	beq.n	8002bce <gpioSelectPinMode+0x42>
    {
        return GPIO_INVALID_PIN;
 8002bc8:	f06f 0301 	mvn.w	r3, #1
 8002bcc:	e025      	b.n	8002c1a <gpioSelectPinMode+0x8e>
    }
    if (gpioVerifyPinMode(mode) != true)
 8002bce:	78bb      	ldrb	r3, [r7, #2]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7ff fecf 	bl	8002974 <gpioVerifyPinMode>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	f083 0301 	eor.w	r3, r3, #1
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d002      	beq.n	8002be8 <gpioSelectPinMode+0x5c>
    {
        return GPIO_INVALID_PINMODE;
 8002be2:	f06f 0305 	mvn.w	r3, #5
 8002be6:	e018      	b.n	8002c1a <gpioSelectPinMode+0x8e>
    }

    // Set pin to default (INPUT)
	port->MODER &= ~(0b11 << (pin * 2));
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	78fa      	ldrb	r2, [r7, #3]
 8002bee:	0052      	lsls	r2, r2, #1
 8002bf0:	2103      	movs	r1, #3
 8002bf2:	fa01 f202 	lsl.w	r2, r1, r2
 8002bf6:	43d2      	mvns	r2, r2
 8002bf8:	401a      	ands	r2, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	601a      	str	r2, [r3, #0]

	// If mode is not INPUT --> Select other setting
	if (INPUT != mode)
 8002bfe:	78bb      	ldrb	r3, [r7, #2]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d009      	beq.n	8002c18 <gpioSelectPinMode+0x8c>
	{
		port->MODER |= (mode << (pin * 2));
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	78b9      	ldrb	r1, [r7, #2]
 8002c0a:	78fa      	ldrb	r2, [r7, #3]
 8002c0c:	0052      	lsls	r2, r2, #1
 8002c0e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c12:	431a      	orrs	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	601a      	str	r2, [r3, #0]
	}

	return GPIO_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <gpioSetPin>:
 *          <td rowspan="1">15...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSetPin(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b082      	sub	sp, #8
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	70fb      	strb	r3, [r7, #3]
    if (gpioVerifyPort(port) != true)
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f7ff fdf2 	bl	8002818 <gpioVerifyPort>
 8002c34:	4603      	mov	r3, r0
 8002c36:	f083 0301 	eor.w	r3, r3, #1
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d002      	beq.n	8002c46 <gpioSetPin+0x24>
    {
        return GPIO_INVALID_PORT;
 8002c40:	f04f 33ff 	mov.w	r3, #4294967295
 8002c44:	e014      	b.n	8002c70 <gpioSetPin+0x4e>
    }
    if (gpioVerifyPin(pin) != true)
 8002c46:	78fb      	ldrb	r3, [r7, #3]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7ff fe17 	bl	800287c <gpioVerifyPin>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	f083 0301 	eor.w	r3, r3, #1
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d002      	beq.n	8002c60 <gpioSetPin+0x3e>
    {
        return GPIO_INVALID_PIN;
 8002c5a:	f06f 0301 	mvn.w	r3, #1
 8002c5e:	e007      	b.n	8002c70 <gpioSetPin+0x4e>
    }

	port->BSRR = 1 << pin;
 8002c60:	78fb      	ldrb	r3, [r7, #3]
 8002c62:	2201      	movs	r2, #1
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	461a      	mov	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	619a      	str	r2, [r3, #24]

	return GPIO_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3708      	adds	r7, #8
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <gpioResetPin>:
 *          <td rowspan="1">31...16</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioResetPin(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	460b      	mov	r3, r1
 8002c82:	70fb      	strb	r3, [r7, #3]
    if (gpioVerifyPort(port) != true)
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f7ff fdc7 	bl	8002818 <gpioVerifyPort>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	f083 0301 	eor.w	r3, r3, #1
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d002      	beq.n	8002c9c <gpioResetPin+0x24>
    {
        return GPIO_INVALID_PORT;
 8002c96:	f04f 33ff 	mov.w	r3, #4294967295
 8002c9a:	e015      	b.n	8002cc8 <gpioResetPin+0x50>
    }
    if (gpioVerifyPin(pin) != true)
 8002c9c:	78fb      	ldrb	r3, [r7, #3]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7ff fdec 	bl	800287c <gpioVerifyPin>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	f083 0301 	eor.w	r3, r3, #1
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d002      	beq.n	8002cb6 <gpioResetPin+0x3e>
    {
        return GPIO_INVALID_PIN;
 8002cb0:	f06f 0301 	mvn.w	r3, #1
 8002cb4:	e008      	b.n	8002cc8 <gpioResetPin+0x50>
    }

	port->BSRR = (1 << (pin + 16));
 8002cb6:	78fb      	ldrb	r3, [r7, #3]
 8002cb8:	3310      	adds	r3, #16
 8002cba:	2201      	movs	r2, #1
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	619a      	str	r2, [r3, #24]

	return GPIO_OK;
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3708      	adds	r7, #8
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <gpioSelectAltFunc>:
 *          <td rowspan="1">31...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectAltFunc(GPIO_TypeDef *port, PIN_NUM_t pin, ALT_FUNC_t af)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	460b      	mov	r3, r1
 8002cda:	70fb      	strb	r3, [r7, #3]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f7ff fd99 	bl	8002818 <gpioVerifyPort>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	f083 0301 	eor.w	r3, r3, #1
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d002      	beq.n	8002cf8 <gpioSelectAltFunc+0x28>
    {
        return GPIO_INVALID_PORT;
 8002cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8002cf6:	e050      	b.n	8002d9a <gpioSelectAltFunc+0xca>
    }
    if (gpioVerifyPin(pin) != true)
 8002cf8:	78fb      	ldrb	r3, [r7, #3]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7ff fdbe 	bl	800287c <gpioVerifyPin>
 8002d00:	4603      	mov	r3, r0
 8002d02:	f083 0301 	eor.w	r3, r3, #1
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d002      	beq.n	8002d12 <gpioSelectAltFunc+0x42>
    {
        return GPIO_INVALID_PIN;
 8002d0c:	f06f 0301 	mvn.w	r3, #1
 8002d10:	e043      	b.n	8002d9a <gpioSelectAltFunc+0xca>
    }
    if (gpioVerifyAltFunc(af) != true)
 8002d12:	78bb      	ldrb	r3, [r7, #2]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7ff fdef 	bl	80028f8 <gpioVerifyAltFunc>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	f083 0301 	eor.w	r3, r3, #1
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d002      	beq.n	8002d2c <gpioSelectAltFunc+0x5c>
    {
        return GPIO_INVALID_ALTFUNC;
 8002d26:	f06f 0302 	mvn.w	r3, #2
 8002d2a:	e036      	b.n	8002d9a <gpioSelectAltFunc+0xca>
    }

	// Dont't forget to select the alternative function mode before...
	gpioSelectPinMode(port, pin, ALTFUNC);
 8002d2c:	78fb      	ldrb	r3, [r7, #3]
 8002d2e:	2202      	movs	r2, #2
 8002d30:	4619      	mov	r1, r3
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f7ff ff2a 	bl	8002b8c <gpioSelectPinMode>

	if (pin <= PIN7)
 8002d38:	78fb      	ldrb	r3, [r7, #3]
 8002d3a:	2b07      	cmp	r3, #7
 8002d3c:	d815      	bhi.n	8002d6a <gpioSelectAltFunc+0x9a>
	{
		port->AFR[0] &= ~(0x0F << (pin * 4));       // Reset previously selected AF
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a1b      	ldr	r3, [r3, #32]
 8002d42:	78fa      	ldrb	r2, [r7, #3]
 8002d44:	0092      	lsls	r2, r2, #2
 8002d46:	210f      	movs	r1, #15
 8002d48:	fa01 f202 	lsl.w	r2, r1, r2
 8002d4c:	43d2      	mvns	r2, r2
 8002d4e:	401a      	ands	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	621a      	str	r2, [r3, #32]
		port->AFR[0] |= af << (pin * 4);            // Set AFR[0] to the new AF
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	78b9      	ldrb	r1, [r7, #2]
 8002d5a:	78fa      	ldrb	r2, [r7, #3]
 8002d5c:	0092      	lsls	r2, r2, #2
 8002d5e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d62:	431a      	orrs	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	621a      	str	r2, [r3, #32]
 8002d68:	e016      	b.n	8002d98 <gpioSelectAltFunc+0xc8>
	}
	else
	{
		// !!! Subtract 8 from pin number since we start at bit 0 !!!
		port->AFR[1] &= ~(0x0F << ((pin - 8) * 4)); // Reset previously selected AF.
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6e:	78fa      	ldrb	r2, [r7, #3]
 8002d70:	3a08      	subs	r2, #8
 8002d72:	0092      	lsls	r2, r2, #2
 8002d74:	210f      	movs	r1, #15
 8002d76:	fa01 f202 	lsl.w	r2, r1, r2
 8002d7a:	43d2      	mvns	r2, r2
 8002d7c:	401a      	ands	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	625a      	str	r2, [r3, #36]	; 0x24
		port->AFR[1] |= af << ((pin - 8) * 4);      // Set AFR[1] to the new AF
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d86:	78b9      	ldrb	r1, [r7, #2]
 8002d88:	78fa      	ldrb	r2, [r7, #3]
 8002d8a:	3a08      	subs	r2, #8
 8002d8c:	0092      	lsls	r2, r2, #2
 8002d8e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d92:	431a      	orrs	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return GPIO_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <gpioSetOutputType>:
 *          <td rowspan="1">Sets the output type either to push-pull or to Open drain</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSetOutputType(GPIO_TypeDef *port, PIN_NUM_t pin, OUTPUT_TYPE_t outType)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b082      	sub	sp, #8
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
 8002daa:	460b      	mov	r3, r1
 8002dac:	70fb      	strb	r3, [r7, #3]
 8002dae:	4613      	mov	r3, r2
 8002db0:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f7ff fd30 	bl	8002818 <gpioVerifyPort>
 8002db8:	4603      	mov	r3, r0
 8002dba:	f083 0301 	eor.w	r3, r3, #1
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d002      	beq.n	8002dca <gpioSetOutputType+0x28>
    {
        return GPIO_INVALID_PORT;
 8002dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8002dc8:	e030      	b.n	8002e2c <gpioSetOutputType+0x8a>
    }
    if (gpioVerifyPin(pin) != true)
 8002dca:	78fb      	ldrb	r3, [r7, #3]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7ff fd55 	bl	800287c <gpioVerifyPin>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	f083 0301 	eor.w	r3, r3, #1
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d002      	beq.n	8002de4 <gpioSetOutputType+0x42>
    {
        return GPIO_INVALID_PIN;
 8002dde:	f06f 0301 	mvn.w	r3, #1
 8002de2:	e023      	b.n	8002e2c <gpioSetOutputType+0x8a>
    }
    if (gpioVerifyOutputType(outType) != true)
 8002de4:	78bb      	ldrb	r3, [r7, #2]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7ff fdde 	bl	80029a8 <gpioVerifyOutputType>
 8002dec:	4603      	mov	r3, r0
 8002dee:	f083 0301 	eor.w	r3, r3, #1
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d002      	beq.n	8002dfe <gpioSetOutputType+0x5c>
    {
        return GPIO_INVALID_OUTPUT_TYPE;
 8002df8:	f06f 0303 	mvn.w	r3, #3
 8002dfc:	e016      	b.n	8002e2c <gpioSetOutputType+0x8a>
    }

    port->OTYPER &= ~(1 << pin);   // Use pin as push-pull output
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	78fa      	ldrb	r2, [r7, #3]
 8002e04:	2101      	movs	r1, #1
 8002e06:	fa01 f202 	lsl.w	r2, r1, r2
 8002e0a:	43d2      	mvns	r2, r2
 8002e0c:	401a      	ands	r2, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	605a      	str	r2, [r3, #4]
    if (OPENDRAIN == outType)
 8002e12:	78bb      	ldrb	r3, [r7, #2]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d108      	bne.n	8002e2a <gpioSetOutputType+0x88>
    {
        port->OTYPER |= (1 << pin);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	78fa      	ldrb	r2, [r7, #3]
 8002e1e:	2101      	movs	r1, #1
 8002e20:	fa01 f202 	lsl.w	r2, r1, r2
 8002e24:	431a      	orrs	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	605a      	str	r2, [r3, #4]
	}

	return GPIO_OK;
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3708      	adds	r7, #8
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <gpioSelectPushPullMode>:
 *          <td rowspan="1">OTYPER must be set to push-pull</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectPushPullMode(GPIO_TypeDef *port, PIN_NUM_t pin, PUPD_MODE_t pupd)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	70fb      	strb	r3, [r7, #3]
 8002e40:	4613      	mov	r3, r2
 8002e42:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f7ff fce7 	bl	8002818 <gpioVerifyPort>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	f083 0301 	eor.w	r3, r3, #1
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d002      	beq.n	8002e5c <gpioSelectPushPullMode+0x28>
    {
        return GPIO_INVALID_PORT;
 8002e56:	f04f 33ff 	mov.w	r3, #4294967295
 8002e5a:	e044      	b.n	8002ee6 <gpioSelectPushPullMode+0xb2>
    }
    if (gpioVerifyPin(pin) != true)
 8002e5c:	78fb      	ldrb	r3, [r7, #3]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7ff fd0c 	bl	800287c <gpioVerifyPin>
 8002e64:	4603      	mov	r3, r0
 8002e66:	f083 0301 	eor.w	r3, r3, #1
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d002      	beq.n	8002e76 <gpioSelectPushPullMode+0x42>
    {
        return GPIO_INVALID_PIN;
 8002e70:	f06f 0301 	mvn.w	r3, #1
 8002e74:	e037      	b.n	8002ee6 <gpioSelectPushPullMode+0xb2>
    }
    if (gpioVerifyPushPullMode(pupd) != true)
 8002e76:	78bb      	ldrb	r3, [r7, #2]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7ff fda9 	bl	80029d0 <gpioVerifyPushPullMode>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	f083 0301 	eor.w	r3, r3, #1
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d002      	beq.n	8002e90 <gpioSelectPushPullMode+0x5c>
    {
        return GPIO_INVALID_PUSH_PULL_MODE;
 8002e8a:	f06f 0306 	mvn.w	r3, #6
 8002e8e:	e02a      	b.n	8002ee6 <gpioSelectPushPullMode+0xb2>
    }

    port->PUPDR &= ~(0x03 << (pin * 2));        // Disable PU/PD
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	78fa      	ldrb	r2, [r7, #3]
 8002e96:	0052      	lsls	r2, r2, #1
 8002e98:	2103      	movs	r1, #3
 8002e9a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e9e:	43d2      	mvns	r2, r2
 8002ea0:	401a      	ands	r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	60da      	str	r2, [r3, #12]

    if (port->OTYPER == PUSHPULL)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d11a      	bne.n	8002ee4 <gpioSelectPushPullMode+0xb0>
	{
		if (PULLUP == pupd)
 8002eae:	78bb      	ldrb	r3, [r7, #2]
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d10a      	bne.n	8002eca <gpioSelectPushPullMode+0x96>
		{
			port->PUPDR |= (PULLUP << (pin *2));
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	78fa      	ldrb	r2, [r7, #3]
 8002eba:	0052      	lsls	r2, r2, #1
 8002ebc:	2101      	movs	r1, #1
 8002ebe:	fa01 f202 	lsl.w	r2, r1, r2
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	60da      	str	r2, [r3, #12]
 8002ec8:	e00c      	b.n	8002ee4 <gpioSelectPushPullMode+0xb0>
		}
		else if (PULLDOWN == pupd)
 8002eca:	78bb      	ldrb	r3, [r7, #2]
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d109      	bne.n	8002ee4 <gpioSelectPushPullMode+0xb0>
		{
			port->PUPDR |= (PULLDOWN << (pin *2));
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	78fa      	ldrb	r2, [r7, #3]
 8002ed6:	0052      	lsls	r2, r2, #1
 8002ed8:	2102      	movs	r1, #2
 8002eda:	fa01 f202 	lsl.w	r2, r1, r2
 8002ede:	431a      	orrs	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	60da      	str	r2, [r3, #12]
		}
	}

    return GPIO_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
	...

08002ef0 <spiVerifySPI>:

/**
 * Verifies the integrity of the SPI port.
 */
static bool spiVerifySPI(SPI_TypeDef *spi)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
    if ((SPI1 == spi) || (SPI2 == spi) || (SPI3 == spi) || (SPI4 == spi))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4a0c      	ldr	r2, [pc, #48]	; (8002f2c <spiVerifySPI+0x3c>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d00b      	beq.n	8002f18 <spiVerifySPI+0x28>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4a0b      	ldr	r2, [pc, #44]	; (8002f30 <spiVerifySPI+0x40>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d007      	beq.n	8002f18 <spiVerifySPI+0x28>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4a0a      	ldr	r2, [pc, #40]	; (8002f34 <spiVerifySPI+0x44>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d003      	beq.n	8002f18 <spiVerifySPI+0x28>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	4a09      	ldr	r2, [pc, #36]	; (8002f38 <spiVerifySPI+0x48>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d101      	bne.n	8002f1c <spiVerifySPI+0x2c>
    {
        return true;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e000      	b.n	8002f1e <spiVerifySPI+0x2e>
    }
    return false;
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	40013000 	.word	0x40013000
 8002f30:	40003800 	.word	0x40003800
 8002f34:	40003c00 	.word	0x40003c00
 8002f38:	40013400 	.word	0x40013400

08002f3c <spiVerifyClkDivider>:

/**
 * Verifies the integrity of the SPI clock divider.
 */
static bool spiVerifyClkDivider(SPI_CLOCK_DIV_t div)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	4603      	mov	r3, r0
 8002f44:	71fb      	strb	r3, [r7, #7]
    if ((CLK_DIV_2  == div) || (CLK_DIV_4  == div) || (CLK_DIV_8   == div) || (CLK_DIV_16  == div) ||
 8002f46:	79fb      	ldrb	r3, [r7, #7]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d014      	beq.n	8002f76 <spiVerifyClkDivider+0x3a>
 8002f4c:	79fb      	ldrb	r3, [r7, #7]
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d011      	beq.n	8002f76 <spiVerifyClkDivider+0x3a>
 8002f52:	79fb      	ldrb	r3, [r7, #7]
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d00e      	beq.n	8002f76 <spiVerifyClkDivider+0x3a>
 8002f58:	79fb      	ldrb	r3, [r7, #7]
 8002f5a:	2b03      	cmp	r3, #3
 8002f5c:	d00b      	beq.n	8002f76 <spiVerifyClkDivider+0x3a>
 8002f5e:	79fb      	ldrb	r3, [r7, #7]
 8002f60:	2b04      	cmp	r3, #4
 8002f62:	d008      	beq.n	8002f76 <spiVerifyClkDivider+0x3a>
        (CLK_DIV_32 == div) || (CLK_DIV_64 == div) || (CLK_DIV_128 == div) || (CLK_DIV_256 == div))
 8002f64:	79fb      	ldrb	r3, [r7, #7]
 8002f66:	2b05      	cmp	r3, #5
 8002f68:	d005      	beq.n	8002f76 <spiVerifyClkDivider+0x3a>
 8002f6a:	79fb      	ldrb	r3, [r7, #7]
 8002f6c:	2b06      	cmp	r3, #6
 8002f6e:	d002      	beq.n	8002f76 <spiVerifyClkDivider+0x3a>
 8002f70:	79fb      	ldrb	r3, [r7, #7]
 8002f72:	2b07      	cmp	r3, #7
 8002f74:	d101      	bne.n	8002f7a <spiVerifyClkDivider+0x3e>
    {
        return true;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e000      	b.n	8002f7c <spiVerifyClkDivider+0x40>
    }
    return false;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <spiVerifyDataLen>:

/**
 * Verifies the integrity of the SPI data length.
 */
static bool spiVerifyDataLen(SPI_DATALEN_t len)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	4603      	mov	r3, r0
 8002f90:	71fb      	strb	r3, [r7, #7]
    if ((SPI_DATA_8BIT == len) || (SPI_DATA_16_BIT == len))
 8002f92:	79fb      	ldrb	r3, [r7, #7]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d002      	beq.n	8002f9e <spiVerifyDataLen+0x16>
 8002f98:	79fb      	ldrb	r3, [r7, #7]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d101      	bne.n	8002fa2 <spiVerifyDataLen+0x1a>
    {
        return true;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e000      	b.n	8002fa4 <spiVerifyDataLen+0x1c>
    }
    return false;
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <spiVerifySSM>:

/**
 * Verifies the integrity of the SPI Software Slave Management.
 */
static bool spiVerifySSM(SPI_SSM_t ssm)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	71fb      	strb	r3, [r7, #7]
    if ((SSM_ON == ssm) || (SSM_OFF == ssm))
 8002fba:	79fb      	ldrb	r3, [r7, #7]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d002      	beq.n	8002fc6 <spiVerifySSM+0x16>
 8002fc0:	79fb      	ldrb	r3, [r7, #7]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <spiVerifySSM+0x1a>
    {
        return true;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e000      	b.n	8002fcc <spiVerifySSM+0x1c>
    }
    return false;
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <spiVerifyOpMode>:

/**
 * Verifies the integrity of the SPI operational mode.
 */
static bool spiVerifyOpMode(SPI_OPMODE_t om)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	4603      	mov	r3, r0
 8002fe0:	71fb      	strb	r3, [r7, #7]
    if ((MASTER == om) || (SLAVE == om))
 8002fe2:	79fb      	ldrb	r3, [r7, #7]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d002      	beq.n	8002fee <spiVerifyOpMode+0x16>
 8002fe8:	79fb      	ldrb	r3, [r7, #7]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d101      	bne.n	8002ff2 <spiVerifyOpMode+0x1a>
    {
        return true;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e000      	b.n	8002ff4 <spiVerifyOpMode+0x1c>
    }
    return false;
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <spiVerifyPhase>:

/**
 * Verifies the integrity of the SPI trigger phase.
 */
static bool spiVerifyPhase(SPI_PHASE_t ph)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	4603      	mov	r3, r0
 8003008:	71fb      	strb	r3, [r7, #7]
    if ((SPI_PHASE_EDGE_1 == ph) || (SPI_PHASE_EDGE_2 == ph))
 800300a:	79fb      	ldrb	r3, [r7, #7]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d002      	beq.n	8003016 <spiVerifyPhase+0x16>
 8003010:	79fb      	ldrb	r3, [r7, #7]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d101      	bne.n	800301a <spiVerifyPhase+0x1a>
    {
        return true;
 8003016:	2301      	movs	r3, #1
 8003018:	e000      	b.n	800301c <spiVerifyPhase+0x1c>
    }
    return false;
 800301a:	2300      	movs	r3, #0
}
 800301c:	4618      	mov	r0, r3
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <spiVerifyIdlePolarity>:

/**
 * Verifies the integrity of the SPI idle level.
 */
static bool spiVerifyIdlePolarity(SPI_POLARITY_t pol)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	4603      	mov	r3, r0
 8003030:	71fb      	strb	r3, [r7, #7]
    if ((SPI_IDLE_LOW == pol) || (SPI_IDLE_HIGH == pol))
 8003032:	79fb      	ldrb	r3, [r7, #7]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d002      	beq.n	800303e <spiVerifyIdlePolarity+0x16>
 8003038:	79fb      	ldrb	r3, [r7, #7]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d101      	bne.n	8003042 <spiVerifyIdlePolarity+0x1a>
    {
        return true;
 800303e:	2301      	movs	r3, #1
 8003040:	e000      	b.n	8003044 <spiVerifyIdlePolarity+0x1c>
    }
    return false;
 8003042:	2300      	movs	r3, #0
}
 8003044:	4618      	mov	r0, r3
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <spiInitSPI>:
 * </table>
 */
SPI_RETURN_CODE_t spiInitSPI(SPI_TypeDef *spi, SPI_CLOCK_DIV_t div, SPI_DATALEN_t len,
                             SPI_SSM_t ssm, SPI_SSI_LVL_t lvl, SPI_OPMODE_t opMode,
                             SPI_PHASE_t phase, SPI_POLARITY_t polarity)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	4608      	mov	r0, r1
 800305a:	4611      	mov	r1, r2
 800305c:	461a      	mov	r2, r3
 800305e:	4603      	mov	r3, r0
 8003060:	70fb      	strb	r3, [r7, #3]
 8003062:	460b      	mov	r3, r1
 8003064:	70bb      	strb	r3, [r7, #2]
 8003066:	4613      	mov	r3, r2
 8003068:	707b      	strb	r3, [r7, #1]
    uint16_t cr1 = 0U;
 800306a:	2300      	movs	r3, #0
 800306c:	81fb      	strh	r3, [r7, #14]

    // Parameter verification
    if (spiVerifyClkDivider(div) != true)
 800306e:	78fb      	ldrb	r3, [r7, #3]
 8003070:	4618      	mov	r0, r3
 8003072:	f7ff ff63 	bl	8002f3c <spiVerifyClkDivider>
 8003076:	4603      	mov	r3, r0
 8003078:	f083 0301 	eor.w	r3, r3, #1
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d002      	beq.n	8003088 <spiInitSPI+0x38>
    {
        return SPI_INVALID_CLOCK_DIVIDER;
 8003082:	f06f 0350 	mvn.w	r3, #80	; 0x50
 8003086:	e0da      	b.n	800323e <spiInitSPI+0x1ee>
    }
    if (spiVerifyDataLen(len) != true)
 8003088:	78bb      	ldrb	r3, [r7, #2]
 800308a:	4618      	mov	r0, r3
 800308c:	f7ff ff7c 	bl	8002f88 <spiVerifyDataLen>
 8003090:	4603      	mov	r3, r0
 8003092:	f083 0301 	eor.w	r3, r3, #1
 8003096:	b2db      	uxtb	r3, r3
 8003098:	2b00      	cmp	r3, #0
 800309a:	d002      	beq.n	80030a2 <spiInitSPI+0x52>
    {
        return SPI_INVALID_DATA_LENGTH;
 800309c:	f06f 0351 	mvn.w	r3, #81	; 0x51
 80030a0:	e0cd      	b.n	800323e <spiInitSPI+0x1ee>
    }
    if (spiVerifySSM(ssm) != true)
 80030a2:	787b      	ldrb	r3, [r7, #1]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7ff ff83 	bl	8002fb0 <spiVerifySSM>
 80030aa:	4603      	mov	r3, r0
 80030ac:	f083 0301 	eor.w	r3, r3, #1
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d002      	beq.n	80030bc <spiInitSPI+0x6c>
    {
        return SPI_INVALID_SW_SLV_MGMT;
 80030b6:	f06f 0352 	mvn.w	r3, #82	; 0x52
 80030ba:	e0c0      	b.n	800323e <spiInitSPI+0x1ee>
    if (spiVerifySsiLvl(lvl) != true)
    {
        return SPI_INVALID_SSI_LEVEL;
    }
#endif
    if (spiVerifyOpMode(opMode) != true)
 80030bc:	7f3b      	ldrb	r3, [r7, #28]
 80030be:	4618      	mov	r0, r3
 80030c0:	f7ff ff8a 	bl	8002fd8 <spiVerifyOpMode>
 80030c4:	4603      	mov	r3, r0
 80030c6:	f083 0301 	eor.w	r3, r3, #1
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d002      	beq.n	80030d6 <spiInitSPI+0x86>
    {
        return SPI_INVALID_OP_MODE;
 80030d0:	f06f 0355 	mvn.w	r3, #85	; 0x55
 80030d4:	e0b3      	b.n	800323e <spiInitSPI+0x1ee>
    }
    if (spiVerifyPhase(phase) != true)
 80030d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80030da:	4618      	mov	r0, r3
 80030dc:	f7ff ff90 	bl	8003000 <spiVerifyPhase>
 80030e0:	4603      	mov	r3, r0
 80030e2:	f083 0301 	eor.w	r3, r3, #1
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d002      	beq.n	80030f2 <spiInitSPI+0xa2>
    {
        return SPI_INVALID_PHASE;
 80030ec:	f06f 0356 	mvn.w	r3, #86	; 0x56
 80030f0:	e0a5      	b.n	800323e <spiInitSPI+0x1ee>
    }
    if (spiVerifyIdlePolarity(polarity) != true)
 80030f2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7ff ff96 	bl	8003028 <spiVerifyIdlePolarity>
 80030fc:	4603      	mov	r3, r0
 80030fe:	f083 0301 	eor.w	r3, r3, #1
 8003102:	b2db      	uxtb	r3, r3
 8003104:	2b00      	cmp	r3, #0
 8003106:	d002      	beq.n	800310e <spiInitSPI+0xbe>
    {
        return SPI_INVALID_IDLE_POLARITY;
 8003108:	f06f 0357 	mvn.w	r3, #87	; 0x57
 800310c:	e097      	b.n	800323e <spiInitSPI+0x1ee>
    /**
     *  All parameter check passed successfully!
     */

    // Setting up the baudrate (PCLK / Pre-Scaler)
    switch (div)
 800310e:	78fb      	ldrb	r3, [r7, #3]
 8003110:	2b07      	cmp	r3, #7
 8003112:	d83b      	bhi.n	800318c <spiInitSPI+0x13c>
 8003114:	a201      	add	r2, pc, #4	; (adr r2, 800311c <spiInitSPI+0xcc>)
 8003116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800311a:	bf00      	nop
 800311c:	0800313d 	.word	0x0800313d
 8003120:	08003147 	.word	0x08003147
 8003124:	08003151 	.word	0x08003151
 8003128:	0800315b 	.word	0x0800315b
 800312c:	08003165 	.word	0x08003165
 8003130:	0800316f 	.word	0x0800316f
 8003134:	08003179 	.word	0x08003179
 8003138:	08003183 	.word	0x08003183
    {
        case CLK_DIV_2:
            cr1 &= ~(SPI_CR1_BR_2 | SPI_CR1_BR_1 | SPI_CR1_BR_0);
 800313c:	89fb      	ldrh	r3, [r7, #14]
 800313e:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8003142:	81fb      	strh	r3, [r7, #14]
            break;
 8003144:	e027      	b.n	8003196 <spiInitSPI+0x146>

        case CLK_DIV_4:
            cr1 |= SPI_CR1_BR_0;
 8003146:	89fb      	ldrh	r3, [r7, #14]
 8003148:	f043 0308 	orr.w	r3, r3, #8
 800314c:	81fb      	strh	r3, [r7, #14]
            break;
 800314e:	e022      	b.n	8003196 <spiInitSPI+0x146>

        case CLK_DIV_8:
            cr1 |= SPI_CR1_BR_1;
 8003150:	89fb      	ldrh	r3, [r7, #14]
 8003152:	f043 0310 	orr.w	r3, r3, #16
 8003156:	81fb      	strh	r3, [r7, #14]
            break;
 8003158:	e01d      	b.n	8003196 <spiInitSPI+0x146>

        case CLK_DIV_16:
            cr1 |= (SPI_CR1_BR_1 | SPI_CR1_BR_0);
 800315a:	89fb      	ldrh	r3, [r7, #14]
 800315c:	f043 0318 	orr.w	r3, r3, #24
 8003160:	81fb      	strh	r3, [r7, #14]
            break;
 8003162:	e018      	b.n	8003196 <spiInitSPI+0x146>

        case CLK_DIV_32:
            cr1 |= SPI_CR1_BR_2;
 8003164:	89fb      	ldrh	r3, [r7, #14]
 8003166:	f043 0320 	orr.w	r3, r3, #32
 800316a:	81fb      	strh	r3, [r7, #14]
            break;
 800316c:	e013      	b.n	8003196 <spiInitSPI+0x146>

        case CLK_DIV_64:
            cr1 |= (SPI_CR1_BR_2 | SPI_CR1_BR_0);
 800316e:	89fb      	ldrh	r3, [r7, #14]
 8003170:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8003174:	81fb      	strh	r3, [r7, #14]
            break;
 8003176:	e00e      	b.n	8003196 <spiInitSPI+0x146>

        case CLK_DIV_128:
            cr1 |= (SPI_CR1_BR_2 | SPI_CR1_BR_1);
 8003178:	89fb      	ldrh	r3, [r7, #14]
 800317a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800317e:	81fb      	strh	r3, [r7, #14]
            break;
 8003180:	e009      	b.n	8003196 <spiInitSPI+0x146>

        case CLK_DIV_256:
            cr1 |= (SPI_CR1_BR_2 | SPI_CR1_BR_1 | SPI_CR1_BR_0);
 8003182:	89fb      	ldrh	r3, [r7, #14]
 8003184:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8003188:	81fb      	strh	r3, [r7, #14]
            break;
 800318a:	e004      	b.n	8003196 <spiInitSPI+0x146>

        default:
            cr1 |= (SPI_CR1_BR_1 | SPI_CR1_BR_0);
 800318c:	89fb      	ldrh	r3, [r7, #14]
 800318e:	f043 0318 	orr.w	r3, r3, #24
 8003192:	81fb      	strh	r3, [r7, #14]
            break;
 8003194:	bf00      	nop
    }

    // Setting up the data length
    if (SPI_DATA_8BIT == len)
 8003196:	78bb      	ldrb	r3, [r7, #2]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d104      	bne.n	80031a6 <spiInitSPI+0x156>
    {
        cr1 &= ~SPI_CR1_DFF_Msk;
 800319c:	89fb      	ldrh	r3, [r7, #14]
 800319e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031a2:	81fb      	strh	r3, [r7, #14]
 80031a4:	e003      	b.n	80031ae <spiInitSPI+0x15e>
    }
    else
    {
        cr1 |= SPI_CR1_DFF;
 80031a6:	89fb      	ldrh	r3, [r7, #14]
 80031a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80031ac:	81fb      	strh	r3, [r7, #14]
    }

    // Set SSM and SSI bits
    if (SSM_ON == ssm)
 80031ae:	787b      	ldrb	r3, [r7, #1]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d110      	bne.n	80031d6 <spiInitSPI+0x186>
    {
        cr1 |= SPI_CR1_SSM;
 80031b4:	89fb      	ldrh	r3, [r7, #14]
 80031b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031ba:	81fb      	strh	r3, [r7, #14]

        // SSI level works only if SSM is active
        if (SSI_LVL_HIGH == lvl)
 80031bc:	7e3b      	ldrb	r3, [r7, #24]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d104      	bne.n	80031cc <spiInitSPI+0x17c>
        {
            cr1 |= SPI_CR1_SSI;
 80031c2:	89fb      	ldrh	r3, [r7, #14]
 80031c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031c8:	81fb      	strh	r3, [r7, #14]
 80031ca:	e008      	b.n	80031de <spiInitSPI+0x18e>
        }
        else
        {
            cr1 &= ~SPI_CR1_SSI_Msk;
 80031cc:	89fb      	ldrh	r3, [r7, #14]
 80031ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031d2:	81fb      	strh	r3, [r7, #14]
 80031d4:	e003      	b.n	80031de <spiInitSPI+0x18e>
        }
    }
    else
    {
        cr1 &= ~SPI_CR1_SSM_Msk;
 80031d6:	89fb      	ldrh	r3, [r7, #14]
 80031d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80031dc:	81fb      	strh	r3, [r7, #14]
    }

    // Select between Master/Slave mode
    if (MASTER == opMode)
 80031de:	7f3b      	ldrb	r3, [r7, #28]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d104      	bne.n	80031ee <spiInitSPI+0x19e>
    {
        cr1 |= SPI_CR1_MSTR;
 80031e4:	89fb      	ldrh	r3, [r7, #14]
 80031e6:	f043 0304 	orr.w	r3, r3, #4
 80031ea:	81fb      	strh	r3, [r7, #14]
 80031ec:	e003      	b.n	80031f6 <spiInitSPI+0x1a6>
    }
    else
    {
        cr1 &= ~SPI_CR1_MSTR_Msk;
 80031ee:	89fb      	ldrh	r3, [r7, #14]
 80031f0:	f023 0304 	bic.w	r3, r3, #4
 80031f4:	81fb      	strh	r3, [r7, #14]
    }

    // Set clock phase
    if (SPI_PHASE_EDGE_1 == phase)
 80031f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d104      	bne.n	8003208 <spiInitSPI+0x1b8>
    {
        cr1 &= ~SPI_CR1_CPHA_Msk;
 80031fe:	89fb      	ldrh	r3, [r7, #14]
 8003200:	f023 0301 	bic.w	r3, r3, #1
 8003204:	81fb      	strh	r3, [r7, #14]
 8003206:	e003      	b.n	8003210 <spiInitSPI+0x1c0>
    }
    else
    {
        cr1 |= SPI_CR1_CPHA;
 8003208:	89fb      	ldrh	r3, [r7, #14]
 800320a:	f043 0301 	orr.w	r3, r3, #1
 800320e:	81fb      	strh	r3, [r7, #14]
    }

    // Set clock polarity
    if (SPI_IDLE_LOW == polarity)
 8003210:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003214:	2b00      	cmp	r3, #0
 8003216:	d104      	bne.n	8003222 <spiInitSPI+0x1d2>
    {
        cr1 &= ~SPI_CR1_CPOL_Msk;
 8003218:	89fb      	ldrh	r3, [r7, #14]
 800321a:	f023 0302 	bic.w	r3, r3, #2
 800321e:	81fb      	strh	r3, [r7, #14]
 8003220:	e003      	b.n	800322a <spiInitSPI+0x1da>
    }
    else
    {
        cr1 |= SPI_CR1_CPOL;
 8003222:	89fb      	ldrh	r3, [r7, #14]
 8003224:	f043 0302 	orr.w	r3, r3, #2
 8003228:	81fb      	strh	r3, [r7, #14]
    }

    // Transfer settings to CR1 + CR2
    spi->CR1 = cr1;
 800322a:	89fa      	ldrh	r2, [r7, #14]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	601a      	str	r2, [r3, #0]
    spi->CR2 = 0;                     // Simplified version. Should be modified.
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	605a      	str	r2, [r3, #4]

    // Finally, enable SPIn
    spiEnableSPI(spi);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 f846 	bl	80032c8 <spiEnableSPI>

    return SPI_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop

08003248 <spiSelectSPI>:
 *          <td rowspan="1">Depends on the desired SPI interface</td>
 *      </tr>
 * </table>
 */
SPI_RETURN_CODE_t spiSelectSPI(SPI_TypeDef *spi)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
    // All parameter check passed successfully!

    // Selects the bus clock for SPIn
    if (SPI1 == spi)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4a18      	ldr	r2, [pc, #96]	; (80032b4 <spiSelectSPI+0x6c>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d106      	bne.n	8003266 <spiSelectSPI+0x1e>
    {
        RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8003258:	4b17      	ldr	r3, [pc, #92]	; (80032b8 <spiSelectSPI+0x70>)
 800325a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800325c:	4a16      	ldr	r2, [pc, #88]	; (80032b8 <spiSelectSPI+0x70>)
 800325e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003262:	6453      	str	r3, [r2, #68]	; 0x44
 8003264:	e01f      	b.n	80032a6 <spiSelectSPI+0x5e>
    }
    else if (SPI2 == spi)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a14      	ldr	r2, [pc, #80]	; (80032bc <spiSelectSPI+0x74>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d106      	bne.n	800327c <spiSelectSPI+0x34>
    {
        RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 800326e:	4b12      	ldr	r3, [pc, #72]	; (80032b8 <spiSelectSPI+0x70>)
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	4a11      	ldr	r2, [pc, #68]	; (80032b8 <spiSelectSPI+0x70>)
 8003274:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003278:	6413      	str	r3, [r2, #64]	; 0x40
 800327a:	e014      	b.n	80032a6 <spiSelectSPI+0x5e>
    }
    else if (SPI3 == spi)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4a10      	ldr	r2, [pc, #64]	; (80032c0 <spiSelectSPI+0x78>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d106      	bne.n	8003292 <spiSelectSPI+0x4a>
    {
        RCC->APB1ENR |= RCC_APB1ENR_SPI3EN;
 8003284:	4b0c      	ldr	r3, [pc, #48]	; (80032b8 <spiSelectSPI+0x70>)
 8003286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003288:	4a0b      	ldr	r2, [pc, #44]	; (80032b8 <spiSelectSPI+0x70>)
 800328a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800328e:	6413      	str	r3, [r2, #64]	; 0x40
 8003290:	e009      	b.n	80032a6 <spiSelectSPI+0x5e>
    }
    else if (SPI4 == spi)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a0b      	ldr	r2, [pc, #44]	; (80032c4 <spiSelectSPI+0x7c>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d105      	bne.n	80032a6 <spiSelectSPI+0x5e>
    {
        RCC->APB2ENR |= RCC_APB2ENR_SPI4EN;
 800329a:	4b07      	ldr	r3, [pc, #28]	; (80032b8 <spiSelectSPI+0x70>)
 800329c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800329e:	4a06      	ldr	r2, [pc, #24]	; (80032b8 <spiSelectSPI+0x70>)
 80032a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80032a4:	6453      	str	r3, [r2, #68]	; 0x44
    }

    return SPI_OK;
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr
 80032b4:	40013000 	.word	0x40013000
 80032b8:	40023800 	.word	0x40023800
 80032bc:	40003800 	.word	0x40003800
 80032c0:	40003c00 	.word	0x40003c00
 80032c4:	40013400 	.word	0x40013400

080032c8 <spiEnableSPI>:
 *          <td rowspan="1">Enables the desired SPI interface</td>
 *      </tr>
 * </table>
 */
SPI_RETURN_CODE_t spiEnableSPI(SPI_TypeDef *spi)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
    // Parameter verification
    if (spiVerifySPI(spi) != true)
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f7ff fe0d 	bl	8002ef0 <spiVerifySPI>
 80032d6:	4603      	mov	r3, r0
 80032d8:	f083 0301 	eor.w	r3, r3, #1
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d002      	beq.n	80032e8 <spiEnableSPI+0x20>
    {
        return SPI_INVALID_SPI;
 80032e2:	f06f 034f 	mvn.w	r3, #79	; 0x4f
 80032e6:	e006      	b.n	80032f6 <spiEnableSPI+0x2e>
    }

    // All parameter check passed successfully!
    spi->CR1 |= SPI_CR1_SPE;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	601a      	str	r2, [r3, #0]

    return SPI_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3708      	adds	r7, #8
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
	...

08003300 <spiWriteByte>:
 *          <td rowspan="1">Write data to DR</td>
 *      </tr>
 * </table>
 */
SPI_RETURN_CODE_t spiWriteByte(SPI_TypeDef *spi, GPIO_TypeDef *port, PIN_NUM_t pin, uint8_t data)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	4611      	mov	r1, r2
 800330c:	461a      	mov	r2, r3
 800330e:	460b      	mov	r3, r1
 8003310:	71fb      	strb	r3, [r7, #7]
 8003312:	4613      	mov	r3, r2
 8003314:	71bb      	strb	r3, [r7, #6]
    static uint8_t state = SPI_SEND_BYTE_1;

    if (gpioVerifyPin(pin) != true)
 8003316:	79fb      	ldrb	r3, [r7, #7]
 8003318:	4618      	mov	r0, r3
 800331a:	f7ff faaf 	bl	800287c <gpioVerifyPin>
 800331e:	4603      	mov	r3, r0
 8003320:	f083 0301 	eor.w	r3, r3, #1
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d002      	beq.n	8003330 <spiWriteByte+0x30>
    {
        return GPIO_INVALID_PIN;
 800332a:	f06f 0301 	mvn.w	r3, #1
 800332e:	e03a      	b.n	80033a6 <spiWriteByte+0xa6>
    }

    // All parameters verified successfully.
    switch (state)
 8003330:	4b1f      	ldr	r3, [pc, #124]	; (80033b0 <spiWriteByte+0xb0>)
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d002      	beq.n	800333e <spiWriteByte+0x3e>
 8003338:	2b01      	cmp	r3, #1
 800333a:	d01a      	beq.n	8003372 <spiWriteByte+0x72>
 800333c:	e032      	b.n	80033a4 <spiWriteByte+0xa4>
    {
        case SPI_SEND_BYTE_1:
        {
            gpioResetPin(port, pin);              // Set CS input to low level
 800333e:	79fb      	ldrb	r3, [r7, #7]
 8003340:	4619      	mov	r1, r3
 8003342:	68b8      	ldr	r0, [r7, #8]
 8003344:	f7ff fc98 	bl	8002c78 <gpioResetPin>
            while (!(spi->SR & SPI_SR_TXE))         // Wait until the TX register is empty
 8003348:	bf00      	nop
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d0f9      	beq.n	800334a <spiWriteByte+0x4a>
            {
                ;
            }
            spi->DR = data;                         // Send first byte to data register
 8003356:	79ba      	ldrb	r2, [r7, #6]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	60da      	str	r2, [r3, #12]

            while (spi->SR & SPI_SR_BSY)            // Wait until data has been sent
 800335c:	bf00      	nop
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003366:	2b00      	cmp	r3, #0
 8003368:	d1f9      	bne.n	800335e <spiWriteByte+0x5e>
            {
                // Wait: SPI is still busy
            }
            state = SPI_SEND_BYTE_2;
 800336a:	4b11      	ldr	r3, [pc, #68]	; (80033b0 <spiWriteByte+0xb0>)
 800336c:	2201      	movs	r2, #1
 800336e:	701a      	strb	r2, [r3, #0]
            break;                                  // Leave switch-case-check
 8003370:	e018      	b.n	80033a4 <spiWriteByte+0xa4>
        }

        case SPI_SEND_BYTE_2:
        {
            while (!(spi->SR & SPI_SR_TXE))         // Wait until the TX register is empty
 8003372:	bf00      	nop
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	2b00      	cmp	r3, #0
 800337e:	d0f9      	beq.n	8003374 <spiWriteByte+0x74>
            {
                ;
            }
            spi->DR = data;                         // Send first byte to data register
 8003380:	79ba      	ldrb	r2, [r7, #6]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	60da      	str	r2, [r3, #12]

            while (spi->SR & SPI_SR_BSY)            // Wait until data has been sent
 8003386:	bf00      	nop
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1f9      	bne.n	8003388 <spiWriteByte+0x88>
            {
                // Wait: SPI is still busy
            }

            gpioSetPin(port, pin);
 8003394:	79fb      	ldrb	r3, [r7, #7]
 8003396:	4619      	mov	r1, r3
 8003398:	68b8      	ldr	r0, [r7, #8]
 800339a:	f7ff fc42 	bl	8002c22 <gpioSetPin>
            state = SPI_SEND_BYTE_1;
 800339e:	4b04      	ldr	r3, [pc, #16]	; (80033b0 <spiWriteByte+0xb0>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	701a      	strb	r2, [r3, #0]
        }
    }

    return SPI_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3710      	adds	r7, #16
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	2000022c 	.word	0x2000022c

080033b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	4603      	mov	r3, r0
 80033bc:	6039      	str	r1, [r7, #0]
 80033be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	db0a      	blt.n	80033de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	b2da      	uxtb	r2, r3
 80033cc:	490c      	ldr	r1, [pc, #48]	; (8003400 <__NVIC_SetPriority+0x4c>)
 80033ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d2:	0112      	lsls	r2, r2, #4
 80033d4:	b2d2      	uxtb	r2, r2
 80033d6:	440b      	add	r3, r1
 80033d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033dc:	e00a      	b.n	80033f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	b2da      	uxtb	r2, r3
 80033e2:	4908      	ldr	r1, [pc, #32]	; (8003404 <__NVIC_SetPriority+0x50>)
 80033e4:	79fb      	ldrb	r3, [r7, #7]
 80033e6:	f003 030f 	and.w	r3, r3, #15
 80033ea:	3b04      	subs	r3, #4
 80033ec:	0112      	lsls	r2, r2, #4
 80033ee:	b2d2      	uxtb	r2, r2
 80033f0:	440b      	add	r3, r1
 80033f2:	761a      	strb	r2, [r3, #24]
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr
 8003400:	e000e100 	.word	0xe000e100
 8003404:	e000ed00 	.word	0xe000ed00

08003408 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	3b01      	subs	r3, #1
 8003414:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003418:	d301      	bcc.n	800341e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800341a:	2301      	movs	r3, #1
 800341c:	e00f      	b.n	800343e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800341e:	4a0a      	ldr	r2, [pc, #40]	; (8003448 <SysTick_Config+0x40>)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	3b01      	subs	r3, #1
 8003424:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003426:	210f      	movs	r1, #15
 8003428:	f04f 30ff 	mov.w	r0, #4294967295
 800342c:	f7ff ffc2 	bl	80033b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003430:	4b05      	ldr	r3, [pc, #20]	; (8003448 <SysTick_Config+0x40>)
 8003432:	2200      	movs	r2, #0
 8003434:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003436:	4b04      	ldr	r3, [pc, #16]	; (8003448 <SysTick_Config+0x40>)
 8003438:	2207      	movs	r2, #7
 800343a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	e000e010 	.word	0xe000e010

0800344c <systickSetMillis>:
 * **systickSetMillis()** might be confusing since the user might expect to get a ticktime of a multiple of **one**
 * millisecond. However, depending on the setting of the divider used in function systickInit() the real ticktime might
 * be also a multiple of 10 or 100 milliseconds.
 */
void systickSetMillis(uint32_t *timer, uint32_t millis)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
    *timer = millis;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	683a      	ldr	r2, [r7, #0]
 800345a:	601a      	str	r2, [r3, #0]
}
 800345c:	bf00      	nop
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <systickInit>:
 * Initialization of the SysTick timer
 *
 * @param  divisor : Sets the tick time of SysTick
 */
void systickInit(uint32_t divisor)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
	SystemCoreClockUpdate();
 8003470:	f7ff f928 	bl	80026c4 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock / divisor);
 8003474:	4b05      	ldr	r3, [pc, #20]	; (800348c <systickInit+0x24>)
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	fbb2 f3f3 	udiv	r3, r2, r3
 800347e:	4618      	mov	r0, r3
 8003480:	f7ff ffc2 	bl	8003408 <SysTick_Config>
}
 8003484:	bf00      	nop
 8003486:	3708      	adds	r7, #8
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	20000010 	.word	0x20000010

08003490 <systickSetTicktime>:
 * @note
 * This function is a replacement for the deprecated functions systickSetMillis() and systickSetMicros(). The reason for
 * this replacement is documented in the 'Deprecated Systick Functions' section.
 */
void systickSetTicktime(uint32_t *timer, uint32_t ticktime)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
    *timer = ticktime;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	683a      	ldr	r2, [r7, #0]
 800349e:	601a      	str	r2, [r3, #0]
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <isSystickExpired>:
 * on the Systick timer.
 *
 * @param   timer : This is a software timer.
 */
bool isSystickExpired(uint32_t timer)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b085      	sub	sp, #20
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
	bool timerState = false;
 80034b4:	2300      	movs	r3, #0
 80034b6:	73fb      	strb	r3, [r7, #15]

	if (0 == timer)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <isSystickExpired+0x16>
	{
		timerState = true;
 80034be:	2301      	movs	r3, #1
 80034c0:	73fb      	strb	r3, [r7, #15]
	}

	return timerState;
 80034c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3714      	adds	r7, #20
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <SysTick_Handler>:
 * @note
 * It is very important to provide a globally defined boolean variable with exactly the name <b>timerTrigger</b>. A very good place
 * for the introduction of this variable is the file <b>main.c</b> of your personal project.
 */
void SysTick_Handler(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
	timerTrigger = true;
 80034d4:	4b03      	ldr	r3, [pc, #12]	; (80034e4 <SysTick_Handler+0x14>)
 80034d6:	2201      	movs	r2, #1
 80034d8:	701a      	strb	r2, [r3, #0]
}
 80034da:	bf00      	nop
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr
 80034e4:	2000021c 	.word	0x2000021c

080034e8 <systickUpdateTimer>:
 * Updates the given timer.
 *
 * @param *timer : A pointer to the variable representing this timer.
 */
void systickUpdateTimer(uint32_t *timer)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
    DECREMENT_TIMER(*timer);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d004      	beq.n	8003502 <systickUpdateTimer+0x1a>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	1e5a      	subs	r2, r3, #1
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	601a      	str	r2, [r3, #0]
    timerTrigger = false;
 8003502:	4b04      	ldr	r3, [pc, #16]	; (8003514 <systickUpdateTimer+0x2c>)
 8003504:	2200      	movs	r2, #0
 8003506:	701a      	strb	r2, [r3, #0]
}
 8003508:	bf00      	nop
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr
 8003514:	2000021c 	.word	0x2000021c

08003518 <systickUpdateTimerList>:
 *
 * @param  *list      : Pointer to an array of pointers
 * @param   arraySize : Size of the list
 */
void systickUpdateTimerList(uint32_t *list, uint8_t arraySize)
{
 8003518:	b480      	push	{r7}
 800351a:	b085      	sub	sp, #20
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	460b      	mov	r3, r1
 8003522:	70fb      	strb	r3, [r7, #3]
	uint32_t *timer;
	uint8_t  i;

	for (i = 0; i < (arraySize); ++i)
 8003524:	2300      	movs	r3, #0
 8003526:	73fb      	strb	r3, [r7, #15]
 8003528:	e011      	b.n	800354e <systickUpdateTimerList+0x36>
	{
		timer = (uint32_t *) list[i];
 800352a:	7bfb      	ldrb	r3, [r7, #15]
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	4413      	add	r3, r2
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	60bb      	str	r3, [r7, #8]
		DECREMENT_TIMER(*timer);
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d004      	beq.n	8003548 <systickUpdateTimerList+0x30>
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	1e5a      	subs	r2, r3, #1
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	601a      	str	r2, [r3, #0]
	for (i = 0; i < (arraySize); ++i)
 8003548:	7bfb      	ldrb	r3, [r7, #15]
 800354a:	3301      	adds	r3, #1
 800354c:	73fb      	strb	r3, [r7, #15]
 800354e:	7bfa      	ldrb	r2, [r7, #15]
 8003550:	78fb      	ldrb	r3, [r7, #3]
 8003552:	429a      	cmp	r2, r3
 8003554:	d3e9      	bcc.n	800352a <systickUpdateTimerList+0x12>
	}
    timerTrigger = false;
 8003556:	4b04      	ldr	r3, [pc, #16]	; (8003568 <systickUpdateTimerList+0x50>)
 8003558:	2200      	movs	r2, #0
 800355a:	701a      	strb	r2, [r3, #0]
}
 800355c:	bf00      	nop
 800355e:	3714      	adds	r7, #20
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr
 8003568:	2000021c 	.word	0x2000021c

0800356c <systickDelay>:
 * of the while(1) loop, e.g. when initialization of a hardware component needs
 * time to perform one initialization step (e.g. if the datasheet of that component
 * demands a delay before doing the next initialization step).
 */
void systickDelay(uint32_t *timer, uint32_t delay)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
    systickSetMillis(timer, delay);
 8003576:	6839      	ldr	r1, [r7, #0]
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f7ff ff67 	bl	800344c <systickSetMillis>
    while (!isSystickExpired(*timer))
 800357e:	e006      	b.n	800358e <systickDelay+0x22>
    {
        if (timerTrigger == true)
 8003580:	4b0b      	ldr	r3, [pc, #44]	; (80035b0 <systickDelay+0x44>)
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d002      	beq.n	800358e <systickDelay+0x22>
        {
            systickUpdateTimer(timer);
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f7ff ffad 	bl	80034e8 <systickUpdateTimer>
    while (!isSystickExpired(*timer))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4618      	mov	r0, r3
 8003594:	f7ff ff8a 	bl	80034ac <isSystickExpired>
 8003598:	4603      	mov	r3, r0
 800359a:	f083 0301 	eor.w	r3, r3, #1
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d1ed      	bne.n	8003580 <systickDelay+0x14>
        }
    }
}
 80035a4:	bf00      	nop
 80035a6:	bf00      	nop
 80035a8:	3708      	adds	r7, #8
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	2000021c 	.word	0x2000021c

080035b4 <__errno>:
 80035b4:	4b01      	ldr	r3, [pc, #4]	; (80035bc <__errno+0x8>)
 80035b6:	6818      	ldr	r0, [r3, #0]
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	20000014 	.word	0x20000014

080035c0 <__libc_init_array>:
 80035c0:	b570      	push	{r4, r5, r6, lr}
 80035c2:	4d0d      	ldr	r5, [pc, #52]	; (80035f8 <__libc_init_array+0x38>)
 80035c4:	4c0d      	ldr	r4, [pc, #52]	; (80035fc <__libc_init_array+0x3c>)
 80035c6:	1b64      	subs	r4, r4, r5
 80035c8:	10a4      	asrs	r4, r4, #2
 80035ca:	2600      	movs	r6, #0
 80035cc:	42a6      	cmp	r6, r4
 80035ce:	d109      	bne.n	80035e4 <__libc_init_array+0x24>
 80035d0:	4d0b      	ldr	r5, [pc, #44]	; (8003600 <__libc_init_array+0x40>)
 80035d2:	4c0c      	ldr	r4, [pc, #48]	; (8003604 <__libc_init_array+0x44>)
 80035d4:	f003 fdd6 	bl	8007184 <_init>
 80035d8:	1b64      	subs	r4, r4, r5
 80035da:	10a4      	asrs	r4, r4, #2
 80035dc:	2600      	movs	r6, #0
 80035de:	42a6      	cmp	r6, r4
 80035e0:	d105      	bne.n	80035ee <__libc_init_array+0x2e>
 80035e2:	bd70      	pop	{r4, r5, r6, pc}
 80035e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80035e8:	4798      	blx	r3
 80035ea:	3601      	adds	r6, #1
 80035ec:	e7ee      	b.n	80035cc <__libc_init_array+0xc>
 80035ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80035f2:	4798      	blx	r3
 80035f4:	3601      	adds	r6, #1
 80035f6:	e7f2      	b.n	80035de <__libc_init_array+0x1e>
 80035f8:	0800a4c0 	.word	0x0800a4c0
 80035fc:	0800a4c0 	.word	0x0800a4c0
 8003600:	0800a4c0 	.word	0x0800a4c0
 8003604:	0800a4c4 	.word	0x0800a4c4

08003608 <malloc>:
 8003608:	4b02      	ldr	r3, [pc, #8]	; (8003614 <malloc+0xc>)
 800360a:	4601      	mov	r1, r0
 800360c:	6818      	ldr	r0, [r3, #0]
 800360e:	f000 b877 	b.w	8003700 <_malloc_r>
 8003612:	bf00      	nop
 8003614:	20000014 	.word	0x20000014

08003618 <memset>:
 8003618:	4402      	add	r2, r0
 800361a:	4603      	mov	r3, r0
 800361c:	4293      	cmp	r3, r2
 800361e:	d100      	bne.n	8003622 <memset+0xa>
 8003620:	4770      	bx	lr
 8003622:	f803 1b01 	strb.w	r1, [r3], #1
 8003626:	e7f9      	b.n	800361c <memset+0x4>

08003628 <_free_r>:
 8003628:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800362a:	2900      	cmp	r1, #0
 800362c:	d044      	beq.n	80036b8 <_free_r+0x90>
 800362e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003632:	9001      	str	r0, [sp, #4]
 8003634:	2b00      	cmp	r3, #0
 8003636:	f1a1 0404 	sub.w	r4, r1, #4
 800363a:	bfb8      	it	lt
 800363c:	18e4      	addlt	r4, r4, r3
 800363e:	f001 fbdb 	bl	8004df8 <__malloc_lock>
 8003642:	4a1e      	ldr	r2, [pc, #120]	; (80036bc <_free_r+0x94>)
 8003644:	9801      	ldr	r0, [sp, #4]
 8003646:	6813      	ldr	r3, [r2, #0]
 8003648:	b933      	cbnz	r3, 8003658 <_free_r+0x30>
 800364a:	6063      	str	r3, [r4, #4]
 800364c:	6014      	str	r4, [r2, #0]
 800364e:	b003      	add	sp, #12
 8003650:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003654:	f001 bbd6 	b.w	8004e04 <__malloc_unlock>
 8003658:	42a3      	cmp	r3, r4
 800365a:	d908      	bls.n	800366e <_free_r+0x46>
 800365c:	6825      	ldr	r5, [r4, #0]
 800365e:	1961      	adds	r1, r4, r5
 8003660:	428b      	cmp	r3, r1
 8003662:	bf01      	itttt	eq
 8003664:	6819      	ldreq	r1, [r3, #0]
 8003666:	685b      	ldreq	r3, [r3, #4]
 8003668:	1949      	addeq	r1, r1, r5
 800366a:	6021      	streq	r1, [r4, #0]
 800366c:	e7ed      	b.n	800364a <_free_r+0x22>
 800366e:	461a      	mov	r2, r3
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	b10b      	cbz	r3, 8003678 <_free_r+0x50>
 8003674:	42a3      	cmp	r3, r4
 8003676:	d9fa      	bls.n	800366e <_free_r+0x46>
 8003678:	6811      	ldr	r1, [r2, #0]
 800367a:	1855      	adds	r5, r2, r1
 800367c:	42a5      	cmp	r5, r4
 800367e:	d10b      	bne.n	8003698 <_free_r+0x70>
 8003680:	6824      	ldr	r4, [r4, #0]
 8003682:	4421      	add	r1, r4
 8003684:	1854      	adds	r4, r2, r1
 8003686:	42a3      	cmp	r3, r4
 8003688:	6011      	str	r1, [r2, #0]
 800368a:	d1e0      	bne.n	800364e <_free_r+0x26>
 800368c:	681c      	ldr	r4, [r3, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	6053      	str	r3, [r2, #4]
 8003692:	4421      	add	r1, r4
 8003694:	6011      	str	r1, [r2, #0]
 8003696:	e7da      	b.n	800364e <_free_r+0x26>
 8003698:	d902      	bls.n	80036a0 <_free_r+0x78>
 800369a:	230c      	movs	r3, #12
 800369c:	6003      	str	r3, [r0, #0]
 800369e:	e7d6      	b.n	800364e <_free_r+0x26>
 80036a0:	6825      	ldr	r5, [r4, #0]
 80036a2:	1961      	adds	r1, r4, r5
 80036a4:	428b      	cmp	r3, r1
 80036a6:	bf04      	itt	eq
 80036a8:	6819      	ldreq	r1, [r3, #0]
 80036aa:	685b      	ldreq	r3, [r3, #4]
 80036ac:	6063      	str	r3, [r4, #4]
 80036ae:	bf04      	itt	eq
 80036b0:	1949      	addeq	r1, r1, r5
 80036b2:	6021      	streq	r1, [r4, #0]
 80036b4:	6054      	str	r4, [r2, #4]
 80036b6:	e7ca      	b.n	800364e <_free_r+0x26>
 80036b8:	b003      	add	sp, #12
 80036ba:	bd30      	pop	{r4, r5, pc}
 80036bc:	20000230 	.word	0x20000230

080036c0 <sbrk_aligned>:
 80036c0:	b570      	push	{r4, r5, r6, lr}
 80036c2:	4e0e      	ldr	r6, [pc, #56]	; (80036fc <sbrk_aligned+0x3c>)
 80036c4:	460c      	mov	r4, r1
 80036c6:	6831      	ldr	r1, [r6, #0]
 80036c8:	4605      	mov	r5, r0
 80036ca:	b911      	cbnz	r1, 80036d2 <sbrk_aligned+0x12>
 80036cc:	f000 fcf6 	bl	80040bc <_sbrk_r>
 80036d0:	6030      	str	r0, [r6, #0]
 80036d2:	4621      	mov	r1, r4
 80036d4:	4628      	mov	r0, r5
 80036d6:	f000 fcf1 	bl	80040bc <_sbrk_r>
 80036da:	1c43      	adds	r3, r0, #1
 80036dc:	d00a      	beq.n	80036f4 <sbrk_aligned+0x34>
 80036de:	1cc4      	adds	r4, r0, #3
 80036e0:	f024 0403 	bic.w	r4, r4, #3
 80036e4:	42a0      	cmp	r0, r4
 80036e6:	d007      	beq.n	80036f8 <sbrk_aligned+0x38>
 80036e8:	1a21      	subs	r1, r4, r0
 80036ea:	4628      	mov	r0, r5
 80036ec:	f000 fce6 	bl	80040bc <_sbrk_r>
 80036f0:	3001      	adds	r0, #1
 80036f2:	d101      	bne.n	80036f8 <sbrk_aligned+0x38>
 80036f4:	f04f 34ff 	mov.w	r4, #4294967295
 80036f8:	4620      	mov	r0, r4
 80036fa:	bd70      	pop	{r4, r5, r6, pc}
 80036fc:	20000234 	.word	0x20000234

08003700 <_malloc_r>:
 8003700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003704:	1ccd      	adds	r5, r1, #3
 8003706:	f025 0503 	bic.w	r5, r5, #3
 800370a:	3508      	adds	r5, #8
 800370c:	2d0c      	cmp	r5, #12
 800370e:	bf38      	it	cc
 8003710:	250c      	movcc	r5, #12
 8003712:	2d00      	cmp	r5, #0
 8003714:	4607      	mov	r7, r0
 8003716:	db01      	blt.n	800371c <_malloc_r+0x1c>
 8003718:	42a9      	cmp	r1, r5
 800371a:	d905      	bls.n	8003728 <_malloc_r+0x28>
 800371c:	230c      	movs	r3, #12
 800371e:	603b      	str	r3, [r7, #0]
 8003720:	2600      	movs	r6, #0
 8003722:	4630      	mov	r0, r6
 8003724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003728:	4e2e      	ldr	r6, [pc, #184]	; (80037e4 <_malloc_r+0xe4>)
 800372a:	f001 fb65 	bl	8004df8 <__malloc_lock>
 800372e:	6833      	ldr	r3, [r6, #0]
 8003730:	461c      	mov	r4, r3
 8003732:	bb34      	cbnz	r4, 8003782 <_malloc_r+0x82>
 8003734:	4629      	mov	r1, r5
 8003736:	4638      	mov	r0, r7
 8003738:	f7ff ffc2 	bl	80036c0 <sbrk_aligned>
 800373c:	1c43      	adds	r3, r0, #1
 800373e:	4604      	mov	r4, r0
 8003740:	d14d      	bne.n	80037de <_malloc_r+0xde>
 8003742:	6834      	ldr	r4, [r6, #0]
 8003744:	4626      	mov	r6, r4
 8003746:	2e00      	cmp	r6, #0
 8003748:	d140      	bne.n	80037cc <_malloc_r+0xcc>
 800374a:	6823      	ldr	r3, [r4, #0]
 800374c:	4631      	mov	r1, r6
 800374e:	4638      	mov	r0, r7
 8003750:	eb04 0803 	add.w	r8, r4, r3
 8003754:	f000 fcb2 	bl	80040bc <_sbrk_r>
 8003758:	4580      	cmp	r8, r0
 800375a:	d13a      	bne.n	80037d2 <_malloc_r+0xd2>
 800375c:	6821      	ldr	r1, [r4, #0]
 800375e:	3503      	adds	r5, #3
 8003760:	1a6d      	subs	r5, r5, r1
 8003762:	f025 0503 	bic.w	r5, r5, #3
 8003766:	3508      	adds	r5, #8
 8003768:	2d0c      	cmp	r5, #12
 800376a:	bf38      	it	cc
 800376c:	250c      	movcc	r5, #12
 800376e:	4629      	mov	r1, r5
 8003770:	4638      	mov	r0, r7
 8003772:	f7ff ffa5 	bl	80036c0 <sbrk_aligned>
 8003776:	3001      	adds	r0, #1
 8003778:	d02b      	beq.n	80037d2 <_malloc_r+0xd2>
 800377a:	6823      	ldr	r3, [r4, #0]
 800377c:	442b      	add	r3, r5
 800377e:	6023      	str	r3, [r4, #0]
 8003780:	e00e      	b.n	80037a0 <_malloc_r+0xa0>
 8003782:	6822      	ldr	r2, [r4, #0]
 8003784:	1b52      	subs	r2, r2, r5
 8003786:	d41e      	bmi.n	80037c6 <_malloc_r+0xc6>
 8003788:	2a0b      	cmp	r2, #11
 800378a:	d916      	bls.n	80037ba <_malloc_r+0xba>
 800378c:	1961      	adds	r1, r4, r5
 800378e:	42a3      	cmp	r3, r4
 8003790:	6025      	str	r5, [r4, #0]
 8003792:	bf18      	it	ne
 8003794:	6059      	strne	r1, [r3, #4]
 8003796:	6863      	ldr	r3, [r4, #4]
 8003798:	bf08      	it	eq
 800379a:	6031      	streq	r1, [r6, #0]
 800379c:	5162      	str	r2, [r4, r5]
 800379e:	604b      	str	r3, [r1, #4]
 80037a0:	4638      	mov	r0, r7
 80037a2:	f104 060b 	add.w	r6, r4, #11
 80037a6:	f001 fb2d 	bl	8004e04 <__malloc_unlock>
 80037aa:	f026 0607 	bic.w	r6, r6, #7
 80037ae:	1d23      	adds	r3, r4, #4
 80037b0:	1af2      	subs	r2, r6, r3
 80037b2:	d0b6      	beq.n	8003722 <_malloc_r+0x22>
 80037b4:	1b9b      	subs	r3, r3, r6
 80037b6:	50a3      	str	r3, [r4, r2]
 80037b8:	e7b3      	b.n	8003722 <_malloc_r+0x22>
 80037ba:	6862      	ldr	r2, [r4, #4]
 80037bc:	42a3      	cmp	r3, r4
 80037be:	bf0c      	ite	eq
 80037c0:	6032      	streq	r2, [r6, #0]
 80037c2:	605a      	strne	r2, [r3, #4]
 80037c4:	e7ec      	b.n	80037a0 <_malloc_r+0xa0>
 80037c6:	4623      	mov	r3, r4
 80037c8:	6864      	ldr	r4, [r4, #4]
 80037ca:	e7b2      	b.n	8003732 <_malloc_r+0x32>
 80037cc:	4634      	mov	r4, r6
 80037ce:	6876      	ldr	r6, [r6, #4]
 80037d0:	e7b9      	b.n	8003746 <_malloc_r+0x46>
 80037d2:	230c      	movs	r3, #12
 80037d4:	603b      	str	r3, [r7, #0]
 80037d6:	4638      	mov	r0, r7
 80037d8:	f001 fb14 	bl	8004e04 <__malloc_unlock>
 80037dc:	e7a1      	b.n	8003722 <_malloc_r+0x22>
 80037de:	6025      	str	r5, [r4, #0]
 80037e0:	e7de      	b.n	80037a0 <_malloc_r+0xa0>
 80037e2:	bf00      	nop
 80037e4:	20000230 	.word	0x20000230

080037e8 <__cvt>:
 80037e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80037ec:	ec55 4b10 	vmov	r4, r5, d0
 80037f0:	2d00      	cmp	r5, #0
 80037f2:	460e      	mov	r6, r1
 80037f4:	4619      	mov	r1, r3
 80037f6:	462b      	mov	r3, r5
 80037f8:	bfbb      	ittet	lt
 80037fa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80037fe:	461d      	movlt	r5, r3
 8003800:	2300      	movge	r3, #0
 8003802:	232d      	movlt	r3, #45	; 0x2d
 8003804:	700b      	strb	r3, [r1, #0]
 8003806:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003808:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800380c:	4691      	mov	r9, r2
 800380e:	f023 0820 	bic.w	r8, r3, #32
 8003812:	bfbc      	itt	lt
 8003814:	4622      	movlt	r2, r4
 8003816:	4614      	movlt	r4, r2
 8003818:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800381c:	d005      	beq.n	800382a <__cvt+0x42>
 800381e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003822:	d100      	bne.n	8003826 <__cvt+0x3e>
 8003824:	3601      	adds	r6, #1
 8003826:	2102      	movs	r1, #2
 8003828:	e000      	b.n	800382c <__cvt+0x44>
 800382a:	2103      	movs	r1, #3
 800382c:	ab03      	add	r3, sp, #12
 800382e:	9301      	str	r3, [sp, #4]
 8003830:	ab02      	add	r3, sp, #8
 8003832:	9300      	str	r3, [sp, #0]
 8003834:	ec45 4b10 	vmov	d0, r4, r5
 8003838:	4653      	mov	r3, sl
 800383a:	4632      	mov	r2, r6
 800383c:	f000 fcdc 	bl	80041f8 <_dtoa_r>
 8003840:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003844:	4607      	mov	r7, r0
 8003846:	d102      	bne.n	800384e <__cvt+0x66>
 8003848:	f019 0f01 	tst.w	r9, #1
 800384c:	d022      	beq.n	8003894 <__cvt+0xac>
 800384e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003852:	eb07 0906 	add.w	r9, r7, r6
 8003856:	d110      	bne.n	800387a <__cvt+0x92>
 8003858:	783b      	ldrb	r3, [r7, #0]
 800385a:	2b30      	cmp	r3, #48	; 0x30
 800385c:	d10a      	bne.n	8003874 <__cvt+0x8c>
 800385e:	2200      	movs	r2, #0
 8003860:	2300      	movs	r3, #0
 8003862:	4620      	mov	r0, r4
 8003864:	4629      	mov	r1, r5
 8003866:	f7fd f937 	bl	8000ad8 <__aeabi_dcmpeq>
 800386a:	b918      	cbnz	r0, 8003874 <__cvt+0x8c>
 800386c:	f1c6 0601 	rsb	r6, r6, #1
 8003870:	f8ca 6000 	str.w	r6, [sl]
 8003874:	f8da 3000 	ldr.w	r3, [sl]
 8003878:	4499      	add	r9, r3
 800387a:	2200      	movs	r2, #0
 800387c:	2300      	movs	r3, #0
 800387e:	4620      	mov	r0, r4
 8003880:	4629      	mov	r1, r5
 8003882:	f7fd f929 	bl	8000ad8 <__aeabi_dcmpeq>
 8003886:	b108      	cbz	r0, 800388c <__cvt+0xa4>
 8003888:	f8cd 900c 	str.w	r9, [sp, #12]
 800388c:	2230      	movs	r2, #48	; 0x30
 800388e:	9b03      	ldr	r3, [sp, #12]
 8003890:	454b      	cmp	r3, r9
 8003892:	d307      	bcc.n	80038a4 <__cvt+0xbc>
 8003894:	9b03      	ldr	r3, [sp, #12]
 8003896:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003898:	1bdb      	subs	r3, r3, r7
 800389a:	4638      	mov	r0, r7
 800389c:	6013      	str	r3, [r2, #0]
 800389e:	b004      	add	sp, #16
 80038a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038a4:	1c59      	adds	r1, r3, #1
 80038a6:	9103      	str	r1, [sp, #12]
 80038a8:	701a      	strb	r2, [r3, #0]
 80038aa:	e7f0      	b.n	800388e <__cvt+0xa6>

080038ac <__exponent>:
 80038ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80038ae:	4603      	mov	r3, r0
 80038b0:	2900      	cmp	r1, #0
 80038b2:	bfb8      	it	lt
 80038b4:	4249      	neglt	r1, r1
 80038b6:	f803 2b02 	strb.w	r2, [r3], #2
 80038ba:	bfb4      	ite	lt
 80038bc:	222d      	movlt	r2, #45	; 0x2d
 80038be:	222b      	movge	r2, #43	; 0x2b
 80038c0:	2909      	cmp	r1, #9
 80038c2:	7042      	strb	r2, [r0, #1]
 80038c4:	dd2a      	ble.n	800391c <__exponent+0x70>
 80038c6:	f10d 0407 	add.w	r4, sp, #7
 80038ca:	46a4      	mov	ip, r4
 80038cc:	270a      	movs	r7, #10
 80038ce:	46a6      	mov	lr, r4
 80038d0:	460a      	mov	r2, r1
 80038d2:	fb91 f6f7 	sdiv	r6, r1, r7
 80038d6:	fb07 1516 	mls	r5, r7, r6, r1
 80038da:	3530      	adds	r5, #48	; 0x30
 80038dc:	2a63      	cmp	r2, #99	; 0x63
 80038de:	f104 34ff 	add.w	r4, r4, #4294967295
 80038e2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80038e6:	4631      	mov	r1, r6
 80038e8:	dcf1      	bgt.n	80038ce <__exponent+0x22>
 80038ea:	3130      	adds	r1, #48	; 0x30
 80038ec:	f1ae 0502 	sub.w	r5, lr, #2
 80038f0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80038f4:	1c44      	adds	r4, r0, #1
 80038f6:	4629      	mov	r1, r5
 80038f8:	4561      	cmp	r1, ip
 80038fa:	d30a      	bcc.n	8003912 <__exponent+0x66>
 80038fc:	f10d 0209 	add.w	r2, sp, #9
 8003900:	eba2 020e 	sub.w	r2, r2, lr
 8003904:	4565      	cmp	r5, ip
 8003906:	bf88      	it	hi
 8003908:	2200      	movhi	r2, #0
 800390a:	4413      	add	r3, r2
 800390c:	1a18      	subs	r0, r3, r0
 800390e:	b003      	add	sp, #12
 8003910:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003912:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003916:	f804 2f01 	strb.w	r2, [r4, #1]!
 800391a:	e7ed      	b.n	80038f8 <__exponent+0x4c>
 800391c:	2330      	movs	r3, #48	; 0x30
 800391e:	3130      	adds	r1, #48	; 0x30
 8003920:	7083      	strb	r3, [r0, #2]
 8003922:	70c1      	strb	r1, [r0, #3]
 8003924:	1d03      	adds	r3, r0, #4
 8003926:	e7f1      	b.n	800390c <__exponent+0x60>

08003928 <_printf_float>:
 8003928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800392c:	ed2d 8b02 	vpush	{d8}
 8003930:	b08d      	sub	sp, #52	; 0x34
 8003932:	460c      	mov	r4, r1
 8003934:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003938:	4616      	mov	r6, r2
 800393a:	461f      	mov	r7, r3
 800393c:	4605      	mov	r5, r0
 800393e:	f001 fa49 	bl	8004dd4 <_localeconv_r>
 8003942:	f8d0 a000 	ldr.w	sl, [r0]
 8003946:	4650      	mov	r0, sl
 8003948:	f7fc fc4a 	bl	80001e0 <strlen>
 800394c:	2300      	movs	r3, #0
 800394e:	930a      	str	r3, [sp, #40]	; 0x28
 8003950:	6823      	ldr	r3, [r4, #0]
 8003952:	9305      	str	r3, [sp, #20]
 8003954:	f8d8 3000 	ldr.w	r3, [r8]
 8003958:	f894 b018 	ldrb.w	fp, [r4, #24]
 800395c:	3307      	adds	r3, #7
 800395e:	f023 0307 	bic.w	r3, r3, #7
 8003962:	f103 0208 	add.w	r2, r3, #8
 8003966:	f8c8 2000 	str.w	r2, [r8]
 800396a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800396e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003972:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003976:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800397a:	9307      	str	r3, [sp, #28]
 800397c:	f8cd 8018 	str.w	r8, [sp, #24]
 8003980:	ee08 0a10 	vmov	s16, r0
 8003984:	4b9f      	ldr	r3, [pc, #636]	; (8003c04 <_printf_float+0x2dc>)
 8003986:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800398a:	f04f 32ff 	mov.w	r2, #4294967295
 800398e:	f7fd f8d5 	bl	8000b3c <__aeabi_dcmpun>
 8003992:	bb88      	cbnz	r0, 80039f8 <_printf_float+0xd0>
 8003994:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003998:	4b9a      	ldr	r3, [pc, #616]	; (8003c04 <_printf_float+0x2dc>)
 800399a:	f04f 32ff 	mov.w	r2, #4294967295
 800399e:	f7fd f8af 	bl	8000b00 <__aeabi_dcmple>
 80039a2:	bb48      	cbnz	r0, 80039f8 <_printf_float+0xd0>
 80039a4:	2200      	movs	r2, #0
 80039a6:	2300      	movs	r3, #0
 80039a8:	4640      	mov	r0, r8
 80039aa:	4649      	mov	r1, r9
 80039ac:	f7fd f89e 	bl	8000aec <__aeabi_dcmplt>
 80039b0:	b110      	cbz	r0, 80039b8 <_printf_float+0x90>
 80039b2:	232d      	movs	r3, #45	; 0x2d
 80039b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039b8:	4b93      	ldr	r3, [pc, #588]	; (8003c08 <_printf_float+0x2e0>)
 80039ba:	4894      	ldr	r0, [pc, #592]	; (8003c0c <_printf_float+0x2e4>)
 80039bc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80039c0:	bf94      	ite	ls
 80039c2:	4698      	movls	r8, r3
 80039c4:	4680      	movhi	r8, r0
 80039c6:	2303      	movs	r3, #3
 80039c8:	6123      	str	r3, [r4, #16]
 80039ca:	9b05      	ldr	r3, [sp, #20]
 80039cc:	f023 0204 	bic.w	r2, r3, #4
 80039d0:	6022      	str	r2, [r4, #0]
 80039d2:	f04f 0900 	mov.w	r9, #0
 80039d6:	9700      	str	r7, [sp, #0]
 80039d8:	4633      	mov	r3, r6
 80039da:	aa0b      	add	r2, sp, #44	; 0x2c
 80039dc:	4621      	mov	r1, r4
 80039de:	4628      	mov	r0, r5
 80039e0:	f000 f9d8 	bl	8003d94 <_printf_common>
 80039e4:	3001      	adds	r0, #1
 80039e6:	f040 8090 	bne.w	8003b0a <_printf_float+0x1e2>
 80039ea:	f04f 30ff 	mov.w	r0, #4294967295
 80039ee:	b00d      	add	sp, #52	; 0x34
 80039f0:	ecbd 8b02 	vpop	{d8}
 80039f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039f8:	4642      	mov	r2, r8
 80039fa:	464b      	mov	r3, r9
 80039fc:	4640      	mov	r0, r8
 80039fe:	4649      	mov	r1, r9
 8003a00:	f7fd f89c 	bl	8000b3c <__aeabi_dcmpun>
 8003a04:	b140      	cbz	r0, 8003a18 <_printf_float+0xf0>
 8003a06:	464b      	mov	r3, r9
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	bfbc      	itt	lt
 8003a0c:	232d      	movlt	r3, #45	; 0x2d
 8003a0e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003a12:	487f      	ldr	r0, [pc, #508]	; (8003c10 <_printf_float+0x2e8>)
 8003a14:	4b7f      	ldr	r3, [pc, #508]	; (8003c14 <_printf_float+0x2ec>)
 8003a16:	e7d1      	b.n	80039bc <_printf_float+0x94>
 8003a18:	6863      	ldr	r3, [r4, #4]
 8003a1a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003a1e:	9206      	str	r2, [sp, #24]
 8003a20:	1c5a      	adds	r2, r3, #1
 8003a22:	d13f      	bne.n	8003aa4 <_printf_float+0x17c>
 8003a24:	2306      	movs	r3, #6
 8003a26:	6063      	str	r3, [r4, #4]
 8003a28:	9b05      	ldr	r3, [sp, #20]
 8003a2a:	6861      	ldr	r1, [r4, #4]
 8003a2c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003a30:	2300      	movs	r3, #0
 8003a32:	9303      	str	r3, [sp, #12]
 8003a34:	ab0a      	add	r3, sp, #40	; 0x28
 8003a36:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003a3a:	ab09      	add	r3, sp, #36	; 0x24
 8003a3c:	ec49 8b10 	vmov	d0, r8, r9
 8003a40:	9300      	str	r3, [sp, #0]
 8003a42:	6022      	str	r2, [r4, #0]
 8003a44:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003a48:	4628      	mov	r0, r5
 8003a4a:	f7ff fecd 	bl	80037e8 <__cvt>
 8003a4e:	9b06      	ldr	r3, [sp, #24]
 8003a50:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003a52:	2b47      	cmp	r3, #71	; 0x47
 8003a54:	4680      	mov	r8, r0
 8003a56:	d108      	bne.n	8003a6a <_printf_float+0x142>
 8003a58:	1cc8      	adds	r0, r1, #3
 8003a5a:	db02      	blt.n	8003a62 <_printf_float+0x13a>
 8003a5c:	6863      	ldr	r3, [r4, #4]
 8003a5e:	4299      	cmp	r1, r3
 8003a60:	dd41      	ble.n	8003ae6 <_printf_float+0x1be>
 8003a62:	f1ab 0b02 	sub.w	fp, fp, #2
 8003a66:	fa5f fb8b 	uxtb.w	fp, fp
 8003a6a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003a6e:	d820      	bhi.n	8003ab2 <_printf_float+0x18a>
 8003a70:	3901      	subs	r1, #1
 8003a72:	465a      	mov	r2, fp
 8003a74:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003a78:	9109      	str	r1, [sp, #36]	; 0x24
 8003a7a:	f7ff ff17 	bl	80038ac <__exponent>
 8003a7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003a80:	1813      	adds	r3, r2, r0
 8003a82:	2a01      	cmp	r2, #1
 8003a84:	4681      	mov	r9, r0
 8003a86:	6123      	str	r3, [r4, #16]
 8003a88:	dc02      	bgt.n	8003a90 <_printf_float+0x168>
 8003a8a:	6822      	ldr	r2, [r4, #0]
 8003a8c:	07d2      	lsls	r2, r2, #31
 8003a8e:	d501      	bpl.n	8003a94 <_printf_float+0x16c>
 8003a90:	3301      	adds	r3, #1
 8003a92:	6123      	str	r3, [r4, #16]
 8003a94:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d09c      	beq.n	80039d6 <_printf_float+0xae>
 8003a9c:	232d      	movs	r3, #45	; 0x2d
 8003a9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003aa2:	e798      	b.n	80039d6 <_printf_float+0xae>
 8003aa4:	9a06      	ldr	r2, [sp, #24]
 8003aa6:	2a47      	cmp	r2, #71	; 0x47
 8003aa8:	d1be      	bne.n	8003a28 <_printf_float+0x100>
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1bc      	bne.n	8003a28 <_printf_float+0x100>
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e7b9      	b.n	8003a26 <_printf_float+0xfe>
 8003ab2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003ab6:	d118      	bne.n	8003aea <_printf_float+0x1c2>
 8003ab8:	2900      	cmp	r1, #0
 8003aba:	6863      	ldr	r3, [r4, #4]
 8003abc:	dd0b      	ble.n	8003ad6 <_printf_float+0x1ae>
 8003abe:	6121      	str	r1, [r4, #16]
 8003ac0:	b913      	cbnz	r3, 8003ac8 <_printf_float+0x1a0>
 8003ac2:	6822      	ldr	r2, [r4, #0]
 8003ac4:	07d0      	lsls	r0, r2, #31
 8003ac6:	d502      	bpl.n	8003ace <_printf_float+0x1a6>
 8003ac8:	3301      	adds	r3, #1
 8003aca:	440b      	add	r3, r1
 8003acc:	6123      	str	r3, [r4, #16]
 8003ace:	65a1      	str	r1, [r4, #88]	; 0x58
 8003ad0:	f04f 0900 	mov.w	r9, #0
 8003ad4:	e7de      	b.n	8003a94 <_printf_float+0x16c>
 8003ad6:	b913      	cbnz	r3, 8003ade <_printf_float+0x1b6>
 8003ad8:	6822      	ldr	r2, [r4, #0]
 8003ada:	07d2      	lsls	r2, r2, #31
 8003adc:	d501      	bpl.n	8003ae2 <_printf_float+0x1ba>
 8003ade:	3302      	adds	r3, #2
 8003ae0:	e7f4      	b.n	8003acc <_printf_float+0x1a4>
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e7f2      	b.n	8003acc <_printf_float+0x1a4>
 8003ae6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003aea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003aec:	4299      	cmp	r1, r3
 8003aee:	db05      	blt.n	8003afc <_printf_float+0x1d4>
 8003af0:	6823      	ldr	r3, [r4, #0]
 8003af2:	6121      	str	r1, [r4, #16]
 8003af4:	07d8      	lsls	r0, r3, #31
 8003af6:	d5ea      	bpl.n	8003ace <_printf_float+0x1a6>
 8003af8:	1c4b      	adds	r3, r1, #1
 8003afa:	e7e7      	b.n	8003acc <_printf_float+0x1a4>
 8003afc:	2900      	cmp	r1, #0
 8003afe:	bfd4      	ite	le
 8003b00:	f1c1 0202 	rsble	r2, r1, #2
 8003b04:	2201      	movgt	r2, #1
 8003b06:	4413      	add	r3, r2
 8003b08:	e7e0      	b.n	8003acc <_printf_float+0x1a4>
 8003b0a:	6823      	ldr	r3, [r4, #0]
 8003b0c:	055a      	lsls	r2, r3, #21
 8003b0e:	d407      	bmi.n	8003b20 <_printf_float+0x1f8>
 8003b10:	6923      	ldr	r3, [r4, #16]
 8003b12:	4642      	mov	r2, r8
 8003b14:	4631      	mov	r1, r6
 8003b16:	4628      	mov	r0, r5
 8003b18:	47b8      	blx	r7
 8003b1a:	3001      	adds	r0, #1
 8003b1c:	d12c      	bne.n	8003b78 <_printf_float+0x250>
 8003b1e:	e764      	b.n	80039ea <_printf_float+0xc2>
 8003b20:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003b24:	f240 80e0 	bls.w	8003ce8 <_printf_float+0x3c0>
 8003b28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	2300      	movs	r3, #0
 8003b30:	f7fc ffd2 	bl	8000ad8 <__aeabi_dcmpeq>
 8003b34:	2800      	cmp	r0, #0
 8003b36:	d034      	beq.n	8003ba2 <_printf_float+0x27a>
 8003b38:	4a37      	ldr	r2, [pc, #220]	; (8003c18 <_printf_float+0x2f0>)
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	4631      	mov	r1, r6
 8003b3e:	4628      	mov	r0, r5
 8003b40:	47b8      	blx	r7
 8003b42:	3001      	adds	r0, #1
 8003b44:	f43f af51 	beq.w	80039ea <_printf_float+0xc2>
 8003b48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	db02      	blt.n	8003b56 <_printf_float+0x22e>
 8003b50:	6823      	ldr	r3, [r4, #0]
 8003b52:	07d8      	lsls	r0, r3, #31
 8003b54:	d510      	bpl.n	8003b78 <_printf_float+0x250>
 8003b56:	ee18 3a10 	vmov	r3, s16
 8003b5a:	4652      	mov	r2, sl
 8003b5c:	4631      	mov	r1, r6
 8003b5e:	4628      	mov	r0, r5
 8003b60:	47b8      	blx	r7
 8003b62:	3001      	adds	r0, #1
 8003b64:	f43f af41 	beq.w	80039ea <_printf_float+0xc2>
 8003b68:	f04f 0800 	mov.w	r8, #0
 8003b6c:	f104 091a 	add.w	r9, r4, #26
 8003b70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b72:	3b01      	subs	r3, #1
 8003b74:	4543      	cmp	r3, r8
 8003b76:	dc09      	bgt.n	8003b8c <_printf_float+0x264>
 8003b78:	6823      	ldr	r3, [r4, #0]
 8003b7a:	079b      	lsls	r3, r3, #30
 8003b7c:	f100 8105 	bmi.w	8003d8a <_printf_float+0x462>
 8003b80:	68e0      	ldr	r0, [r4, #12]
 8003b82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003b84:	4298      	cmp	r0, r3
 8003b86:	bfb8      	it	lt
 8003b88:	4618      	movlt	r0, r3
 8003b8a:	e730      	b.n	80039ee <_printf_float+0xc6>
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	464a      	mov	r2, r9
 8003b90:	4631      	mov	r1, r6
 8003b92:	4628      	mov	r0, r5
 8003b94:	47b8      	blx	r7
 8003b96:	3001      	adds	r0, #1
 8003b98:	f43f af27 	beq.w	80039ea <_printf_float+0xc2>
 8003b9c:	f108 0801 	add.w	r8, r8, #1
 8003ba0:	e7e6      	b.n	8003b70 <_printf_float+0x248>
 8003ba2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	dc39      	bgt.n	8003c1c <_printf_float+0x2f4>
 8003ba8:	4a1b      	ldr	r2, [pc, #108]	; (8003c18 <_printf_float+0x2f0>)
 8003baa:	2301      	movs	r3, #1
 8003bac:	4631      	mov	r1, r6
 8003bae:	4628      	mov	r0, r5
 8003bb0:	47b8      	blx	r7
 8003bb2:	3001      	adds	r0, #1
 8003bb4:	f43f af19 	beq.w	80039ea <_printf_float+0xc2>
 8003bb8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	d102      	bne.n	8003bc6 <_printf_float+0x29e>
 8003bc0:	6823      	ldr	r3, [r4, #0]
 8003bc2:	07d9      	lsls	r1, r3, #31
 8003bc4:	d5d8      	bpl.n	8003b78 <_printf_float+0x250>
 8003bc6:	ee18 3a10 	vmov	r3, s16
 8003bca:	4652      	mov	r2, sl
 8003bcc:	4631      	mov	r1, r6
 8003bce:	4628      	mov	r0, r5
 8003bd0:	47b8      	blx	r7
 8003bd2:	3001      	adds	r0, #1
 8003bd4:	f43f af09 	beq.w	80039ea <_printf_float+0xc2>
 8003bd8:	f04f 0900 	mov.w	r9, #0
 8003bdc:	f104 0a1a 	add.w	sl, r4, #26
 8003be0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003be2:	425b      	negs	r3, r3
 8003be4:	454b      	cmp	r3, r9
 8003be6:	dc01      	bgt.n	8003bec <_printf_float+0x2c4>
 8003be8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003bea:	e792      	b.n	8003b12 <_printf_float+0x1ea>
 8003bec:	2301      	movs	r3, #1
 8003bee:	4652      	mov	r2, sl
 8003bf0:	4631      	mov	r1, r6
 8003bf2:	4628      	mov	r0, r5
 8003bf4:	47b8      	blx	r7
 8003bf6:	3001      	adds	r0, #1
 8003bf8:	f43f aef7 	beq.w	80039ea <_printf_float+0xc2>
 8003bfc:	f109 0901 	add.w	r9, r9, #1
 8003c00:	e7ee      	b.n	8003be0 <_printf_float+0x2b8>
 8003c02:	bf00      	nop
 8003c04:	7fefffff 	.word	0x7fefffff
 8003c08:	08009f0c 	.word	0x08009f0c
 8003c0c:	08009f10 	.word	0x08009f10
 8003c10:	08009f18 	.word	0x08009f18
 8003c14:	08009f14 	.word	0x08009f14
 8003c18:	08009f1c 	.word	0x08009f1c
 8003c1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003c1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003c20:	429a      	cmp	r2, r3
 8003c22:	bfa8      	it	ge
 8003c24:	461a      	movge	r2, r3
 8003c26:	2a00      	cmp	r2, #0
 8003c28:	4691      	mov	r9, r2
 8003c2a:	dc37      	bgt.n	8003c9c <_printf_float+0x374>
 8003c2c:	f04f 0b00 	mov.w	fp, #0
 8003c30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003c34:	f104 021a 	add.w	r2, r4, #26
 8003c38:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003c3a:	9305      	str	r3, [sp, #20]
 8003c3c:	eba3 0309 	sub.w	r3, r3, r9
 8003c40:	455b      	cmp	r3, fp
 8003c42:	dc33      	bgt.n	8003cac <_printf_float+0x384>
 8003c44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	db3b      	blt.n	8003cc4 <_printf_float+0x39c>
 8003c4c:	6823      	ldr	r3, [r4, #0]
 8003c4e:	07da      	lsls	r2, r3, #31
 8003c50:	d438      	bmi.n	8003cc4 <_printf_float+0x39c>
 8003c52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c54:	9a05      	ldr	r2, [sp, #20]
 8003c56:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003c58:	1a9a      	subs	r2, r3, r2
 8003c5a:	eba3 0901 	sub.w	r9, r3, r1
 8003c5e:	4591      	cmp	r9, r2
 8003c60:	bfa8      	it	ge
 8003c62:	4691      	movge	r9, r2
 8003c64:	f1b9 0f00 	cmp.w	r9, #0
 8003c68:	dc35      	bgt.n	8003cd6 <_printf_float+0x3ae>
 8003c6a:	f04f 0800 	mov.w	r8, #0
 8003c6e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003c72:	f104 0a1a 	add.w	sl, r4, #26
 8003c76:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003c7a:	1a9b      	subs	r3, r3, r2
 8003c7c:	eba3 0309 	sub.w	r3, r3, r9
 8003c80:	4543      	cmp	r3, r8
 8003c82:	f77f af79 	ble.w	8003b78 <_printf_float+0x250>
 8003c86:	2301      	movs	r3, #1
 8003c88:	4652      	mov	r2, sl
 8003c8a:	4631      	mov	r1, r6
 8003c8c:	4628      	mov	r0, r5
 8003c8e:	47b8      	blx	r7
 8003c90:	3001      	adds	r0, #1
 8003c92:	f43f aeaa 	beq.w	80039ea <_printf_float+0xc2>
 8003c96:	f108 0801 	add.w	r8, r8, #1
 8003c9a:	e7ec      	b.n	8003c76 <_printf_float+0x34e>
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	4631      	mov	r1, r6
 8003ca0:	4642      	mov	r2, r8
 8003ca2:	4628      	mov	r0, r5
 8003ca4:	47b8      	blx	r7
 8003ca6:	3001      	adds	r0, #1
 8003ca8:	d1c0      	bne.n	8003c2c <_printf_float+0x304>
 8003caa:	e69e      	b.n	80039ea <_printf_float+0xc2>
 8003cac:	2301      	movs	r3, #1
 8003cae:	4631      	mov	r1, r6
 8003cb0:	4628      	mov	r0, r5
 8003cb2:	9205      	str	r2, [sp, #20]
 8003cb4:	47b8      	blx	r7
 8003cb6:	3001      	adds	r0, #1
 8003cb8:	f43f ae97 	beq.w	80039ea <_printf_float+0xc2>
 8003cbc:	9a05      	ldr	r2, [sp, #20]
 8003cbe:	f10b 0b01 	add.w	fp, fp, #1
 8003cc2:	e7b9      	b.n	8003c38 <_printf_float+0x310>
 8003cc4:	ee18 3a10 	vmov	r3, s16
 8003cc8:	4652      	mov	r2, sl
 8003cca:	4631      	mov	r1, r6
 8003ccc:	4628      	mov	r0, r5
 8003cce:	47b8      	blx	r7
 8003cd0:	3001      	adds	r0, #1
 8003cd2:	d1be      	bne.n	8003c52 <_printf_float+0x32a>
 8003cd4:	e689      	b.n	80039ea <_printf_float+0xc2>
 8003cd6:	9a05      	ldr	r2, [sp, #20]
 8003cd8:	464b      	mov	r3, r9
 8003cda:	4442      	add	r2, r8
 8003cdc:	4631      	mov	r1, r6
 8003cde:	4628      	mov	r0, r5
 8003ce0:	47b8      	blx	r7
 8003ce2:	3001      	adds	r0, #1
 8003ce4:	d1c1      	bne.n	8003c6a <_printf_float+0x342>
 8003ce6:	e680      	b.n	80039ea <_printf_float+0xc2>
 8003ce8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003cea:	2a01      	cmp	r2, #1
 8003cec:	dc01      	bgt.n	8003cf2 <_printf_float+0x3ca>
 8003cee:	07db      	lsls	r3, r3, #31
 8003cf0:	d538      	bpl.n	8003d64 <_printf_float+0x43c>
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	4642      	mov	r2, r8
 8003cf6:	4631      	mov	r1, r6
 8003cf8:	4628      	mov	r0, r5
 8003cfa:	47b8      	blx	r7
 8003cfc:	3001      	adds	r0, #1
 8003cfe:	f43f ae74 	beq.w	80039ea <_printf_float+0xc2>
 8003d02:	ee18 3a10 	vmov	r3, s16
 8003d06:	4652      	mov	r2, sl
 8003d08:	4631      	mov	r1, r6
 8003d0a:	4628      	mov	r0, r5
 8003d0c:	47b8      	blx	r7
 8003d0e:	3001      	adds	r0, #1
 8003d10:	f43f ae6b 	beq.w	80039ea <_printf_float+0xc2>
 8003d14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003d18:	2200      	movs	r2, #0
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	f7fc fedc 	bl	8000ad8 <__aeabi_dcmpeq>
 8003d20:	b9d8      	cbnz	r0, 8003d5a <_printf_float+0x432>
 8003d22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d24:	f108 0201 	add.w	r2, r8, #1
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	4631      	mov	r1, r6
 8003d2c:	4628      	mov	r0, r5
 8003d2e:	47b8      	blx	r7
 8003d30:	3001      	adds	r0, #1
 8003d32:	d10e      	bne.n	8003d52 <_printf_float+0x42a>
 8003d34:	e659      	b.n	80039ea <_printf_float+0xc2>
 8003d36:	2301      	movs	r3, #1
 8003d38:	4652      	mov	r2, sl
 8003d3a:	4631      	mov	r1, r6
 8003d3c:	4628      	mov	r0, r5
 8003d3e:	47b8      	blx	r7
 8003d40:	3001      	adds	r0, #1
 8003d42:	f43f ae52 	beq.w	80039ea <_printf_float+0xc2>
 8003d46:	f108 0801 	add.w	r8, r8, #1
 8003d4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	4543      	cmp	r3, r8
 8003d50:	dcf1      	bgt.n	8003d36 <_printf_float+0x40e>
 8003d52:	464b      	mov	r3, r9
 8003d54:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003d58:	e6dc      	b.n	8003b14 <_printf_float+0x1ec>
 8003d5a:	f04f 0800 	mov.w	r8, #0
 8003d5e:	f104 0a1a 	add.w	sl, r4, #26
 8003d62:	e7f2      	b.n	8003d4a <_printf_float+0x422>
 8003d64:	2301      	movs	r3, #1
 8003d66:	4642      	mov	r2, r8
 8003d68:	e7df      	b.n	8003d2a <_printf_float+0x402>
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	464a      	mov	r2, r9
 8003d6e:	4631      	mov	r1, r6
 8003d70:	4628      	mov	r0, r5
 8003d72:	47b8      	blx	r7
 8003d74:	3001      	adds	r0, #1
 8003d76:	f43f ae38 	beq.w	80039ea <_printf_float+0xc2>
 8003d7a:	f108 0801 	add.w	r8, r8, #1
 8003d7e:	68e3      	ldr	r3, [r4, #12]
 8003d80:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003d82:	1a5b      	subs	r3, r3, r1
 8003d84:	4543      	cmp	r3, r8
 8003d86:	dcf0      	bgt.n	8003d6a <_printf_float+0x442>
 8003d88:	e6fa      	b.n	8003b80 <_printf_float+0x258>
 8003d8a:	f04f 0800 	mov.w	r8, #0
 8003d8e:	f104 0919 	add.w	r9, r4, #25
 8003d92:	e7f4      	b.n	8003d7e <_printf_float+0x456>

08003d94 <_printf_common>:
 8003d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d98:	4616      	mov	r6, r2
 8003d9a:	4699      	mov	r9, r3
 8003d9c:	688a      	ldr	r2, [r1, #8]
 8003d9e:	690b      	ldr	r3, [r1, #16]
 8003da0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003da4:	4293      	cmp	r3, r2
 8003da6:	bfb8      	it	lt
 8003da8:	4613      	movlt	r3, r2
 8003daa:	6033      	str	r3, [r6, #0]
 8003dac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003db0:	4607      	mov	r7, r0
 8003db2:	460c      	mov	r4, r1
 8003db4:	b10a      	cbz	r2, 8003dba <_printf_common+0x26>
 8003db6:	3301      	adds	r3, #1
 8003db8:	6033      	str	r3, [r6, #0]
 8003dba:	6823      	ldr	r3, [r4, #0]
 8003dbc:	0699      	lsls	r1, r3, #26
 8003dbe:	bf42      	ittt	mi
 8003dc0:	6833      	ldrmi	r3, [r6, #0]
 8003dc2:	3302      	addmi	r3, #2
 8003dc4:	6033      	strmi	r3, [r6, #0]
 8003dc6:	6825      	ldr	r5, [r4, #0]
 8003dc8:	f015 0506 	ands.w	r5, r5, #6
 8003dcc:	d106      	bne.n	8003ddc <_printf_common+0x48>
 8003dce:	f104 0a19 	add.w	sl, r4, #25
 8003dd2:	68e3      	ldr	r3, [r4, #12]
 8003dd4:	6832      	ldr	r2, [r6, #0]
 8003dd6:	1a9b      	subs	r3, r3, r2
 8003dd8:	42ab      	cmp	r3, r5
 8003dda:	dc26      	bgt.n	8003e2a <_printf_common+0x96>
 8003ddc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003de0:	1e13      	subs	r3, r2, #0
 8003de2:	6822      	ldr	r2, [r4, #0]
 8003de4:	bf18      	it	ne
 8003de6:	2301      	movne	r3, #1
 8003de8:	0692      	lsls	r2, r2, #26
 8003dea:	d42b      	bmi.n	8003e44 <_printf_common+0xb0>
 8003dec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003df0:	4649      	mov	r1, r9
 8003df2:	4638      	mov	r0, r7
 8003df4:	47c0      	blx	r8
 8003df6:	3001      	adds	r0, #1
 8003df8:	d01e      	beq.n	8003e38 <_printf_common+0xa4>
 8003dfa:	6823      	ldr	r3, [r4, #0]
 8003dfc:	68e5      	ldr	r5, [r4, #12]
 8003dfe:	6832      	ldr	r2, [r6, #0]
 8003e00:	f003 0306 	and.w	r3, r3, #6
 8003e04:	2b04      	cmp	r3, #4
 8003e06:	bf08      	it	eq
 8003e08:	1aad      	subeq	r5, r5, r2
 8003e0a:	68a3      	ldr	r3, [r4, #8]
 8003e0c:	6922      	ldr	r2, [r4, #16]
 8003e0e:	bf0c      	ite	eq
 8003e10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e14:	2500      	movne	r5, #0
 8003e16:	4293      	cmp	r3, r2
 8003e18:	bfc4      	itt	gt
 8003e1a:	1a9b      	subgt	r3, r3, r2
 8003e1c:	18ed      	addgt	r5, r5, r3
 8003e1e:	2600      	movs	r6, #0
 8003e20:	341a      	adds	r4, #26
 8003e22:	42b5      	cmp	r5, r6
 8003e24:	d11a      	bne.n	8003e5c <_printf_common+0xc8>
 8003e26:	2000      	movs	r0, #0
 8003e28:	e008      	b.n	8003e3c <_printf_common+0xa8>
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	4652      	mov	r2, sl
 8003e2e:	4649      	mov	r1, r9
 8003e30:	4638      	mov	r0, r7
 8003e32:	47c0      	blx	r8
 8003e34:	3001      	adds	r0, #1
 8003e36:	d103      	bne.n	8003e40 <_printf_common+0xac>
 8003e38:	f04f 30ff 	mov.w	r0, #4294967295
 8003e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e40:	3501      	adds	r5, #1
 8003e42:	e7c6      	b.n	8003dd2 <_printf_common+0x3e>
 8003e44:	18e1      	adds	r1, r4, r3
 8003e46:	1c5a      	adds	r2, r3, #1
 8003e48:	2030      	movs	r0, #48	; 0x30
 8003e4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e4e:	4422      	add	r2, r4
 8003e50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e58:	3302      	adds	r3, #2
 8003e5a:	e7c7      	b.n	8003dec <_printf_common+0x58>
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	4622      	mov	r2, r4
 8003e60:	4649      	mov	r1, r9
 8003e62:	4638      	mov	r0, r7
 8003e64:	47c0      	blx	r8
 8003e66:	3001      	adds	r0, #1
 8003e68:	d0e6      	beq.n	8003e38 <_printf_common+0xa4>
 8003e6a:	3601      	adds	r6, #1
 8003e6c:	e7d9      	b.n	8003e22 <_printf_common+0x8e>
	...

08003e70 <_printf_i>:
 8003e70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e74:	7e0f      	ldrb	r7, [r1, #24]
 8003e76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003e78:	2f78      	cmp	r7, #120	; 0x78
 8003e7a:	4691      	mov	r9, r2
 8003e7c:	4680      	mov	r8, r0
 8003e7e:	460c      	mov	r4, r1
 8003e80:	469a      	mov	sl, r3
 8003e82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003e86:	d807      	bhi.n	8003e98 <_printf_i+0x28>
 8003e88:	2f62      	cmp	r7, #98	; 0x62
 8003e8a:	d80a      	bhi.n	8003ea2 <_printf_i+0x32>
 8003e8c:	2f00      	cmp	r7, #0
 8003e8e:	f000 80d8 	beq.w	8004042 <_printf_i+0x1d2>
 8003e92:	2f58      	cmp	r7, #88	; 0x58
 8003e94:	f000 80a3 	beq.w	8003fde <_printf_i+0x16e>
 8003e98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ea0:	e03a      	b.n	8003f18 <_printf_i+0xa8>
 8003ea2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003ea6:	2b15      	cmp	r3, #21
 8003ea8:	d8f6      	bhi.n	8003e98 <_printf_i+0x28>
 8003eaa:	a101      	add	r1, pc, #4	; (adr r1, 8003eb0 <_printf_i+0x40>)
 8003eac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003eb0:	08003f09 	.word	0x08003f09
 8003eb4:	08003f1d 	.word	0x08003f1d
 8003eb8:	08003e99 	.word	0x08003e99
 8003ebc:	08003e99 	.word	0x08003e99
 8003ec0:	08003e99 	.word	0x08003e99
 8003ec4:	08003e99 	.word	0x08003e99
 8003ec8:	08003f1d 	.word	0x08003f1d
 8003ecc:	08003e99 	.word	0x08003e99
 8003ed0:	08003e99 	.word	0x08003e99
 8003ed4:	08003e99 	.word	0x08003e99
 8003ed8:	08003e99 	.word	0x08003e99
 8003edc:	08004029 	.word	0x08004029
 8003ee0:	08003f4d 	.word	0x08003f4d
 8003ee4:	0800400b 	.word	0x0800400b
 8003ee8:	08003e99 	.word	0x08003e99
 8003eec:	08003e99 	.word	0x08003e99
 8003ef0:	0800404b 	.word	0x0800404b
 8003ef4:	08003e99 	.word	0x08003e99
 8003ef8:	08003f4d 	.word	0x08003f4d
 8003efc:	08003e99 	.word	0x08003e99
 8003f00:	08003e99 	.word	0x08003e99
 8003f04:	08004013 	.word	0x08004013
 8003f08:	682b      	ldr	r3, [r5, #0]
 8003f0a:	1d1a      	adds	r2, r3, #4
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	602a      	str	r2, [r5, #0]
 8003f10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e0a3      	b.n	8004064 <_printf_i+0x1f4>
 8003f1c:	6820      	ldr	r0, [r4, #0]
 8003f1e:	6829      	ldr	r1, [r5, #0]
 8003f20:	0606      	lsls	r6, r0, #24
 8003f22:	f101 0304 	add.w	r3, r1, #4
 8003f26:	d50a      	bpl.n	8003f3e <_printf_i+0xce>
 8003f28:	680e      	ldr	r6, [r1, #0]
 8003f2a:	602b      	str	r3, [r5, #0]
 8003f2c:	2e00      	cmp	r6, #0
 8003f2e:	da03      	bge.n	8003f38 <_printf_i+0xc8>
 8003f30:	232d      	movs	r3, #45	; 0x2d
 8003f32:	4276      	negs	r6, r6
 8003f34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f38:	485e      	ldr	r0, [pc, #376]	; (80040b4 <_printf_i+0x244>)
 8003f3a:	230a      	movs	r3, #10
 8003f3c:	e019      	b.n	8003f72 <_printf_i+0x102>
 8003f3e:	680e      	ldr	r6, [r1, #0]
 8003f40:	602b      	str	r3, [r5, #0]
 8003f42:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003f46:	bf18      	it	ne
 8003f48:	b236      	sxthne	r6, r6
 8003f4a:	e7ef      	b.n	8003f2c <_printf_i+0xbc>
 8003f4c:	682b      	ldr	r3, [r5, #0]
 8003f4e:	6820      	ldr	r0, [r4, #0]
 8003f50:	1d19      	adds	r1, r3, #4
 8003f52:	6029      	str	r1, [r5, #0]
 8003f54:	0601      	lsls	r1, r0, #24
 8003f56:	d501      	bpl.n	8003f5c <_printf_i+0xec>
 8003f58:	681e      	ldr	r6, [r3, #0]
 8003f5a:	e002      	b.n	8003f62 <_printf_i+0xf2>
 8003f5c:	0646      	lsls	r6, r0, #25
 8003f5e:	d5fb      	bpl.n	8003f58 <_printf_i+0xe8>
 8003f60:	881e      	ldrh	r6, [r3, #0]
 8003f62:	4854      	ldr	r0, [pc, #336]	; (80040b4 <_printf_i+0x244>)
 8003f64:	2f6f      	cmp	r7, #111	; 0x6f
 8003f66:	bf0c      	ite	eq
 8003f68:	2308      	moveq	r3, #8
 8003f6a:	230a      	movne	r3, #10
 8003f6c:	2100      	movs	r1, #0
 8003f6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f72:	6865      	ldr	r5, [r4, #4]
 8003f74:	60a5      	str	r5, [r4, #8]
 8003f76:	2d00      	cmp	r5, #0
 8003f78:	bfa2      	ittt	ge
 8003f7a:	6821      	ldrge	r1, [r4, #0]
 8003f7c:	f021 0104 	bicge.w	r1, r1, #4
 8003f80:	6021      	strge	r1, [r4, #0]
 8003f82:	b90e      	cbnz	r6, 8003f88 <_printf_i+0x118>
 8003f84:	2d00      	cmp	r5, #0
 8003f86:	d04d      	beq.n	8004024 <_printf_i+0x1b4>
 8003f88:	4615      	mov	r5, r2
 8003f8a:	fbb6 f1f3 	udiv	r1, r6, r3
 8003f8e:	fb03 6711 	mls	r7, r3, r1, r6
 8003f92:	5dc7      	ldrb	r7, [r0, r7]
 8003f94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003f98:	4637      	mov	r7, r6
 8003f9a:	42bb      	cmp	r3, r7
 8003f9c:	460e      	mov	r6, r1
 8003f9e:	d9f4      	bls.n	8003f8a <_printf_i+0x11a>
 8003fa0:	2b08      	cmp	r3, #8
 8003fa2:	d10b      	bne.n	8003fbc <_printf_i+0x14c>
 8003fa4:	6823      	ldr	r3, [r4, #0]
 8003fa6:	07de      	lsls	r6, r3, #31
 8003fa8:	d508      	bpl.n	8003fbc <_printf_i+0x14c>
 8003faa:	6923      	ldr	r3, [r4, #16]
 8003fac:	6861      	ldr	r1, [r4, #4]
 8003fae:	4299      	cmp	r1, r3
 8003fb0:	bfde      	ittt	le
 8003fb2:	2330      	movle	r3, #48	; 0x30
 8003fb4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003fb8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003fbc:	1b52      	subs	r2, r2, r5
 8003fbe:	6122      	str	r2, [r4, #16]
 8003fc0:	f8cd a000 	str.w	sl, [sp]
 8003fc4:	464b      	mov	r3, r9
 8003fc6:	aa03      	add	r2, sp, #12
 8003fc8:	4621      	mov	r1, r4
 8003fca:	4640      	mov	r0, r8
 8003fcc:	f7ff fee2 	bl	8003d94 <_printf_common>
 8003fd0:	3001      	adds	r0, #1
 8003fd2:	d14c      	bne.n	800406e <_printf_i+0x1fe>
 8003fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8003fd8:	b004      	add	sp, #16
 8003fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fde:	4835      	ldr	r0, [pc, #212]	; (80040b4 <_printf_i+0x244>)
 8003fe0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003fe4:	6829      	ldr	r1, [r5, #0]
 8003fe6:	6823      	ldr	r3, [r4, #0]
 8003fe8:	f851 6b04 	ldr.w	r6, [r1], #4
 8003fec:	6029      	str	r1, [r5, #0]
 8003fee:	061d      	lsls	r5, r3, #24
 8003ff0:	d514      	bpl.n	800401c <_printf_i+0x1ac>
 8003ff2:	07df      	lsls	r7, r3, #31
 8003ff4:	bf44      	itt	mi
 8003ff6:	f043 0320 	orrmi.w	r3, r3, #32
 8003ffa:	6023      	strmi	r3, [r4, #0]
 8003ffc:	b91e      	cbnz	r6, 8004006 <_printf_i+0x196>
 8003ffe:	6823      	ldr	r3, [r4, #0]
 8004000:	f023 0320 	bic.w	r3, r3, #32
 8004004:	6023      	str	r3, [r4, #0]
 8004006:	2310      	movs	r3, #16
 8004008:	e7b0      	b.n	8003f6c <_printf_i+0xfc>
 800400a:	6823      	ldr	r3, [r4, #0]
 800400c:	f043 0320 	orr.w	r3, r3, #32
 8004010:	6023      	str	r3, [r4, #0]
 8004012:	2378      	movs	r3, #120	; 0x78
 8004014:	4828      	ldr	r0, [pc, #160]	; (80040b8 <_printf_i+0x248>)
 8004016:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800401a:	e7e3      	b.n	8003fe4 <_printf_i+0x174>
 800401c:	0659      	lsls	r1, r3, #25
 800401e:	bf48      	it	mi
 8004020:	b2b6      	uxthmi	r6, r6
 8004022:	e7e6      	b.n	8003ff2 <_printf_i+0x182>
 8004024:	4615      	mov	r5, r2
 8004026:	e7bb      	b.n	8003fa0 <_printf_i+0x130>
 8004028:	682b      	ldr	r3, [r5, #0]
 800402a:	6826      	ldr	r6, [r4, #0]
 800402c:	6961      	ldr	r1, [r4, #20]
 800402e:	1d18      	adds	r0, r3, #4
 8004030:	6028      	str	r0, [r5, #0]
 8004032:	0635      	lsls	r5, r6, #24
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	d501      	bpl.n	800403c <_printf_i+0x1cc>
 8004038:	6019      	str	r1, [r3, #0]
 800403a:	e002      	b.n	8004042 <_printf_i+0x1d2>
 800403c:	0670      	lsls	r0, r6, #25
 800403e:	d5fb      	bpl.n	8004038 <_printf_i+0x1c8>
 8004040:	8019      	strh	r1, [r3, #0]
 8004042:	2300      	movs	r3, #0
 8004044:	6123      	str	r3, [r4, #16]
 8004046:	4615      	mov	r5, r2
 8004048:	e7ba      	b.n	8003fc0 <_printf_i+0x150>
 800404a:	682b      	ldr	r3, [r5, #0]
 800404c:	1d1a      	adds	r2, r3, #4
 800404e:	602a      	str	r2, [r5, #0]
 8004050:	681d      	ldr	r5, [r3, #0]
 8004052:	6862      	ldr	r2, [r4, #4]
 8004054:	2100      	movs	r1, #0
 8004056:	4628      	mov	r0, r5
 8004058:	f7fc f8ca 	bl	80001f0 <memchr>
 800405c:	b108      	cbz	r0, 8004062 <_printf_i+0x1f2>
 800405e:	1b40      	subs	r0, r0, r5
 8004060:	6060      	str	r0, [r4, #4]
 8004062:	6863      	ldr	r3, [r4, #4]
 8004064:	6123      	str	r3, [r4, #16]
 8004066:	2300      	movs	r3, #0
 8004068:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800406c:	e7a8      	b.n	8003fc0 <_printf_i+0x150>
 800406e:	6923      	ldr	r3, [r4, #16]
 8004070:	462a      	mov	r2, r5
 8004072:	4649      	mov	r1, r9
 8004074:	4640      	mov	r0, r8
 8004076:	47d0      	blx	sl
 8004078:	3001      	adds	r0, #1
 800407a:	d0ab      	beq.n	8003fd4 <_printf_i+0x164>
 800407c:	6823      	ldr	r3, [r4, #0]
 800407e:	079b      	lsls	r3, r3, #30
 8004080:	d413      	bmi.n	80040aa <_printf_i+0x23a>
 8004082:	68e0      	ldr	r0, [r4, #12]
 8004084:	9b03      	ldr	r3, [sp, #12]
 8004086:	4298      	cmp	r0, r3
 8004088:	bfb8      	it	lt
 800408a:	4618      	movlt	r0, r3
 800408c:	e7a4      	b.n	8003fd8 <_printf_i+0x168>
 800408e:	2301      	movs	r3, #1
 8004090:	4632      	mov	r2, r6
 8004092:	4649      	mov	r1, r9
 8004094:	4640      	mov	r0, r8
 8004096:	47d0      	blx	sl
 8004098:	3001      	adds	r0, #1
 800409a:	d09b      	beq.n	8003fd4 <_printf_i+0x164>
 800409c:	3501      	adds	r5, #1
 800409e:	68e3      	ldr	r3, [r4, #12]
 80040a0:	9903      	ldr	r1, [sp, #12]
 80040a2:	1a5b      	subs	r3, r3, r1
 80040a4:	42ab      	cmp	r3, r5
 80040a6:	dcf2      	bgt.n	800408e <_printf_i+0x21e>
 80040a8:	e7eb      	b.n	8004082 <_printf_i+0x212>
 80040aa:	2500      	movs	r5, #0
 80040ac:	f104 0619 	add.w	r6, r4, #25
 80040b0:	e7f5      	b.n	800409e <_printf_i+0x22e>
 80040b2:	bf00      	nop
 80040b4:	08009f1e 	.word	0x08009f1e
 80040b8:	08009f2f 	.word	0x08009f2f

080040bc <_sbrk_r>:
 80040bc:	b538      	push	{r3, r4, r5, lr}
 80040be:	4d06      	ldr	r5, [pc, #24]	; (80040d8 <_sbrk_r+0x1c>)
 80040c0:	2300      	movs	r3, #0
 80040c2:	4604      	mov	r4, r0
 80040c4:	4608      	mov	r0, r1
 80040c6:	602b      	str	r3, [r5, #0]
 80040c8:	f7fe fab0 	bl	800262c <_sbrk>
 80040cc:	1c43      	adds	r3, r0, #1
 80040ce:	d102      	bne.n	80040d6 <_sbrk_r+0x1a>
 80040d0:	682b      	ldr	r3, [r5, #0]
 80040d2:	b103      	cbz	r3, 80040d6 <_sbrk_r+0x1a>
 80040d4:	6023      	str	r3, [r4, #0]
 80040d6:	bd38      	pop	{r3, r4, r5, pc}
 80040d8:	20000238 	.word	0x20000238

080040dc <quorem>:
 80040dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040e0:	6903      	ldr	r3, [r0, #16]
 80040e2:	690c      	ldr	r4, [r1, #16]
 80040e4:	42a3      	cmp	r3, r4
 80040e6:	4607      	mov	r7, r0
 80040e8:	f2c0 8081 	blt.w	80041ee <quorem+0x112>
 80040ec:	3c01      	subs	r4, #1
 80040ee:	f101 0814 	add.w	r8, r1, #20
 80040f2:	f100 0514 	add.w	r5, r0, #20
 80040f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80040fa:	9301      	str	r3, [sp, #4]
 80040fc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004100:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004104:	3301      	adds	r3, #1
 8004106:	429a      	cmp	r2, r3
 8004108:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800410c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004110:	fbb2 f6f3 	udiv	r6, r2, r3
 8004114:	d331      	bcc.n	800417a <quorem+0x9e>
 8004116:	f04f 0e00 	mov.w	lr, #0
 800411a:	4640      	mov	r0, r8
 800411c:	46ac      	mov	ip, r5
 800411e:	46f2      	mov	sl, lr
 8004120:	f850 2b04 	ldr.w	r2, [r0], #4
 8004124:	b293      	uxth	r3, r2
 8004126:	fb06 e303 	mla	r3, r6, r3, lr
 800412a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800412e:	b29b      	uxth	r3, r3
 8004130:	ebaa 0303 	sub.w	r3, sl, r3
 8004134:	f8dc a000 	ldr.w	sl, [ip]
 8004138:	0c12      	lsrs	r2, r2, #16
 800413a:	fa13 f38a 	uxtah	r3, r3, sl
 800413e:	fb06 e202 	mla	r2, r6, r2, lr
 8004142:	9300      	str	r3, [sp, #0]
 8004144:	9b00      	ldr	r3, [sp, #0]
 8004146:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800414a:	b292      	uxth	r2, r2
 800414c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004150:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004154:	f8bd 3000 	ldrh.w	r3, [sp]
 8004158:	4581      	cmp	r9, r0
 800415a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800415e:	f84c 3b04 	str.w	r3, [ip], #4
 8004162:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004166:	d2db      	bcs.n	8004120 <quorem+0x44>
 8004168:	f855 300b 	ldr.w	r3, [r5, fp]
 800416c:	b92b      	cbnz	r3, 800417a <quorem+0x9e>
 800416e:	9b01      	ldr	r3, [sp, #4]
 8004170:	3b04      	subs	r3, #4
 8004172:	429d      	cmp	r5, r3
 8004174:	461a      	mov	r2, r3
 8004176:	d32e      	bcc.n	80041d6 <quorem+0xfa>
 8004178:	613c      	str	r4, [r7, #16]
 800417a:	4638      	mov	r0, r7
 800417c:	f001 f8ca 	bl	8005314 <__mcmp>
 8004180:	2800      	cmp	r0, #0
 8004182:	db24      	blt.n	80041ce <quorem+0xf2>
 8004184:	3601      	adds	r6, #1
 8004186:	4628      	mov	r0, r5
 8004188:	f04f 0c00 	mov.w	ip, #0
 800418c:	f858 2b04 	ldr.w	r2, [r8], #4
 8004190:	f8d0 e000 	ldr.w	lr, [r0]
 8004194:	b293      	uxth	r3, r2
 8004196:	ebac 0303 	sub.w	r3, ip, r3
 800419a:	0c12      	lsrs	r2, r2, #16
 800419c:	fa13 f38e 	uxtah	r3, r3, lr
 80041a0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80041a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80041ae:	45c1      	cmp	r9, r8
 80041b0:	f840 3b04 	str.w	r3, [r0], #4
 80041b4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80041b8:	d2e8      	bcs.n	800418c <quorem+0xb0>
 80041ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80041be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80041c2:	b922      	cbnz	r2, 80041ce <quorem+0xf2>
 80041c4:	3b04      	subs	r3, #4
 80041c6:	429d      	cmp	r5, r3
 80041c8:	461a      	mov	r2, r3
 80041ca:	d30a      	bcc.n	80041e2 <quorem+0x106>
 80041cc:	613c      	str	r4, [r7, #16]
 80041ce:	4630      	mov	r0, r6
 80041d0:	b003      	add	sp, #12
 80041d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041d6:	6812      	ldr	r2, [r2, #0]
 80041d8:	3b04      	subs	r3, #4
 80041da:	2a00      	cmp	r2, #0
 80041dc:	d1cc      	bne.n	8004178 <quorem+0x9c>
 80041de:	3c01      	subs	r4, #1
 80041e0:	e7c7      	b.n	8004172 <quorem+0x96>
 80041e2:	6812      	ldr	r2, [r2, #0]
 80041e4:	3b04      	subs	r3, #4
 80041e6:	2a00      	cmp	r2, #0
 80041e8:	d1f0      	bne.n	80041cc <quorem+0xf0>
 80041ea:	3c01      	subs	r4, #1
 80041ec:	e7eb      	b.n	80041c6 <quorem+0xea>
 80041ee:	2000      	movs	r0, #0
 80041f0:	e7ee      	b.n	80041d0 <quorem+0xf4>
 80041f2:	0000      	movs	r0, r0
 80041f4:	0000      	movs	r0, r0
	...

080041f8 <_dtoa_r>:
 80041f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041fc:	ed2d 8b04 	vpush	{d8-d9}
 8004200:	ec57 6b10 	vmov	r6, r7, d0
 8004204:	b093      	sub	sp, #76	; 0x4c
 8004206:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004208:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800420c:	9106      	str	r1, [sp, #24]
 800420e:	ee10 aa10 	vmov	sl, s0
 8004212:	4604      	mov	r4, r0
 8004214:	9209      	str	r2, [sp, #36]	; 0x24
 8004216:	930c      	str	r3, [sp, #48]	; 0x30
 8004218:	46bb      	mov	fp, r7
 800421a:	b975      	cbnz	r5, 800423a <_dtoa_r+0x42>
 800421c:	2010      	movs	r0, #16
 800421e:	f7ff f9f3 	bl	8003608 <malloc>
 8004222:	4602      	mov	r2, r0
 8004224:	6260      	str	r0, [r4, #36]	; 0x24
 8004226:	b920      	cbnz	r0, 8004232 <_dtoa_r+0x3a>
 8004228:	4ba7      	ldr	r3, [pc, #668]	; (80044c8 <_dtoa_r+0x2d0>)
 800422a:	21ea      	movs	r1, #234	; 0xea
 800422c:	48a7      	ldr	r0, [pc, #668]	; (80044cc <_dtoa_r+0x2d4>)
 800422e:	f001 f989 	bl	8005544 <__assert_func>
 8004232:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004236:	6005      	str	r5, [r0, #0]
 8004238:	60c5      	str	r5, [r0, #12]
 800423a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800423c:	6819      	ldr	r1, [r3, #0]
 800423e:	b151      	cbz	r1, 8004256 <_dtoa_r+0x5e>
 8004240:	685a      	ldr	r2, [r3, #4]
 8004242:	604a      	str	r2, [r1, #4]
 8004244:	2301      	movs	r3, #1
 8004246:	4093      	lsls	r3, r2
 8004248:	608b      	str	r3, [r1, #8]
 800424a:	4620      	mov	r0, r4
 800424c:	f000 fe20 	bl	8004e90 <_Bfree>
 8004250:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004252:	2200      	movs	r2, #0
 8004254:	601a      	str	r2, [r3, #0]
 8004256:	1e3b      	subs	r3, r7, #0
 8004258:	bfaa      	itet	ge
 800425a:	2300      	movge	r3, #0
 800425c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8004260:	f8c8 3000 	strge.w	r3, [r8]
 8004264:	4b9a      	ldr	r3, [pc, #616]	; (80044d0 <_dtoa_r+0x2d8>)
 8004266:	bfbc      	itt	lt
 8004268:	2201      	movlt	r2, #1
 800426a:	f8c8 2000 	strlt.w	r2, [r8]
 800426e:	ea33 030b 	bics.w	r3, r3, fp
 8004272:	d11b      	bne.n	80042ac <_dtoa_r+0xb4>
 8004274:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004276:	f242 730f 	movw	r3, #9999	; 0x270f
 800427a:	6013      	str	r3, [r2, #0]
 800427c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004280:	4333      	orrs	r3, r6
 8004282:	f000 8592 	beq.w	8004daa <_dtoa_r+0xbb2>
 8004286:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004288:	b963      	cbnz	r3, 80042a4 <_dtoa_r+0xac>
 800428a:	4b92      	ldr	r3, [pc, #584]	; (80044d4 <_dtoa_r+0x2dc>)
 800428c:	e022      	b.n	80042d4 <_dtoa_r+0xdc>
 800428e:	4b92      	ldr	r3, [pc, #584]	; (80044d8 <_dtoa_r+0x2e0>)
 8004290:	9301      	str	r3, [sp, #4]
 8004292:	3308      	adds	r3, #8
 8004294:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004296:	6013      	str	r3, [r2, #0]
 8004298:	9801      	ldr	r0, [sp, #4]
 800429a:	b013      	add	sp, #76	; 0x4c
 800429c:	ecbd 8b04 	vpop	{d8-d9}
 80042a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042a4:	4b8b      	ldr	r3, [pc, #556]	; (80044d4 <_dtoa_r+0x2dc>)
 80042a6:	9301      	str	r3, [sp, #4]
 80042a8:	3303      	adds	r3, #3
 80042aa:	e7f3      	b.n	8004294 <_dtoa_r+0x9c>
 80042ac:	2200      	movs	r2, #0
 80042ae:	2300      	movs	r3, #0
 80042b0:	4650      	mov	r0, sl
 80042b2:	4659      	mov	r1, fp
 80042b4:	f7fc fc10 	bl	8000ad8 <__aeabi_dcmpeq>
 80042b8:	ec4b ab19 	vmov	d9, sl, fp
 80042bc:	4680      	mov	r8, r0
 80042be:	b158      	cbz	r0, 80042d8 <_dtoa_r+0xe0>
 80042c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80042c2:	2301      	movs	r3, #1
 80042c4:	6013      	str	r3, [r2, #0]
 80042c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	f000 856b 	beq.w	8004da4 <_dtoa_r+0xbac>
 80042ce:	4883      	ldr	r0, [pc, #524]	; (80044dc <_dtoa_r+0x2e4>)
 80042d0:	6018      	str	r0, [r3, #0]
 80042d2:	1e43      	subs	r3, r0, #1
 80042d4:	9301      	str	r3, [sp, #4]
 80042d6:	e7df      	b.n	8004298 <_dtoa_r+0xa0>
 80042d8:	ec4b ab10 	vmov	d0, sl, fp
 80042dc:	aa10      	add	r2, sp, #64	; 0x40
 80042de:	a911      	add	r1, sp, #68	; 0x44
 80042e0:	4620      	mov	r0, r4
 80042e2:	f001 f8bd 	bl	8005460 <__d2b>
 80042e6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80042ea:	ee08 0a10 	vmov	s16, r0
 80042ee:	2d00      	cmp	r5, #0
 80042f0:	f000 8084 	beq.w	80043fc <_dtoa_r+0x204>
 80042f4:	ee19 3a90 	vmov	r3, s19
 80042f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042fc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004300:	4656      	mov	r6, sl
 8004302:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004306:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800430a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800430e:	4b74      	ldr	r3, [pc, #464]	; (80044e0 <_dtoa_r+0x2e8>)
 8004310:	2200      	movs	r2, #0
 8004312:	4630      	mov	r0, r6
 8004314:	4639      	mov	r1, r7
 8004316:	f7fb ffbf 	bl	8000298 <__aeabi_dsub>
 800431a:	a365      	add	r3, pc, #404	; (adr r3, 80044b0 <_dtoa_r+0x2b8>)
 800431c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004320:	f7fc f972 	bl	8000608 <__aeabi_dmul>
 8004324:	a364      	add	r3, pc, #400	; (adr r3, 80044b8 <_dtoa_r+0x2c0>)
 8004326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800432a:	f7fb ffb7 	bl	800029c <__adddf3>
 800432e:	4606      	mov	r6, r0
 8004330:	4628      	mov	r0, r5
 8004332:	460f      	mov	r7, r1
 8004334:	f7fc f8fe 	bl	8000534 <__aeabi_i2d>
 8004338:	a361      	add	r3, pc, #388	; (adr r3, 80044c0 <_dtoa_r+0x2c8>)
 800433a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800433e:	f7fc f963 	bl	8000608 <__aeabi_dmul>
 8004342:	4602      	mov	r2, r0
 8004344:	460b      	mov	r3, r1
 8004346:	4630      	mov	r0, r6
 8004348:	4639      	mov	r1, r7
 800434a:	f7fb ffa7 	bl	800029c <__adddf3>
 800434e:	4606      	mov	r6, r0
 8004350:	460f      	mov	r7, r1
 8004352:	f7fc fc09 	bl	8000b68 <__aeabi_d2iz>
 8004356:	2200      	movs	r2, #0
 8004358:	9000      	str	r0, [sp, #0]
 800435a:	2300      	movs	r3, #0
 800435c:	4630      	mov	r0, r6
 800435e:	4639      	mov	r1, r7
 8004360:	f7fc fbc4 	bl	8000aec <__aeabi_dcmplt>
 8004364:	b150      	cbz	r0, 800437c <_dtoa_r+0x184>
 8004366:	9800      	ldr	r0, [sp, #0]
 8004368:	f7fc f8e4 	bl	8000534 <__aeabi_i2d>
 800436c:	4632      	mov	r2, r6
 800436e:	463b      	mov	r3, r7
 8004370:	f7fc fbb2 	bl	8000ad8 <__aeabi_dcmpeq>
 8004374:	b910      	cbnz	r0, 800437c <_dtoa_r+0x184>
 8004376:	9b00      	ldr	r3, [sp, #0]
 8004378:	3b01      	subs	r3, #1
 800437a:	9300      	str	r3, [sp, #0]
 800437c:	9b00      	ldr	r3, [sp, #0]
 800437e:	2b16      	cmp	r3, #22
 8004380:	d85a      	bhi.n	8004438 <_dtoa_r+0x240>
 8004382:	9a00      	ldr	r2, [sp, #0]
 8004384:	4b57      	ldr	r3, [pc, #348]	; (80044e4 <_dtoa_r+0x2ec>)
 8004386:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800438a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800438e:	ec51 0b19 	vmov	r0, r1, d9
 8004392:	f7fc fbab 	bl	8000aec <__aeabi_dcmplt>
 8004396:	2800      	cmp	r0, #0
 8004398:	d050      	beq.n	800443c <_dtoa_r+0x244>
 800439a:	9b00      	ldr	r3, [sp, #0]
 800439c:	3b01      	subs	r3, #1
 800439e:	9300      	str	r3, [sp, #0]
 80043a0:	2300      	movs	r3, #0
 80043a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80043a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80043a6:	1b5d      	subs	r5, r3, r5
 80043a8:	1e6b      	subs	r3, r5, #1
 80043aa:	9305      	str	r3, [sp, #20]
 80043ac:	bf45      	ittet	mi
 80043ae:	f1c5 0301 	rsbmi	r3, r5, #1
 80043b2:	9304      	strmi	r3, [sp, #16]
 80043b4:	2300      	movpl	r3, #0
 80043b6:	2300      	movmi	r3, #0
 80043b8:	bf4c      	ite	mi
 80043ba:	9305      	strmi	r3, [sp, #20]
 80043bc:	9304      	strpl	r3, [sp, #16]
 80043be:	9b00      	ldr	r3, [sp, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	db3d      	blt.n	8004440 <_dtoa_r+0x248>
 80043c4:	9b05      	ldr	r3, [sp, #20]
 80043c6:	9a00      	ldr	r2, [sp, #0]
 80043c8:	920a      	str	r2, [sp, #40]	; 0x28
 80043ca:	4413      	add	r3, r2
 80043cc:	9305      	str	r3, [sp, #20]
 80043ce:	2300      	movs	r3, #0
 80043d0:	9307      	str	r3, [sp, #28]
 80043d2:	9b06      	ldr	r3, [sp, #24]
 80043d4:	2b09      	cmp	r3, #9
 80043d6:	f200 8089 	bhi.w	80044ec <_dtoa_r+0x2f4>
 80043da:	2b05      	cmp	r3, #5
 80043dc:	bfc4      	itt	gt
 80043de:	3b04      	subgt	r3, #4
 80043e0:	9306      	strgt	r3, [sp, #24]
 80043e2:	9b06      	ldr	r3, [sp, #24]
 80043e4:	f1a3 0302 	sub.w	r3, r3, #2
 80043e8:	bfcc      	ite	gt
 80043ea:	2500      	movgt	r5, #0
 80043ec:	2501      	movle	r5, #1
 80043ee:	2b03      	cmp	r3, #3
 80043f0:	f200 8087 	bhi.w	8004502 <_dtoa_r+0x30a>
 80043f4:	e8df f003 	tbb	[pc, r3]
 80043f8:	59383a2d 	.word	0x59383a2d
 80043fc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004400:	441d      	add	r5, r3
 8004402:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004406:	2b20      	cmp	r3, #32
 8004408:	bfc1      	itttt	gt
 800440a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800440e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004412:	fa0b f303 	lslgt.w	r3, fp, r3
 8004416:	fa26 f000 	lsrgt.w	r0, r6, r0
 800441a:	bfda      	itte	le
 800441c:	f1c3 0320 	rsble	r3, r3, #32
 8004420:	fa06 f003 	lslle.w	r0, r6, r3
 8004424:	4318      	orrgt	r0, r3
 8004426:	f7fc f875 	bl	8000514 <__aeabi_ui2d>
 800442a:	2301      	movs	r3, #1
 800442c:	4606      	mov	r6, r0
 800442e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004432:	3d01      	subs	r5, #1
 8004434:	930e      	str	r3, [sp, #56]	; 0x38
 8004436:	e76a      	b.n	800430e <_dtoa_r+0x116>
 8004438:	2301      	movs	r3, #1
 800443a:	e7b2      	b.n	80043a2 <_dtoa_r+0x1aa>
 800443c:	900b      	str	r0, [sp, #44]	; 0x2c
 800443e:	e7b1      	b.n	80043a4 <_dtoa_r+0x1ac>
 8004440:	9b04      	ldr	r3, [sp, #16]
 8004442:	9a00      	ldr	r2, [sp, #0]
 8004444:	1a9b      	subs	r3, r3, r2
 8004446:	9304      	str	r3, [sp, #16]
 8004448:	4253      	negs	r3, r2
 800444a:	9307      	str	r3, [sp, #28]
 800444c:	2300      	movs	r3, #0
 800444e:	930a      	str	r3, [sp, #40]	; 0x28
 8004450:	e7bf      	b.n	80043d2 <_dtoa_r+0x1da>
 8004452:	2300      	movs	r3, #0
 8004454:	9308      	str	r3, [sp, #32]
 8004456:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004458:	2b00      	cmp	r3, #0
 800445a:	dc55      	bgt.n	8004508 <_dtoa_r+0x310>
 800445c:	2301      	movs	r3, #1
 800445e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004462:	461a      	mov	r2, r3
 8004464:	9209      	str	r2, [sp, #36]	; 0x24
 8004466:	e00c      	b.n	8004482 <_dtoa_r+0x28a>
 8004468:	2301      	movs	r3, #1
 800446a:	e7f3      	b.n	8004454 <_dtoa_r+0x25c>
 800446c:	2300      	movs	r3, #0
 800446e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004470:	9308      	str	r3, [sp, #32]
 8004472:	9b00      	ldr	r3, [sp, #0]
 8004474:	4413      	add	r3, r2
 8004476:	9302      	str	r3, [sp, #8]
 8004478:	3301      	adds	r3, #1
 800447a:	2b01      	cmp	r3, #1
 800447c:	9303      	str	r3, [sp, #12]
 800447e:	bfb8      	it	lt
 8004480:	2301      	movlt	r3, #1
 8004482:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004484:	2200      	movs	r2, #0
 8004486:	6042      	str	r2, [r0, #4]
 8004488:	2204      	movs	r2, #4
 800448a:	f102 0614 	add.w	r6, r2, #20
 800448e:	429e      	cmp	r6, r3
 8004490:	6841      	ldr	r1, [r0, #4]
 8004492:	d93d      	bls.n	8004510 <_dtoa_r+0x318>
 8004494:	4620      	mov	r0, r4
 8004496:	f000 fcbb 	bl	8004e10 <_Balloc>
 800449a:	9001      	str	r0, [sp, #4]
 800449c:	2800      	cmp	r0, #0
 800449e:	d13b      	bne.n	8004518 <_dtoa_r+0x320>
 80044a0:	4b11      	ldr	r3, [pc, #68]	; (80044e8 <_dtoa_r+0x2f0>)
 80044a2:	4602      	mov	r2, r0
 80044a4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80044a8:	e6c0      	b.n	800422c <_dtoa_r+0x34>
 80044aa:	2301      	movs	r3, #1
 80044ac:	e7df      	b.n	800446e <_dtoa_r+0x276>
 80044ae:	bf00      	nop
 80044b0:	636f4361 	.word	0x636f4361
 80044b4:	3fd287a7 	.word	0x3fd287a7
 80044b8:	8b60c8b3 	.word	0x8b60c8b3
 80044bc:	3fc68a28 	.word	0x3fc68a28
 80044c0:	509f79fb 	.word	0x509f79fb
 80044c4:	3fd34413 	.word	0x3fd34413
 80044c8:	08009f4d 	.word	0x08009f4d
 80044cc:	08009f64 	.word	0x08009f64
 80044d0:	7ff00000 	.word	0x7ff00000
 80044d4:	08009f49 	.word	0x08009f49
 80044d8:	08009f40 	.word	0x08009f40
 80044dc:	08009f1d 	.word	0x08009f1d
 80044e0:	3ff80000 	.word	0x3ff80000
 80044e4:	0800a058 	.word	0x0800a058
 80044e8:	08009fbf 	.word	0x08009fbf
 80044ec:	2501      	movs	r5, #1
 80044ee:	2300      	movs	r3, #0
 80044f0:	9306      	str	r3, [sp, #24]
 80044f2:	9508      	str	r5, [sp, #32]
 80044f4:	f04f 33ff 	mov.w	r3, #4294967295
 80044f8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80044fc:	2200      	movs	r2, #0
 80044fe:	2312      	movs	r3, #18
 8004500:	e7b0      	b.n	8004464 <_dtoa_r+0x26c>
 8004502:	2301      	movs	r3, #1
 8004504:	9308      	str	r3, [sp, #32]
 8004506:	e7f5      	b.n	80044f4 <_dtoa_r+0x2fc>
 8004508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800450a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800450e:	e7b8      	b.n	8004482 <_dtoa_r+0x28a>
 8004510:	3101      	adds	r1, #1
 8004512:	6041      	str	r1, [r0, #4]
 8004514:	0052      	lsls	r2, r2, #1
 8004516:	e7b8      	b.n	800448a <_dtoa_r+0x292>
 8004518:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800451a:	9a01      	ldr	r2, [sp, #4]
 800451c:	601a      	str	r2, [r3, #0]
 800451e:	9b03      	ldr	r3, [sp, #12]
 8004520:	2b0e      	cmp	r3, #14
 8004522:	f200 809d 	bhi.w	8004660 <_dtoa_r+0x468>
 8004526:	2d00      	cmp	r5, #0
 8004528:	f000 809a 	beq.w	8004660 <_dtoa_r+0x468>
 800452c:	9b00      	ldr	r3, [sp, #0]
 800452e:	2b00      	cmp	r3, #0
 8004530:	dd32      	ble.n	8004598 <_dtoa_r+0x3a0>
 8004532:	4ab7      	ldr	r2, [pc, #732]	; (8004810 <_dtoa_r+0x618>)
 8004534:	f003 030f 	and.w	r3, r3, #15
 8004538:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800453c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004540:	9b00      	ldr	r3, [sp, #0]
 8004542:	05d8      	lsls	r0, r3, #23
 8004544:	ea4f 1723 	mov.w	r7, r3, asr #4
 8004548:	d516      	bpl.n	8004578 <_dtoa_r+0x380>
 800454a:	4bb2      	ldr	r3, [pc, #712]	; (8004814 <_dtoa_r+0x61c>)
 800454c:	ec51 0b19 	vmov	r0, r1, d9
 8004550:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004554:	f7fc f982 	bl	800085c <__aeabi_ddiv>
 8004558:	f007 070f 	and.w	r7, r7, #15
 800455c:	4682      	mov	sl, r0
 800455e:	468b      	mov	fp, r1
 8004560:	2503      	movs	r5, #3
 8004562:	4eac      	ldr	r6, [pc, #688]	; (8004814 <_dtoa_r+0x61c>)
 8004564:	b957      	cbnz	r7, 800457c <_dtoa_r+0x384>
 8004566:	4642      	mov	r2, r8
 8004568:	464b      	mov	r3, r9
 800456a:	4650      	mov	r0, sl
 800456c:	4659      	mov	r1, fp
 800456e:	f7fc f975 	bl	800085c <__aeabi_ddiv>
 8004572:	4682      	mov	sl, r0
 8004574:	468b      	mov	fp, r1
 8004576:	e028      	b.n	80045ca <_dtoa_r+0x3d2>
 8004578:	2502      	movs	r5, #2
 800457a:	e7f2      	b.n	8004562 <_dtoa_r+0x36a>
 800457c:	07f9      	lsls	r1, r7, #31
 800457e:	d508      	bpl.n	8004592 <_dtoa_r+0x39a>
 8004580:	4640      	mov	r0, r8
 8004582:	4649      	mov	r1, r9
 8004584:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004588:	f7fc f83e 	bl	8000608 <__aeabi_dmul>
 800458c:	3501      	adds	r5, #1
 800458e:	4680      	mov	r8, r0
 8004590:	4689      	mov	r9, r1
 8004592:	107f      	asrs	r7, r7, #1
 8004594:	3608      	adds	r6, #8
 8004596:	e7e5      	b.n	8004564 <_dtoa_r+0x36c>
 8004598:	f000 809b 	beq.w	80046d2 <_dtoa_r+0x4da>
 800459c:	9b00      	ldr	r3, [sp, #0]
 800459e:	4f9d      	ldr	r7, [pc, #628]	; (8004814 <_dtoa_r+0x61c>)
 80045a0:	425e      	negs	r6, r3
 80045a2:	4b9b      	ldr	r3, [pc, #620]	; (8004810 <_dtoa_r+0x618>)
 80045a4:	f006 020f 	and.w	r2, r6, #15
 80045a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80045ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b0:	ec51 0b19 	vmov	r0, r1, d9
 80045b4:	f7fc f828 	bl	8000608 <__aeabi_dmul>
 80045b8:	1136      	asrs	r6, r6, #4
 80045ba:	4682      	mov	sl, r0
 80045bc:	468b      	mov	fp, r1
 80045be:	2300      	movs	r3, #0
 80045c0:	2502      	movs	r5, #2
 80045c2:	2e00      	cmp	r6, #0
 80045c4:	d17a      	bne.n	80046bc <_dtoa_r+0x4c4>
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1d3      	bne.n	8004572 <_dtoa_r+0x37a>
 80045ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	f000 8082 	beq.w	80046d6 <_dtoa_r+0x4de>
 80045d2:	4b91      	ldr	r3, [pc, #580]	; (8004818 <_dtoa_r+0x620>)
 80045d4:	2200      	movs	r2, #0
 80045d6:	4650      	mov	r0, sl
 80045d8:	4659      	mov	r1, fp
 80045da:	f7fc fa87 	bl	8000aec <__aeabi_dcmplt>
 80045de:	2800      	cmp	r0, #0
 80045e0:	d079      	beq.n	80046d6 <_dtoa_r+0x4de>
 80045e2:	9b03      	ldr	r3, [sp, #12]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d076      	beq.n	80046d6 <_dtoa_r+0x4de>
 80045e8:	9b02      	ldr	r3, [sp, #8]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	dd36      	ble.n	800465c <_dtoa_r+0x464>
 80045ee:	9b00      	ldr	r3, [sp, #0]
 80045f0:	4650      	mov	r0, sl
 80045f2:	4659      	mov	r1, fp
 80045f4:	1e5f      	subs	r7, r3, #1
 80045f6:	2200      	movs	r2, #0
 80045f8:	4b88      	ldr	r3, [pc, #544]	; (800481c <_dtoa_r+0x624>)
 80045fa:	f7fc f805 	bl	8000608 <__aeabi_dmul>
 80045fe:	9e02      	ldr	r6, [sp, #8]
 8004600:	4682      	mov	sl, r0
 8004602:	468b      	mov	fp, r1
 8004604:	3501      	adds	r5, #1
 8004606:	4628      	mov	r0, r5
 8004608:	f7fb ff94 	bl	8000534 <__aeabi_i2d>
 800460c:	4652      	mov	r2, sl
 800460e:	465b      	mov	r3, fp
 8004610:	f7fb fffa 	bl	8000608 <__aeabi_dmul>
 8004614:	4b82      	ldr	r3, [pc, #520]	; (8004820 <_dtoa_r+0x628>)
 8004616:	2200      	movs	r2, #0
 8004618:	f7fb fe40 	bl	800029c <__adddf3>
 800461c:	46d0      	mov	r8, sl
 800461e:	46d9      	mov	r9, fp
 8004620:	4682      	mov	sl, r0
 8004622:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8004626:	2e00      	cmp	r6, #0
 8004628:	d158      	bne.n	80046dc <_dtoa_r+0x4e4>
 800462a:	4b7e      	ldr	r3, [pc, #504]	; (8004824 <_dtoa_r+0x62c>)
 800462c:	2200      	movs	r2, #0
 800462e:	4640      	mov	r0, r8
 8004630:	4649      	mov	r1, r9
 8004632:	f7fb fe31 	bl	8000298 <__aeabi_dsub>
 8004636:	4652      	mov	r2, sl
 8004638:	465b      	mov	r3, fp
 800463a:	4680      	mov	r8, r0
 800463c:	4689      	mov	r9, r1
 800463e:	f7fc fa73 	bl	8000b28 <__aeabi_dcmpgt>
 8004642:	2800      	cmp	r0, #0
 8004644:	f040 8295 	bne.w	8004b72 <_dtoa_r+0x97a>
 8004648:	4652      	mov	r2, sl
 800464a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800464e:	4640      	mov	r0, r8
 8004650:	4649      	mov	r1, r9
 8004652:	f7fc fa4b 	bl	8000aec <__aeabi_dcmplt>
 8004656:	2800      	cmp	r0, #0
 8004658:	f040 8289 	bne.w	8004b6e <_dtoa_r+0x976>
 800465c:	ec5b ab19 	vmov	sl, fp, d9
 8004660:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004662:	2b00      	cmp	r3, #0
 8004664:	f2c0 8148 	blt.w	80048f8 <_dtoa_r+0x700>
 8004668:	9a00      	ldr	r2, [sp, #0]
 800466a:	2a0e      	cmp	r2, #14
 800466c:	f300 8144 	bgt.w	80048f8 <_dtoa_r+0x700>
 8004670:	4b67      	ldr	r3, [pc, #412]	; (8004810 <_dtoa_r+0x618>)
 8004672:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004676:	e9d3 8900 	ldrd	r8, r9, [r3]
 800467a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800467c:	2b00      	cmp	r3, #0
 800467e:	f280 80d5 	bge.w	800482c <_dtoa_r+0x634>
 8004682:	9b03      	ldr	r3, [sp, #12]
 8004684:	2b00      	cmp	r3, #0
 8004686:	f300 80d1 	bgt.w	800482c <_dtoa_r+0x634>
 800468a:	f040 826f 	bne.w	8004b6c <_dtoa_r+0x974>
 800468e:	4b65      	ldr	r3, [pc, #404]	; (8004824 <_dtoa_r+0x62c>)
 8004690:	2200      	movs	r2, #0
 8004692:	4640      	mov	r0, r8
 8004694:	4649      	mov	r1, r9
 8004696:	f7fb ffb7 	bl	8000608 <__aeabi_dmul>
 800469a:	4652      	mov	r2, sl
 800469c:	465b      	mov	r3, fp
 800469e:	f7fc fa39 	bl	8000b14 <__aeabi_dcmpge>
 80046a2:	9e03      	ldr	r6, [sp, #12]
 80046a4:	4637      	mov	r7, r6
 80046a6:	2800      	cmp	r0, #0
 80046a8:	f040 8245 	bne.w	8004b36 <_dtoa_r+0x93e>
 80046ac:	9d01      	ldr	r5, [sp, #4]
 80046ae:	2331      	movs	r3, #49	; 0x31
 80046b0:	f805 3b01 	strb.w	r3, [r5], #1
 80046b4:	9b00      	ldr	r3, [sp, #0]
 80046b6:	3301      	adds	r3, #1
 80046b8:	9300      	str	r3, [sp, #0]
 80046ba:	e240      	b.n	8004b3e <_dtoa_r+0x946>
 80046bc:	07f2      	lsls	r2, r6, #31
 80046be:	d505      	bpl.n	80046cc <_dtoa_r+0x4d4>
 80046c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046c4:	f7fb ffa0 	bl	8000608 <__aeabi_dmul>
 80046c8:	3501      	adds	r5, #1
 80046ca:	2301      	movs	r3, #1
 80046cc:	1076      	asrs	r6, r6, #1
 80046ce:	3708      	adds	r7, #8
 80046d0:	e777      	b.n	80045c2 <_dtoa_r+0x3ca>
 80046d2:	2502      	movs	r5, #2
 80046d4:	e779      	b.n	80045ca <_dtoa_r+0x3d2>
 80046d6:	9f00      	ldr	r7, [sp, #0]
 80046d8:	9e03      	ldr	r6, [sp, #12]
 80046da:	e794      	b.n	8004606 <_dtoa_r+0x40e>
 80046dc:	9901      	ldr	r1, [sp, #4]
 80046de:	4b4c      	ldr	r3, [pc, #304]	; (8004810 <_dtoa_r+0x618>)
 80046e0:	4431      	add	r1, r6
 80046e2:	910d      	str	r1, [sp, #52]	; 0x34
 80046e4:	9908      	ldr	r1, [sp, #32]
 80046e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80046ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80046ee:	2900      	cmp	r1, #0
 80046f0:	d043      	beq.n	800477a <_dtoa_r+0x582>
 80046f2:	494d      	ldr	r1, [pc, #308]	; (8004828 <_dtoa_r+0x630>)
 80046f4:	2000      	movs	r0, #0
 80046f6:	f7fc f8b1 	bl	800085c <__aeabi_ddiv>
 80046fa:	4652      	mov	r2, sl
 80046fc:	465b      	mov	r3, fp
 80046fe:	f7fb fdcb 	bl	8000298 <__aeabi_dsub>
 8004702:	9d01      	ldr	r5, [sp, #4]
 8004704:	4682      	mov	sl, r0
 8004706:	468b      	mov	fp, r1
 8004708:	4649      	mov	r1, r9
 800470a:	4640      	mov	r0, r8
 800470c:	f7fc fa2c 	bl	8000b68 <__aeabi_d2iz>
 8004710:	4606      	mov	r6, r0
 8004712:	f7fb ff0f 	bl	8000534 <__aeabi_i2d>
 8004716:	4602      	mov	r2, r0
 8004718:	460b      	mov	r3, r1
 800471a:	4640      	mov	r0, r8
 800471c:	4649      	mov	r1, r9
 800471e:	f7fb fdbb 	bl	8000298 <__aeabi_dsub>
 8004722:	3630      	adds	r6, #48	; 0x30
 8004724:	f805 6b01 	strb.w	r6, [r5], #1
 8004728:	4652      	mov	r2, sl
 800472a:	465b      	mov	r3, fp
 800472c:	4680      	mov	r8, r0
 800472e:	4689      	mov	r9, r1
 8004730:	f7fc f9dc 	bl	8000aec <__aeabi_dcmplt>
 8004734:	2800      	cmp	r0, #0
 8004736:	d163      	bne.n	8004800 <_dtoa_r+0x608>
 8004738:	4642      	mov	r2, r8
 800473a:	464b      	mov	r3, r9
 800473c:	4936      	ldr	r1, [pc, #216]	; (8004818 <_dtoa_r+0x620>)
 800473e:	2000      	movs	r0, #0
 8004740:	f7fb fdaa 	bl	8000298 <__aeabi_dsub>
 8004744:	4652      	mov	r2, sl
 8004746:	465b      	mov	r3, fp
 8004748:	f7fc f9d0 	bl	8000aec <__aeabi_dcmplt>
 800474c:	2800      	cmp	r0, #0
 800474e:	f040 80b5 	bne.w	80048bc <_dtoa_r+0x6c4>
 8004752:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004754:	429d      	cmp	r5, r3
 8004756:	d081      	beq.n	800465c <_dtoa_r+0x464>
 8004758:	4b30      	ldr	r3, [pc, #192]	; (800481c <_dtoa_r+0x624>)
 800475a:	2200      	movs	r2, #0
 800475c:	4650      	mov	r0, sl
 800475e:	4659      	mov	r1, fp
 8004760:	f7fb ff52 	bl	8000608 <__aeabi_dmul>
 8004764:	4b2d      	ldr	r3, [pc, #180]	; (800481c <_dtoa_r+0x624>)
 8004766:	4682      	mov	sl, r0
 8004768:	468b      	mov	fp, r1
 800476a:	4640      	mov	r0, r8
 800476c:	4649      	mov	r1, r9
 800476e:	2200      	movs	r2, #0
 8004770:	f7fb ff4a 	bl	8000608 <__aeabi_dmul>
 8004774:	4680      	mov	r8, r0
 8004776:	4689      	mov	r9, r1
 8004778:	e7c6      	b.n	8004708 <_dtoa_r+0x510>
 800477a:	4650      	mov	r0, sl
 800477c:	4659      	mov	r1, fp
 800477e:	f7fb ff43 	bl	8000608 <__aeabi_dmul>
 8004782:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004784:	9d01      	ldr	r5, [sp, #4]
 8004786:	930f      	str	r3, [sp, #60]	; 0x3c
 8004788:	4682      	mov	sl, r0
 800478a:	468b      	mov	fp, r1
 800478c:	4649      	mov	r1, r9
 800478e:	4640      	mov	r0, r8
 8004790:	f7fc f9ea 	bl	8000b68 <__aeabi_d2iz>
 8004794:	4606      	mov	r6, r0
 8004796:	f7fb fecd 	bl	8000534 <__aeabi_i2d>
 800479a:	3630      	adds	r6, #48	; 0x30
 800479c:	4602      	mov	r2, r0
 800479e:	460b      	mov	r3, r1
 80047a0:	4640      	mov	r0, r8
 80047a2:	4649      	mov	r1, r9
 80047a4:	f7fb fd78 	bl	8000298 <__aeabi_dsub>
 80047a8:	f805 6b01 	strb.w	r6, [r5], #1
 80047ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80047ae:	429d      	cmp	r5, r3
 80047b0:	4680      	mov	r8, r0
 80047b2:	4689      	mov	r9, r1
 80047b4:	f04f 0200 	mov.w	r2, #0
 80047b8:	d124      	bne.n	8004804 <_dtoa_r+0x60c>
 80047ba:	4b1b      	ldr	r3, [pc, #108]	; (8004828 <_dtoa_r+0x630>)
 80047bc:	4650      	mov	r0, sl
 80047be:	4659      	mov	r1, fp
 80047c0:	f7fb fd6c 	bl	800029c <__adddf3>
 80047c4:	4602      	mov	r2, r0
 80047c6:	460b      	mov	r3, r1
 80047c8:	4640      	mov	r0, r8
 80047ca:	4649      	mov	r1, r9
 80047cc:	f7fc f9ac 	bl	8000b28 <__aeabi_dcmpgt>
 80047d0:	2800      	cmp	r0, #0
 80047d2:	d173      	bne.n	80048bc <_dtoa_r+0x6c4>
 80047d4:	4652      	mov	r2, sl
 80047d6:	465b      	mov	r3, fp
 80047d8:	4913      	ldr	r1, [pc, #76]	; (8004828 <_dtoa_r+0x630>)
 80047da:	2000      	movs	r0, #0
 80047dc:	f7fb fd5c 	bl	8000298 <__aeabi_dsub>
 80047e0:	4602      	mov	r2, r0
 80047e2:	460b      	mov	r3, r1
 80047e4:	4640      	mov	r0, r8
 80047e6:	4649      	mov	r1, r9
 80047e8:	f7fc f980 	bl	8000aec <__aeabi_dcmplt>
 80047ec:	2800      	cmp	r0, #0
 80047ee:	f43f af35 	beq.w	800465c <_dtoa_r+0x464>
 80047f2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80047f4:	1e6b      	subs	r3, r5, #1
 80047f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80047f8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80047fc:	2b30      	cmp	r3, #48	; 0x30
 80047fe:	d0f8      	beq.n	80047f2 <_dtoa_r+0x5fa>
 8004800:	9700      	str	r7, [sp, #0]
 8004802:	e049      	b.n	8004898 <_dtoa_r+0x6a0>
 8004804:	4b05      	ldr	r3, [pc, #20]	; (800481c <_dtoa_r+0x624>)
 8004806:	f7fb feff 	bl	8000608 <__aeabi_dmul>
 800480a:	4680      	mov	r8, r0
 800480c:	4689      	mov	r9, r1
 800480e:	e7bd      	b.n	800478c <_dtoa_r+0x594>
 8004810:	0800a058 	.word	0x0800a058
 8004814:	0800a030 	.word	0x0800a030
 8004818:	3ff00000 	.word	0x3ff00000
 800481c:	40240000 	.word	0x40240000
 8004820:	401c0000 	.word	0x401c0000
 8004824:	40140000 	.word	0x40140000
 8004828:	3fe00000 	.word	0x3fe00000
 800482c:	9d01      	ldr	r5, [sp, #4]
 800482e:	4656      	mov	r6, sl
 8004830:	465f      	mov	r7, fp
 8004832:	4642      	mov	r2, r8
 8004834:	464b      	mov	r3, r9
 8004836:	4630      	mov	r0, r6
 8004838:	4639      	mov	r1, r7
 800483a:	f7fc f80f 	bl	800085c <__aeabi_ddiv>
 800483e:	f7fc f993 	bl	8000b68 <__aeabi_d2iz>
 8004842:	4682      	mov	sl, r0
 8004844:	f7fb fe76 	bl	8000534 <__aeabi_i2d>
 8004848:	4642      	mov	r2, r8
 800484a:	464b      	mov	r3, r9
 800484c:	f7fb fedc 	bl	8000608 <__aeabi_dmul>
 8004850:	4602      	mov	r2, r0
 8004852:	460b      	mov	r3, r1
 8004854:	4630      	mov	r0, r6
 8004856:	4639      	mov	r1, r7
 8004858:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800485c:	f7fb fd1c 	bl	8000298 <__aeabi_dsub>
 8004860:	f805 6b01 	strb.w	r6, [r5], #1
 8004864:	9e01      	ldr	r6, [sp, #4]
 8004866:	9f03      	ldr	r7, [sp, #12]
 8004868:	1bae      	subs	r6, r5, r6
 800486a:	42b7      	cmp	r7, r6
 800486c:	4602      	mov	r2, r0
 800486e:	460b      	mov	r3, r1
 8004870:	d135      	bne.n	80048de <_dtoa_r+0x6e6>
 8004872:	f7fb fd13 	bl	800029c <__adddf3>
 8004876:	4642      	mov	r2, r8
 8004878:	464b      	mov	r3, r9
 800487a:	4606      	mov	r6, r0
 800487c:	460f      	mov	r7, r1
 800487e:	f7fc f953 	bl	8000b28 <__aeabi_dcmpgt>
 8004882:	b9d0      	cbnz	r0, 80048ba <_dtoa_r+0x6c2>
 8004884:	4642      	mov	r2, r8
 8004886:	464b      	mov	r3, r9
 8004888:	4630      	mov	r0, r6
 800488a:	4639      	mov	r1, r7
 800488c:	f7fc f924 	bl	8000ad8 <__aeabi_dcmpeq>
 8004890:	b110      	cbz	r0, 8004898 <_dtoa_r+0x6a0>
 8004892:	f01a 0f01 	tst.w	sl, #1
 8004896:	d110      	bne.n	80048ba <_dtoa_r+0x6c2>
 8004898:	4620      	mov	r0, r4
 800489a:	ee18 1a10 	vmov	r1, s16
 800489e:	f000 faf7 	bl	8004e90 <_Bfree>
 80048a2:	2300      	movs	r3, #0
 80048a4:	9800      	ldr	r0, [sp, #0]
 80048a6:	702b      	strb	r3, [r5, #0]
 80048a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80048aa:	3001      	adds	r0, #1
 80048ac:	6018      	str	r0, [r3, #0]
 80048ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f43f acf1 	beq.w	8004298 <_dtoa_r+0xa0>
 80048b6:	601d      	str	r5, [r3, #0]
 80048b8:	e4ee      	b.n	8004298 <_dtoa_r+0xa0>
 80048ba:	9f00      	ldr	r7, [sp, #0]
 80048bc:	462b      	mov	r3, r5
 80048be:	461d      	mov	r5, r3
 80048c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80048c4:	2a39      	cmp	r2, #57	; 0x39
 80048c6:	d106      	bne.n	80048d6 <_dtoa_r+0x6de>
 80048c8:	9a01      	ldr	r2, [sp, #4]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d1f7      	bne.n	80048be <_dtoa_r+0x6c6>
 80048ce:	9901      	ldr	r1, [sp, #4]
 80048d0:	2230      	movs	r2, #48	; 0x30
 80048d2:	3701      	adds	r7, #1
 80048d4:	700a      	strb	r2, [r1, #0]
 80048d6:	781a      	ldrb	r2, [r3, #0]
 80048d8:	3201      	adds	r2, #1
 80048da:	701a      	strb	r2, [r3, #0]
 80048dc:	e790      	b.n	8004800 <_dtoa_r+0x608>
 80048de:	4ba6      	ldr	r3, [pc, #664]	; (8004b78 <_dtoa_r+0x980>)
 80048e0:	2200      	movs	r2, #0
 80048e2:	f7fb fe91 	bl	8000608 <__aeabi_dmul>
 80048e6:	2200      	movs	r2, #0
 80048e8:	2300      	movs	r3, #0
 80048ea:	4606      	mov	r6, r0
 80048ec:	460f      	mov	r7, r1
 80048ee:	f7fc f8f3 	bl	8000ad8 <__aeabi_dcmpeq>
 80048f2:	2800      	cmp	r0, #0
 80048f4:	d09d      	beq.n	8004832 <_dtoa_r+0x63a>
 80048f6:	e7cf      	b.n	8004898 <_dtoa_r+0x6a0>
 80048f8:	9a08      	ldr	r2, [sp, #32]
 80048fa:	2a00      	cmp	r2, #0
 80048fc:	f000 80d7 	beq.w	8004aae <_dtoa_r+0x8b6>
 8004900:	9a06      	ldr	r2, [sp, #24]
 8004902:	2a01      	cmp	r2, #1
 8004904:	f300 80ba 	bgt.w	8004a7c <_dtoa_r+0x884>
 8004908:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800490a:	2a00      	cmp	r2, #0
 800490c:	f000 80b2 	beq.w	8004a74 <_dtoa_r+0x87c>
 8004910:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004914:	9e07      	ldr	r6, [sp, #28]
 8004916:	9d04      	ldr	r5, [sp, #16]
 8004918:	9a04      	ldr	r2, [sp, #16]
 800491a:	441a      	add	r2, r3
 800491c:	9204      	str	r2, [sp, #16]
 800491e:	9a05      	ldr	r2, [sp, #20]
 8004920:	2101      	movs	r1, #1
 8004922:	441a      	add	r2, r3
 8004924:	4620      	mov	r0, r4
 8004926:	9205      	str	r2, [sp, #20]
 8004928:	f000 fb6a 	bl	8005000 <__i2b>
 800492c:	4607      	mov	r7, r0
 800492e:	2d00      	cmp	r5, #0
 8004930:	dd0c      	ble.n	800494c <_dtoa_r+0x754>
 8004932:	9b05      	ldr	r3, [sp, #20]
 8004934:	2b00      	cmp	r3, #0
 8004936:	dd09      	ble.n	800494c <_dtoa_r+0x754>
 8004938:	42ab      	cmp	r3, r5
 800493a:	9a04      	ldr	r2, [sp, #16]
 800493c:	bfa8      	it	ge
 800493e:	462b      	movge	r3, r5
 8004940:	1ad2      	subs	r2, r2, r3
 8004942:	9204      	str	r2, [sp, #16]
 8004944:	9a05      	ldr	r2, [sp, #20]
 8004946:	1aed      	subs	r5, r5, r3
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	9305      	str	r3, [sp, #20]
 800494c:	9b07      	ldr	r3, [sp, #28]
 800494e:	b31b      	cbz	r3, 8004998 <_dtoa_r+0x7a0>
 8004950:	9b08      	ldr	r3, [sp, #32]
 8004952:	2b00      	cmp	r3, #0
 8004954:	f000 80af 	beq.w	8004ab6 <_dtoa_r+0x8be>
 8004958:	2e00      	cmp	r6, #0
 800495a:	dd13      	ble.n	8004984 <_dtoa_r+0x78c>
 800495c:	4639      	mov	r1, r7
 800495e:	4632      	mov	r2, r6
 8004960:	4620      	mov	r0, r4
 8004962:	f000 fc0d 	bl	8005180 <__pow5mult>
 8004966:	ee18 2a10 	vmov	r2, s16
 800496a:	4601      	mov	r1, r0
 800496c:	4607      	mov	r7, r0
 800496e:	4620      	mov	r0, r4
 8004970:	f000 fb5c 	bl	800502c <__multiply>
 8004974:	ee18 1a10 	vmov	r1, s16
 8004978:	4680      	mov	r8, r0
 800497a:	4620      	mov	r0, r4
 800497c:	f000 fa88 	bl	8004e90 <_Bfree>
 8004980:	ee08 8a10 	vmov	s16, r8
 8004984:	9b07      	ldr	r3, [sp, #28]
 8004986:	1b9a      	subs	r2, r3, r6
 8004988:	d006      	beq.n	8004998 <_dtoa_r+0x7a0>
 800498a:	ee18 1a10 	vmov	r1, s16
 800498e:	4620      	mov	r0, r4
 8004990:	f000 fbf6 	bl	8005180 <__pow5mult>
 8004994:	ee08 0a10 	vmov	s16, r0
 8004998:	2101      	movs	r1, #1
 800499a:	4620      	mov	r0, r4
 800499c:	f000 fb30 	bl	8005000 <__i2b>
 80049a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	4606      	mov	r6, r0
 80049a6:	f340 8088 	ble.w	8004aba <_dtoa_r+0x8c2>
 80049aa:	461a      	mov	r2, r3
 80049ac:	4601      	mov	r1, r0
 80049ae:	4620      	mov	r0, r4
 80049b0:	f000 fbe6 	bl	8005180 <__pow5mult>
 80049b4:	9b06      	ldr	r3, [sp, #24]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	4606      	mov	r6, r0
 80049ba:	f340 8081 	ble.w	8004ac0 <_dtoa_r+0x8c8>
 80049be:	f04f 0800 	mov.w	r8, #0
 80049c2:	6933      	ldr	r3, [r6, #16]
 80049c4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80049c8:	6918      	ldr	r0, [r3, #16]
 80049ca:	f000 fac9 	bl	8004f60 <__hi0bits>
 80049ce:	f1c0 0020 	rsb	r0, r0, #32
 80049d2:	9b05      	ldr	r3, [sp, #20]
 80049d4:	4418      	add	r0, r3
 80049d6:	f010 001f 	ands.w	r0, r0, #31
 80049da:	f000 8092 	beq.w	8004b02 <_dtoa_r+0x90a>
 80049de:	f1c0 0320 	rsb	r3, r0, #32
 80049e2:	2b04      	cmp	r3, #4
 80049e4:	f340 808a 	ble.w	8004afc <_dtoa_r+0x904>
 80049e8:	f1c0 001c 	rsb	r0, r0, #28
 80049ec:	9b04      	ldr	r3, [sp, #16]
 80049ee:	4403      	add	r3, r0
 80049f0:	9304      	str	r3, [sp, #16]
 80049f2:	9b05      	ldr	r3, [sp, #20]
 80049f4:	4403      	add	r3, r0
 80049f6:	4405      	add	r5, r0
 80049f8:	9305      	str	r3, [sp, #20]
 80049fa:	9b04      	ldr	r3, [sp, #16]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	dd07      	ble.n	8004a10 <_dtoa_r+0x818>
 8004a00:	ee18 1a10 	vmov	r1, s16
 8004a04:	461a      	mov	r2, r3
 8004a06:	4620      	mov	r0, r4
 8004a08:	f000 fc14 	bl	8005234 <__lshift>
 8004a0c:	ee08 0a10 	vmov	s16, r0
 8004a10:	9b05      	ldr	r3, [sp, #20]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	dd05      	ble.n	8004a22 <_dtoa_r+0x82a>
 8004a16:	4631      	mov	r1, r6
 8004a18:	461a      	mov	r2, r3
 8004a1a:	4620      	mov	r0, r4
 8004a1c:	f000 fc0a 	bl	8005234 <__lshift>
 8004a20:	4606      	mov	r6, r0
 8004a22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d06e      	beq.n	8004b06 <_dtoa_r+0x90e>
 8004a28:	ee18 0a10 	vmov	r0, s16
 8004a2c:	4631      	mov	r1, r6
 8004a2e:	f000 fc71 	bl	8005314 <__mcmp>
 8004a32:	2800      	cmp	r0, #0
 8004a34:	da67      	bge.n	8004b06 <_dtoa_r+0x90e>
 8004a36:	9b00      	ldr	r3, [sp, #0]
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	ee18 1a10 	vmov	r1, s16
 8004a3e:	9300      	str	r3, [sp, #0]
 8004a40:	220a      	movs	r2, #10
 8004a42:	2300      	movs	r3, #0
 8004a44:	4620      	mov	r0, r4
 8004a46:	f000 fa45 	bl	8004ed4 <__multadd>
 8004a4a:	9b08      	ldr	r3, [sp, #32]
 8004a4c:	ee08 0a10 	vmov	s16, r0
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	f000 81b1 	beq.w	8004db8 <_dtoa_r+0xbc0>
 8004a56:	2300      	movs	r3, #0
 8004a58:	4639      	mov	r1, r7
 8004a5a:	220a      	movs	r2, #10
 8004a5c:	4620      	mov	r0, r4
 8004a5e:	f000 fa39 	bl	8004ed4 <__multadd>
 8004a62:	9b02      	ldr	r3, [sp, #8]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	4607      	mov	r7, r0
 8004a68:	f300 808e 	bgt.w	8004b88 <_dtoa_r+0x990>
 8004a6c:	9b06      	ldr	r3, [sp, #24]
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	dc51      	bgt.n	8004b16 <_dtoa_r+0x91e>
 8004a72:	e089      	b.n	8004b88 <_dtoa_r+0x990>
 8004a74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004a76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004a7a:	e74b      	b.n	8004914 <_dtoa_r+0x71c>
 8004a7c:	9b03      	ldr	r3, [sp, #12]
 8004a7e:	1e5e      	subs	r6, r3, #1
 8004a80:	9b07      	ldr	r3, [sp, #28]
 8004a82:	42b3      	cmp	r3, r6
 8004a84:	bfbf      	itttt	lt
 8004a86:	9b07      	ldrlt	r3, [sp, #28]
 8004a88:	9607      	strlt	r6, [sp, #28]
 8004a8a:	1af2      	sublt	r2, r6, r3
 8004a8c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004a8e:	bfb6      	itet	lt
 8004a90:	189b      	addlt	r3, r3, r2
 8004a92:	1b9e      	subge	r6, r3, r6
 8004a94:	930a      	strlt	r3, [sp, #40]	; 0x28
 8004a96:	9b03      	ldr	r3, [sp, #12]
 8004a98:	bfb8      	it	lt
 8004a9a:	2600      	movlt	r6, #0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	bfb7      	itett	lt
 8004aa0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8004aa4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8004aa8:	1a9d      	sublt	r5, r3, r2
 8004aaa:	2300      	movlt	r3, #0
 8004aac:	e734      	b.n	8004918 <_dtoa_r+0x720>
 8004aae:	9e07      	ldr	r6, [sp, #28]
 8004ab0:	9d04      	ldr	r5, [sp, #16]
 8004ab2:	9f08      	ldr	r7, [sp, #32]
 8004ab4:	e73b      	b.n	800492e <_dtoa_r+0x736>
 8004ab6:	9a07      	ldr	r2, [sp, #28]
 8004ab8:	e767      	b.n	800498a <_dtoa_r+0x792>
 8004aba:	9b06      	ldr	r3, [sp, #24]
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	dc18      	bgt.n	8004af2 <_dtoa_r+0x8fa>
 8004ac0:	f1ba 0f00 	cmp.w	sl, #0
 8004ac4:	d115      	bne.n	8004af2 <_dtoa_r+0x8fa>
 8004ac6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004aca:	b993      	cbnz	r3, 8004af2 <_dtoa_r+0x8fa>
 8004acc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004ad0:	0d1b      	lsrs	r3, r3, #20
 8004ad2:	051b      	lsls	r3, r3, #20
 8004ad4:	b183      	cbz	r3, 8004af8 <_dtoa_r+0x900>
 8004ad6:	9b04      	ldr	r3, [sp, #16]
 8004ad8:	3301      	adds	r3, #1
 8004ada:	9304      	str	r3, [sp, #16]
 8004adc:	9b05      	ldr	r3, [sp, #20]
 8004ade:	3301      	adds	r3, #1
 8004ae0:	9305      	str	r3, [sp, #20]
 8004ae2:	f04f 0801 	mov.w	r8, #1
 8004ae6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	f47f af6a 	bne.w	80049c2 <_dtoa_r+0x7ca>
 8004aee:	2001      	movs	r0, #1
 8004af0:	e76f      	b.n	80049d2 <_dtoa_r+0x7da>
 8004af2:	f04f 0800 	mov.w	r8, #0
 8004af6:	e7f6      	b.n	8004ae6 <_dtoa_r+0x8ee>
 8004af8:	4698      	mov	r8, r3
 8004afa:	e7f4      	b.n	8004ae6 <_dtoa_r+0x8ee>
 8004afc:	f43f af7d 	beq.w	80049fa <_dtoa_r+0x802>
 8004b00:	4618      	mov	r0, r3
 8004b02:	301c      	adds	r0, #28
 8004b04:	e772      	b.n	80049ec <_dtoa_r+0x7f4>
 8004b06:	9b03      	ldr	r3, [sp, #12]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	dc37      	bgt.n	8004b7c <_dtoa_r+0x984>
 8004b0c:	9b06      	ldr	r3, [sp, #24]
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	dd34      	ble.n	8004b7c <_dtoa_r+0x984>
 8004b12:	9b03      	ldr	r3, [sp, #12]
 8004b14:	9302      	str	r3, [sp, #8]
 8004b16:	9b02      	ldr	r3, [sp, #8]
 8004b18:	b96b      	cbnz	r3, 8004b36 <_dtoa_r+0x93e>
 8004b1a:	4631      	mov	r1, r6
 8004b1c:	2205      	movs	r2, #5
 8004b1e:	4620      	mov	r0, r4
 8004b20:	f000 f9d8 	bl	8004ed4 <__multadd>
 8004b24:	4601      	mov	r1, r0
 8004b26:	4606      	mov	r6, r0
 8004b28:	ee18 0a10 	vmov	r0, s16
 8004b2c:	f000 fbf2 	bl	8005314 <__mcmp>
 8004b30:	2800      	cmp	r0, #0
 8004b32:	f73f adbb 	bgt.w	80046ac <_dtoa_r+0x4b4>
 8004b36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b38:	9d01      	ldr	r5, [sp, #4]
 8004b3a:	43db      	mvns	r3, r3
 8004b3c:	9300      	str	r3, [sp, #0]
 8004b3e:	f04f 0800 	mov.w	r8, #0
 8004b42:	4631      	mov	r1, r6
 8004b44:	4620      	mov	r0, r4
 8004b46:	f000 f9a3 	bl	8004e90 <_Bfree>
 8004b4a:	2f00      	cmp	r7, #0
 8004b4c:	f43f aea4 	beq.w	8004898 <_dtoa_r+0x6a0>
 8004b50:	f1b8 0f00 	cmp.w	r8, #0
 8004b54:	d005      	beq.n	8004b62 <_dtoa_r+0x96a>
 8004b56:	45b8      	cmp	r8, r7
 8004b58:	d003      	beq.n	8004b62 <_dtoa_r+0x96a>
 8004b5a:	4641      	mov	r1, r8
 8004b5c:	4620      	mov	r0, r4
 8004b5e:	f000 f997 	bl	8004e90 <_Bfree>
 8004b62:	4639      	mov	r1, r7
 8004b64:	4620      	mov	r0, r4
 8004b66:	f000 f993 	bl	8004e90 <_Bfree>
 8004b6a:	e695      	b.n	8004898 <_dtoa_r+0x6a0>
 8004b6c:	2600      	movs	r6, #0
 8004b6e:	4637      	mov	r7, r6
 8004b70:	e7e1      	b.n	8004b36 <_dtoa_r+0x93e>
 8004b72:	9700      	str	r7, [sp, #0]
 8004b74:	4637      	mov	r7, r6
 8004b76:	e599      	b.n	80046ac <_dtoa_r+0x4b4>
 8004b78:	40240000 	.word	0x40240000
 8004b7c:	9b08      	ldr	r3, [sp, #32]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	f000 80ca 	beq.w	8004d18 <_dtoa_r+0xb20>
 8004b84:	9b03      	ldr	r3, [sp, #12]
 8004b86:	9302      	str	r3, [sp, #8]
 8004b88:	2d00      	cmp	r5, #0
 8004b8a:	dd05      	ble.n	8004b98 <_dtoa_r+0x9a0>
 8004b8c:	4639      	mov	r1, r7
 8004b8e:	462a      	mov	r2, r5
 8004b90:	4620      	mov	r0, r4
 8004b92:	f000 fb4f 	bl	8005234 <__lshift>
 8004b96:	4607      	mov	r7, r0
 8004b98:	f1b8 0f00 	cmp.w	r8, #0
 8004b9c:	d05b      	beq.n	8004c56 <_dtoa_r+0xa5e>
 8004b9e:	6879      	ldr	r1, [r7, #4]
 8004ba0:	4620      	mov	r0, r4
 8004ba2:	f000 f935 	bl	8004e10 <_Balloc>
 8004ba6:	4605      	mov	r5, r0
 8004ba8:	b928      	cbnz	r0, 8004bb6 <_dtoa_r+0x9be>
 8004baa:	4b87      	ldr	r3, [pc, #540]	; (8004dc8 <_dtoa_r+0xbd0>)
 8004bac:	4602      	mov	r2, r0
 8004bae:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004bb2:	f7ff bb3b 	b.w	800422c <_dtoa_r+0x34>
 8004bb6:	693a      	ldr	r2, [r7, #16]
 8004bb8:	3202      	adds	r2, #2
 8004bba:	0092      	lsls	r2, r2, #2
 8004bbc:	f107 010c 	add.w	r1, r7, #12
 8004bc0:	300c      	adds	r0, #12
 8004bc2:	f000 f90b 	bl	8004ddc <memcpy>
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	4629      	mov	r1, r5
 8004bca:	4620      	mov	r0, r4
 8004bcc:	f000 fb32 	bl	8005234 <__lshift>
 8004bd0:	9b01      	ldr	r3, [sp, #4]
 8004bd2:	f103 0901 	add.w	r9, r3, #1
 8004bd6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8004bda:	4413      	add	r3, r2
 8004bdc:	9305      	str	r3, [sp, #20]
 8004bde:	f00a 0301 	and.w	r3, sl, #1
 8004be2:	46b8      	mov	r8, r7
 8004be4:	9304      	str	r3, [sp, #16]
 8004be6:	4607      	mov	r7, r0
 8004be8:	4631      	mov	r1, r6
 8004bea:	ee18 0a10 	vmov	r0, s16
 8004bee:	f7ff fa75 	bl	80040dc <quorem>
 8004bf2:	4641      	mov	r1, r8
 8004bf4:	9002      	str	r0, [sp, #8]
 8004bf6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8004bfa:	ee18 0a10 	vmov	r0, s16
 8004bfe:	f000 fb89 	bl	8005314 <__mcmp>
 8004c02:	463a      	mov	r2, r7
 8004c04:	9003      	str	r0, [sp, #12]
 8004c06:	4631      	mov	r1, r6
 8004c08:	4620      	mov	r0, r4
 8004c0a:	f000 fb9f 	bl	800534c <__mdiff>
 8004c0e:	68c2      	ldr	r2, [r0, #12]
 8004c10:	f109 3bff 	add.w	fp, r9, #4294967295
 8004c14:	4605      	mov	r5, r0
 8004c16:	bb02      	cbnz	r2, 8004c5a <_dtoa_r+0xa62>
 8004c18:	4601      	mov	r1, r0
 8004c1a:	ee18 0a10 	vmov	r0, s16
 8004c1e:	f000 fb79 	bl	8005314 <__mcmp>
 8004c22:	4602      	mov	r2, r0
 8004c24:	4629      	mov	r1, r5
 8004c26:	4620      	mov	r0, r4
 8004c28:	9207      	str	r2, [sp, #28]
 8004c2a:	f000 f931 	bl	8004e90 <_Bfree>
 8004c2e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8004c32:	ea43 0102 	orr.w	r1, r3, r2
 8004c36:	9b04      	ldr	r3, [sp, #16]
 8004c38:	430b      	orrs	r3, r1
 8004c3a:	464d      	mov	r5, r9
 8004c3c:	d10f      	bne.n	8004c5e <_dtoa_r+0xa66>
 8004c3e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004c42:	d02a      	beq.n	8004c9a <_dtoa_r+0xaa2>
 8004c44:	9b03      	ldr	r3, [sp, #12]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	dd02      	ble.n	8004c50 <_dtoa_r+0xa58>
 8004c4a:	9b02      	ldr	r3, [sp, #8]
 8004c4c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8004c50:	f88b a000 	strb.w	sl, [fp]
 8004c54:	e775      	b.n	8004b42 <_dtoa_r+0x94a>
 8004c56:	4638      	mov	r0, r7
 8004c58:	e7ba      	b.n	8004bd0 <_dtoa_r+0x9d8>
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	e7e2      	b.n	8004c24 <_dtoa_r+0xa2c>
 8004c5e:	9b03      	ldr	r3, [sp, #12]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	db04      	blt.n	8004c6e <_dtoa_r+0xa76>
 8004c64:	9906      	ldr	r1, [sp, #24]
 8004c66:	430b      	orrs	r3, r1
 8004c68:	9904      	ldr	r1, [sp, #16]
 8004c6a:	430b      	orrs	r3, r1
 8004c6c:	d122      	bne.n	8004cb4 <_dtoa_r+0xabc>
 8004c6e:	2a00      	cmp	r2, #0
 8004c70:	ddee      	ble.n	8004c50 <_dtoa_r+0xa58>
 8004c72:	ee18 1a10 	vmov	r1, s16
 8004c76:	2201      	movs	r2, #1
 8004c78:	4620      	mov	r0, r4
 8004c7a:	f000 fadb 	bl	8005234 <__lshift>
 8004c7e:	4631      	mov	r1, r6
 8004c80:	ee08 0a10 	vmov	s16, r0
 8004c84:	f000 fb46 	bl	8005314 <__mcmp>
 8004c88:	2800      	cmp	r0, #0
 8004c8a:	dc03      	bgt.n	8004c94 <_dtoa_r+0xa9c>
 8004c8c:	d1e0      	bne.n	8004c50 <_dtoa_r+0xa58>
 8004c8e:	f01a 0f01 	tst.w	sl, #1
 8004c92:	d0dd      	beq.n	8004c50 <_dtoa_r+0xa58>
 8004c94:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004c98:	d1d7      	bne.n	8004c4a <_dtoa_r+0xa52>
 8004c9a:	2339      	movs	r3, #57	; 0x39
 8004c9c:	f88b 3000 	strb.w	r3, [fp]
 8004ca0:	462b      	mov	r3, r5
 8004ca2:	461d      	mov	r5, r3
 8004ca4:	3b01      	subs	r3, #1
 8004ca6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004caa:	2a39      	cmp	r2, #57	; 0x39
 8004cac:	d071      	beq.n	8004d92 <_dtoa_r+0xb9a>
 8004cae:	3201      	adds	r2, #1
 8004cb0:	701a      	strb	r2, [r3, #0]
 8004cb2:	e746      	b.n	8004b42 <_dtoa_r+0x94a>
 8004cb4:	2a00      	cmp	r2, #0
 8004cb6:	dd07      	ble.n	8004cc8 <_dtoa_r+0xad0>
 8004cb8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004cbc:	d0ed      	beq.n	8004c9a <_dtoa_r+0xaa2>
 8004cbe:	f10a 0301 	add.w	r3, sl, #1
 8004cc2:	f88b 3000 	strb.w	r3, [fp]
 8004cc6:	e73c      	b.n	8004b42 <_dtoa_r+0x94a>
 8004cc8:	9b05      	ldr	r3, [sp, #20]
 8004cca:	f809 ac01 	strb.w	sl, [r9, #-1]
 8004cce:	4599      	cmp	r9, r3
 8004cd0:	d047      	beq.n	8004d62 <_dtoa_r+0xb6a>
 8004cd2:	ee18 1a10 	vmov	r1, s16
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	220a      	movs	r2, #10
 8004cda:	4620      	mov	r0, r4
 8004cdc:	f000 f8fa 	bl	8004ed4 <__multadd>
 8004ce0:	45b8      	cmp	r8, r7
 8004ce2:	ee08 0a10 	vmov	s16, r0
 8004ce6:	f04f 0300 	mov.w	r3, #0
 8004cea:	f04f 020a 	mov.w	r2, #10
 8004cee:	4641      	mov	r1, r8
 8004cf0:	4620      	mov	r0, r4
 8004cf2:	d106      	bne.n	8004d02 <_dtoa_r+0xb0a>
 8004cf4:	f000 f8ee 	bl	8004ed4 <__multadd>
 8004cf8:	4680      	mov	r8, r0
 8004cfa:	4607      	mov	r7, r0
 8004cfc:	f109 0901 	add.w	r9, r9, #1
 8004d00:	e772      	b.n	8004be8 <_dtoa_r+0x9f0>
 8004d02:	f000 f8e7 	bl	8004ed4 <__multadd>
 8004d06:	4639      	mov	r1, r7
 8004d08:	4680      	mov	r8, r0
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	220a      	movs	r2, #10
 8004d0e:	4620      	mov	r0, r4
 8004d10:	f000 f8e0 	bl	8004ed4 <__multadd>
 8004d14:	4607      	mov	r7, r0
 8004d16:	e7f1      	b.n	8004cfc <_dtoa_r+0xb04>
 8004d18:	9b03      	ldr	r3, [sp, #12]
 8004d1a:	9302      	str	r3, [sp, #8]
 8004d1c:	9d01      	ldr	r5, [sp, #4]
 8004d1e:	ee18 0a10 	vmov	r0, s16
 8004d22:	4631      	mov	r1, r6
 8004d24:	f7ff f9da 	bl	80040dc <quorem>
 8004d28:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8004d2c:	9b01      	ldr	r3, [sp, #4]
 8004d2e:	f805 ab01 	strb.w	sl, [r5], #1
 8004d32:	1aea      	subs	r2, r5, r3
 8004d34:	9b02      	ldr	r3, [sp, #8]
 8004d36:	4293      	cmp	r3, r2
 8004d38:	dd09      	ble.n	8004d4e <_dtoa_r+0xb56>
 8004d3a:	ee18 1a10 	vmov	r1, s16
 8004d3e:	2300      	movs	r3, #0
 8004d40:	220a      	movs	r2, #10
 8004d42:	4620      	mov	r0, r4
 8004d44:	f000 f8c6 	bl	8004ed4 <__multadd>
 8004d48:	ee08 0a10 	vmov	s16, r0
 8004d4c:	e7e7      	b.n	8004d1e <_dtoa_r+0xb26>
 8004d4e:	9b02      	ldr	r3, [sp, #8]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	bfc8      	it	gt
 8004d54:	461d      	movgt	r5, r3
 8004d56:	9b01      	ldr	r3, [sp, #4]
 8004d58:	bfd8      	it	le
 8004d5a:	2501      	movle	r5, #1
 8004d5c:	441d      	add	r5, r3
 8004d5e:	f04f 0800 	mov.w	r8, #0
 8004d62:	ee18 1a10 	vmov	r1, s16
 8004d66:	2201      	movs	r2, #1
 8004d68:	4620      	mov	r0, r4
 8004d6a:	f000 fa63 	bl	8005234 <__lshift>
 8004d6e:	4631      	mov	r1, r6
 8004d70:	ee08 0a10 	vmov	s16, r0
 8004d74:	f000 face 	bl	8005314 <__mcmp>
 8004d78:	2800      	cmp	r0, #0
 8004d7a:	dc91      	bgt.n	8004ca0 <_dtoa_r+0xaa8>
 8004d7c:	d102      	bne.n	8004d84 <_dtoa_r+0xb8c>
 8004d7e:	f01a 0f01 	tst.w	sl, #1
 8004d82:	d18d      	bne.n	8004ca0 <_dtoa_r+0xaa8>
 8004d84:	462b      	mov	r3, r5
 8004d86:	461d      	mov	r5, r3
 8004d88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004d8c:	2a30      	cmp	r2, #48	; 0x30
 8004d8e:	d0fa      	beq.n	8004d86 <_dtoa_r+0xb8e>
 8004d90:	e6d7      	b.n	8004b42 <_dtoa_r+0x94a>
 8004d92:	9a01      	ldr	r2, [sp, #4]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d184      	bne.n	8004ca2 <_dtoa_r+0xaaa>
 8004d98:	9b00      	ldr	r3, [sp, #0]
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	9300      	str	r3, [sp, #0]
 8004d9e:	2331      	movs	r3, #49	; 0x31
 8004da0:	7013      	strb	r3, [r2, #0]
 8004da2:	e6ce      	b.n	8004b42 <_dtoa_r+0x94a>
 8004da4:	4b09      	ldr	r3, [pc, #36]	; (8004dcc <_dtoa_r+0xbd4>)
 8004da6:	f7ff ba95 	b.w	80042d4 <_dtoa_r+0xdc>
 8004daa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	f47f aa6e 	bne.w	800428e <_dtoa_r+0x96>
 8004db2:	4b07      	ldr	r3, [pc, #28]	; (8004dd0 <_dtoa_r+0xbd8>)
 8004db4:	f7ff ba8e 	b.w	80042d4 <_dtoa_r+0xdc>
 8004db8:	9b02      	ldr	r3, [sp, #8]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	dcae      	bgt.n	8004d1c <_dtoa_r+0xb24>
 8004dbe:	9b06      	ldr	r3, [sp, #24]
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	f73f aea8 	bgt.w	8004b16 <_dtoa_r+0x91e>
 8004dc6:	e7a9      	b.n	8004d1c <_dtoa_r+0xb24>
 8004dc8:	08009fbf 	.word	0x08009fbf
 8004dcc:	08009f1c 	.word	0x08009f1c
 8004dd0:	08009f40 	.word	0x08009f40

08004dd4 <_localeconv_r>:
 8004dd4:	4800      	ldr	r0, [pc, #0]	; (8004dd8 <_localeconv_r+0x4>)
 8004dd6:	4770      	bx	lr
 8004dd8:	20000168 	.word	0x20000168

08004ddc <memcpy>:
 8004ddc:	440a      	add	r2, r1
 8004dde:	4291      	cmp	r1, r2
 8004de0:	f100 33ff 	add.w	r3, r0, #4294967295
 8004de4:	d100      	bne.n	8004de8 <memcpy+0xc>
 8004de6:	4770      	bx	lr
 8004de8:	b510      	push	{r4, lr}
 8004dea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004dee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004df2:	4291      	cmp	r1, r2
 8004df4:	d1f9      	bne.n	8004dea <memcpy+0xe>
 8004df6:	bd10      	pop	{r4, pc}

08004df8 <__malloc_lock>:
 8004df8:	4801      	ldr	r0, [pc, #4]	; (8004e00 <__malloc_lock+0x8>)
 8004dfa:	f000 bbd4 	b.w	80055a6 <__retarget_lock_acquire_recursive>
 8004dfe:	bf00      	nop
 8004e00:	2000023c 	.word	0x2000023c

08004e04 <__malloc_unlock>:
 8004e04:	4801      	ldr	r0, [pc, #4]	; (8004e0c <__malloc_unlock+0x8>)
 8004e06:	f000 bbcf 	b.w	80055a8 <__retarget_lock_release_recursive>
 8004e0a:	bf00      	nop
 8004e0c:	2000023c 	.word	0x2000023c

08004e10 <_Balloc>:
 8004e10:	b570      	push	{r4, r5, r6, lr}
 8004e12:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004e14:	4604      	mov	r4, r0
 8004e16:	460d      	mov	r5, r1
 8004e18:	b976      	cbnz	r6, 8004e38 <_Balloc+0x28>
 8004e1a:	2010      	movs	r0, #16
 8004e1c:	f7fe fbf4 	bl	8003608 <malloc>
 8004e20:	4602      	mov	r2, r0
 8004e22:	6260      	str	r0, [r4, #36]	; 0x24
 8004e24:	b920      	cbnz	r0, 8004e30 <_Balloc+0x20>
 8004e26:	4b18      	ldr	r3, [pc, #96]	; (8004e88 <_Balloc+0x78>)
 8004e28:	4818      	ldr	r0, [pc, #96]	; (8004e8c <_Balloc+0x7c>)
 8004e2a:	2166      	movs	r1, #102	; 0x66
 8004e2c:	f000 fb8a 	bl	8005544 <__assert_func>
 8004e30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004e34:	6006      	str	r6, [r0, #0]
 8004e36:	60c6      	str	r6, [r0, #12]
 8004e38:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004e3a:	68f3      	ldr	r3, [r6, #12]
 8004e3c:	b183      	cbz	r3, 8004e60 <_Balloc+0x50>
 8004e3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004e46:	b9b8      	cbnz	r0, 8004e78 <_Balloc+0x68>
 8004e48:	2101      	movs	r1, #1
 8004e4a:	fa01 f605 	lsl.w	r6, r1, r5
 8004e4e:	1d72      	adds	r2, r6, #5
 8004e50:	0092      	lsls	r2, r2, #2
 8004e52:	4620      	mov	r0, r4
 8004e54:	f000 fb60 	bl	8005518 <_calloc_r>
 8004e58:	b160      	cbz	r0, 8004e74 <_Balloc+0x64>
 8004e5a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004e5e:	e00e      	b.n	8004e7e <_Balloc+0x6e>
 8004e60:	2221      	movs	r2, #33	; 0x21
 8004e62:	2104      	movs	r1, #4
 8004e64:	4620      	mov	r0, r4
 8004e66:	f000 fb57 	bl	8005518 <_calloc_r>
 8004e6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e6c:	60f0      	str	r0, [r6, #12]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d1e4      	bne.n	8004e3e <_Balloc+0x2e>
 8004e74:	2000      	movs	r0, #0
 8004e76:	bd70      	pop	{r4, r5, r6, pc}
 8004e78:	6802      	ldr	r2, [r0, #0]
 8004e7a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004e7e:	2300      	movs	r3, #0
 8004e80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004e84:	e7f7      	b.n	8004e76 <_Balloc+0x66>
 8004e86:	bf00      	nop
 8004e88:	08009f4d 	.word	0x08009f4d
 8004e8c:	08009fd0 	.word	0x08009fd0

08004e90 <_Bfree>:
 8004e90:	b570      	push	{r4, r5, r6, lr}
 8004e92:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004e94:	4605      	mov	r5, r0
 8004e96:	460c      	mov	r4, r1
 8004e98:	b976      	cbnz	r6, 8004eb8 <_Bfree+0x28>
 8004e9a:	2010      	movs	r0, #16
 8004e9c:	f7fe fbb4 	bl	8003608 <malloc>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	6268      	str	r0, [r5, #36]	; 0x24
 8004ea4:	b920      	cbnz	r0, 8004eb0 <_Bfree+0x20>
 8004ea6:	4b09      	ldr	r3, [pc, #36]	; (8004ecc <_Bfree+0x3c>)
 8004ea8:	4809      	ldr	r0, [pc, #36]	; (8004ed0 <_Bfree+0x40>)
 8004eaa:	218a      	movs	r1, #138	; 0x8a
 8004eac:	f000 fb4a 	bl	8005544 <__assert_func>
 8004eb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004eb4:	6006      	str	r6, [r0, #0]
 8004eb6:	60c6      	str	r6, [r0, #12]
 8004eb8:	b13c      	cbz	r4, 8004eca <_Bfree+0x3a>
 8004eba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004ebc:	6862      	ldr	r2, [r4, #4]
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004ec4:	6021      	str	r1, [r4, #0]
 8004ec6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004eca:	bd70      	pop	{r4, r5, r6, pc}
 8004ecc:	08009f4d 	.word	0x08009f4d
 8004ed0:	08009fd0 	.word	0x08009fd0

08004ed4 <__multadd>:
 8004ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ed8:	690d      	ldr	r5, [r1, #16]
 8004eda:	4607      	mov	r7, r0
 8004edc:	460c      	mov	r4, r1
 8004ede:	461e      	mov	r6, r3
 8004ee0:	f101 0c14 	add.w	ip, r1, #20
 8004ee4:	2000      	movs	r0, #0
 8004ee6:	f8dc 3000 	ldr.w	r3, [ip]
 8004eea:	b299      	uxth	r1, r3
 8004eec:	fb02 6101 	mla	r1, r2, r1, r6
 8004ef0:	0c1e      	lsrs	r6, r3, #16
 8004ef2:	0c0b      	lsrs	r3, r1, #16
 8004ef4:	fb02 3306 	mla	r3, r2, r6, r3
 8004ef8:	b289      	uxth	r1, r1
 8004efa:	3001      	adds	r0, #1
 8004efc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004f00:	4285      	cmp	r5, r0
 8004f02:	f84c 1b04 	str.w	r1, [ip], #4
 8004f06:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004f0a:	dcec      	bgt.n	8004ee6 <__multadd+0x12>
 8004f0c:	b30e      	cbz	r6, 8004f52 <__multadd+0x7e>
 8004f0e:	68a3      	ldr	r3, [r4, #8]
 8004f10:	42ab      	cmp	r3, r5
 8004f12:	dc19      	bgt.n	8004f48 <__multadd+0x74>
 8004f14:	6861      	ldr	r1, [r4, #4]
 8004f16:	4638      	mov	r0, r7
 8004f18:	3101      	adds	r1, #1
 8004f1a:	f7ff ff79 	bl	8004e10 <_Balloc>
 8004f1e:	4680      	mov	r8, r0
 8004f20:	b928      	cbnz	r0, 8004f2e <__multadd+0x5a>
 8004f22:	4602      	mov	r2, r0
 8004f24:	4b0c      	ldr	r3, [pc, #48]	; (8004f58 <__multadd+0x84>)
 8004f26:	480d      	ldr	r0, [pc, #52]	; (8004f5c <__multadd+0x88>)
 8004f28:	21b5      	movs	r1, #181	; 0xb5
 8004f2a:	f000 fb0b 	bl	8005544 <__assert_func>
 8004f2e:	6922      	ldr	r2, [r4, #16]
 8004f30:	3202      	adds	r2, #2
 8004f32:	f104 010c 	add.w	r1, r4, #12
 8004f36:	0092      	lsls	r2, r2, #2
 8004f38:	300c      	adds	r0, #12
 8004f3a:	f7ff ff4f 	bl	8004ddc <memcpy>
 8004f3e:	4621      	mov	r1, r4
 8004f40:	4638      	mov	r0, r7
 8004f42:	f7ff ffa5 	bl	8004e90 <_Bfree>
 8004f46:	4644      	mov	r4, r8
 8004f48:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004f4c:	3501      	adds	r5, #1
 8004f4e:	615e      	str	r6, [r3, #20]
 8004f50:	6125      	str	r5, [r4, #16]
 8004f52:	4620      	mov	r0, r4
 8004f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f58:	08009fbf 	.word	0x08009fbf
 8004f5c:	08009fd0 	.word	0x08009fd0

08004f60 <__hi0bits>:
 8004f60:	0c03      	lsrs	r3, r0, #16
 8004f62:	041b      	lsls	r3, r3, #16
 8004f64:	b9d3      	cbnz	r3, 8004f9c <__hi0bits+0x3c>
 8004f66:	0400      	lsls	r0, r0, #16
 8004f68:	2310      	movs	r3, #16
 8004f6a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8004f6e:	bf04      	itt	eq
 8004f70:	0200      	lsleq	r0, r0, #8
 8004f72:	3308      	addeq	r3, #8
 8004f74:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8004f78:	bf04      	itt	eq
 8004f7a:	0100      	lsleq	r0, r0, #4
 8004f7c:	3304      	addeq	r3, #4
 8004f7e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8004f82:	bf04      	itt	eq
 8004f84:	0080      	lsleq	r0, r0, #2
 8004f86:	3302      	addeq	r3, #2
 8004f88:	2800      	cmp	r0, #0
 8004f8a:	db05      	blt.n	8004f98 <__hi0bits+0x38>
 8004f8c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8004f90:	f103 0301 	add.w	r3, r3, #1
 8004f94:	bf08      	it	eq
 8004f96:	2320      	moveq	r3, #32
 8004f98:	4618      	mov	r0, r3
 8004f9a:	4770      	bx	lr
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	e7e4      	b.n	8004f6a <__hi0bits+0xa>

08004fa0 <__lo0bits>:
 8004fa0:	6803      	ldr	r3, [r0, #0]
 8004fa2:	f013 0207 	ands.w	r2, r3, #7
 8004fa6:	4601      	mov	r1, r0
 8004fa8:	d00b      	beq.n	8004fc2 <__lo0bits+0x22>
 8004faa:	07da      	lsls	r2, r3, #31
 8004fac:	d423      	bmi.n	8004ff6 <__lo0bits+0x56>
 8004fae:	0798      	lsls	r0, r3, #30
 8004fb0:	bf49      	itett	mi
 8004fb2:	085b      	lsrmi	r3, r3, #1
 8004fb4:	089b      	lsrpl	r3, r3, #2
 8004fb6:	2001      	movmi	r0, #1
 8004fb8:	600b      	strmi	r3, [r1, #0]
 8004fba:	bf5c      	itt	pl
 8004fbc:	600b      	strpl	r3, [r1, #0]
 8004fbe:	2002      	movpl	r0, #2
 8004fc0:	4770      	bx	lr
 8004fc2:	b298      	uxth	r0, r3
 8004fc4:	b9a8      	cbnz	r0, 8004ff2 <__lo0bits+0x52>
 8004fc6:	0c1b      	lsrs	r3, r3, #16
 8004fc8:	2010      	movs	r0, #16
 8004fca:	b2da      	uxtb	r2, r3
 8004fcc:	b90a      	cbnz	r2, 8004fd2 <__lo0bits+0x32>
 8004fce:	3008      	adds	r0, #8
 8004fd0:	0a1b      	lsrs	r3, r3, #8
 8004fd2:	071a      	lsls	r2, r3, #28
 8004fd4:	bf04      	itt	eq
 8004fd6:	091b      	lsreq	r3, r3, #4
 8004fd8:	3004      	addeq	r0, #4
 8004fda:	079a      	lsls	r2, r3, #30
 8004fdc:	bf04      	itt	eq
 8004fde:	089b      	lsreq	r3, r3, #2
 8004fe0:	3002      	addeq	r0, #2
 8004fe2:	07da      	lsls	r2, r3, #31
 8004fe4:	d403      	bmi.n	8004fee <__lo0bits+0x4e>
 8004fe6:	085b      	lsrs	r3, r3, #1
 8004fe8:	f100 0001 	add.w	r0, r0, #1
 8004fec:	d005      	beq.n	8004ffa <__lo0bits+0x5a>
 8004fee:	600b      	str	r3, [r1, #0]
 8004ff0:	4770      	bx	lr
 8004ff2:	4610      	mov	r0, r2
 8004ff4:	e7e9      	b.n	8004fca <__lo0bits+0x2a>
 8004ff6:	2000      	movs	r0, #0
 8004ff8:	4770      	bx	lr
 8004ffa:	2020      	movs	r0, #32
 8004ffc:	4770      	bx	lr
	...

08005000 <__i2b>:
 8005000:	b510      	push	{r4, lr}
 8005002:	460c      	mov	r4, r1
 8005004:	2101      	movs	r1, #1
 8005006:	f7ff ff03 	bl	8004e10 <_Balloc>
 800500a:	4602      	mov	r2, r0
 800500c:	b928      	cbnz	r0, 800501a <__i2b+0x1a>
 800500e:	4b05      	ldr	r3, [pc, #20]	; (8005024 <__i2b+0x24>)
 8005010:	4805      	ldr	r0, [pc, #20]	; (8005028 <__i2b+0x28>)
 8005012:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005016:	f000 fa95 	bl	8005544 <__assert_func>
 800501a:	2301      	movs	r3, #1
 800501c:	6144      	str	r4, [r0, #20]
 800501e:	6103      	str	r3, [r0, #16]
 8005020:	bd10      	pop	{r4, pc}
 8005022:	bf00      	nop
 8005024:	08009fbf 	.word	0x08009fbf
 8005028:	08009fd0 	.word	0x08009fd0

0800502c <__multiply>:
 800502c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005030:	4691      	mov	r9, r2
 8005032:	690a      	ldr	r2, [r1, #16]
 8005034:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005038:	429a      	cmp	r2, r3
 800503a:	bfb8      	it	lt
 800503c:	460b      	movlt	r3, r1
 800503e:	460c      	mov	r4, r1
 8005040:	bfbc      	itt	lt
 8005042:	464c      	movlt	r4, r9
 8005044:	4699      	movlt	r9, r3
 8005046:	6927      	ldr	r7, [r4, #16]
 8005048:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800504c:	68a3      	ldr	r3, [r4, #8]
 800504e:	6861      	ldr	r1, [r4, #4]
 8005050:	eb07 060a 	add.w	r6, r7, sl
 8005054:	42b3      	cmp	r3, r6
 8005056:	b085      	sub	sp, #20
 8005058:	bfb8      	it	lt
 800505a:	3101      	addlt	r1, #1
 800505c:	f7ff fed8 	bl	8004e10 <_Balloc>
 8005060:	b930      	cbnz	r0, 8005070 <__multiply+0x44>
 8005062:	4602      	mov	r2, r0
 8005064:	4b44      	ldr	r3, [pc, #272]	; (8005178 <__multiply+0x14c>)
 8005066:	4845      	ldr	r0, [pc, #276]	; (800517c <__multiply+0x150>)
 8005068:	f240 115d 	movw	r1, #349	; 0x15d
 800506c:	f000 fa6a 	bl	8005544 <__assert_func>
 8005070:	f100 0514 	add.w	r5, r0, #20
 8005074:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005078:	462b      	mov	r3, r5
 800507a:	2200      	movs	r2, #0
 800507c:	4543      	cmp	r3, r8
 800507e:	d321      	bcc.n	80050c4 <__multiply+0x98>
 8005080:	f104 0314 	add.w	r3, r4, #20
 8005084:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005088:	f109 0314 	add.w	r3, r9, #20
 800508c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005090:	9202      	str	r2, [sp, #8]
 8005092:	1b3a      	subs	r2, r7, r4
 8005094:	3a15      	subs	r2, #21
 8005096:	f022 0203 	bic.w	r2, r2, #3
 800509a:	3204      	adds	r2, #4
 800509c:	f104 0115 	add.w	r1, r4, #21
 80050a0:	428f      	cmp	r7, r1
 80050a2:	bf38      	it	cc
 80050a4:	2204      	movcc	r2, #4
 80050a6:	9201      	str	r2, [sp, #4]
 80050a8:	9a02      	ldr	r2, [sp, #8]
 80050aa:	9303      	str	r3, [sp, #12]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d80c      	bhi.n	80050ca <__multiply+0x9e>
 80050b0:	2e00      	cmp	r6, #0
 80050b2:	dd03      	ble.n	80050bc <__multiply+0x90>
 80050b4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d05a      	beq.n	8005172 <__multiply+0x146>
 80050bc:	6106      	str	r6, [r0, #16]
 80050be:	b005      	add	sp, #20
 80050c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050c4:	f843 2b04 	str.w	r2, [r3], #4
 80050c8:	e7d8      	b.n	800507c <__multiply+0x50>
 80050ca:	f8b3 a000 	ldrh.w	sl, [r3]
 80050ce:	f1ba 0f00 	cmp.w	sl, #0
 80050d2:	d024      	beq.n	800511e <__multiply+0xf2>
 80050d4:	f104 0e14 	add.w	lr, r4, #20
 80050d8:	46a9      	mov	r9, r5
 80050da:	f04f 0c00 	mov.w	ip, #0
 80050de:	f85e 2b04 	ldr.w	r2, [lr], #4
 80050e2:	f8d9 1000 	ldr.w	r1, [r9]
 80050e6:	fa1f fb82 	uxth.w	fp, r2
 80050ea:	b289      	uxth	r1, r1
 80050ec:	fb0a 110b 	mla	r1, sl, fp, r1
 80050f0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80050f4:	f8d9 2000 	ldr.w	r2, [r9]
 80050f8:	4461      	add	r1, ip
 80050fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80050fe:	fb0a c20b 	mla	r2, sl, fp, ip
 8005102:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005106:	b289      	uxth	r1, r1
 8005108:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800510c:	4577      	cmp	r7, lr
 800510e:	f849 1b04 	str.w	r1, [r9], #4
 8005112:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005116:	d8e2      	bhi.n	80050de <__multiply+0xb2>
 8005118:	9a01      	ldr	r2, [sp, #4]
 800511a:	f845 c002 	str.w	ip, [r5, r2]
 800511e:	9a03      	ldr	r2, [sp, #12]
 8005120:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005124:	3304      	adds	r3, #4
 8005126:	f1b9 0f00 	cmp.w	r9, #0
 800512a:	d020      	beq.n	800516e <__multiply+0x142>
 800512c:	6829      	ldr	r1, [r5, #0]
 800512e:	f104 0c14 	add.w	ip, r4, #20
 8005132:	46ae      	mov	lr, r5
 8005134:	f04f 0a00 	mov.w	sl, #0
 8005138:	f8bc b000 	ldrh.w	fp, [ip]
 800513c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005140:	fb09 220b 	mla	r2, r9, fp, r2
 8005144:	4492      	add	sl, r2
 8005146:	b289      	uxth	r1, r1
 8005148:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800514c:	f84e 1b04 	str.w	r1, [lr], #4
 8005150:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005154:	f8be 1000 	ldrh.w	r1, [lr]
 8005158:	0c12      	lsrs	r2, r2, #16
 800515a:	fb09 1102 	mla	r1, r9, r2, r1
 800515e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005162:	4567      	cmp	r7, ip
 8005164:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005168:	d8e6      	bhi.n	8005138 <__multiply+0x10c>
 800516a:	9a01      	ldr	r2, [sp, #4]
 800516c:	50a9      	str	r1, [r5, r2]
 800516e:	3504      	adds	r5, #4
 8005170:	e79a      	b.n	80050a8 <__multiply+0x7c>
 8005172:	3e01      	subs	r6, #1
 8005174:	e79c      	b.n	80050b0 <__multiply+0x84>
 8005176:	bf00      	nop
 8005178:	08009fbf 	.word	0x08009fbf
 800517c:	08009fd0 	.word	0x08009fd0

08005180 <__pow5mult>:
 8005180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005184:	4615      	mov	r5, r2
 8005186:	f012 0203 	ands.w	r2, r2, #3
 800518a:	4606      	mov	r6, r0
 800518c:	460f      	mov	r7, r1
 800518e:	d007      	beq.n	80051a0 <__pow5mult+0x20>
 8005190:	4c25      	ldr	r4, [pc, #148]	; (8005228 <__pow5mult+0xa8>)
 8005192:	3a01      	subs	r2, #1
 8005194:	2300      	movs	r3, #0
 8005196:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800519a:	f7ff fe9b 	bl	8004ed4 <__multadd>
 800519e:	4607      	mov	r7, r0
 80051a0:	10ad      	asrs	r5, r5, #2
 80051a2:	d03d      	beq.n	8005220 <__pow5mult+0xa0>
 80051a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80051a6:	b97c      	cbnz	r4, 80051c8 <__pow5mult+0x48>
 80051a8:	2010      	movs	r0, #16
 80051aa:	f7fe fa2d 	bl	8003608 <malloc>
 80051ae:	4602      	mov	r2, r0
 80051b0:	6270      	str	r0, [r6, #36]	; 0x24
 80051b2:	b928      	cbnz	r0, 80051c0 <__pow5mult+0x40>
 80051b4:	4b1d      	ldr	r3, [pc, #116]	; (800522c <__pow5mult+0xac>)
 80051b6:	481e      	ldr	r0, [pc, #120]	; (8005230 <__pow5mult+0xb0>)
 80051b8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80051bc:	f000 f9c2 	bl	8005544 <__assert_func>
 80051c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80051c4:	6004      	str	r4, [r0, #0]
 80051c6:	60c4      	str	r4, [r0, #12]
 80051c8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80051cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80051d0:	b94c      	cbnz	r4, 80051e6 <__pow5mult+0x66>
 80051d2:	f240 2171 	movw	r1, #625	; 0x271
 80051d6:	4630      	mov	r0, r6
 80051d8:	f7ff ff12 	bl	8005000 <__i2b>
 80051dc:	2300      	movs	r3, #0
 80051de:	f8c8 0008 	str.w	r0, [r8, #8]
 80051e2:	4604      	mov	r4, r0
 80051e4:	6003      	str	r3, [r0, #0]
 80051e6:	f04f 0900 	mov.w	r9, #0
 80051ea:	07eb      	lsls	r3, r5, #31
 80051ec:	d50a      	bpl.n	8005204 <__pow5mult+0x84>
 80051ee:	4639      	mov	r1, r7
 80051f0:	4622      	mov	r2, r4
 80051f2:	4630      	mov	r0, r6
 80051f4:	f7ff ff1a 	bl	800502c <__multiply>
 80051f8:	4639      	mov	r1, r7
 80051fa:	4680      	mov	r8, r0
 80051fc:	4630      	mov	r0, r6
 80051fe:	f7ff fe47 	bl	8004e90 <_Bfree>
 8005202:	4647      	mov	r7, r8
 8005204:	106d      	asrs	r5, r5, #1
 8005206:	d00b      	beq.n	8005220 <__pow5mult+0xa0>
 8005208:	6820      	ldr	r0, [r4, #0]
 800520a:	b938      	cbnz	r0, 800521c <__pow5mult+0x9c>
 800520c:	4622      	mov	r2, r4
 800520e:	4621      	mov	r1, r4
 8005210:	4630      	mov	r0, r6
 8005212:	f7ff ff0b 	bl	800502c <__multiply>
 8005216:	6020      	str	r0, [r4, #0]
 8005218:	f8c0 9000 	str.w	r9, [r0]
 800521c:	4604      	mov	r4, r0
 800521e:	e7e4      	b.n	80051ea <__pow5mult+0x6a>
 8005220:	4638      	mov	r0, r7
 8005222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005226:	bf00      	nop
 8005228:	0800a120 	.word	0x0800a120
 800522c:	08009f4d 	.word	0x08009f4d
 8005230:	08009fd0 	.word	0x08009fd0

08005234 <__lshift>:
 8005234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005238:	460c      	mov	r4, r1
 800523a:	6849      	ldr	r1, [r1, #4]
 800523c:	6923      	ldr	r3, [r4, #16]
 800523e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005242:	68a3      	ldr	r3, [r4, #8]
 8005244:	4607      	mov	r7, r0
 8005246:	4691      	mov	r9, r2
 8005248:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800524c:	f108 0601 	add.w	r6, r8, #1
 8005250:	42b3      	cmp	r3, r6
 8005252:	db0b      	blt.n	800526c <__lshift+0x38>
 8005254:	4638      	mov	r0, r7
 8005256:	f7ff fddb 	bl	8004e10 <_Balloc>
 800525a:	4605      	mov	r5, r0
 800525c:	b948      	cbnz	r0, 8005272 <__lshift+0x3e>
 800525e:	4602      	mov	r2, r0
 8005260:	4b2a      	ldr	r3, [pc, #168]	; (800530c <__lshift+0xd8>)
 8005262:	482b      	ldr	r0, [pc, #172]	; (8005310 <__lshift+0xdc>)
 8005264:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005268:	f000 f96c 	bl	8005544 <__assert_func>
 800526c:	3101      	adds	r1, #1
 800526e:	005b      	lsls	r3, r3, #1
 8005270:	e7ee      	b.n	8005250 <__lshift+0x1c>
 8005272:	2300      	movs	r3, #0
 8005274:	f100 0114 	add.w	r1, r0, #20
 8005278:	f100 0210 	add.w	r2, r0, #16
 800527c:	4618      	mov	r0, r3
 800527e:	4553      	cmp	r3, sl
 8005280:	db37      	blt.n	80052f2 <__lshift+0xbe>
 8005282:	6920      	ldr	r0, [r4, #16]
 8005284:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005288:	f104 0314 	add.w	r3, r4, #20
 800528c:	f019 091f 	ands.w	r9, r9, #31
 8005290:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005294:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005298:	d02f      	beq.n	80052fa <__lshift+0xc6>
 800529a:	f1c9 0e20 	rsb	lr, r9, #32
 800529e:	468a      	mov	sl, r1
 80052a0:	f04f 0c00 	mov.w	ip, #0
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	fa02 f209 	lsl.w	r2, r2, r9
 80052aa:	ea42 020c 	orr.w	r2, r2, ip
 80052ae:	f84a 2b04 	str.w	r2, [sl], #4
 80052b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80052b6:	4298      	cmp	r0, r3
 80052b8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80052bc:	d8f2      	bhi.n	80052a4 <__lshift+0x70>
 80052be:	1b03      	subs	r3, r0, r4
 80052c0:	3b15      	subs	r3, #21
 80052c2:	f023 0303 	bic.w	r3, r3, #3
 80052c6:	3304      	adds	r3, #4
 80052c8:	f104 0215 	add.w	r2, r4, #21
 80052cc:	4290      	cmp	r0, r2
 80052ce:	bf38      	it	cc
 80052d0:	2304      	movcc	r3, #4
 80052d2:	f841 c003 	str.w	ip, [r1, r3]
 80052d6:	f1bc 0f00 	cmp.w	ip, #0
 80052da:	d001      	beq.n	80052e0 <__lshift+0xac>
 80052dc:	f108 0602 	add.w	r6, r8, #2
 80052e0:	3e01      	subs	r6, #1
 80052e2:	4638      	mov	r0, r7
 80052e4:	612e      	str	r6, [r5, #16]
 80052e6:	4621      	mov	r1, r4
 80052e8:	f7ff fdd2 	bl	8004e90 <_Bfree>
 80052ec:	4628      	mov	r0, r5
 80052ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052f2:	f842 0f04 	str.w	r0, [r2, #4]!
 80052f6:	3301      	adds	r3, #1
 80052f8:	e7c1      	b.n	800527e <__lshift+0x4a>
 80052fa:	3904      	subs	r1, #4
 80052fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005300:	f841 2f04 	str.w	r2, [r1, #4]!
 8005304:	4298      	cmp	r0, r3
 8005306:	d8f9      	bhi.n	80052fc <__lshift+0xc8>
 8005308:	e7ea      	b.n	80052e0 <__lshift+0xac>
 800530a:	bf00      	nop
 800530c:	08009fbf 	.word	0x08009fbf
 8005310:	08009fd0 	.word	0x08009fd0

08005314 <__mcmp>:
 8005314:	b530      	push	{r4, r5, lr}
 8005316:	6902      	ldr	r2, [r0, #16]
 8005318:	690c      	ldr	r4, [r1, #16]
 800531a:	1b12      	subs	r2, r2, r4
 800531c:	d10e      	bne.n	800533c <__mcmp+0x28>
 800531e:	f100 0314 	add.w	r3, r0, #20
 8005322:	3114      	adds	r1, #20
 8005324:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005328:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800532c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005330:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005334:	42a5      	cmp	r5, r4
 8005336:	d003      	beq.n	8005340 <__mcmp+0x2c>
 8005338:	d305      	bcc.n	8005346 <__mcmp+0x32>
 800533a:	2201      	movs	r2, #1
 800533c:	4610      	mov	r0, r2
 800533e:	bd30      	pop	{r4, r5, pc}
 8005340:	4283      	cmp	r3, r0
 8005342:	d3f3      	bcc.n	800532c <__mcmp+0x18>
 8005344:	e7fa      	b.n	800533c <__mcmp+0x28>
 8005346:	f04f 32ff 	mov.w	r2, #4294967295
 800534a:	e7f7      	b.n	800533c <__mcmp+0x28>

0800534c <__mdiff>:
 800534c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005350:	460c      	mov	r4, r1
 8005352:	4606      	mov	r6, r0
 8005354:	4611      	mov	r1, r2
 8005356:	4620      	mov	r0, r4
 8005358:	4690      	mov	r8, r2
 800535a:	f7ff ffdb 	bl	8005314 <__mcmp>
 800535e:	1e05      	subs	r5, r0, #0
 8005360:	d110      	bne.n	8005384 <__mdiff+0x38>
 8005362:	4629      	mov	r1, r5
 8005364:	4630      	mov	r0, r6
 8005366:	f7ff fd53 	bl	8004e10 <_Balloc>
 800536a:	b930      	cbnz	r0, 800537a <__mdiff+0x2e>
 800536c:	4b3a      	ldr	r3, [pc, #232]	; (8005458 <__mdiff+0x10c>)
 800536e:	4602      	mov	r2, r0
 8005370:	f240 2132 	movw	r1, #562	; 0x232
 8005374:	4839      	ldr	r0, [pc, #228]	; (800545c <__mdiff+0x110>)
 8005376:	f000 f8e5 	bl	8005544 <__assert_func>
 800537a:	2301      	movs	r3, #1
 800537c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005380:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005384:	bfa4      	itt	ge
 8005386:	4643      	movge	r3, r8
 8005388:	46a0      	movge	r8, r4
 800538a:	4630      	mov	r0, r6
 800538c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005390:	bfa6      	itte	ge
 8005392:	461c      	movge	r4, r3
 8005394:	2500      	movge	r5, #0
 8005396:	2501      	movlt	r5, #1
 8005398:	f7ff fd3a 	bl	8004e10 <_Balloc>
 800539c:	b920      	cbnz	r0, 80053a8 <__mdiff+0x5c>
 800539e:	4b2e      	ldr	r3, [pc, #184]	; (8005458 <__mdiff+0x10c>)
 80053a0:	4602      	mov	r2, r0
 80053a2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80053a6:	e7e5      	b.n	8005374 <__mdiff+0x28>
 80053a8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80053ac:	6926      	ldr	r6, [r4, #16]
 80053ae:	60c5      	str	r5, [r0, #12]
 80053b0:	f104 0914 	add.w	r9, r4, #20
 80053b4:	f108 0514 	add.w	r5, r8, #20
 80053b8:	f100 0e14 	add.w	lr, r0, #20
 80053bc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80053c0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80053c4:	f108 0210 	add.w	r2, r8, #16
 80053c8:	46f2      	mov	sl, lr
 80053ca:	2100      	movs	r1, #0
 80053cc:	f859 3b04 	ldr.w	r3, [r9], #4
 80053d0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80053d4:	fa1f f883 	uxth.w	r8, r3
 80053d8:	fa11 f18b 	uxtah	r1, r1, fp
 80053dc:	0c1b      	lsrs	r3, r3, #16
 80053de:	eba1 0808 	sub.w	r8, r1, r8
 80053e2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80053e6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80053ea:	fa1f f888 	uxth.w	r8, r8
 80053ee:	1419      	asrs	r1, r3, #16
 80053f0:	454e      	cmp	r6, r9
 80053f2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80053f6:	f84a 3b04 	str.w	r3, [sl], #4
 80053fa:	d8e7      	bhi.n	80053cc <__mdiff+0x80>
 80053fc:	1b33      	subs	r3, r6, r4
 80053fe:	3b15      	subs	r3, #21
 8005400:	f023 0303 	bic.w	r3, r3, #3
 8005404:	3304      	adds	r3, #4
 8005406:	3415      	adds	r4, #21
 8005408:	42a6      	cmp	r6, r4
 800540a:	bf38      	it	cc
 800540c:	2304      	movcc	r3, #4
 800540e:	441d      	add	r5, r3
 8005410:	4473      	add	r3, lr
 8005412:	469e      	mov	lr, r3
 8005414:	462e      	mov	r6, r5
 8005416:	4566      	cmp	r6, ip
 8005418:	d30e      	bcc.n	8005438 <__mdiff+0xec>
 800541a:	f10c 0203 	add.w	r2, ip, #3
 800541e:	1b52      	subs	r2, r2, r5
 8005420:	f022 0203 	bic.w	r2, r2, #3
 8005424:	3d03      	subs	r5, #3
 8005426:	45ac      	cmp	ip, r5
 8005428:	bf38      	it	cc
 800542a:	2200      	movcc	r2, #0
 800542c:	441a      	add	r2, r3
 800542e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005432:	b17b      	cbz	r3, 8005454 <__mdiff+0x108>
 8005434:	6107      	str	r7, [r0, #16]
 8005436:	e7a3      	b.n	8005380 <__mdiff+0x34>
 8005438:	f856 8b04 	ldr.w	r8, [r6], #4
 800543c:	fa11 f288 	uxtah	r2, r1, r8
 8005440:	1414      	asrs	r4, r2, #16
 8005442:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005446:	b292      	uxth	r2, r2
 8005448:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800544c:	f84e 2b04 	str.w	r2, [lr], #4
 8005450:	1421      	asrs	r1, r4, #16
 8005452:	e7e0      	b.n	8005416 <__mdiff+0xca>
 8005454:	3f01      	subs	r7, #1
 8005456:	e7ea      	b.n	800542e <__mdiff+0xe2>
 8005458:	08009fbf 	.word	0x08009fbf
 800545c:	08009fd0 	.word	0x08009fd0

08005460 <__d2b>:
 8005460:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005464:	4689      	mov	r9, r1
 8005466:	2101      	movs	r1, #1
 8005468:	ec57 6b10 	vmov	r6, r7, d0
 800546c:	4690      	mov	r8, r2
 800546e:	f7ff fccf 	bl	8004e10 <_Balloc>
 8005472:	4604      	mov	r4, r0
 8005474:	b930      	cbnz	r0, 8005484 <__d2b+0x24>
 8005476:	4602      	mov	r2, r0
 8005478:	4b25      	ldr	r3, [pc, #148]	; (8005510 <__d2b+0xb0>)
 800547a:	4826      	ldr	r0, [pc, #152]	; (8005514 <__d2b+0xb4>)
 800547c:	f240 310a 	movw	r1, #778	; 0x30a
 8005480:	f000 f860 	bl	8005544 <__assert_func>
 8005484:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005488:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800548c:	bb35      	cbnz	r5, 80054dc <__d2b+0x7c>
 800548e:	2e00      	cmp	r6, #0
 8005490:	9301      	str	r3, [sp, #4]
 8005492:	d028      	beq.n	80054e6 <__d2b+0x86>
 8005494:	4668      	mov	r0, sp
 8005496:	9600      	str	r6, [sp, #0]
 8005498:	f7ff fd82 	bl	8004fa0 <__lo0bits>
 800549c:	9900      	ldr	r1, [sp, #0]
 800549e:	b300      	cbz	r0, 80054e2 <__d2b+0x82>
 80054a0:	9a01      	ldr	r2, [sp, #4]
 80054a2:	f1c0 0320 	rsb	r3, r0, #32
 80054a6:	fa02 f303 	lsl.w	r3, r2, r3
 80054aa:	430b      	orrs	r3, r1
 80054ac:	40c2      	lsrs	r2, r0
 80054ae:	6163      	str	r3, [r4, #20]
 80054b0:	9201      	str	r2, [sp, #4]
 80054b2:	9b01      	ldr	r3, [sp, #4]
 80054b4:	61a3      	str	r3, [r4, #24]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	bf14      	ite	ne
 80054ba:	2202      	movne	r2, #2
 80054bc:	2201      	moveq	r2, #1
 80054be:	6122      	str	r2, [r4, #16]
 80054c0:	b1d5      	cbz	r5, 80054f8 <__d2b+0x98>
 80054c2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80054c6:	4405      	add	r5, r0
 80054c8:	f8c9 5000 	str.w	r5, [r9]
 80054cc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80054d0:	f8c8 0000 	str.w	r0, [r8]
 80054d4:	4620      	mov	r0, r4
 80054d6:	b003      	add	sp, #12
 80054d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80054dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054e0:	e7d5      	b.n	800548e <__d2b+0x2e>
 80054e2:	6161      	str	r1, [r4, #20]
 80054e4:	e7e5      	b.n	80054b2 <__d2b+0x52>
 80054e6:	a801      	add	r0, sp, #4
 80054e8:	f7ff fd5a 	bl	8004fa0 <__lo0bits>
 80054ec:	9b01      	ldr	r3, [sp, #4]
 80054ee:	6163      	str	r3, [r4, #20]
 80054f0:	2201      	movs	r2, #1
 80054f2:	6122      	str	r2, [r4, #16]
 80054f4:	3020      	adds	r0, #32
 80054f6:	e7e3      	b.n	80054c0 <__d2b+0x60>
 80054f8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80054fc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005500:	f8c9 0000 	str.w	r0, [r9]
 8005504:	6918      	ldr	r0, [r3, #16]
 8005506:	f7ff fd2b 	bl	8004f60 <__hi0bits>
 800550a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800550e:	e7df      	b.n	80054d0 <__d2b+0x70>
 8005510:	08009fbf 	.word	0x08009fbf
 8005514:	08009fd0 	.word	0x08009fd0

08005518 <_calloc_r>:
 8005518:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800551a:	fba1 2402 	umull	r2, r4, r1, r2
 800551e:	b94c      	cbnz	r4, 8005534 <_calloc_r+0x1c>
 8005520:	4611      	mov	r1, r2
 8005522:	9201      	str	r2, [sp, #4]
 8005524:	f7fe f8ec 	bl	8003700 <_malloc_r>
 8005528:	9a01      	ldr	r2, [sp, #4]
 800552a:	4605      	mov	r5, r0
 800552c:	b930      	cbnz	r0, 800553c <_calloc_r+0x24>
 800552e:	4628      	mov	r0, r5
 8005530:	b003      	add	sp, #12
 8005532:	bd30      	pop	{r4, r5, pc}
 8005534:	220c      	movs	r2, #12
 8005536:	6002      	str	r2, [r0, #0]
 8005538:	2500      	movs	r5, #0
 800553a:	e7f8      	b.n	800552e <_calloc_r+0x16>
 800553c:	4621      	mov	r1, r4
 800553e:	f7fe f86b 	bl	8003618 <memset>
 8005542:	e7f4      	b.n	800552e <_calloc_r+0x16>

08005544 <__assert_func>:
 8005544:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005546:	4614      	mov	r4, r2
 8005548:	461a      	mov	r2, r3
 800554a:	4b09      	ldr	r3, [pc, #36]	; (8005570 <__assert_func+0x2c>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4605      	mov	r5, r0
 8005550:	68d8      	ldr	r0, [r3, #12]
 8005552:	b14c      	cbz	r4, 8005568 <__assert_func+0x24>
 8005554:	4b07      	ldr	r3, [pc, #28]	; (8005574 <__assert_func+0x30>)
 8005556:	9100      	str	r1, [sp, #0]
 8005558:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800555c:	4906      	ldr	r1, [pc, #24]	; (8005578 <__assert_func+0x34>)
 800555e:	462b      	mov	r3, r5
 8005560:	f000 f80e 	bl	8005580 <fiprintf>
 8005564:	f000 fa5a 	bl	8005a1c <abort>
 8005568:	4b04      	ldr	r3, [pc, #16]	; (800557c <__assert_func+0x38>)
 800556a:	461c      	mov	r4, r3
 800556c:	e7f3      	b.n	8005556 <__assert_func+0x12>
 800556e:	bf00      	nop
 8005570:	20000014 	.word	0x20000014
 8005574:	0800a12c 	.word	0x0800a12c
 8005578:	0800a139 	.word	0x0800a139
 800557c:	0800a167 	.word	0x0800a167

08005580 <fiprintf>:
 8005580:	b40e      	push	{r1, r2, r3}
 8005582:	b503      	push	{r0, r1, lr}
 8005584:	4601      	mov	r1, r0
 8005586:	ab03      	add	r3, sp, #12
 8005588:	4805      	ldr	r0, [pc, #20]	; (80055a0 <fiprintf+0x20>)
 800558a:	f853 2b04 	ldr.w	r2, [r3], #4
 800558e:	6800      	ldr	r0, [r0, #0]
 8005590:	9301      	str	r3, [sp, #4]
 8005592:	f000 f845 	bl	8005620 <_vfiprintf_r>
 8005596:	b002      	add	sp, #8
 8005598:	f85d eb04 	ldr.w	lr, [sp], #4
 800559c:	b003      	add	sp, #12
 800559e:	4770      	bx	lr
 80055a0:	20000014 	.word	0x20000014

080055a4 <__retarget_lock_init_recursive>:
 80055a4:	4770      	bx	lr

080055a6 <__retarget_lock_acquire_recursive>:
 80055a6:	4770      	bx	lr

080055a8 <__retarget_lock_release_recursive>:
 80055a8:	4770      	bx	lr

080055aa <__ascii_mbtowc>:
 80055aa:	b082      	sub	sp, #8
 80055ac:	b901      	cbnz	r1, 80055b0 <__ascii_mbtowc+0x6>
 80055ae:	a901      	add	r1, sp, #4
 80055b0:	b142      	cbz	r2, 80055c4 <__ascii_mbtowc+0x1a>
 80055b2:	b14b      	cbz	r3, 80055c8 <__ascii_mbtowc+0x1e>
 80055b4:	7813      	ldrb	r3, [r2, #0]
 80055b6:	600b      	str	r3, [r1, #0]
 80055b8:	7812      	ldrb	r2, [r2, #0]
 80055ba:	1e10      	subs	r0, r2, #0
 80055bc:	bf18      	it	ne
 80055be:	2001      	movne	r0, #1
 80055c0:	b002      	add	sp, #8
 80055c2:	4770      	bx	lr
 80055c4:	4610      	mov	r0, r2
 80055c6:	e7fb      	b.n	80055c0 <__ascii_mbtowc+0x16>
 80055c8:	f06f 0001 	mvn.w	r0, #1
 80055cc:	e7f8      	b.n	80055c0 <__ascii_mbtowc+0x16>

080055ce <__sfputc_r>:
 80055ce:	6893      	ldr	r3, [r2, #8]
 80055d0:	3b01      	subs	r3, #1
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	b410      	push	{r4}
 80055d6:	6093      	str	r3, [r2, #8]
 80055d8:	da08      	bge.n	80055ec <__sfputc_r+0x1e>
 80055da:	6994      	ldr	r4, [r2, #24]
 80055dc:	42a3      	cmp	r3, r4
 80055de:	db01      	blt.n	80055e4 <__sfputc_r+0x16>
 80055e0:	290a      	cmp	r1, #10
 80055e2:	d103      	bne.n	80055ec <__sfputc_r+0x1e>
 80055e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055e8:	f000 b94a 	b.w	8005880 <__swbuf_r>
 80055ec:	6813      	ldr	r3, [r2, #0]
 80055ee:	1c58      	adds	r0, r3, #1
 80055f0:	6010      	str	r0, [r2, #0]
 80055f2:	7019      	strb	r1, [r3, #0]
 80055f4:	4608      	mov	r0, r1
 80055f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <__sfputs_r>:
 80055fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055fe:	4606      	mov	r6, r0
 8005600:	460f      	mov	r7, r1
 8005602:	4614      	mov	r4, r2
 8005604:	18d5      	adds	r5, r2, r3
 8005606:	42ac      	cmp	r4, r5
 8005608:	d101      	bne.n	800560e <__sfputs_r+0x12>
 800560a:	2000      	movs	r0, #0
 800560c:	e007      	b.n	800561e <__sfputs_r+0x22>
 800560e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005612:	463a      	mov	r2, r7
 8005614:	4630      	mov	r0, r6
 8005616:	f7ff ffda 	bl	80055ce <__sfputc_r>
 800561a:	1c43      	adds	r3, r0, #1
 800561c:	d1f3      	bne.n	8005606 <__sfputs_r+0xa>
 800561e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005620 <_vfiprintf_r>:
 8005620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005624:	460d      	mov	r5, r1
 8005626:	b09d      	sub	sp, #116	; 0x74
 8005628:	4614      	mov	r4, r2
 800562a:	4698      	mov	r8, r3
 800562c:	4606      	mov	r6, r0
 800562e:	b118      	cbz	r0, 8005638 <_vfiprintf_r+0x18>
 8005630:	6983      	ldr	r3, [r0, #24]
 8005632:	b90b      	cbnz	r3, 8005638 <_vfiprintf_r+0x18>
 8005634:	f000 fb14 	bl	8005c60 <__sinit>
 8005638:	4b89      	ldr	r3, [pc, #548]	; (8005860 <_vfiprintf_r+0x240>)
 800563a:	429d      	cmp	r5, r3
 800563c:	d11b      	bne.n	8005676 <_vfiprintf_r+0x56>
 800563e:	6875      	ldr	r5, [r6, #4]
 8005640:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005642:	07d9      	lsls	r1, r3, #31
 8005644:	d405      	bmi.n	8005652 <_vfiprintf_r+0x32>
 8005646:	89ab      	ldrh	r3, [r5, #12]
 8005648:	059a      	lsls	r2, r3, #22
 800564a:	d402      	bmi.n	8005652 <_vfiprintf_r+0x32>
 800564c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800564e:	f7ff ffaa 	bl	80055a6 <__retarget_lock_acquire_recursive>
 8005652:	89ab      	ldrh	r3, [r5, #12]
 8005654:	071b      	lsls	r3, r3, #28
 8005656:	d501      	bpl.n	800565c <_vfiprintf_r+0x3c>
 8005658:	692b      	ldr	r3, [r5, #16]
 800565a:	b9eb      	cbnz	r3, 8005698 <_vfiprintf_r+0x78>
 800565c:	4629      	mov	r1, r5
 800565e:	4630      	mov	r0, r6
 8005660:	f000 f96e 	bl	8005940 <__swsetup_r>
 8005664:	b1c0      	cbz	r0, 8005698 <_vfiprintf_r+0x78>
 8005666:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005668:	07dc      	lsls	r4, r3, #31
 800566a:	d50e      	bpl.n	800568a <_vfiprintf_r+0x6a>
 800566c:	f04f 30ff 	mov.w	r0, #4294967295
 8005670:	b01d      	add	sp, #116	; 0x74
 8005672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005676:	4b7b      	ldr	r3, [pc, #492]	; (8005864 <_vfiprintf_r+0x244>)
 8005678:	429d      	cmp	r5, r3
 800567a:	d101      	bne.n	8005680 <_vfiprintf_r+0x60>
 800567c:	68b5      	ldr	r5, [r6, #8]
 800567e:	e7df      	b.n	8005640 <_vfiprintf_r+0x20>
 8005680:	4b79      	ldr	r3, [pc, #484]	; (8005868 <_vfiprintf_r+0x248>)
 8005682:	429d      	cmp	r5, r3
 8005684:	bf08      	it	eq
 8005686:	68f5      	ldreq	r5, [r6, #12]
 8005688:	e7da      	b.n	8005640 <_vfiprintf_r+0x20>
 800568a:	89ab      	ldrh	r3, [r5, #12]
 800568c:	0598      	lsls	r0, r3, #22
 800568e:	d4ed      	bmi.n	800566c <_vfiprintf_r+0x4c>
 8005690:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005692:	f7ff ff89 	bl	80055a8 <__retarget_lock_release_recursive>
 8005696:	e7e9      	b.n	800566c <_vfiprintf_r+0x4c>
 8005698:	2300      	movs	r3, #0
 800569a:	9309      	str	r3, [sp, #36]	; 0x24
 800569c:	2320      	movs	r3, #32
 800569e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80056a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80056a6:	2330      	movs	r3, #48	; 0x30
 80056a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800586c <_vfiprintf_r+0x24c>
 80056ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80056b0:	f04f 0901 	mov.w	r9, #1
 80056b4:	4623      	mov	r3, r4
 80056b6:	469a      	mov	sl, r3
 80056b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056bc:	b10a      	cbz	r2, 80056c2 <_vfiprintf_r+0xa2>
 80056be:	2a25      	cmp	r2, #37	; 0x25
 80056c0:	d1f9      	bne.n	80056b6 <_vfiprintf_r+0x96>
 80056c2:	ebba 0b04 	subs.w	fp, sl, r4
 80056c6:	d00b      	beq.n	80056e0 <_vfiprintf_r+0xc0>
 80056c8:	465b      	mov	r3, fp
 80056ca:	4622      	mov	r2, r4
 80056cc:	4629      	mov	r1, r5
 80056ce:	4630      	mov	r0, r6
 80056d0:	f7ff ff94 	bl	80055fc <__sfputs_r>
 80056d4:	3001      	adds	r0, #1
 80056d6:	f000 80aa 	beq.w	800582e <_vfiprintf_r+0x20e>
 80056da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056dc:	445a      	add	r2, fp
 80056de:	9209      	str	r2, [sp, #36]	; 0x24
 80056e0:	f89a 3000 	ldrb.w	r3, [sl]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	f000 80a2 	beq.w	800582e <_vfiprintf_r+0x20e>
 80056ea:	2300      	movs	r3, #0
 80056ec:	f04f 32ff 	mov.w	r2, #4294967295
 80056f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80056f4:	f10a 0a01 	add.w	sl, sl, #1
 80056f8:	9304      	str	r3, [sp, #16]
 80056fa:	9307      	str	r3, [sp, #28]
 80056fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005700:	931a      	str	r3, [sp, #104]	; 0x68
 8005702:	4654      	mov	r4, sl
 8005704:	2205      	movs	r2, #5
 8005706:	f814 1b01 	ldrb.w	r1, [r4], #1
 800570a:	4858      	ldr	r0, [pc, #352]	; (800586c <_vfiprintf_r+0x24c>)
 800570c:	f7fa fd70 	bl	80001f0 <memchr>
 8005710:	9a04      	ldr	r2, [sp, #16]
 8005712:	b9d8      	cbnz	r0, 800574c <_vfiprintf_r+0x12c>
 8005714:	06d1      	lsls	r1, r2, #27
 8005716:	bf44      	itt	mi
 8005718:	2320      	movmi	r3, #32
 800571a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800571e:	0713      	lsls	r3, r2, #28
 8005720:	bf44      	itt	mi
 8005722:	232b      	movmi	r3, #43	; 0x2b
 8005724:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005728:	f89a 3000 	ldrb.w	r3, [sl]
 800572c:	2b2a      	cmp	r3, #42	; 0x2a
 800572e:	d015      	beq.n	800575c <_vfiprintf_r+0x13c>
 8005730:	9a07      	ldr	r2, [sp, #28]
 8005732:	4654      	mov	r4, sl
 8005734:	2000      	movs	r0, #0
 8005736:	f04f 0c0a 	mov.w	ip, #10
 800573a:	4621      	mov	r1, r4
 800573c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005740:	3b30      	subs	r3, #48	; 0x30
 8005742:	2b09      	cmp	r3, #9
 8005744:	d94e      	bls.n	80057e4 <_vfiprintf_r+0x1c4>
 8005746:	b1b0      	cbz	r0, 8005776 <_vfiprintf_r+0x156>
 8005748:	9207      	str	r2, [sp, #28]
 800574a:	e014      	b.n	8005776 <_vfiprintf_r+0x156>
 800574c:	eba0 0308 	sub.w	r3, r0, r8
 8005750:	fa09 f303 	lsl.w	r3, r9, r3
 8005754:	4313      	orrs	r3, r2
 8005756:	9304      	str	r3, [sp, #16]
 8005758:	46a2      	mov	sl, r4
 800575a:	e7d2      	b.n	8005702 <_vfiprintf_r+0xe2>
 800575c:	9b03      	ldr	r3, [sp, #12]
 800575e:	1d19      	adds	r1, r3, #4
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	9103      	str	r1, [sp, #12]
 8005764:	2b00      	cmp	r3, #0
 8005766:	bfbb      	ittet	lt
 8005768:	425b      	neglt	r3, r3
 800576a:	f042 0202 	orrlt.w	r2, r2, #2
 800576e:	9307      	strge	r3, [sp, #28]
 8005770:	9307      	strlt	r3, [sp, #28]
 8005772:	bfb8      	it	lt
 8005774:	9204      	strlt	r2, [sp, #16]
 8005776:	7823      	ldrb	r3, [r4, #0]
 8005778:	2b2e      	cmp	r3, #46	; 0x2e
 800577a:	d10c      	bne.n	8005796 <_vfiprintf_r+0x176>
 800577c:	7863      	ldrb	r3, [r4, #1]
 800577e:	2b2a      	cmp	r3, #42	; 0x2a
 8005780:	d135      	bne.n	80057ee <_vfiprintf_r+0x1ce>
 8005782:	9b03      	ldr	r3, [sp, #12]
 8005784:	1d1a      	adds	r2, r3, #4
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	9203      	str	r2, [sp, #12]
 800578a:	2b00      	cmp	r3, #0
 800578c:	bfb8      	it	lt
 800578e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005792:	3402      	adds	r4, #2
 8005794:	9305      	str	r3, [sp, #20]
 8005796:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800587c <_vfiprintf_r+0x25c>
 800579a:	7821      	ldrb	r1, [r4, #0]
 800579c:	2203      	movs	r2, #3
 800579e:	4650      	mov	r0, sl
 80057a0:	f7fa fd26 	bl	80001f0 <memchr>
 80057a4:	b140      	cbz	r0, 80057b8 <_vfiprintf_r+0x198>
 80057a6:	2340      	movs	r3, #64	; 0x40
 80057a8:	eba0 000a 	sub.w	r0, r0, sl
 80057ac:	fa03 f000 	lsl.w	r0, r3, r0
 80057b0:	9b04      	ldr	r3, [sp, #16]
 80057b2:	4303      	orrs	r3, r0
 80057b4:	3401      	adds	r4, #1
 80057b6:	9304      	str	r3, [sp, #16]
 80057b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057bc:	482c      	ldr	r0, [pc, #176]	; (8005870 <_vfiprintf_r+0x250>)
 80057be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80057c2:	2206      	movs	r2, #6
 80057c4:	f7fa fd14 	bl	80001f0 <memchr>
 80057c8:	2800      	cmp	r0, #0
 80057ca:	d03f      	beq.n	800584c <_vfiprintf_r+0x22c>
 80057cc:	4b29      	ldr	r3, [pc, #164]	; (8005874 <_vfiprintf_r+0x254>)
 80057ce:	bb1b      	cbnz	r3, 8005818 <_vfiprintf_r+0x1f8>
 80057d0:	9b03      	ldr	r3, [sp, #12]
 80057d2:	3307      	adds	r3, #7
 80057d4:	f023 0307 	bic.w	r3, r3, #7
 80057d8:	3308      	adds	r3, #8
 80057da:	9303      	str	r3, [sp, #12]
 80057dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057de:	443b      	add	r3, r7
 80057e0:	9309      	str	r3, [sp, #36]	; 0x24
 80057e2:	e767      	b.n	80056b4 <_vfiprintf_r+0x94>
 80057e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80057e8:	460c      	mov	r4, r1
 80057ea:	2001      	movs	r0, #1
 80057ec:	e7a5      	b.n	800573a <_vfiprintf_r+0x11a>
 80057ee:	2300      	movs	r3, #0
 80057f0:	3401      	adds	r4, #1
 80057f2:	9305      	str	r3, [sp, #20]
 80057f4:	4619      	mov	r1, r3
 80057f6:	f04f 0c0a 	mov.w	ip, #10
 80057fa:	4620      	mov	r0, r4
 80057fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005800:	3a30      	subs	r2, #48	; 0x30
 8005802:	2a09      	cmp	r2, #9
 8005804:	d903      	bls.n	800580e <_vfiprintf_r+0x1ee>
 8005806:	2b00      	cmp	r3, #0
 8005808:	d0c5      	beq.n	8005796 <_vfiprintf_r+0x176>
 800580a:	9105      	str	r1, [sp, #20]
 800580c:	e7c3      	b.n	8005796 <_vfiprintf_r+0x176>
 800580e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005812:	4604      	mov	r4, r0
 8005814:	2301      	movs	r3, #1
 8005816:	e7f0      	b.n	80057fa <_vfiprintf_r+0x1da>
 8005818:	ab03      	add	r3, sp, #12
 800581a:	9300      	str	r3, [sp, #0]
 800581c:	462a      	mov	r2, r5
 800581e:	4b16      	ldr	r3, [pc, #88]	; (8005878 <_vfiprintf_r+0x258>)
 8005820:	a904      	add	r1, sp, #16
 8005822:	4630      	mov	r0, r6
 8005824:	f7fe f880 	bl	8003928 <_printf_float>
 8005828:	4607      	mov	r7, r0
 800582a:	1c78      	adds	r0, r7, #1
 800582c:	d1d6      	bne.n	80057dc <_vfiprintf_r+0x1bc>
 800582e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005830:	07d9      	lsls	r1, r3, #31
 8005832:	d405      	bmi.n	8005840 <_vfiprintf_r+0x220>
 8005834:	89ab      	ldrh	r3, [r5, #12]
 8005836:	059a      	lsls	r2, r3, #22
 8005838:	d402      	bmi.n	8005840 <_vfiprintf_r+0x220>
 800583a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800583c:	f7ff feb4 	bl	80055a8 <__retarget_lock_release_recursive>
 8005840:	89ab      	ldrh	r3, [r5, #12]
 8005842:	065b      	lsls	r3, r3, #25
 8005844:	f53f af12 	bmi.w	800566c <_vfiprintf_r+0x4c>
 8005848:	9809      	ldr	r0, [sp, #36]	; 0x24
 800584a:	e711      	b.n	8005670 <_vfiprintf_r+0x50>
 800584c:	ab03      	add	r3, sp, #12
 800584e:	9300      	str	r3, [sp, #0]
 8005850:	462a      	mov	r2, r5
 8005852:	4b09      	ldr	r3, [pc, #36]	; (8005878 <_vfiprintf_r+0x258>)
 8005854:	a904      	add	r1, sp, #16
 8005856:	4630      	mov	r0, r6
 8005858:	f7fe fb0a 	bl	8003e70 <_printf_i>
 800585c:	e7e4      	b.n	8005828 <_vfiprintf_r+0x208>
 800585e:	bf00      	nop
 8005860:	0800a2a4 	.word	0x0800a2a4
 8005864:	0800a2c4 	.word	0x0800a2c4
 8005868:	0800a284 	.word	0x0800a284
 800586c:	0800a172 	.word	0x0800a172
 8005870:	0800a17c 	.word	0x0800a17c
 8005874:	08003929 	.word	0x08003929
 8005878:	080055fd 	.word	0x080055fd
 800587c:	0800a178 	.word	0x0800a178

08005880 <__swbuf_r>:
 8005880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005882:	460e      	mov	r6, r1
 8005884:	4614      	mov	r4, r2
 8005886:	4605      	mov	r5, r0
 8005888:	b118      	cbz	r0, 8005892 <__swbuf_r+0x12>
 800588a:	6983      	ldr	r3, [r0, #24]
 800588c:	b90b      	cbnz	r3, 8005892 <__swbuf_r+0x12>
 800588e:	f000 f9e7 	bl	8005c60 <__sinit>
 8005892:	4b21      	ldr	r3, [pc, #132]	; (8005918 <__swbuf_r+0x98>)
 8005894:	429c      	cmp	r4, r3
 8005896:	d12b      	bne.n	80058f0 <__swbuf_r+0x70>
 8005898:	686c      	ldr	r4, [r5, #4]
 800589a:	69a3      	ldr	r3, [r4, #24]
 800589c:	60a3      	str	r3, [r4, #8]
 800589e:	89a3      	ldrh	r3, [r4, #12]
 80058a0:	071a      	lsls	r2, r3, #28
 80058a2:	d52f      	bpl.n	8005904 <__swbuf_r+0x84>
 80058a4:	6923      	ldr	r3, [r4, #16]
 80058a6:	b36b      	cbz	r3, 8005904 <__swbuf_r+0x84>
 80058a8:	6923      	ldr	r3, [r4, #16]
 80058aa:	6820      	ldr	r0, [r4, #0]
 80058ac:	1ac0      	subs	r0, r0, r3
 80058ae:	6963      	ldr	r3, [r4, #20]
 80058b0:	b2f6      	uxtb	r6, r6
 80058b2:	4283      	cmp	r3, r0
 80058b4:	4637      	mov	r7, r6
 80058b6:	dc04      	bgt.n	80058c2 <__swbuf_r+0x42>
 80058b8:	4621      	mov	r1, r4
 80058ba:	4628      	mov	r0, r5
 80058bc:	f000 f93c 	bl	8005b38 <_fflush_r>
 80058c0:	bb30      	cbnz	r0, 8005910 <__swbuf_r+0x90>
 80058c2:	68a3      	ldr	r3, [r4, #8]
 80058c4:	3b01      	subs	r3, #1
 80058c6:	60a3      	str	r3, [r4, #8]
 80058c8:	6823      	ldr	r3, [r4, #0]
 80058ca:	1c5a      	adds	r2, r3, #1
 80058cc:	6022      	str	r2, [r4, #0]
 80058ce:	701e      	strb	r6, [r3, #0]
 80058d0:	6963      	ldr	r3, [r4, #20]
 80058d2:	3001      	adds	r0, #1
 80058d4:	4283      	cmp	r3, r0
 80058d6:	d004      	beq.n	80058e2 <__swbuf_r+0x62>
 80058d8:	89a3      	ldrh	r3, [r4, #12]
 80058da:	07db      	lsls	r3, r3, #31
 80058dc:	d506      	bpl.n	80058ec <__swbuf_r+0x6c>
 80058de:	2e0a      	cmp	r6, #10
 80058e0:	d104      	bne.n	80058ec <__swbuf_r+0x6c>
 80058e2:	4621      	mov	r1, r4
 80058e4:	4628      	mov	r0, r5
 80058e6:	f000 f927 	bl	8005b38 <_fflush_r>
 80058ea:	b988      	cbnz	r0, 8005910 <__swbuf_r+0x90>
 80058ec:	4638      	mov	r0, r7
 80058ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058f0:	4b0a      	ldr	r3, [pc, #40]	; (800591c <__swbuf_r+0x9c>)
 80058f2:	429c      	cmp	r4, r3
 80058f4:	d101      	bne.n	80058fa <__swbuf_r+0x7a>
 80058f6:	68ac      	ldr	r4, [r5, #8]
 80058f8:	e7cf      	b.n	800589a <__swbuf_r+0x1a>
 80058fa:	4b09      	ldr	r3, [pc, #36]	; (8005920 <__swbuf_r+0xa0>)
 80058fc:	429c      	cmp	r4, r3
 80058fe:	bf08      	it	eq
 8005900:	68ec      	ldreq	r4, [r5, #12]
 8005902:	e7ca      	b.n	800589a <__swbuf_r+0x1a>
 8005904:	4621      	mov	r1, r4
 8005906:	4628      	mov	r0, r5
 8005908:	f000 f81a 	bl	8005940 <__swsetup_r>
 800590c:	2800      	cmp	r0, #0
 800590e:	d0cb      	beq.n	80058a8 <__swbuf_r+0x28>
 8005910:	f04f 37ff 	mov.w	r7, #4294967295
 8005914:	e7ea      	b.n	80058ec <__swbuf_r+0x6c>
 8005916:	bf00      	nop
 8005918:	0800a2a4 	.word	0x0800a2a4
 800591c:	0800a2c4 	.word	0x0800a2c4
 8005920:	0800a284 	.word	0x0800a284

08005924 <__ascii_wctomb>:
 8005924:	b149      	cbz	r1, 800593a <__ascii_wctomb+0x16>
 8005926:	2aff      	cmp	r2, #255	; 0xff
 8005928:	bf85      	ittet	hi
 800592a:	238a      	movhi	r3, #138	; 0x8a
 800592c:	6003      	strhi	r3, [r0, #0]
 800592e:	700a      	strbls	r2, [r1, #0]
 8005930:	f04f 30ff 	movhi.w	r0, #4294967295
 8005934:	bf98      	it	ls
 8005936:	2001      	movls	r0, #1
 8005938:	4770      	bx	lr
 800593a:	4608      	mov	r0, r1
 800593c:	4770      	bx	lr
	...

08005940 <__swsetup_r>:
 8005940:	4b32      	ldr	r3, [pc, #200]	; (8005a0c <__swsetup_r+0xcc>)
 8005942:	b570      	push	{r4, r5, r6, lr}
 8005944:	681d      	ldr	r5, [r3, #0]
 8005946:	4606      	mov	r6, r0
 8005948:	460c      	mov	r4, r1
 800594a:	b125      	cbz	r5, 8005956 <__swsetup_r+0x16>
 800594c:	69ab      	ldr	r3, [r5, #24]
 800594e:	b913      	cbnz	r3, 8005956 <__swsetup_r+0x16>
 8005950:	4628      	mov	r0, r5
 8005952:	f000 f985 	bl	8005c60 <__sinit>
 8005956:	4b2e      	ldr	r3, [pc, #184]	; (8005a10 <__swsetup_r+0xd0>)
 8005958:	429c      	cmp	r4, r3
 800595a:	d10f      	bne.n	800597c <__swsetup_r+0x3c>
 800595c:	686c      	ldr	r4, [r5, #4]
 800595e:	89a3      	ldrh	r3, [r4, #12]
 8005960:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005964:	0719      	lsls	r1, r3, #28
 8005966:	d42c      	bmi.n	80059c2 <__swsetup_r+0x82>
 8005968:	06dd      	lsls	r5, r3, #27
 800596a:	d411      	bmi.n	8005990 <__swsetup_r+0x50>
 800596c:	2309      	movs	r3, #9
 800596e:	6033      	str	r3, [r6, #0]
 8005970:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005974:	81a3      	strh	r3, [r4, #12]
 8005976:	f04f 30ff 	mov.w	r0, #4294967295
 800597a:	e03e      	b.n	80059fa <__swsetup_r+0xba>
 800597c:	4b25      	ldr	r3, [pc, #148]	; (8005a14 <__swsetup_r+0xd4>)
 800597e:	429c      	cmp	r4, r3
 8005980:	d101      	bne.n	8005986 <__swsetup_r+0x46>
 8005982:	68ac      	ldr	r4, [r5, #8]
 8005984:	e7eb      	b.n	800595e <__swsetup_r+0x1e>
 8005986:	4b24      	ldr	r3, [pc, #144]	; (8005a18 <__swsetup_r+0xd8>)
 8005988:	429c      	cmp	r4, r3
 800598a:	bf08      	it	eq
 800598c:	68ec      	ldreq	r4, [r5, #12]
 800598e:	e7e6      	b.n	800595e <__swsetup_r+0x1e>
 8005990:	0758      	lsls	r0, r3, #29
 8005992:	d512      	bpl.n	80059ba <__swsetup_r+0x7a>
 8005994:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005996:	b141      	cbz	r1, 80059aa <__swsetup_r+0x6a>
 8005998:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800599c:	4299      	cmp	r1, r3
 800599e:	d002      	beq.n	80059a6 <__swsetup_r+0x66>
 80059a0:	4630      	mov	r0, r6
 80059a2:	f7fd fe41 	bl	8003628 <_free_r>
 80059a6:	2300      	movs	r3, #0
 80059a8:	6363      	str	r3, [r4, #52]	; 0x34
 80059aa:	89a3      	ldrh	r3, [r4, #12]
 80059ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80059b0:	81a3      	strh	r3, [r4, #12]
 80059b2:	2300      	movs	r3, #0
 80059b4:	6063      	str	r3, [r4, #4]
 80059b6:	6923      	ldr	r3, [r4, #16]
 80059b8:	6023      	str	r3, [r4, #0]
 80059ba:	89a3      	ldrh	r3, [r4, #12]
 80059bc:	f043 0308 	orr.w	r3, r3, #8
 80059c0:	81a3      	strh	r3, [r4, #12]
 80059c2:	6923      	ldr	r3, [r4, #16]
 80059c4:	b94b      	cbnz	r3, 80059da <__swsetup_r+0x9a>
 80059c6:	89a3      	ldrh	r3, [r4, #12]
 80059c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80059cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059d0:	d003      	beq.n	80059da <__swsetup_r+0x9a>
 80059d2:	4621      	mov	r1, r4
 80059d4:	4630      	mov	r0, r6
 80059d6:	f000 fa05 	bl	8005de4 <__smakebuf_r>
 80059da:	89a0      	ldrh	r0, [r4, #12]
 80059dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80059e0:	f010 0301 	ands.w	r3, r0, #1
 80059e4:	d00a      	beq.n	80059fc <__swsetup_r+0xbc>
 80059e6:	2300      	movs	r3, #0
 80059e8:	60a3      	str	r3, [r4, #8]
 80059ea:	6963      	ldr	r3, [r4, #20]
 80059ec:	425b      	negs	r3, r3
 80059ee:	61a3      	str	r3, [r4, #24]
 80059f0:	6923      	ldr	r3, [r4, #16]
 80059f2:	b943      	cbnz	r3, 8005a06 <__swsetup_r+0xc6>
 80059f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80059f8:	d1ba      	bne.n	8005970 <__swsetup_r+0x30>
 80059fa:	bd70      	pop	{r4, r5, r6, pc}
 80059fc:	0781      	lsls	r1, r0, #30
 80059fe:	bf58      	it	pl
 8005a00:	6963      	ldrpl	r3, [r4, #20]
 8005a02:	60a3      	str	r3, [r4, #8]
 8005a04:	e7f4      	b.n	80059f0 <__swsetup_r+0xb0>
 8005a06:	2000      	movs	r0, #0
 8005a08:	e7f7      	b.n	80059fa <__swsetup_r+0xba>
 8005a0a:	bf00      	nop
 8005a0c:	20000014 	.word	0x20000014
 8005a10:	0800a2a4 	.word	0x0800a2a4
 8005a14:	0800a2c4 	.word	0x0800a2c4
 8005a18:	0800a284 	.word	0x0800a284

08005a1c <abort>:
 8005a1c:	b508      	push	{r3, lr}
 8005a1e:	2006      	movs	r0, #6
 8005a20:	f000 fa48 	bl	8005eb4 <raise>
 8005a24:	2001      	movs	r0, #1
 8005a26:	f7fc fd89 	bl	800253c <_exit>
	...

08005a2c <__sflush_r>:
 8005a2c:	898a      	ldrh	r2, [r1, #12]
 8005a2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a32:	4605      	mov	r5, r0
 8005a34:	0710      	lsls	r0, r2, #28
 8005a36:	460c      	mov	r4, r1
 8005a38:	d458      	bmi.n	8005aec <__sflush_r+0xc0>
 8005a3a:	684b      	ldr	r3, [r1, #4]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	dc05      	bgt.n	8005a4c <__sflush_r+0x20>
 8005a40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	dc02      	bgt.n	8005a4c <__sflush_r+0x20>
 8005a46:	2000      	movs	r0, #0
 8005a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a4e:	2e00      	cmp	r6, #0
 8005a50:	d0f9      	beq.n	8005a46 <__sflush_r+0x1a>
 8005a52:	2300      	movs	r3, #0
 8005a54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005a58:	682f      	ldr	r7, [r5, #0]
 8005a5a:	602b      	str	r3, [r5, #0]
 8005a5c:	d032      	beq.n	8005ac4 <__sflush_r+0x98>
 8005a5e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005a60:	89a3      	ldrh	r3, [r4, #12]
 8005a62:	075a      	lsls	r2, r3, #29
 8005a64:	d505      	bpl.n	8005a72 <__sflush_r+0x46>
 8005a66:	6863      	ldr	r3, [r4, #4]
 8005a68:	1ac0      	subs	r0, r0, r3
 8005a6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005a6c:	b10b      	cbz	r3, 8005a72 <__sflush_r+0x46>
 8005a6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a70:	1ac0      	subs	r0, r0, r3
 8005a72:	2300      	movs	r3, #0
 8005a74:	4602      	mov	r2, r0
 8005a76:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a78:	6a21      	ldr	r1, [r4, #32]
 8005a7a:	4628      	mov	r0, r5
 8005a7c:	47b0      	blx	r6
 8005a7e:	1c43      	adds	r3, r0, #1
 8005a80:	89a3      	ldrh	r3, [r4, #12]
 8005a82:	d106      	bne.n	8005a92 <__sflush_r+0x66>
 8005a84:	6829      	ldr	r1, [r5, #0]
 8005a86:	291d      	cmp	r1, #29
 8005a88:	d82c      	bhi.n	8005ae4 <__sflush_r+0xb8>
 8005a8a:	4a2a      	ldr	r2, [pc, #168]	; (8005b34 <__sflush_r+0x108>)
 8005a8c:	40ca      	lsrs	r2, r1
 8005a8e:	07d6      	lsls	r6, r2, #31
 8005a90:	d528      	bpl.n	8005ae4 <__sflush_r+0xb8>
 8005a92:	2200      	movs	r2, #0
 8005a94:	6062      	str	r2, [r4, #4]
 8005a96:	04d9      	lsls	r1, r3, #19
 8005a98:	6922      	ldr	r2, [r4, #16]
 8005a9a:	6022      	str	r2, [r4, #0]
 8005a9c:	d504      	bpl.n	8005aa8 <__sflush_r+0x7c>
 8005a9e:	1c42      	adds	r2, r0, #1
 8005aa0:	d101      	bne.n	8005aa6 <__sflush_r+0x7a>
 8005aa2:	682b      	ldr	r3, [r5, #0]
 8005aa4:	b903      	cbnz	r3, 8005aa8 <__sflush_r+0x7c>
 8005aa6:	6560      	str	r0, [r4, #84]	; 0x54
 8005aa8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005aaa:	602f      	str	r7, [r5, #0]
 8005aac:	2900      	cmp	r1, #0
 8005aae:	d0ca      	beq.n	8005a46 <__sflush_r+0x1a>
 8005ab0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ab4:	4299      	cmp	r1, r3
 8005ab6:	d002      	beq.n	8005abe <__sflush_r+0x92>
 8005ab8:	4628      	mov	r0, r5
 8005aba:	f7fd fdb5 	bl	8003628 <_free_r>
 8005abe:	2000      	movs	r0, #0
 8005ac0:	6360      	str	r0, [r4, #52]	; 0x34
 8005ac2:	e7c1      	b.n	8005a48 <__sflush_r+0x1c>
 8005ac4:	6a21      	ldr	r1, [r4, #32]
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	4628      	mov	r0, r5
 8005aca:	47b0      	blx	r6
 8005acc:	1c41      	adds	r1, r0, #1
 8005ace:	d1c7      	bne.n	8005a60 <__sflush_r+0x34>
 8005ad0:	682b      	ldr	r3, [r5, #0]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d0c4      	beq.n	8005a60 <__sflush_r+0x34>
 8005ad6:	2b1d      	cmp	r3, #29
 8005ad8:	d001      	beq.n	8005ade <__sflush_r+0xb2>
 8005ada:	2b16      	cmp	r3, #22
 8005adc:	d101      	bne.n	8005ae2 <__sflush_r+0xb6>
 8005ade:	602f      	str	r7, [r5, #0]
 8005ae0:	e7b1      	b.n	8005a46 <__sflush_r+0x1a>
 8005ae2:	89a3      	ldrh	r3, [r4, #12]
 8005ae4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ae8:	81a3      	strh	r3, [r4, #12]
 8005aea:	e7ad      	b.n	8005a48 <__sflush_r+0x1c>
 8005aec:	690f      	ldr	r7, [r1, #16]
 8005aee:	2f00      	cmp	r7, #0
 8005af0:	d0a9      	beq.n	8005a46 <__sflush_r+0x1a>
 8005af2:	0793      	lsls	r3, r2, #30
 8005af4:	680e      	ldr	r6, [r1, #0]
 8005af6:	bf08      	it	eq
 8005af8:	694b      	ldreq	r3, [r1, #20]
 8005afa:	600f      	str	r7, [r1, #0]
 8005afc:	bf18      	it	ne
 8005afe:	2300      	movne	r3, #0
 8005b00:	eba6 0807 	sub.w	r8, r6, r7
 8005b04:	608b      	str	r3, [r1, #8]
 8005b06:	f1b8 0f00 	cmp.w	r8, #0
 8005b0a:	dd9c      	ble.n	8005a46 <__sflush_r+0x1a>
 8005b0c:	6a21      	ldr	r1, [r4, #32]
 8005b0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005b10:	4643      	mov	r3, r8
 8005b12:	463a      	mov	r2, r7
 8005b14:	4628      	mov	r0, r5
 8005b16:	47b0      	blx	r6
 8005b18:	2800      	cmp	r0, #0
 8005b1a:	dc06      	bgt.n	8005b2a <__sflush_r+0xfe>
 8005b1c:	89a3      	ldrh	r3, [r4, #12]
 8005b1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b22:	81a3      	strh	r3, [r4, #12]
 8005b24:	f04f 30ff 	mov.w	r0, #4294967295
 8005b28:	e78e      	b.n	8005a48 <__sflush_r+0x1c>
 8005b2a:	4407      	add	r7, r0
 8005b2c:	eba8 0800 	sub.w	r8, r8, r0
 8005b30:	e7e9      	b.n	8005b06 <__sflush_r+0xda>
 8005b32:	bf00      	nop
 8005b34:	20400001 	.word	0x20400001

08005b38 <_fflush_r>:
 8005b38:	b538      	push	{r3, r4, r5, lr}
 8005b3a:	690b      	ldr	r3, [r1, #16]
 8005b3c:	4605      	mov	r5, r0
 8005b3e:	460c      	mov	r4, r1
 8005b40:	b913      	cbnz	r3, 8005b48 <_fflush_r+0x10>
 8005b42:	2500      	movs	r5, #0
 8005b44:	4628      	mov	r0, r5
 8005b46:	bd38      	pop	{r3, r4, r5, pc}
 8005b48:	b118      	cbz	r0, 8005b52 <_fflush_r+0x1a>
 8005b4a:	6983      	ldr	r3, [r0, #24]
 8005b4c:	b90b      	cbnz	r3, 8005b52 <_fflush_r+0x1a>
 8005b4e:	f000 f887 	bl	8005c60 <__sinit>
 8005b52:	4b14      	ldr	r3, [pc, #80]	; (8005ba4 <_fflush_r+0x6c>)
 8005b54:	429c      	cmp	r4, r3
 8005b56:	d11b      	bne.n	8005b90 <_fflush_r+0x58>
 8005b58:	686c      	ldr	r4, [r5, #4]
 8005b5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d0ef      	beq.n	8005b42 <_fflush_r+0xa>
 8005b62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005b64:	07d0      	lsls	r0, r2, #31
 8005b66:	d404      	bmi.n	8005b72 <_fflush_r+0x3a>
 8005b68:	0599      	lsls	r1, r3, #22
 8005b6a:	d402      	bmi.n	8005b72 <_fflush_r+0x3a>
 8005b6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b6e:	f7ff fd1a 	bl	80055a6 <__retarget_lock_acquire_recursive>
 8005b72:	4628      	mov	r0, r5
 8005b74:	4621      	mov	r1, r4
 8005b76:	f7ff ff59 	bl	8005a2c <__sflush_r>
 8005b7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b7c:	07da      	lsls	r2, r3, #31
 8005b7e:	4605      	mov	r5, r0
 8005b80:	d4e0      	bmi.n	8005b44 <_fflush_r+0xc>
 8005b82:	89a3      	ldrh	r3, [r4, #12]
 8005b84:	059b      	lsls	r3, r3, #22
 8005b86:	d4dd      	bmi.n	8005b44 <_fflush_r+0xc>
 8005b88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b8a:	f7ff fd0d 	bl	80055a8 <__retarget_lock_release_recursive>
 8005b8e:	e7d9      	b.n	8005b44 <_fflush_r+0xc>
 8005b90:	4b05      	ldr	r3, [pc, #20]	; (8005ba8 <_fflush_r+0x70>)
 8005b92:	429c      	cmp	r4, r3
 8005b94:	d101      	bne.n	8005b9a <_fflush_r+0x62>
 8005b96:	68ac      	ldr	r4, [r5, #8]
 8005b98:	e7df      	b.n	8005b5a <_fflush_r+0x22>
 8005b9a:	4b04      	ldr	r3, [pc, #16]	; (8005bac <_fflush_r+0x74>)
 8005b9c:	429c      	cmp	r4, r3
 8005b9e:	bf08      	it	eq
 8005ba0:	68ec      	ldreq	r4, [r5, #12]
 8005ba2:	e7da      	b.n	8005b5a <_fflush_r+0x22>
 8005ba4:	0800a2a4 	.word	0x0800a2a4
 8005ba8:	0800a2c4 	.word	0x0800a2c4
 8005bac:	0800a284 	.word	0x0800a284

08005bb0 <std>:
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	b510      	push	{r4, lr}
 8005bb4:	4604      	mov	r4, r0
 8005bb6:	e9c0 3300 	strd	r3, r3, [r0]
 8005bba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005bbe:	6083      	str	r3, [r0, #8]
 8005bc0:	8181      	strh	r1, [r0, #12]
 8005bc2:	6643      	str	r3, [r0, #100]	; 0x64
 8005bc4:	81c2      	strh	r2, [r0, #14]
 8005bc6:	6183      	str	r3, [r0, #24]
 8005bc8:	4619      	mov	r1, r3
 8005bca:	2208      	movs	r2, #8
 8005bcc:	305c      	adds	r0, #92	; 0x5c
 8005bce:	f7fd fd23 	bl	8003618 <memset>
 8005bd2:	4b05      	ldr	r3, [pc, #20]	; (8005be8 <std+0x38>)
 8005bd4:	6263      	str	r3, [r4, #36]	; 0x24
 8005bd6:	4b05      	ldr	r3, [pc, #20]	; (8005bec <std+0x3c>)
 8005bd8:	62a3      	str	r3, [r4, #40]	; 0x28
 8005bda:	4b05      	ldr	r3, [pc, #20]	; (8005bf0 <std+0x40>)
 8005bdc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005bde:	4b05      	ldr	r3, [pc, #20]	; (8005bf4 <std+0x44>)
 8005be0:	6224      	str	r4, [r4, #32]
 8005be2:	6323      	str	r3, [r4, #48]	; 0x30
 8005be4:	bd10      	pop	{r4, pc}
 8005be6:	bf00      	nop
 8005be8:	08005eed 	.word	0x08005eed
 8005bec:	08005f0f 	.word	0x08005f0f
 8005bf0:	08005f47 	.word	0x08005f47
 8005bf4:	08005f6b 	.word	0x08005f6b

08005bf8 <_cleanup_r>:
 8005bf8:	4901      	ldr	r1, [pc, #4]	; (8005c00 <_cleanup_r+0x8>)
 8005bfa:	f000 b8af 	b.w	8005d5c <_fwalk_reent>
 8005bfe:	bf00      	nop
 8005c00:	08005b39 	.word	0x08005b39

08005c04 <__sfmoreglue>:
 8005c04:	b570      	push	{r4, r5, r6, lr}
 8005c06:	2268      	movs	r2, #104	; 0x68
 8005c08:	1e4d      	subs	r5, r1, #1
 8005c0a:	4355      	muls	r5, r2
 8005c0c:	460e      	mov	r6, r1
 8005c0e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005c12:	f7fd fd75 	bl	8003700 <_malloc_r>
 8005c16:	4604      	mov	r4, r0
 8005c18:	b140      	cbz	r0, 8005c2c <__sfmoreglue+0x28>
 8005c1a:	2100      	movs	r1, #0
 8005c1c:	e9c0 1600 	strd	r1, r6, [r0]
 8005c20:	300c      	adds	r0, #12
 8005c22:	60a0      	str	r0, [r4, #8]
 8005c24:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005c28:	f7fd fcf6 	bl	8003618 <memset>
 8005c2c:	4620      	mov	r0, r4
 8005c2e:	bd70      	pop	{r4, r5, r6, pc}

08005c30 <__sfp_lock_acquire>:
 8005c30:	4801      	ldr	r0, [pc, #4]	; (8005c38 <__sfp_lock_acquire+0x8>)
 8005c32:	f7ff bcb8 	b.w	80055a6 <__retarget_lock_acquire_recursive>
 8005c36:	bf00      	nop
 8005c38:	2000023d 	.word	0x2000023d

08005c3c <__sfp_lock_release>:
 8005c3c:	4801      	ldr	r0, [pc, #4]	; (8005c44 <__sfp_lock_release+0x8>)
 8005c3e:	f7ff bcb3 	b.w	80055a8 <__retarget_lock_release_recursive>
 8005c42:	bf00      	nop
 8005c44:	2000023d 	.word	0x2000023d

08005c48 <__sinit_lock_acquire>:
 8005c48:	4801      	ldr	r0, [pc, #4]	; (8005c50 <__sinit_lock_acquire+0x8>)
 8005c4a:	f7ff bcac 	b.w	80055a6 <__retarget_lock_acquire_recursive>
 8005c4e:	bf00      	nop
 8005c50:	2000023e 	.word	0x2000023e

08005c54 <__sinit_lock_release>:
 8005c54:	4801      	ldr	r0, [pc, #4]	; (8005c5c <__sinit_lock_release+0x8>)
 8005c56:	f7ff bca7 	b.w	80055a8 <__retarget_lock_release_recursive>
 8005c5a:	bf00      	nop
 8005c5c:	2000023e 	.word	0x2000023e

08005c60 <__sinit>:
 8005c60:	b510      	push	{r4, lr}
 8005c62:	4604      	mov	r4, r0
 8005c64:	f7ff fff0 	bl	8005c48 <__sinit_lock_acquire>
 8005c68:	69a3      	ldr	r3, [r4, #24]
 8005c6a:	b11b      	cbz	r3, 8005c74 <__sinit+0x14>
 8005c6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c70:	f7ff bff0 	b.w	8005c54 <__sinit_lock_release>
 8005c74:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005c78:	6523      	str	r3, [r4, #80]	; 0x50
 8005c7a:	4b13      	ldr	r3, [pc, #76]	; (8005cc8 <__sinit+0x68>)
 8005c7c:	4a13      	ldr	r2, [pc, #76]	; (8005ccc <__sinit+0x6c>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	62a2      	str	r2, [r4, #40]	; 0x28
 8005c82:	42a3      	cmp	r3, r4
 8005c84:	bf04      	itt	eq
 8005c86:	2301      	moveq	r3, #1
 8005c88:	61a3      	streq	r3, [r4, #24]
 8005c8a:	4620      	mov	r0, r4
 8005c8c:	f000 f820 	bl	8005cd0 <__sfp>
 8005c90:	6060      	str	r0, [r4, #4]
 8005c92:	4620      	mov	r0, r4
 8005c94:	f000 f81c 	bl	8005cd0 <__sfp>
 8005c98:	60a0      	str	r0, [r4, #8]
 8005c9a:	4620      	mov	r0, r4
 8005c9c:	f000 f818 	bl	8005cd0 <__sfp>
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	60e0      	str	r0, [r4, #12]
 8005ca4:	2104      	movs	r1, #4
 8005ca6:	6860      	ldr	r0, [r4, #4]
 8005ca8:	f7ff ff82 	bl	8005bb0 <std>
 8005cac:	68a0      	ldr	r0, [r4, #8]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	2109      	movs	r1, #9
 8005cb2:	f7ff ff7d 	bl	8005bb0 <std>
 8005cb6:	68e0      	ldr	r0, [r4, #12]
 8005cb8:	2202      	movs	r2, #2
 8005cba:	2112      	movs	r1, #18
 8005cbc:	f7ff ff78 	bl	8005bb0 <std>
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	61a3      	str	r3, [r4, #24]
 8005cc4:	e7d2      	b.n	8005c6c <__sinit+0xc>
 8005cc6:	bf00      	nop
 8005cc8:	08009f08 	.word	0x08009f08
 8005ccc:	08005bf9 	.word	0x08005bf9

08005cd0 <__sfp>:
 8005cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cd2:	4607      	mov	r7, r0
 8005cd4:	f7ff ffac 	bl	8005c30 <__sfp_lock_acquire>
 8005cd8:	4b1e      	ldr	r3, [pc, #120]	; (8005d54 <__sfp+0x84>)
 8005cda:	681e      	ldr	r6, [r3, #0]
 8005cdc:	69b3      	ldr	r3, [r6, #24]
 8005cde:	b913      	cbnz	r3, 8005ce6 <__sfp+0x16>
 8005ce0:	4630      	mov	r0, r6
 8005ce2:	f7ff ffbd 	bl	8005c60 <__sinit>
 8005ce6:	3648      	adds	r6, #72	; 0x48
 8005ce8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005cec:	3b01      	subs	r3, #1
 8005cee:	d503      	bpl.n	8005cf8 <__sfp+0x28>
 8005cf0:	6833      	ldr	r3, [r6, #0]
 8005cf2:	b30b      	cbz	r3, 8005d38 <__sfp+0x68>
 8005cf4:	6836      	ldr	r6, [r6, #0]
 8005cf6:	e7f7      	b.n	8005ce8 <__sfp+0x18>
 8005cf8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005cfc:	b9d5      	cbnz	r5, 8005d34 <__sfp+0x64>
 8005cfe:	4b16      	ldr	r3, [pc, #88]	; (8005d58 <__sfp+0x88>)
 8005d00:	60e3      	str	r3, [r4, #12]
 8005d02:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005d06:	6665      	str	r5, [r4, #100]	; 0x64
 8005d08:	f7ff fc4c 	bl	80055a4 <__retarget_lock_init_recursive>
 8005d0c:	f7ff ff96 	bl	8005c3c <__sfp_lock_release>
 8005d10:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005d14:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005d18:	6025      	str	r5, [r4, #0]
 8005d1a:	61a5      	str	r5, [r4, #24]
 8005d1c:	2208      	movs	r2, #8
 8005d1e:	4629      	mov	r1, r5
 8005d20:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005d24:	f7fd fc78 	bl	8003618 <memset>
 8005d28:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005d2c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005d30:	4620      	mov	r0, r4
 8005d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d34:	3468      	adds	r4, #104	; 0x68
 8005d36:	e7d9      	b.n	8005cec <__sfp+0x1c>
 8005d38:	2104      	movs	r1, #4
 8005d3a:	4638      	mov	r0, r7
 8005d3c:	f7ff ff62 	bl	8005c04 <__sfmoreglue>
 8005d40:	4604      	mov	r4, r0
 8005d42:	6030      	str	r0, [r6, #0]
 8005d44:	2800      	cmp	r0, #0
 8005d46:	d1d5      	bne.n	8005cf4 <__sfp+0x24>
 8005d48:	f7ff ff78 	bl	8005c3c <__sfp_lock_release>
 8005d4c:	230c      	movs	r3, #12
 8005d4e:	603b      	str	r3, [r7, #0]
 8005d50:	e7ee      	b.n	8005d30 <__sfp+0x60>
 8005d52:	bf00      	nop
 8005d54:	08009f08 	.word	0x08009f08
 8005d58:	ffff0001 	.word	0xffff0001

08005d5c <_fwalk_reent>:
 8005d5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d60:	4606      	mov	r6, r0
 8005d62:	4688      	mov	r8, r1
 8005d64:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005d68:	2700      	movs	r7, #0
 8005d6a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005d6e:	f1b9 0901 	subs.w	r9, r9, #1
 8005d72:	d505      	bpl.n	8005d80 <_fwalk_reent+0x24>
 8005d74:	6824      	ldr	r4, [r4, #0]
 8005d76:	2c00      	cmp	r4, #0
 8005d78:	d1f7      	bne.n	8005d6a <_fwalk_reent+0xe>
 8005d7a:	4638      	mov	r0, r7
 8005d7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d80:	89ab      	ldrh	r3, [r5, #12]
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d907      	bls.n	8005d96 <_fwalk_reent+0x3a>
 8005d86:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	d003      	beq.n	8005d96 <_fwalk_reent+0x3a>
 8005d8e:	4629      	mov	r1, r5
 8005d90:	4630      	mov	r0, r6
 8005d92:	47c0      	blx	r8
 8005d94:	4307      	orrs	r7, r0
 8005d96:	3568      	adds	r5, #104	; 0x68
 8005d98:	e7e9      	b.n	8005d6e <_fwalk_reent+0x12>

08005d9a <__swhatbuf_r>:
 8005d9a:	b570      	push	{r4, r5, r6, lr}
 8005d9c:	460e      	mov	r6, r1
 8005d9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005da2:	2900      	cmp	r1, #0
 8005da4:	b096      	sub	sp, #88	; 0x58
 8005da6:	4614      	mov	r4, r2
 8005da8:	461d      	mov	r5, r3
 8005daa:	da08      	bge.n	8005dbe <__swhatbuf_r+0x24>
 8005dac:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005db0:	2200      	movs	r2, #0
 8005db2:	602a      	str	r2, [r5, #0]
 8005db4:	061a      	lsls	r2, r3, #24
 8005db6:	d410      	bmi.n	8005dda <__swhatbuf_r+0x40>
 8005db8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005dbc:	e00e      	b.n	8005ddc <__swhatbuf_r+0x42>
 8005dbe:	466a      	mov	r2, sp
 8005dc0:	f000 f8fa 	bl	8005fb8 <_fstat_r>
 8005dc4:	2800      	cmp	r0, #0
 8005dc6:	dbf1      	blt.n	8005dac <__swhatbuf_r+0x12>
 8005dc8:	9a01      	ldr	r2, [sp, #4]
 8005dca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005dce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005dd2:	425a      	negs	r2, r3
 8005dd4:	415a      	adcs	r2, r3
 8005dd6:	602a      	str	r2, [r5, #0]
 8005dd8:	e7ee      	b.n	8005db8 <__swhatbuf_r+0x1e>
 8005dda:	2340      	movs	r3, #64	; 0x40
 8005ddc:	2000      	movs	r0, #0
 8005dde:	6023      	str	r3, [r4, #0]
 8005de0:	b016      	add	sp, #88	; 0x58
 8005de2:	bd70      	pop	{r4, r5, r6, pc}

08005de4 <__smakebuf_r>:
 8005de4:	898b      	ldrh	r3, [r1, #12]
 8005de6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005de8:	079d      	lsls	r5, r3, #30
 8005dea:	4606      	mov	r6, r0
 8005dec:	460c      	mov	r4, r1
 8005dee:	d507      	bpl.n	8005e00 <__smakebuf_r+0x1c>
 8005df0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005df4:	6023      	str	r3, [r4, #0]
 8005df6:	6123      	str	r3, [r4, #16]
 8005df8:	2301      	movs	r3, #1
 8005dfa:	6163      	str	r3, [r4, #20]
 8005dfc:	b002      	add	sp, #8
 8005dfe:	bd70      	pop	{r4, r5, r6, pc}
 8005e00:	ab01      	add	r3, sp, #4
 8005e02:	466a      	mov	r2, sp
 8005e04:	f7ff ffc9 	bl	8005d9a <__swhatbuf_r>
 8005e08:	9900      	ldr	r1, [sp, #0]
 8005e0a:	4605      	mov	r5, r0
 8005e0c:	4630      	mov	r0, r6
 8005e0e:	f7fd fc77 	bl	8003700 <_malloc_r>
 8005e12:	b948      	cbnz	r0, 8005e28 <__smakebuf_r+0x44>
 8005e14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e18:	059a      	lsls	r2, r3, #22
 8005e1a:	d4ef      	bmi.n	8005dfc <__smakebuf_r+0x18>
 8005e1c:	f023 0303 	bic.w	r3, r3, #3
 8005e20:	f043 0302 	orr.w	r3, r3, #2
 8005e24:	81a3      	strh	r3, [r4, #12]
 8005e26:	e7e3      	b.n	8005df0 <__smakebuf_r+0xc>
 8005e28:	4b0d      	ldr	r3, [pc, #52]	; (8005e60 <__smakebuf_r+0x7c>)
 8005e2a:	62b3      	str	r3, [r6, #40]	; 0x28
 8005e2c:	89a3      	ldrh	r3, [r4, #12]
 8005e2e:	6020      	str	r0, [r4, #0]
 8005e30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e34:	81a3      	strh	r3, [r4, #12]
 8005e36:	9b00      	ldr	r3, [sp, #0]
 8005e38:	6163      	str	r3, [r4, #20]
 8005e3a:	9b01      	ldr	r3, [sp, #4]
 8005e3c:	6120      	str	r0, [r4, #16]
 8005e3e:	b15b      	cbz	r3, 8005e58 <__smakebuf_r+0x74>
 8005e40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e44:	4630      	mov	r0, r6
 8005e46:	f000 f8c9 	bl	8005fdc <_isatty_r>
 8005e4a:	b128      	cbz	r0, 8005e58 <__smakebuf_r+0x74>
 8005e4c:	89a3      	ldrh	r3, [r4, #12]
 8005e4e:	f023 0303 	bic.w	r3, r3, #3
 8005e52:	f043 0301 	orr.w	r3, r3, #1
 8005e56:	81a3      	strh	r3, [r4, #12]
 8005e58:	89a0      	ldrh	r0, [r4, #12]
 8005e5a:	4305      	orrs	r5, r0
 8005e5c:	81a5      	strh	r5, [r4, #12]
 8005e5e:	e7cd      	b.n	8005dfc <__smakebuf_r+0x18>
 8005e60:	08005bf9 	.word	0x08005bf9

08005e64 <_raise_r>:
 8005e64:	291f      	cmp	r1, #31
 8005e66:	b538      	push	{r3, r4, r5, lr}
 8005e68:	4604      	mov	r4, r0
 8005e6a:	460d      	mov	r5, r1
 8005e6c:	d904      	bls.n	8005e78 <_raise_r+0x14>
 8005e6e:	2316      	movs	r3, #22
 8005e70:	6003      	str	r3, [r0, #0]
 8005e72:	f04f 30ff 	mov.w	r0, #4294967295
 8005e76:	bd38      	pop	{r3, r4, r5, pc}
 8005e78:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005e7a:	b112      	cbz	r2, 8005e82 <_raise_r+0x1e>
 8005e7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005e80:	b94b      	cbnz	r3, 8005e96 <_raise_r+0x32>
 8005e82:	4620      	mov	r0, r4
 8005e84:	f000 f830 	bl	8005ee8 <_getpid_r>
 8005e88:	462a      	mov	r2, r5
 8005e8a:	4601      	mov	r1, r0
 8005e8c:	4620      	mov	r0, r4
 8005e8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e92:	f000 b817 	b.w	8005ec4 <_kill_r>
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d00a      	beq.n	8005eb0 <_raise_r+0x4c>
 8005e9a:	1c59      	adds	r1, r3, #1
 8005e9c:	d103      	bne.n	8005ea6 <_raise_r+0x42>
 8005e9e:	2316      	movs	r3, #22
 8005ea0:	6003      	str	r3, [r0, #0]
 8005ea2:	2001      	movs	r0, #1
 8005ea4:	e7e7      	b.n	8005e76 <_raise_r+0x12>
 8005ea6:	2400      	movs	r4, #0
 8005ea8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005eac:	4628      	mov	r0, r5
 8005eae:	4798      	blx	r3
 8005eb0:	2000      	movs	r0, #0
 8005eb2:	e7e0      	b.n	8005e76 <_raise_r+0x12>

08005eb4 <raise>:
 8005eb4:	4b02      	ldr	r3, [pc, #8]	; (8005ec0 <raise+0xc>)
 8005eb6:	4601      	mov	r1, r0
 8005eb8:	6818      	ldr	r0, [r3, #0]
 8005eba:	f7ff bfd3 	b.w	8005e64 <_raise_r>
 8005ebe:	bf00      	nop
 8005ec0:	20000014 	.word	0x20000014

08005ec4 <_kill_r>:
 8005ec4:	b538      	push	{r3, r4, r5, lr}
 8005ec6:	4d07      	ldr	r5, [pc, #28]	; (8005ee4 <_kill_r+0x20>)
 8005ec8:	2300      	movs	r3, #0
 8005eca:	4604      	mov	r4, r0
 8005ecc:	4608      	mov	r0, r1
 8005ece:	4611      	mov	r1, r2
 8005ed0:	602b      	str	r3, [r5, #0]
 8005ed2:	f7fc fb23 	bl	800251c <_kill>
 8005ed6:	1c43      	adds	r3, r0, #1
 8005ed8:	d102      	bne.n	8005ee0 <_kill_r+0x1c>
 8005eda:	682b      	ldr	r3, [r5, #0]
 8005edc:	b103      	cbz	r3, 8005ee0 <_kill_r+0x1c>
 8005ede:	6023      	str	r3, [r4, #0]
 8005ee0:	bd38      	pop	{r3, r4, r5, pc}
 8005ee2:	bf00      	nop
 8005ee4:	20000238 	.word	0x20000238

08005ee8 <_getpid_r>:
 8005ee8:	f7fc bb10 	b.w	800250c <_getpid>

08005eec <__sread>:
 8005eec:	b510      	push	{r4, lr}
 8005eee:	460c      	mov	r4, r1
 8005ef0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ef4:	f000 f894 	bl	8006020 <_read_r>
 8005ef8:	2800      	cmp	r0, #0
 8005efa:	bfab      	itete	ge
 8005efc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005efe:	89a3      	ldrhlt	r3, [r4, #12]
 8005f00:	181b      	addge	r3, r3, r0
 8005f02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005f06:	bfac      	ite	ge
 8005f08:	6563      	strge	r3, [r4, #84]	; 0x54
 8005f0a:	81a3      	strhlt	r3, [r4, #12]
 8005f0c:	bd10      	pop	{r4, pc}

08005f0e <__swrite>:
 8005f0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f12:	461f      	mov	r7, r3
 8005f14:	898b      	ldrh	r3, [r1, #12]
 8005f16:	05db      	lsls	r3, r3, #23
 8005f18:	4605      	mov	r5, r0
 8005f1a:	460c      	mov	r4, r1
 8005f1c:	4616      	mov	r6, r2
 8005f1e:	d505      	bpl.n	8005f2c <__swrite+0x1e>
 8005f20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f24:	2302      	movs	r3, #2
 8005f26:	2200      	movs	r2, #0
 8005f28:	f000 f868 	bl	8005ffc <_lseek_r>
 8005f2c:	89a3      	ldrh	r3, [r4, #12]
 8005f2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f36:	81a3      	strh	r3, [r4, #12]
 8005f38:	4632      	mov	r2, r6
 8005f3a:	463b      	mov	r3, r7
 8005f3c:	4628      	mov	r0, r5
 8005f3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f42:	f000 b817 	b.w	8005f74 <_write_r>

08005f46 <__sseek>:
 8005f46:	b510      	push	{r4, lr}
 8005f48:	460c      	mov	r4, r1
 8005f4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f4e:	f000 f855 	bl	8005ffc <_lseek_r>
 8005f52:	1c43      	adds	r3, r0, #1
 8005f54:	89a3      	ldrh	r3, [r4, #12]
 8005f56:	bf15      	itete	ne
 8005f58:	6560      	strne	r0, [r4, #84]	; 0x54
 8005f5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005f5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005f62:	81a3      	strheq	r3, [r4, #12]
 8005f64:	bf18      	it	ne
 8005f66:	81a3      	strhne	r3, [r4, #12]
 8005f68:	bd10      	pop	{r4, pc}

08005f6a <__sclose>:
 8005f6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f6e:	f000 b813 	b.w	8005f98 <_close_r>
	...

08005f74 <_write_r>:
 8005f74:	b538      	push	{r3, r4, r5, lr}
 8005f76:	4d07      	ldr	r5, [pc, #28]	; (8005f94 <_write_r+0x20>)
 8005f78:	4604      	mov	r4, r0
 8005f7a:	4608      	mov	r0, r1
 8005f7c:	4611      	mov	r1, r2
 8005f7e:	2200      	movs	r2, #0
 8005f80:	602a      	str	r2, [r5, #0]
 8005f82:	461a      	mov	r2, r3
 8005f84:	f7fc fb01 	bl	800258a <_write>
 8005f88:	1c43      	adds	r3, r0, #1
 8005f8a:	d102      	bne.n	8005f92 <_write_r+0x1e>
 8005f8c:	682b      	ldr	r3, [r5, #0]
 8005f8e:	b103      	cbz	r3, 8005f92 <_write_r+0x1e>
 8005f90:	6023      	str	r3, [r4, #0]
 8005f92:	bd38      	pop	{r3, r4, r5, pc}
 8005f94:	20000238 	.word	0x20000238

08005f98 <_close_r>:
 8005f98:	b538      	push	{r3, r4, r5, lr}
 8005f9a:	4d06      	ldr	r5, [pc, #24]	; (8005fb4 <_close_r+0x1c>)
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	4604      	mov	r4, r0
 8005fa0:	4608      	mov	r0, r1
 8005fa2:	602b      	str	r3, [r5, #0]
 8005fa4:	f7fc fb0d 	bl	80025c2 <_close>
 8005fa8:	1c43      	adds	r3, r0, #1
 8005faa:	d102      	bne.n	8005fb2 <_close_r+0x1a>
 8005fac:	682b      	ldr	r3, [r5, #0]
 8005fae:	b103      	cbz	r3, 8005fb2 <_close_r+0x1a>
 8005fb0:	6023      	str	r3, [r4, #0]
 8005fb2:	bd38      	pop	{r3, r4, r5, pc}
 8005fb4:	20000238 	.word	0x20000238

08005fb8 <_fstat_r>:
 8005fb8:	b538      	push	{r3, r4, r5, lr}
 8005fba:	4d07      	ldr	r5, [pc, #28]	; (8005fd8 <_fstat_r+0x20>)
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	4604      	mov	r4, r0
 8005fc0:	4608      	mov	r0, r1
 8005fc2:	4611      	mov	r1, r2
 8005fc4:	602b      	str	r3, [r5, #0]
 8005fc6:	f7fc fb08 	bl	80025da <_fstat>
 8005fca:	1c43      	adds	r3, r0, #1
 8005fcc:	d102      	bne.n	8005fd4 <_fstat_r+0x1c>
 8005fce:	682b      	ldr	r3, [r5, #0]
 8005fd0:	b103      	cbz	r3, 8005fd4 <_fstat_r+0x1c>
 8005fd2:	6023      	str	r3, [r4, #0]
 8005fd4:	bd38      	pop	{r3, r4, r5, pc}
 8005fd6:	bf00      	nop
 8005fd8:	20000238 	.word	0x20000238

08005fdc <_isatty_r>:
 8005fdc:	b538      	push	{r3, r4, r5, lr}
 8005fde:	4d06      	ldr	r5, [pc, #24]	; (8005ff8 <_isatty_r+0x1c>)
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	4604      	mov	r4, r0
 8005fe4:	4608      	mov	r0, r1
 8005fe6:	602b      	str	r3, [r5, #0]
 8005fe8:	f7fc fb07 	bl	80025fa <_isatty>
 8005fec:	1c43      	adds	r3, r0, #1
 8005fee:	d102      	bne.n	8005ff6 <_isatty_r+0x1a>
 8005ff0:	682b      	ldr	r3, [r5, #0]
 8005ff2:	b103      	cbz	r3, 8005ff6 <_isatty_r+0x1a>
 8005ff4:	6023      	str	r3, [r4, #0]
 8005ff6:	bd38      	pop	{r3, r4, r5, pc}
 8005ff8:	20000238 	.word	0x20000238

08005ffc <_lseek_r>:
 8005ffc:	b538      	push	{r3, r4, r5, lr}
 8005ffe:	4d07      	ldr	r5, [pc, #28]	; (800601c <_lseek_r+0x20>)
 8006000:	4604      	mov	r4, r0
 8006002:	4608      	mov	r0, r1
 8006004:	4611      	mov	r1, r2
 8006006:	2200      	movs	r2, #0
 8006008:	602a      	str	r2, [r5, #0]
 800600a:	461a      	mov	r2, r3
 800600c:	f7fc fb00 	bl	8002610 <_lseek>
 8006010:	1c43      	adds	r3, r0, #1
 8006012:	d102      	bne.n	800601a <_lseek_r+0x1e>
 8006014:	682b      	ldr	r3, [r5, #0]
 8006016:	b103      	cbz	r3, 800601a <_lseek_r+0x1e>
 8006018:	6023      	str	r3, [r4, #0]
 800601a:	bd38      	pop	{r3, r4, r5, pc}
 800601c:	20000238 	.word	0x20000238

08006020 <_read_r>:
 8006020:	b538      	push	{r3, r4, r5, lr}
 8006022:	4d07      	ldr	r5, [pc, #28]	; (8006040 <_read_r+0x20>)
 8006024:	4604      	mov	r4, r0
 8006026:	4608      	mov	r0, r1
 8006028:	4611      	mov	r1, r2
 800602a:	2200      	movs	r2, #0
 800602c:	602a      	str	r2, [r5, #0]
 800602e:	461a      	mov	r2, r3
 8006030:	f7fc fa8e 	bl	8002550 <_read>
 8006034:	1c43      	adds	r3, r0, #1
 8006036:	d102      	bne.n	800603e <_read_r+0x1e>
 8006038:	682b      	ldr	r3, [r5, #0]
 800603a:	b103      	cbz	r3, 800603e <_read_r+0x1e>
 800603c:	6023      	str	r3, [r4, #0]
 800603e:	bd38      	pop	{r3, r4, r5, pc}
 8006040:	20000238 	.word	0x20000238
 8006044:	00000000 	.word	0x00000000

08006048 <cos>:
 8006048:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800604a:	ec53 2b10 	vmov	r2, r3, d0
 800604e:	4826      	ldr	r0, [pc, #152]	; (80060e8 <cos+0xa0>)
 8006050:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006054:	4281      	cmp	r1, r0
 8006056:	dc06      	bgt.n	8006066 <cos+0x1e>
 8006058:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80060e0 <cos+0x98>
 800605c:	b005      	add	sp, #20
 800605e:	f85d eb04 	ldr.w	lr, [sp], #4
 8006062:	f000 baa9 	b.w	80065b8 <__kernel_cos>
 8006066:	4821      	ldr	r0, [pc, #132]	; (80060ec <cos+0xa4>)
 8006068:	4281      	cmp	r1, r0
 800606a:	dd09      	ble.n	8006080 <cos+0x38>
 800606c:	ee10 0a10 	vmov	r0, s0
 8006070:	4619      	mov	r1, r3
 8006072:	f7fa f911 	bl	8000298 <__aeabi_dsub>
 8006076:	ec41 0b10 	vmov	d0, r0, r1
 800607a:	b005      	add	sp, #20
 800607c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006080:	4668      	mov	r0, sp
 8006082:	f000 f88d 	bl	80061a0 <__ieee754_rem_pio2>
 8006086:	f000 0003 	and.w	r0, r0, #3
 800608a:	2801      	cmp	r0, #1
 800608c:	d00b      	beq.n	80060a6 <cos+0x5e>
 800608e:	2802      	cmp	r0, #2
 8006090:	d016      	beq.n	80060c0 <cos+0x78>
 8006092:	b9e0      	cbnz	r0, 80060ce <cos+0x86>
 8006094:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006098:	ed9d 0b00 	vldr	d0, [sp]
 800609c:	f000 fa8c 	bl	80065b8 <__kernel_cos>
 80060a0:	ec51 0b10 	vmov	r0, r1, d0
 80060a4:	e7e7      	b.n	8006076 <cos+0x2e>
 80060a6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80060aa:	ed9d 0b00 	vldr	d0, [sp]
 80060ae:	f000 fe9b 	bl	8006de8 <__kernel_sin>
 80060b2:	ec53 2b10 	vmov	r2, r3, d0
 80060b6:	ee10 0a10 	vmov	r0, s0
 80060ba:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80060be:	e7da      	b.n	8006076 <cos+0x2e>
 80060c0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80060c4:	ed9d 0b00 	vldr	d0, [sp]
 80060c8:	f000 fa76 	bl	80065b8 <__kernel_cos>
 80060cc:	e7f1      	b.n	80060b2 <cos+0x6a>
 80060ce:	ed9d 1b02 	vldr	d1, [sp, #8]
 80060d2:	ed9d 0b00 	vldr	d0, [sp]
 80060d6:	2001      	movs	r0, #1
 80060d8:	f000 fe86 	bl	8006de8 <__kernel_sin>
 80060dc:	e7e0      	b.n	80060a0 <cos+0x58>
 80060de:	bf00      	nop
	...
 80060e8:	3fe921fb 	.word	0x3fe921fb
 80060ec:	7fefffff 	.word	0x7fefffff

080060f0 <sin>:
 80060f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80060f2:	ec53 2b10 	vmov	r2, r3, d0
 80060f6:	4828      	ldr	r0, [pc, #160]	; (8006198 <sin+0xa8>)
 80060f8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80060fc:	4281      	cmp	r1, r0
 80060fe:	dc07      	bgt.n	8006110 <sin+0x20>
 8006100:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8006190 <sin+0xa0>
 8006104:	2000      	movs	r0, #0
 8006106:	b005      	add	sp, #20
 8006108:	f85d eb04 	ldr.w	lr, [sp], #4
 800610c:	f000 be6c 	b.w	8006de8 <__kernel_sin>
 8006110:	4822      	ldr	r0, [pc, #136]	; (800619c <sin+0xac>)
 8006112:	4281      	cmp	r1, r0
 8006114:	dd09      	ble.n	800612a <sin+0x3a>
 8006116:	ee10 0a10 	vmov	r0, s0
 800611a:	4619      	mov	r1, r3
 800611c:	f7fa f8bc 	bl	8000298 <__aeabi_dsub>
 8006120:	ec41 0b10 	vmov	d0, r0, r1
 8006124:	b005      	add	sp, #20
 8006126:	f85d fb04 	ldr.w	pc, [sp], #4
 800612a:	4668      	mov	r0, sp
 800612c:	f000 f838 	bl	80061a0 <__ieee754_rem_pio2>
 8006130:	f000 0003 	and.w	r0, r0, #3
 8006134:	2801      	cmp	r0, #1
 8006136:	d00c      	beq.n	8006152 <sin+0x62>
 8006138:	2802      	cmp	r0, #2
 800613a:	d011      	beq.n	8006160 <sin+0x70>
 800613c:	b9f0      	cbnz	r0, 800617c <sin+0x8c>
 800613e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006142:	ed9d 0b00 	vldr	d0, [sp]
 8006146:	2001      	movs	r0, #1
 8006148:	f000 fe4e 	bl	8006de8 <__kernel_sin>
 800614c:	ec51 0b10 	vmov	r0, r1, d0
 8006150:	e7e6      	b.n	8006120 <sin+0x30>
 8006152:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006156:	ed9d 0b00 	vldr	d0, [sp]
 800615a:	f000 fa2d 	bl	80065b8 <__kernel_cos>
 800615e:	e7f5      	b.n	800614c <sin+0x5c>
 8006160:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006164:	ed9d 0b00 	vldr	d0, [sp]
 8006168:	2001      	movs	r0, #1
 800616a:	f000 fe3d 	bl	8006de8 <__kernel_sin>
 800616e:	ec53 2b10 	vmov	r2, r3, d0
 8006172:	ee10 0a10 	vmov	r0, s0
 8006176:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800617a:	e7d1      	b.n	8006120 <sin+0x30>
 800617c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006180:	ed9d 0b00 	vldr	d0, [sp]
 8006184:	f000 fa18 	bl	80065b8 <__kernel_cos>
 8006188:	e7f1      	b.n	800616e <sin+0x7e>
 800618a:	bf00      	nop
 800618c:	f3af 8000 	nop.w
	...
 8006198:	3fe921fb 	.word	0x3fe921fb
 800619c:	7fefffff 	.word	0x7fefffff

080061a0 <__ieee754_rem_pio2>:
 80061a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061a4:	ed2d 8b02 	vpush	{d8}
 80061a8:	ec55 4b10 	vmov	r4, r5, d0
 80061ac:	4bca      	ldr	r3, [pc, #808]	; (80064d8 <__ieee754_rem_pio2+0x338>)
 80061ae:	b08b      	sub	sp, #44	; 0x2c
 80061b0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80061b4:	4598      	cmp	r8, r3
 80061b6:	4682      	mov	sl, r0
 80061b8:	9502      	str	r5, [sp, #8]
 80061ba:	dc08      	bgt.n	80061ce <__ieee754_rem_pio2+0x2e>
 80061bc:	2200      	movs	r2, #0
 80061be:	2300      	movs	r3, #0
 80061c0:	ed80 0b00 	vstr	d0, [r0]
 80061c4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80061c8:	f04f 0b00 	mov.w	fp, #0
 80061cc:	e028      	b.n	8006220 <__ieee754_rem_pio2+0x80>
 80061ce:	4bc3      	ldr	r3, [pc, #780]	; (80064dc <__ieee754_rem_pio2+0x33c>)
 80061d0:	4598      	cmp	r8, r3
 80061d2:	dc78      	bgt.n	80062c6 <__ieee754_rem_pio2+0x126>
 80061d4:	9b02      	ldr	r3, [sp, #8]
 80061d6:	4ec2      	ldr	r6, [pc, #776]	; (80064e0 <__ieee754_rem_pio2+0x340>)
 80061d8:	2b00      	cmp	r3, #0
 80061da:	ee10 0a10 	vmov	r0, s0
 80061de:	a3b0      	add	r3, pc, #704	; (adr r3, 80064a0 <__ieee754_rem_pio2+0x300>)
 80061e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e4:	4629      	mov	r1, r5
 80061e6:	dd39      	ble.n	800625c <__ieee754_rem_pio2+0xbc>
 80061e8:	f7fa f856 	bl	8000298 <__aeabi_dsub>
 80061ec:	45b0      	cmp	r8, r6
 80061ee:	4604      	mov	r4, r0
 80061f0:	460d      	mov	r5, r1
 80061f2:	d01b      	beq.n	800622c <__ieee754_rem_pio2+0x8c>
 80061f4:	a3ac      	add	r3, pc, #688	; (adr r3, 80064a8 <__ieee754_rem_pio2+0x308>)
 80061f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061fa:	f7fa f84d 	bl	8000298 <__aeabi_dsub>
 80061fe:	4602      	mov	r2, r0
 8006200:	460b      	mov	r3, r1
 8006202:	e9ca 2300 	strd	r2, r3, [sl]
 8006206:	4620      	mov	r0, r4
 8006208:	4629      	mov	r1, r5
 800620a:	f7fa f845 	bl	8000298 <__aeabi_dsub>
 800620e:	a3a6      	add	r3, pc, #664	; (adr r3, 80064a8 <__ieee754_rem_pio2+0x308>)
 8006210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006214:	f7fa f840 	bl	8000298 <__aeabi_dsub>
 8006218:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800621c:	f04f 0b01 	mov.w	fp, #1
 8006220:	4658      	mov	r0, fp
 8006222:	b00b      	add	sp, #44	; 0x2c
 8006224:	ecbd 8b02 	vpop	{d8}
 8006228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800622c:	a3a0      	add	r3, pc, #640	; (adr r3, 80064b0 <__ieee754_rem_pio2+0x310>)
 800622e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006232:	f7fa f831 	bl	8000298 <__aeabi_dsub>
 8006236:	a3a0      	add	r3, pc, #640	; (adr r3, 80064b8 <__ieee754_rem_pio2+0x318>)
 8006238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800623c:	4604      	mov	r4, r0
 800623e:	460d      	mov	r5, r1
 8006240:	f7fa f82a 	bl	8000298 <__aeabi_dsub>
 8006244:	4602      	mov	r2, r0
 8006246:	460b      	mov	r3, r1
 8006248:	e9ca 2300 	strd	r2, r3, [sl]
 800624c:	4620      	mov	r0, r4
 800624e:	4629      	mov	r1, r5
 8006250:	f7fa f822 	bl	8000298 <__aeabi_dsub>
 8006254:	a398      	add	r3, pc, #608	; (adr r3, 80064b8 <__ieee754_rem_pio2+0x318>)
 8006256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800625a:	e7db      	b.n	8006214 <__ieee754_rem_pio2+0x74>
 800625c:	f7fa f81e 	bl	800029c <__adddf3>
 8006260:	45b0      	cmp	r8, r6
 8006262:	4604      	mov	r4, r0
 8006264:	460d      	mov	r5, r1
 8006266:	d016      	beq.n	8006296 <__ieee754_rem_pio2+0xf6>
 8006268:	a38f      	add	r3, pc, #572	; (adr r3, 80064a8 <__ieee754_rem_pio2+0x308>)
 800626a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800626e:	f7fa f815 	bl	800029c <__adddf3>
 8006272:	4602      	mov	r2, r0
 8006274:	460b      	mov	r3, r1
 8006276:	e9ca 2300 	strd	r2, r3, [sl]
 800627a:	4620      	mov	r0, r4
 800627c:	4629      	mov	r1, r5
 800627e:	f7fa f80b 	bl	8000298 <__aeabi_dsub>
 8006282:	a389      	add	r3, pc, #548	; (adr r3, 80064a8 <__ieee754_rem_pio2+0x308>)
 8006284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006288:	f7fa f808 	bl	800029c <__adddf3>
 800628c:	f04f 3bff 	mov.w	fp, #4294967295
 8006290:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006294:	e7c4      	b.n	8006220 <__ieee754_rem_pio2+0x80>
 8006296:	a386      	add	r3, pc, #536	; (adr r3, 80064b0 <__ieee754_rem_pio2+0x310>)
 8006298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800629c:	f7f9 fffe 	bl	800029c <__adddf3>
 80062a0:	a385      	add	r3, pc, #532	; (adr r3, 80064b8 <__ieee754_rem_pio2+0x318>)
 80062a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a6:	4604      	mov	r4, r0
 80062a8:	460d      	mov	r5, r1
 80062aa:	f7f9 fff7 	bl	800029c <__adddf3>
 80062ae:	4602      	mov	r2, r0
 80062b0:	460b      	mov	r3, r1
 80062b2:	e9ca 2300 	strd	r2, r3, [sl]
 80062b6:	4620      	mov	r0, r4
 80062b8:	4629      	mov	r1, r5
 80062ba:	f7f9 ffed 	bl	8000298 <__aeabi_dsub>
 80062be:	a37e      	add	r3, pc, #504	; (adr r3, 80064b8 <__ieee754_rem_pio2+0x318>)
 80062c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c4:	e7e0      	b.n	8006288 <__ieee754_rem_pio2+0xe8>
 80062c6:	4b87      	ldr	r3, [pc, #540]	; (80064e4 <__ieee754_rem_pio2+0x344>)
 80062c8:	4598      	cmp	r8, r3
 80062ca:	f300 80d9 	bgt.w	8006480 <__ieee754_rem_pio2+0x2e0>
 80062ce:	f000 fe49 	bl	8006f64 <fabs>
 80062d2:	ec55 4b10 	vmov	r4, r5, d0
 80062d6:	ee10 0a10 	vmov	r0, s0
 80062da:	a379      	add	r3, pc, #484	; (adr r3, 80064c0 <__ieee754_rem_pio2+0x320>)
 80062dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e0:	4629      	mov	r1, r5
 80062e2:	f7fa f991 	bl	8000608 <__aeabi_dmul>
 80062e6:	4b80      	ldr	r3, [pc, #512]	; (80064e8 <__ieee754_rem_pio2+0x348>)
 80062e8:	2200      	movs	r2, #0
 80062ea:	f7f9 ffd7 	bl	800029c <__adddf3>
 80062ee:	f7fa fc3b 	bl	8000b68 <__aeabi_d2iz>
 80062f2:	4683      	mov	fp, r0
 80062f4:	f7fa f91e 	bl	8000534 <__aeabi_i2d>
 80062f8:	4602      	mov	r2, r0
 80062fa:	460b      	mov	r3, r1
 80062fc:	ec43 2b18 	vmov	d8, r2, r3
 8006300:	a367      	add	r3, pc, #412	; (adr r3, 80064a0 <__ieee754_rem_pio2+0x300>)
 8006302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006306:	f7fa f97f 	bl	8000608 <__aeabi_dmul>
 800630a:	4602      	mov	r2, r0
 800630c:	460b      	mov	r3, r1
 800630e:	4620      	mov	r0, r4
 8006310:	4629      	mov	r1, r5
 8006312:	f7f9 ffc1 	bl	8000298 <__aeabi_dsub>
 8006316:	a364      	add	r3, pc, #400	; (adr r3, 80064a8 <__ieee754_rem_pio2+0x308>)
 8006318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800631c:	4606      	mov	r6, r0
 800631e:	460f      	mov	r7, r1
 8006320:	ec51 0b18 	vmov	r0, r1, d8
 8006324:	f7fa f970 	bl	8000608 <__aeabi_dmul>
 8006328:	f1bb 0f1f 	cmp.w	fp, #31
 800632c:	4604      	mov	r4, r0
 800632e:	460d      	mov	r5, r1
 8006330:	dc0d      	bgt.n	800634e <__ieee754_rem_pio2+0x1ae>
 8006332:	4b6e      	ldr	r3, [pc, #440]	; (80064ec <__ieee754_rem_pio2+0x34c>)
 8006334:	f10b 32ff 	add.w	r2, fp, #4294967295
 8006338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800633c:	4543      	cmp	r3, r8
 800633e:	d006      	beq.n	800634e <__ieee754_rem_pio2+0x1ae>
 8006340:	4622      	mov	r2, r4
 8006342:	462b      	mov	r3, r5
 8006344:	4630      	mov	r0, r6
 8006346:	4639      	mov	r1, r7
 8006348:	f7f9 ffa6 	bl	8000298 <__aeabi_dsub>
 800634c:	e00f      	b.n	800636e <__ieee754_rem_pio2+0x1ce>
 800634e:	462b      	mov	r3, r5
 8006350:	4622      	mov	r2, r4
 8006352:	4630      	mov	r0, r6
 8006354:	4639      	mov	r1, r7
 8006356:	f7f9 ff9f 	bl	8000298 <__aeabi_dsub>
 800635a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800635e:	9303      	str	r3, [sp, #12]
 8006360:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006364:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8006368:	f1b8 0f10 	cmp.w	r8, #16
 800636c:	dc02      	bgt.n	8006374 <__ieee754_rem_pio2+0x1d4>
 800636e:	e9ca 0100 	strd	r0, r1, [sl]
 8006372:	e039      	b.n	80063e8 <__ieee754_rem_pio2+0x248>
 8006374:	a34e      	add	r3, pc, #312	; (adr r3, 80064b0 <__ieee754_rem_pio2+0x310>)
 8006376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800637a:	ec51 0b18 	vmov	r0, r1, d8
 800637e:	f7fa f943 	bl	8000608 <__aeabi_dmul>
 8006382:	4604      	mov	r4, r0
 8006384:	460d      	mov	r5, r1
 8006386:	4602      	mov	r2, r0
 8006388:	460b      	mov	r3, r1
 800638a:	4630      	mov	r0, r6
 800638c:	4639      	mov	r1, r7
 800638e:	f7f9 ff83 	bl	8000298 <__aeabi_dsub>
 8006392:	4602      	mov	r2, r0
 8006394:	460b      	mov	r3, r1
 8006396:	4680      	mov	r8, r0
 8006398:	4689      	mov	r9, r1
 800639a:	4630      	mov	r0, r6
 800639c:	4639      	mov	r1, r7
 800639e:	f7f9 ff7b 	bl	8000298 <__aeabi_dsub>
 80063a2:	4622      	mov	r2, r4
 80063a4:	462b      	mov	r3, r5
 80063a6:	f7f9 ff77 	bl	8000298 <__aeabi_dsub>
 80063aa:	a343      	add	r3, pc, #268	; (adr r3, 80064b8 <__ieee754_rem_pio2+0x318>)
 80063ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b0:	4604      	mov	r4, r0
 80063b2:	460d      	mov	r5, r1
 80063b4:	ec51 0b18 	vmov	r0, r1, d8
 80063b8:	f7fa f926 	bl	8000608 <__aeabi_dmul>
 80063bc:	4622      	mov	r2, r4
 80063be:	462b      	mov	r3, r5
 80063c0:	f7f9 ff6a 	bl	8000298 <__aeabi_dsub>
 80063c4:	4602      	mov	r2, r0
 80063c6:	460b      	mov	r3, r1
 80063c8:	4604      	mov	r4, r0
 80063ca:	460d      	mov	r5, r1
 80063cc:	4640      	mov	r0, r8
 80063ce:	4649      	mov	r1, r9
 80063d0:	f7f9 ff62 	bl	8000298 <__aeabi_dsub>
 80063d4:	9a03      	ldr	r2, [sp, #12]
 80063d6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80063da:	1ad3      	subs	r3, r2, r3
 80063dc:	2b31      	cmp	r3, #49	; 0x31
 80063de:	dc24      	bgt.n	800642a <__ieee754_rem_pio2+0x28a>
 80063e0:	e9ca 0100 	strd	r0, r1, [sl]
 80063e4:	4646      	mov	r6, r8
 80063e6:	464f      	mov	r7, r9
 80063e8:	e9da 8900 	ldrd	r8, r9, [sl]
 80063ec:	4630      	mov	r0, r6
 80063ee:	4642      	mov	r2, r8
 80063f0:	464b      	mov	r3, r9
 80063f2:	4639      	mov	r1, r7
 80063f4:	f7f9 ff50 	bl	8000298 <__aeabi_dsub>
 80063f8:	462b      	mov	r3, r5
 80063fa:	4622      	mov	r2, r4
 80063fc:	f7f9 ff4c 	bl	8000298 <__aeabi_dsub>
 8006400:	9b02      	ldr	r3, [sp, #8]
 8006402:	2b00      	cmp	r3, #0
 8006404:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006408:	f6bf af0a 	bge.w	8006220 <__ieee754_rem_pio2+0x80>
 800640c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006410:	f8ca 3004 	str.w	r3, [sl, #4]
 8006414:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006418:	f8ca 8000 	str.w	r8, [sl]
 800641c:	f8ca 0008 	str.w	r0, [sl, #8]
 8006420:	f8ca 300c 	str.w	r3, [sl, #12]
 8006424:	f1cb 0b00 	rsb	fp, fp, #0
 8006428:	e6fa      	b.n	8006220 <__ieee754_rem_pio2+0x80>
 800642a:	a327      	add	r3, pc, #156	; (adr r3, 80064c8 <__ieee754_rem_pio2+0x328>)
 800642c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006430:	ec51 0b18 	vmov	r0, r1, d8
 8006434:	f7fa f8e8 	bl	8000608 <__aeabi_dmul>
 8006438:	4604      	mov	r4, r0
 800643a:	460d      	mov	r5, r1
 800643c:	4602      	mov	r2, r0
 800643e:	460b      	mov	r3, r1
 8006440:	4640      	mov	r0, r8
 8006442:	4649      	mov	r1, r9
 8006444:	f7f9 ff28 	bl	8000298 <__aeabi_dsub>
 8006448:	4602      	mov	r2, r0
 800644a:	460b      	mov	r3, r1
 800644c:	4606      	mov	r6, r0
 800644e:	460f      	mov	r7, r1
 8006450:	4640      	mov	r0, r8
 8006452:	4649      	mov	r1, r9
 8006454:	f7f9 ff20 	bl	8000298 <__aeabi_dsub>
 8006458:	4622      	mov	r2, r4
 800645a:	462b      	mov	r3, r5
 800645c:	f7f9 ff1c 	bl	8000298 <__aeabi_dsub>
 8006460:	a31b      	add	r3, pc, #108	; (adr r3, 80064d0 <__ieee754_rem_pio2+0x330>)
 8006462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006466:	4604      	mov	r4, r0
 8006468:	460d      	mov	r5, r1
 800646a:	ec51 0b18 	vmov	r0, r1, d8
 800646e:	f7fa f8cb 	bl	8000608 <__aeabi_dmul>
 8006472:	4622      	mov	r2, r4
 8006474:	462b      	mov	r3, r5
 8006476:	f7f9 ff0f 	bl	8000298 <__aeabi_dsub>
 800647a:	4604      	mov	r4, r0
 800647c:	460d      	mov	r5, r1
 800647e:	e75f      	b.n	8006340 <__ieee754_rem_pio2+0x1a0>
 8006480:	4b1b      	ldr	r3, [pc, #108]	; (80064f0 <__ieee754_rem_pio2+0x350>)
 8006482:	4598      	cmp	r8, r3
 8006484:	dd36      	ble.n	80064f4 <__ieee754_rem_pio2+0x354>
 8006486:	ee10 2a10 	vmov	r2, s0
 800648a:	462b      	mov	r3, r5
 800648c:	4620      	mov	r0, r4
 800648e:	4629      	mov	r1, r5
 8006490:	f7f9 ff02 	bl	8000298 <__aeabi_dsub>
 8006494:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006498:	e9ca 0100 	strd	r0, r1, [sl]
 800649c:	e694      	b.n	80061c8 <__ieee754_rem_pio2+0x28>
 800649e:	bf00      	nop
 80064a0:	54400000 	.word	0x54400000
 80064a4:	3ff921fb 	.word	0x3ff921fb
 80064a8:	1a626331 	.word	0x1a626331
 80064ac:	3dd0b461 	.word	0x3dd0b461
 80064b0:	1a600000 	.word	0x1a600000
 80064b4:	3dd0b461 	.word	0x3dd0b461
 80064b8:	2e037073 	.word	0x2e037073
 80064bc:	3ba3198a 	.word	0x3ba3198a
 80064c0:	6dc9c883 	.word	0x6dc9c883
 80064c4:	3fe45f30 	.word	0x3fe45f30
 80064c8:	2e000000 	.word	0x2e000000
 80064cc:	3ba3198a 	.word	0x3ba3198a
 80064d0:	252049c1 	.word	0x252049c1
 80064d4:	397b839a 	.word	0x397b839a
 80064d8:	3fe921fb 	.word	0x3fe921fb
 80064dc:	4002d97b 	.word	0x4002d97b
 80064e0:	3ff921fb 	.word	0x3ff921fb
 80064e4:	413921fb 	.word	0x413921fb
 80064e8:	3fe00000 	.word	0x3fe00000
 80064ec:	0800a2e4 	.word	0x0800a2e4
 80064f0:	7fefffff 	.word	0x7fefffff
 80064f4:	ea4f 5428 	mov.w	r4, r8, asr #20
 80064f8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80064fc:	ee10 0a10 	vmov	r0, s0
 8006500:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8006504:	ee10 6a10 	vmov	r6, s0
 8006508:	460f      	mov	r7, r1
 800650a:	f7fa fb2d 	bl	8000b68 <__aeabi_d2iz>
 800650e:	f7fa f811 	bl	8000534 <__aeabi_i2d>
 8006512:	4602      	mov	r2, r0
 8006514:	460b      	mov	r3, r1
 8006516:	4630      	mov	r0, r6
 8006518:	4639      	mov	r1, r7
 800651a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800651e:	f7f9 febb 	bl	8000298 <__aeabi_dsub>
 8006522:	4b23      	ldr	r3, [pc, #140]	; (80065b0 <__ieee754_rem_pio2+0x410>)
 8006524:	2200      	movs	r2, #0
 8006526:	f7fa f86f 	bl	8000608 <__aeabi_dmul>
 800652a:	460f      	mov	r7, r1
 800652c:	4606      	mov	r6, r0
 800652e:	f7fa fb1b 	bl	8000b68 <__aeabi_d2iz>
 8006532:	f7f9 ffff 	bl	8000534 <__aeabi_i2d>
 8006536:	4602      	mov	r2, r0
 8006538:	460b      	mov	r3, r1
 800653a:	4630      	mov	r0, r6
 800653c:	4639      	mov	r1, r7
 800653e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006542:	f7f9 fea9 	bl	8000298 <__aeabi_dsub>
 8006546:	4b1a      	ldr	r3, [pc, #104]	; (80065b0 <__ieee754_rem_pio2+0x410>)
 8006548:	2200      	movs	r2, #0
 800654a:	f7fa f85d 	bl	8000608 <__aeabi_dmul>
 800654e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006552:	ad04      	add	r5, sp, #16
 8006554:	f04f 0803 	mov.w	r8, #3
 8006558:	46a9      	mov	r9, r5
 800655a:	2600      	movs	r6, #0
 800655c:	2700      	movs	r7, #0
 800655e:	4632      	mov	r2, r6
 8006560:	463b      	mov	r3, r7
 8006562:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8006566:	46c3      	mov	fp, r8
 8006568:	3d08      	subs	r5, #8
 800656a:	f108 38ff 	add.w	r8, r8, #4294967295
 800656e:	f7fa fab3 	bl	8000ad8 <__aeabi_dcmpeq>
 8006572:	2800      	cmp	r0, #0
 8006574:	d1f3      	bne.n	800655e <__ieee754_rem_pio2+0x3be>
 8006576:	4b0f      	ldr	r3, [pc, #60]	; (80065b4 <__ieee754_rem_pio2+0x414>)
 8006578:	9301      	str	r3, [sp, #4]
 800657a:	2302      	movs	r3, #2
 800657c:	9300      	str	r3, [sp, #0]
 800657e:	4622      	mov	r2, r4
 8006580:	465b      	mov	r3, fp
 8006582:	4651      	mov	r1, sl
 8006584:	4648      	mov	r0, r9
 8006586:	f000 f8df 	bl	8006748 <__kernel_rem_pio2>
 800658a:	9b02      	ldr	r3, [sp, #8]
 800658c:	2b00      	cmp	r3, #0
 800658e:	4683      	mov	fp, r0
 8006590:	f6bf ae46 	bge.w	8006220 <__ieee754_rem_pio2+0x80>
 8006594:	e9da 2100 	ldrd	r2, r1, [sl]
 8006598:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800659c:	e9ca 2300 	strd	r2, r3, [sl]
 80065a0:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80065a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80065a8:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80065ac:	e73a      	b.n	8006424 <__ieee754_rem_pio2+0x284>
 80065ae:	bf00      	nop
 80065b0:	41700000 	.word	0x41700000
 80065b4:	0800a364 	.word	0x0800a364

080065b8 <__kernel_cos>:
 80065b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065bc:	ec57 6b10 	vmov	r6, r7, d0
 80065c0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80065c4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80065c8:	ed8d 1b00 	vstr	d1, [sp]
 80065cc:	da07      	bge.n	80065de <__kernel_cos+0x26>
 80065ce:	ee10 0a10 	vmov	r0, s0
 80065d2:	4639      	mov	r1, r7
 80065d4:	f7fa fac8 	bl	8000b68 <__aeabi_d2iz>
 80065d8:	2800      	cmp	r0, #0
 80065da:	f000 8088 	beq.w	80066ee <__kernel_cos+0x136>
 80065de:	4632      	mov	r2, r6
 80065e0:	463b      	mov	r3, r7
 80065e2:	4630      	mov	r0, r6
 80065e4:	4639      	mov	r1, r7
 80065e6:	f7fa f80f 	bl	8000608 <__aeabi_dmul>
 80065ea:	4b51      	ldr	r3, [pc, #324]	; (8006730 <__kernel_cos+0x178>)
 80065ec:	2200      	movs	r2, #0
 80065ee:	4604      	mov	r4, r0
 80065f0:	460d      	mov	r5, r1
 80065f2:	f7fa f809 	bl	8000608 <__aeabi_dmul>
 80065f6:	a340      	add	r3, pc, #256	; (adr r3, 80066f8 <__kernel_cos+0x140>)
 80065f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065fc:	4682      	mov	sl, r0
 80065fe:	468b      	mov	fp, r1
 8006600:	4620      	mov	r0, r4
 8006602:	4629      	mov	r1, r5
 8006604:	f7fa f800 	bl	8000608 <__aeabi_dmul>
 8006608:	a33d      	add	r3, pc, #244	; (adr r3, 8006700 <__kernel_cos+0x148>)
 800660a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800660e:	f7f9 fe45 	bl	800029c <__adddf3>
 8006612:	4622      	mov	r2, r4
 8006614:	462b      	mov	r3, r5
 8006616:	f7f9 fff7 	bl	8000608 <__aeabi_dmul>
 800661a:	a33b      	add	r3, pc, #236	; (adr r3, 8006708 <__kernel_cos+0x150>)
 800661c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006620:	f7f9 fe3a 	bl	8000298 <__aeabi_dsub>
 8006624:	4622      	mov	r2, r4
 8006626:	462b      	mov	r3, r5
 8006628:	f7f9 ffee 	bl	8000608 <__aeabi_dmul>
 800662c:	a338      	add	r3, pc, #224	; (adr r3, 8006710 <__kernel_cos+0x158>)
 800662e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006632:	f7f9 fe33 	bl	800029c <__adddf3>
 8006636:	4622      	mov	r2, r4
 8006638:	462b      	mov	r3, r5
 800663a:	f7f9 ffe5 	bl	8000608 <__aeabi_dmul>
 800663e:	a336      	add	r3, pc, #216	; (adr r3, 8006718 <__kernel_cos+0x160>)
 8006640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006644:	f7f9 fe28 	bl	8000298 <__aeabi_dsub>
 8006648:	4622      	mov	r2, r4
 800664a:	462b      	mov	r3, r5
 800664c:	f7f9 ffdc 	bl	8000608 <__aeabi_dmul>
 8006650:	a333      	add	r3, pc, #204	; (adr r3, 8006720 <__kernel_cos+0x168>)
 8006652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006656:	f7f9 fe21 	bl	800029c <__adddf3>
 800665a:	4622      	mov	r2, r4
 800665c:	462b      	mov	r3, r5
 800665e:	f7f9 ffd3 	bl	8000608 <__aeabi_dmul>
 8006662:	4622      	mov	r2, r4
 8006664:	462b      	mov	r3, r5
 8006666:	f7f9 ffcf 	bl	8000608 <__aeabi_dmul>
 800666a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800666e:	4604      	mov	r4, r0
 8006670:	460d      	mov	r5, r1
 8006672:	4630      	mov	r0, r6
 8006674:	4639      	mov	r1, r7
 8006676:	f7f9 ffc7 	bl	8000608 <__aeabi_dmul>
 800667a:	460b      	mov	r3, r1
 800667c:	4602      	mov	r2, r0
 800667e:	4629      	mov	r1, r5
 8006680:	4620      	mov	r0, r4
 8006682:	f7f9 fe09 	bl	8000298 <__aeabi_dsub>
 8006686:	4b2b      	ldr	r3, [pc, #172]	; (8006734 <__kernel_cos+0x17c>)
 8006688:	4598      	cmp	r8, r3
 800668a:	4606      	mov	r6, r0
 800668c:	460f      	mov	r7, r1
 800668e:	dc10      	bgt.n	80066b2 <__kernel_cos+0xfa>
 8006690:	4602      	mov	r2, r0
 8006692:	460b      	mov	r3, r1
 8006694:	4650      	mov	r0, sl
 8006696:	4659      	mov	r1, fp
 8006698:	f7f9 fdfe 	bl	8000298 <__aeabi_dsub>
 800669c:	460b      	mov	r3, r1
 800669e:	4926      	ldr	r1, [pc, #152]	; (8006738 <__kernel_cos+0x180>)
 80066a0:	4602      	mov	r2, r0
 80066a2:	2000      	movs	r0, #0
 80066a4:	f7f9 fdf8 	bl	8000298 <__aeabi_dsub>
 80066a8:	ec41 0b10 	vmov	d0, r0, r1
 80066ac:	b003      	add	sp, #12
 80066ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066b2:	4b22      	ldr	r3, [pc, #136]	; (800673c <__kernel_cos+0x184>)
 80066b4:	4920      	ldr	r1, [pc, #128]	; (8006738 <__kernel_cos+0x180>)
 80066b6:	4598      	cmp	r8, r3
 80066b8:	bfcc      	ite	gt
 80066ba:	4d21      	ldrgt	r5, [pc, #132]	; (8006740 <__kernel_cos+0x188>)
 80066bc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80066c0:	2400      	movs	r4, #0
 80066c2:	4622      	mov	r2, r4
 80066c4:	462b      	mov	r3, r5
 80066c6:	2000      	movs	r0, #0
 80066c8:	f7f9 fde6 	bl	8000298 <__aeabi_dsub>
 80066cc:	4622      	mov	r2, r4
 80066ce:	4680      	mov	r8, r0
 80066d0:	4689      	mov	r9, r1
 80066d2:	462b      	mov	r3, r5
 80066d4:	4650      	mov	r0, sl
 80066d6:	4659      	mov	r1, fp
 80066d8:	f7f9 fdde 	bl	8000298 <__aeabi_dsub>
 80066dc:	4632      	mov	r2, r6
 80066de:	463b      	mov	r3, r7
 80066e0:	f7f9 fdda 	bl	8000298 <__aeabi_dsub>
 80066e4:	4602      	mov	r2, r0
 80066e6:	460b      	mov	r3, r1
 80066e8:	4640      	mov	r0, r8
 80066ea:	4649      	mov	r1, r9
 80066ec:	e7da      	b.n	80066a4 <__kernel_cos+0xec>
 80066ee:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8006728 <__kernel_cos+0x170>
 80066f2:	e7db      	b.n	80066ac <__kernel_cos+0xf4>
 80066f4:	f3af 8000 	nop.w
 80066f8:	be8838d4 	.word	0xbe8838d4
 80066fc:	bda8fae9 	.word	0xbda8fae9
 8006700:	bdb4b1c4 	.word	0xbdb4b1c4
 8006704:	3e21ee9e 	.word	0x3e21ee9e
 8006708:	809c52ad 	.word	0x809c52ad
 800670c:	3e927e4f 	.word	0x3e927e4f
 8006710:	19cb1590 	.word	0x19cb1590
 8006714:	3efa01a0 	.word	0x3efa01a0
 8006718:	16c15177 	.word	0x16c15177
 800671c:	3f56c16c 	.word	0x3f56c16c
 8006720:	5555554c 	.word	0x5555554c
 8006724:	3fa55555 	.word	0x3fa55555
 8006728:	00000000 	.word	0x00000000
 800672c:	3ff00000 	.word	0x3ff00000
 8006730:	3fe00000 	.word	0x3fe00000
 8006734:	3fd33332 	.word	0x3fd33332
 8006738:	3ff00000 	.word	0x3ff00000
 800673c:	3fe90000 	.word	0x3fe90000
 8006740:	3fd20000 	.word	0x3fd20000
 8006744:	00000000 	.word	0x00000000

08006748 <__kernel_rem_pio2>:
 8006748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800674c:	ed2d 8b02 	vpush	{d8}
 8006750:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8006754:	f112 0f14 	cmn.w	r2, #20
 8006758:	9308      	str	r3, [sp, #32]
 800675a:	9101      	str	r1, [sp, #4]
 800675c:	4bc4      	ldr	r3, [pc, #784]	; (8006a70 <__kernel_rem_pio2+0x328>)
 800675e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8006760:	900b      	str	r0, [sp, #44]	; 0x2c
 8006762:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006766:	9302      	str	r3, [sp, #8]
 8006768:	9b08      	ldr	r3, [sp, #32]
 800676a:	f103 33ff 	add.w	r3, r3, #4294967295
 800676e:	bfa8      	it	ge
 8006770:	1ed4      	subge	r4, r2, #3
 8006772:	9306      	str	r3, [sp, #24]
 8006774:	bfb2      	itee	lt
 8006776:	2400      	movlt	r4, #0
 8006778:	2318      	movge	r3, #24
 800677a:	fb94 f4f3 	sdivge	r4, r4, r3
 800677e:	f06f 0317 	mvn.w	r3, #23
 8006782:	fb04 3303 	mla	r3, r4, r3, r3
 8006786:	eb03 0a02 	add.w	sl, r3, r2
 800678a:	9b02      	ldr	r3, [sp, #8]
 800678c:	9a06      	ldr	r2, [sp, #24]
 800678e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8006a60 <__kernel_rem_pio2+0x318>
 8006792:	eb03 0802 	add.w	r8, r3, r2
 8006796:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8006798:	1aa7      	subs	r7, r4, r2
 800679a:	ae22      	add	r6, sp, #136	; 0x88
 800679c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80067a0:	2500      	movs	r5, #0
 80067a2:	4545      	cmp	r5, r8
 80067a4:	dd13      	ble.n	80067ce <__kernel_rem_pio2+0x86>
 80067a6:	9b08      	ldr	r3, [sp, #32]
 80067a8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8006a60 <__kernel_rem_pio2+0x318>
 80067ac:	aa22      	add	r2, sp, #136	; 0x88
 80067ae:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80067b2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80067b6:	f04f 0800 	mov.w	r8, #0
 80067ba:	9b02      	ldr	r3, [sp, #8]
 80067bc:	4598      	cmp	r8, r3
 80067be:	dc2f      	bgt.n	8006820 <__kernel_rem_pio2+0xd8>
 80067c0:	ed8d 8b04 	vstr	d8, [sp, #16]
 80067c4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80067c8:	462f      	mov	r7, r5
 80067ca:	2600      	movs	r6, #0
 80067cc:	e01b      	b.n	8006806 <__kernel_rem_pio2+0xbe>
 80067ce:	42ef      	cmn	r7, r5
 80067d0:	d407      	bmi.n	80067e2 <__kernel_rem_pio2+0x9a>
 80067d2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80067d6:	f7f9 fead 	bl	8000534 <__aeabi_i2d>
 80067da:	e8e6 0102 	strd	r0, r1, [r6], #8
 80067de:	3501      	adds	r5, #1
 80067e0:	e7df      	b.n	80067a2 <__kernel_rem_pio2+0x5a>
 80067e2:	ec51 0b18 	vmov	r0, r1, d8
 80067e6:	e7f8      	b.n	80067da <__kernel_rem_pio2+0x92>
 80067e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067ec:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80067f0:	f7f9 ff0a 	bl	8000608 <__aeabi_dmul>
 80067f4:	4602      	mov	r2, r0
 80067f6:	460b      	mov	r3, r1
 80067f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067fc:	f7f9 fd4e 	bl	800029c <__adddf3>
 8006800:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006804:	3601      	adds	r6, #1
 8006806:	9b06      	ldr	r3, [sp, #24]
 8006808:	429e      	cmp	r6, r3
 800680a:	f1a7 0708 	sub.w	r7, r7, #8
 800680e:	ddeb      	ble.n	80067e8 <__kernel_rem_pio2+0xa0>
 8006810:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006814:	f108 0801 	add.w	r8, r8, #1
 8006818:	ecab 7b02 	vstmia	fp!, {d7}
 800681c:	3508      	adds	r5, #8
 800681e:	e7cc      	b.n	80067ba <__kernel_rem_pio2+0x72>
 8006820:	9b02      	ldr	r3, [sp, #8]
 8006822:	aa0e      	add	r2, sp, #56	; 0x38
 8006824:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006828:	930d      	str	r3, [sp, #52]	; 0x34
 800682a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800682c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006830:	9c02      	ldr	r4, [sp, #8]
 8006832:	930c      	str	r3, [sp, #48]	; 0x30
 8006834:	00e3      	lsls	r3, r4, #3
 8006836:	930a      	str	r3, [sp, #40]	; 0x28
 8006838:	ab9a      	add	r3, sp, #616	; 0x268
 800683a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800683e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8006842:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8006846:	ab72      	add	r3, sp, #456	; 0x1c8
 8006848:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800684c:	46c3      	mov	fp, r8
 800684e:	46a1      	mov	r9, r4
 8006850:	f1b9 0f00 	cmp.w	r9, #0
 8006854:	f1a5 0508 	sub.w	r5, r5, #8
 8006858:	dc77      	bgt.n	800694a <__kernel_rem_pio2+0x202>
 800685a:	ec47 6b10 	vmov	d0, r6, r7
 800685e:	4650      	mov	r0, sl
 8006860:	f000 fc0a 	bl	8007078 <scalbn>
 8006864:	ec57 6b10 	vmov	r6, r7, d0
 8006868:	2200      	movs	r2, #0
 800686a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800686e:	ee10 0a10 	vmov	r0, s0
 8006872:	4639      	mov	r1, r7
 8006874:	f7f9 fec8 	bl	8000608 <__aeabi_dmul>
 8006878:	ec41 0b10 	vmov	d0, r0, r1
 800687c:	f000 fb7c 	bl	8006f78 <floor>
 8006880:	4b7c      	ldr	r3, [pc, #496]	; (8006a74 <__kernel_rem_pio2+0x32c>)
 8006882:	ec51 0b10 	vmov	r0, r1, d0
 8006886:	2200      	movs	r2, #0
 8006888:	f7f9 febe 	bl	8000608 <__aeabi_dmul>
 800688c:	4602      	mov	r2, r0
 800688e:	460b      	mov	r3, r1
 8006890:	4630      	mov	r0, r6
 8006892:	4639      	mov	r1, r7
 8006894:	f7f9 fd00 	bl	8000298 <__aeabi_dsub>
 8006898:	460f      	mov	r7, r1
 800689a:	4606      	mov	r6, r0
 800689c:	f7fa f964 	bl	8000b68 <__aeabi_d2iz>
 80068a0:	9004      	str	r0, [sp, #16]
 80068a2:	f7f9 fe47 	bl	8000534 <__aeabi_i2d>
 80068a6:	4602      	mov	r2, r0
 80068a8:	460b      	mov	r3, r1
 80068aa:	4630      	mov	r0, r6
 80068ac:	4639      	mov	r1, r7
 80068ae:	f7f9 fcf3 	bl	8000298 <__aeabi_dsub>
 80068b2:	f1ba 0f00 	cmp.w	sl, #0
 80068b6:	4606      	mov	r6, r0
 80068b8:	460f      	mov	r7, r1
 80068ba:	dd6d      	ble.n	8006998 <__kernel_rem_pio2+0x250>
 80068bc:	1e62      	subs	r2, r4, #1
 80068be:	ab0e      	add	r3, sp, #56	; 0x38
 80068c0:	9d04      	ldr	r5, [sp, #16]
 80068c2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80068c6:	f1ca 0118 	rsb	r1, sl, #24
 80068ca:	fa40 f301 	asr.w	r3, r0, r1
 80068ce:	441d      	add	r5, r3
 80068d0:	408b      	lsls	r3, r1
 80068d2:	1ac0      	subs	r0, r0, r3
 80068d4:	ab0e      	add	r3, sp, #56	; 0x38
 80068d6:	9504      	str	r5, [sp, #16]
 80068d8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80068dc:	f1ca 0317 	rsb	r3, sl, #23
 80068e0:	fa40 fb03 	asr.w	fp, r0, r3
 80068e4:	f1bb 0f00 	cmp.w	fp, #0
 80068e8:	dd65      	ble.n	80069b6 <__kernel_rem_pio2+0x26e>
 80068ea:	9b04      	ldr	r3, [sp, #16]
 80068ec:	2200      	movs	r2, #0
 80068ee:	3301      	adds	r3, #1
 80068f0:	9304      	str	r3, [sp, #16]
 80068f2:	4615      	mov	r5, r2
 80068f4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80068f8:	4294      	cmp	r4, r2
 80068fa:	f300 809c 	bgt.w	8006a36 <__kernel_rem_pio2+0x2ee>
 80068fe:	f1ba 0f00 	cmp.w	sl, #0
 8006902:	dd07      	ble.n	8006914 <__kernel_rem_pio2+0x1cc>
 8006904:	f1ba 0f01 	cmp.w	sl, #1
 8006908:	f000 80c0 	beq.w	8006a8c <__kernel_rem_pio2+0x344>
 800690c:	f1ba 0f02 	cmp.w	sl, #2
 8006910:	f000 80c6 	beq.w	8006aa0 <__kernel_rem_pio2+0x358>
 8006914:	f1bb 0f02 	cmp.w	fp, #2
 8006918:	d14d      	bne.n	80069b6 <__kernel_rem_pio2+0x26e>
 800691a:	4632      	mov	r2, r6
 800691c:	463b      	mov	r3, r7
 800691e:	4956      	ldr	r1, [pc, #344]	; (8006a78 <__kernel_rem_pio2+0x330>)
 8006920:	2000      	movs	r0, #0
 8006922:	f7f9 fcb9 	bl	8000298 <__aeabi_dsub>
 8006926:	4606      	mov	r6, r0
 8006928:	460f      	mov	r7, r1
 800692a:	2d00      	cmp	r5, #0
 800692c:	d043      	beq.n	80069b6 <__kernel_rem_pio2+0x26e>
 800692e:	4650      	mov	r0, sl
 8006930:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8006a68 <__kernel_rem_pio2+0x320>
 8006934:	f000 fba0 	bl	8007078 <scalbn>
 8006938:	4630      	mov	r0, r6
 800693a:	4639      	mov	r1, r7
 800693c:	ec53 2b10 	vmov	r2, r3, d0
 8006940:	f7f9 fcaa 	bl	8000298 <__aeabi_dsub>
 8006944:	4606      	mov	r6, r0
 8006946:	460f      	mov	r7, r1
 8006948:	e035      	b.n	80069b6 <__kernel_rem_pio2+0x26e>
 800694a:	4b4c      	ldr	r3, [pc, #304]	; (8006a7c <__kernel_rem_pio2+0x334>)
 800694c:	2200      	movs	r2, #0
 800694e:	4630      	mov	r0, r6
 8006950:	4639      	mov	r1, r7
 8006952:	f7f9 fe59 	bl	8000608 <__aeabi_dmul>
 8006956:	f7fa f907 	bl	8000b68 <__aeabi_d2iz>
 800695a:	f7f9 fdeb 	bl	8000534 <__aeabi_i2d>
 800695e:	4602      	mov	r2, r0
 8006960:	460b      	mov	r3, r1
 8006962:	ec43 2b18 	vmov	d8, r2, r3
 8006966:	4b46      	ldr	r3, [pc, #280]	; (8006a80 <__kernel_rem_pio2+0x338>)
 8006968:	2200      	movs	r2, #0
 800696a:	f7f9 fe4d 	bl	8000608 <__aeabi_dmul>
 800696e:	4602      	mov	r2, r0
 8006970:	460b      	mov	r3, r1
 8006972:	4630      	mov	r0, r6
 8006974:	4639      	mov	r1, r7
 8006976:	f7f9 fc8f 	bl	8000298 <__aeabi_dsub>
 800697a:	f7fa f8f5 	bl	8000b68 <__aeabi_d2iz>
 800697e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006982:	f84b 0b04 	str.w	r0, [fp], #4
 8006986:	ec51 0b18 	vmov	r0, r1, d8
 800698a:	f7f9 fc87 	bl	800029c <__adddf3>
 800698e:	f109 39ff 	add.w	r9, r9, #4294967295
 8006992:	4606      	mov	r6, r0
 8006994:	460f      	mov	r7, r1
 8006996:	e75b      	b.n	8006850 <__kernel_rem_pio2+0x108>
 8006998:	d106      	bne.n	80069a8 <__kernel_rem_pio2+0x260>
 800699a:	1e63      	subs	r3, r4, #1
 800699c:	aa0e      	add	r2, sp, #56	; 0x38
 800699e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80069a2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 80069a6:	e79d      	b.n	80068e4 <__kernel_rem_pio2+0x19c>
 80069a8:	4b36      	ldr	r3, [pc, #216]	; (8006a84 <__kernel_rem_pio2+0x33c>)
 80069aa:	2200      	movs	r2, #0
 80069ac:	f7fa f8b2 	bl	8000b14 <__aeabi_dcmpge>
 80069b0:	2800      	cmp	r0, #0
 80069b2:	d13d      	bne.n	8006a30 <__kernel_rem_pio2+0x2e8>
 80069b4:	4683      	mov	fp, r0
 80069b6:	2200      	movs	r2, #0
 80069b8:	2300      	movs	r3, #0
 80069ba:	4630      	mov	r0, r6
 80069bc:	4639      	mov	r1, r7
 80069be:	f7fa f88b 	bl	8000ad8 <__aeabi_dcmpeq>
 80069c2:	2800      	cmp	r0, #0
 80069c4:	f000 80c0 	beq.w	8006b48 <__kernel_rem_pio2+0x400>
 80069c8:	1e65      	subs	r5, r4, #1
 80069ca:	462b      	mov	r3, r5
 80069cc:	2200      	movs	r2, #0
 80069ce:	9902      	ldr	r1, [sp, #8]
 80069d0:	428b      	cmp	r3, r1
 80069d2:	da6c      	bge.n	8006aae <__kernel_rem_pio2+0x366>
 80069d4:	2a00      	cmp	r2, #0
 80069d6:	f000 8089 	beq.w	8006aec <__kernel_rem_pio2+0x3a4>
 80069da:	ab0e      	add	r3, sp, #56	; 0x38
 80069dc:	f1aa 0a18 	sub.w	sl, sl, #24
 80069e0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	f000 80ad 	beq.w	8006b44 <__kernel_rem_pio2+0x3fc>
 80069ea:	4650      	mov	r0, sl
 80069ec:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8006a68 <__kernel_rem_pio2+0x320>
 80069f0:	f000 fb42 	bl	8007078 <scalbn>
 80069f4:	ab9a      	add	r3, sp, #616	; 0x268
 80069f6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80069fa:	ec57 6b10 	vmov	r6, r7, d0
 80069fe:	00ec      	lsls	r4, r5, #3
 8006a00:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8006a04:	46aa      	mov	sl, r5
 8006a06:	f1ba 0f00 	cmp.w	sl, #0
 8006a0a:	f280 80d6 	bge.w	8006bba <__kernel_rem_pio2+0x472>
 8006a0e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8006a60 <__kernel_rem_pio2+0x318>
 8006a12:	462e      	mov	r6, r5
 8006a14:	2e00      	cmp	r6, #0
 8006a16:	f2c0 8104 	blt.w	8006c22 <__kernel_rem_pio2+0x4da>
 8006a1a:	ab72      	add	r3, sp, #456	; 0x1c8
 8006a1c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8006a20:	f8df a064 	ldr.w	sl, [pc, #100]	; 8006a88 <__kernel_rem_pio2+0x340>
 8006a24:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8006a28:	f04f 0800 	mov.w	r8, #0
 8006a2c:	1baf      	subs	r7, r5, r6
 8006a2e:	e0ea      	b.n	8006c06 <__kernel_rem_pio2+0x4be>
 8006a30:	f04f 0b02 	mov.w	fp, #2
 8006a34:	e759      	b.n	80068ea <__kernel_rem_pio2+0x1a2>
 8006a36:	f8d8 3000 	ldr.w	r3, [r8]
 8006a3a:	b955      	cbnz	r5, 8006a52 <__kernel_rem_pio2+0x30a>
 8006a3c:	b123      	cbz	r3, 8006a48 <__kernel_rem_pio2+0x300>
 8006a3e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8006a42:	f8c8 3000 	str.w	r3, [r8]
 8006a46:	2301      	movs	r3, #1
 8006a48:	3201      	adds	r2, #1
 8006a4a:	f108 0804 	add.w	r8, r8, #4
 8006a4e:	461d      	mov	r5, r3
 8006a50:	e752      	b.n	80068f8 <__kernel_rem_pio2+0x1b0>
 8006a52:	1acb      	subs	r3, r1, r3
 8006a54:	f8c8 3000 	str.w	r3, [r8]
 8006a58:	462b      	mov	r3, r5
 8006a5a:	e7f5      	b.n	8006a48 <__kernel_rem_pio2+0x300>
 8006a5c:	f3af 8000 	nop.w
	...
 8006a6c:	3ff00000 	.word	0x3ff00000
 8006a70:	0800a4b0 	.word	0x0800a4b0
 8006a74:	40200000 	.word	0x40200000
 8006a78:	3ff00000 	.word	0x3ff00000
 8006a7c:	3e700000 	.word	0x3e700000
 8006a80:	41700000 	.word	0x41700000
 8006a84:	3fe00000 	.word	0x3fe00000
 8006a88:	0800a470 	.word	0x0800a470
 8006a8c:	1e62      	subs	r2, r4, #1
 8006a8e:	ab0e      	add	r3, sp, #56	; 0x38
 8006a90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a94:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006a98:	a90e      	add	r1, sp, #56	; 0x38
 8006a9a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006a9e:	e739      	b.n	8006914 <__kernel_rem_pio2+0x1cc>
 8006aa0:	1e62      	subs	r2, r4, #1
 8006aa2:	ab0e      	add	r3, sp, #56	; 0x38
 8006aa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aa8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006aac:	e7f4      	b.n	8006a98 <__kernel_rem_pio2+0x350>
 8006aae:	a90e      	add	r1, sp, #56	; 0x38
 8006ab0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006ab4:	3b01      	subs	r3, #1
 8006ab6:	430a      	orrs	r2, r1
 8006ab8:	e789      	b.n	80069ce <__kernel_rem_pio2+0x286>
 8006aba:	3301      	adds	r3, #1
 8006abc:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8006ac0:	2900      	cmp	r1, #0
 8006ac2:	d0fa      	beq.n	8006aba <__kernel_rem_pio2+0x372>
 8006ac4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ac6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8006aca:	446a      	add	r2, sp
 8006acc:	3a98      	subs	r2, #152	; 0x98
 8006ace:	920a      	str	r2, [sp, #40]	; 0x28
 8006ad0:	9a08      	ldr	r2, [sp, #32]
 8006ad2:	18e3      	adds	r3, r4, r3
 8006ad4:	18a5      	adds	r5, r4, r2
 8006ad6:	aa22      	add	r2, sp, #136	; 0x88
 8006ad8:	f104 0801 	add.w	r8, r4, #1
 8006adc:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8006ae0:	9304      	str	r3, [sp, #16]
 8006ae2:	9b04      	ldr	r3, [sp, #16]
 8006ae4:	4543      	cmp	r3, r8
 8006ae6:	da04      	bge.n	8006af2 <__kernel_rem_pio2+0x3aa>
 8006ae8:	461c      	mov	r4, r3
 8006aea:	e6a3      	b.n	8006834 <__kernel_rem_pio2+0xec>
 8006aec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006aee:	2301      	movs	r3, #1
 8006af0:	e7e4      	b.n	8006abc <__kernel_rem_pio2+0x374>
 8006af2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006af4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8006af8:	f7f9 fd1c 	bl	8000534 <__aeabi_i2d>
 8006afc:	e8e5 0102 	strd	r0, r1, [r5], #8
 8006b00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b02:	46ab      	mov	fp, r5
 8006b04:	461c      	mov	r4, r3
 8006b06:	f04f 0900 	mov.w	r9, #0
 8006b0a:	2600      	movs	r6, #0
 8006b0c:	2700      	movs	r7, #0
 8006b0e:	9b06      	ldr	r3, [sp, #24]
 8006b10:	4599      	cmp	r9, r3
 8006b12:	dd06      	ble.n	8006b22 <__kernel_rem_pio2+0x3da>
 8006b14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b16:	e8e3 6702 	strd	r6, r7, [r3], #8
 8006b1a:	f108 0801 	add.w	r8, r8, #1
 8006b1e:	930a      	str	r3, [sp, #40]	; 0x28
 8006b20:	e7df      	b.n	8006ae2 <__kernel_rem_pio2+0x39a>
 8006b22:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8006b26:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8006b2a:	f7f9 fd6d 	bl	8000608 <__aeabi_dmul>
 8006b2e:	4602      	mov	r2, r0
 8006b30:	460b      	mov	r3, r1
 8006b32:	4630      	mov	r0, r6
 8006b34:	4639      	mov	r1, r7
 8006b36:	f7f9 fbb1 	bl	800029c <__adddf3>
 8006b3a:	f109 0901 	add.w	r9, r9, #1
 8006b3e:	4606      	mov	r6, r0
 8006b40:	460f      	mov	r7, r1
 8006b42:	e7e4      	b.n	8006b0e <__kernel_rem_pio2+0x3c6>
 8006b44:	3d01      	subs	r5, #1
 8006b46:	e748      	b.n	80069da <__kernel_rem_pio2+0x292>
 8006b48:	ec47 6b10 	vmov	d0, r6, r7
 8006b4c:	f1ca 0000 	rsb	r0, sl, #0
 8006b50:	f000 fa92 	bl	8007078 <scalbn>
 8006b54:	ec57 6b10 	vmov	r6, r7, d0
 8006b58:	4ba0      	ldr	r3, [pc, #640]	; (8006ddc <__kernel_rem_pio2+0x694>)
 8006b5a:	ee10 0a10 	vmov	r0, s0
 8006b5e:	2200      	movs	r2, #0
 8006b60:	4639      	mov	r1, r7
 8006b62:	f7f9 ffd7 	bl	8000b14 <__aeabi_dcmpge>
 8006b66:	b1f8      	cbz	r0, 8006ba8 <__kernel_rem_pio2+0x460>
 8006b68:	4b9d      	ldr	r3, [pc, #628]	; (8006de0 <__kernel_rem_pio2+0x698>)
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	4630      	mov	r0, r6
 8006b6e:	4639      	mov	r1, r7
 8006b70:	f7f9 fd4a 	bl	8000608 <__aeabi_dmul>
 8006b74:	f7f9 fff8 	bl	8000b68 <__aeabi_d2iz>
 8006b78:	4680      	mov	r8, r0
 8006b7a:	f7f9 fcdb 	bl	8000534 <__aeabi_i2d>
 8006b7e:	4b97      	ldr	r3, [pc, #604]	; (8006ddc <__kernel_rem_pio2+0x694>)
 8006b80:	2200      	movs	r2, #0
 8006b82:	f7f9 fd41 	bl	8000608 <__aeabi_dmul>
 8006b86:	460b      	mov	r3, r1
 8006b88:	4602      	mov	r2, r0
 8006b8a:	4639      	mov	r1, r7
 8006b8c:	4630      	mov	r0, r6
 8006b8e:	f7f9 fb83 	bl	8000298 <__aeabi_dsub>
 8006b92:	f7f9 ffe9 	bl	8000b68 <__aeabi_d2iz>
 8006b96:	1c65      	adds	r5, r4, #1
 8006b98:	ab0e      	add	r3, sp, #56	; 0x38
 8006b9a:	f10a 0a18 	add.w	sl, sl, #24
 8006b9e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006ba2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8006ba6:	e720      	b.n	80069ea <__kernel_rem_pio2+0x2a2>
 8006ba8:	4630      	mov	r0, r6
 8006baa:	4639      	mov	r1, r7
 8006bac:	f7f9 ffdc 	bl	8000b68 <__aeabi_d2iz>
 8006bb0:	ab0e      	add	r3, sp, #56	; 0x38
 8006bb2:	4625      	mov	r5, r4
 8006bb4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006bb8:	e717      	b.n	80069ea <__kernel_rem_pio2+0x2a2>
 8006bba:	ab0e      	add	r3, sp, #56	; 0x38
 8006bbc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8006bc0:	f7f9 fcb8 	bl	8000534 <__aeabi_i2d>
 8006bc4:	4632      	mov	r2, r6
 8006bc6:	463b      	mov	r3, r7
 8006bc8:	f7f9 fd1e 	bl	8000608 <__aeabi_dmul>
 8006bcc:	4b84      	ldr	r3, [pc, #528]	; (8006de0 <__kernel_rem_pio2+0x698>)
 8006bce:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	4630      	mov	r0, r6
 8006bd6:	4639      	mov	r1, r7
 8006bd8:	f7f9 fd16 	bl	8000608 <__aeabi_dmul>
 8006bdc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006be0:	4606      	mov	r6, r0
 8006be2:	460f      	mov	r7, r1
 8006be4:	e70f      	b.n	8006a06 <__kernel_rem_pio2+0x2be>
 8006be6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8006bea:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8006bee:	f7f9 fd0b 	bl	8000608 <__aeabi_dmul>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	460b      	mov	r3, r1
 8006bf6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006bfa:	f7f9 fb4f 	bl	800029c <__adddf3>
 8006bfe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006c02:	f108 0801 	add.w	r8, r8, #1
 8006c06:	9b02      	ldr	r3, [sp, #8]
 8006c08:	4598      	cmp	r8, r3
 8006c0a:	dc01      	bgt.n	8006c10 <__kernel_rem_pio2+0x4c8>
 8006c0c:	45b8      	cmp	r8, r7
 8006c0e:	ddea      	ble.n	8006be6 <__kernel_rem_pio2+0x49e>
 8006c10:	ed9d 7b06 	vldr	d7, [sp, #24]
 8006c14:	ab4a      	add	r3, sp, #296	; 0x128
 8006c16:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006c1a:	ed87 7b00 	vstr	d7, [r7]
 8006c1e:	3e01      	subs	r6, #1
 8006c20:	e6f8      	b.n	8006a14 <__kernel_rem_pio2+0x2cc>
 8006c22:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8006c24:	2b02      	cmp	r3, #2
 8006c26:	dc0b      	bgt.n	8006c40 <__kernel_rem_pio2+0x4f8>
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	dc35      	bgt.n	8006c98 <__kernel_rem_pio2+0x550>
 8006c2c:	d059      	beq.n	8006ce2 <__kernel_rem_pio2+0x59a>
 8006c2e:	9b04      	ldr	r3, [sp, #16]
 8006c30:	f003 0007 	and.w	r0, r3, #7
 8006c34:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8006c38:	ecbd 8b02 	vpop	{d8}
 8006c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c40:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8006c42:	2b03      	cmp	r3, #3
 8006c44:	d1f3      	bne.n	8006c2e <__kernel_rem_pio2+0x4e6>
 8006c46:	ab4a      	add	r3, sp, #296	; 0x128
 8006c48:	4423      	add	r3, r4
 8006c4a:	9306      	str	r3, [sp, #24]
 8006c4c:	461c      	mov	r4, r3
 8006c4e:	469a      	mov	sl, r3
 8006c50:	9502      	str	r5, [sp, #8]
 8006c52:	9b02      	ldr	r3, [sp, #8]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	f1aa 0a08 	sub.w	sl, sl, #8
 8006c5a:	dc6b      	bgt.n	8006d34 <__kernel_rem_pio2+0x5ec>
 8006c5c:	46aa      	mov	sl, r5
 8006c5e:	f1ba 0f01 	cmp.w	sl, #1
 8006c62:	f1a4 0408 	sub.w	r4, r4, #8
 8006c66:	f300 8085 	bgt.w	8006d74 <__kernel_rem_pio2+0x62c>
 8006c6a:	9c06      	ldr	r4, [sp, #24]
 8006c6c:	2000      	movs	r0, #0
 8006c6e:	3408      	adds	r4, #8
 8006c70:	2100      	movs	r1, #0
 8006c72:	2d01      	cmp	r5, #1
 8006c74:	f300 809d 	bgt.w	8006db2 <__kernel_rem_pio2+0x66a>
 8006c78:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8006c7c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8006c80:	f1bb 0f00 	cmp.w	fp, #0
 8006c84:	f040 809b 	bne.w	8006dbe <__kernel_rem_pio2+0x676>
 8006c88:	9b01      	ldr	r3, [sp, #4]
 8006c8a:	e9c3 5600 	strd	r5, r6, [r3]
 8006c8e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8006c92:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8006c96:	e7ca      	b.n	8006c2e <__kernel_rem_pio2+0x4e6>
 8006c98:	3408      	adds	r4, #8
 8006c9a:	ab4a      	add	r3, sp, #296	; 0x128
 8006c9c:	441c      	add	r4, r3
 8006c9e:	462e      	mov	r6, r5
 8006ca0:	2000      	movs	r0, #0
 8006ca2:	2100      	movs	r1, #0
 8006ca4:	2e00      	cmp	r6, #0
 8006ca6:	da36      	bge.n	8006d16 <__kernel_rem_pio2+0x5ce>
 8006ca8:	f1bb 0f00 	cmp.w	fp, #0
 8006cac:	d039      	beq.n	8006d22 <__kernel_rem_pio2+0x5da>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006cb4:	9c01      	ldr	r4, [sp, #4]
 8006cb6:	e9c4 2300 	strd	r2, r3, [r4]
 8006cba:	4602      	mov	r2, r0
 8006cbc:	460b      	mov	r3, r1
 8006cbe:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8006cc2:	f7f9 fae9 	bl	8000298 <__aeabi_dsub>
 8006cc6:	ae4c      	add	r6, sp, #304	; 0x130
 8006cc8:	2401      	movs	r4, #1
 8006cca:	42a5      	cmp	r5, r4
 8006ccc:	da2c      	bge.n	8006d28 <__kernel_rem_pio2+0x5e0>
 8006cce:	f1bb 0f00 	cmp.w	fp, #0
 8006cd2:	d002      	beq.n	8006cda <__kernel_rem_pio2+0x592>
 8006cd4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006cd8:	4619      	mov	r1, r3
 8006cda:	9b01      	ldr	r3, [sp, #4]
 8006cdc:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8006ce0:	e7a5      	b.n	8006c2e <__kernel_rem_pio2+0x4e6>
 8006ce2:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8006ce6:	eb0d 0403 	add.w	r4, sp, r3
 8006cea:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8006cee:	2000      	movs	r0, #0
 8006cf0:	2100      	movs	r1, #0
 8006cf2:	2d00      	cmp	r5, #0
 8006cf4:	da09      	bge.n	8006d0a <__kernel_rem_pio2+0x5c2>
 8006cf6:	f1bb 0f00 	cmp.w	fp, #0
 8006cfa:	d002      	beq.n	8006d02 <__kernel_rem_pio2+0x5ba>
 8006cfc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006d00:	4619      	mov	r1, r3
 8006d02:	9b01      	ldr	r3, [sp, #4]
 8006d04:	e9c3 0100 	strd	r0, r1, [r3]
 8006d08:	e791      	b.n	8006c2e <__kernel_rem_pio2+0x4e6>
 8006d0a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006d0e:	f7f9 fac5 	bl	800029c <__adddf3>
 8006d12:	3d01      	subs	r5, #1
 8006d14:	e7ed      	b.n	8006cf2 <__kernel_rem_pio2+0x5aa>
 8006d16:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006d1a:	f7f9 fabf 	bl	800029c <__adddf3>
 8006d1e:	3e01      	subs	r6, #1
 8006d20:	e7c0      	b.n	8006ca4 <__kernel_rem_pio2+0x55c>
 8006d22:	4602      	mov	r2, r0
 8006d24:	460b      	mov	r3, r1
 8006d26:	e7c5      	b.n	8006cb4 <__kernel_rem_pio2+0x56c>
 8006d28:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8006d2c:	f7f9 fab6 	bl	800029c <__adddf3>
 8006d30:	3401      	adds	r4, #1
 8006d32:	e7ca      	b.n	8006cca <__kernel_rem_pio2+0x582>
 8006d34:	e9da 8900 	ldrd	r8, r9, [sl]
 8006d38:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8006d3c:	9b02      	ldr	r3, [sp, #8]
 8006d3e:	3b01      	subs	r3, #1
 8006d40:	9302      	str	r3, [sp, #8]
 8006d42:	4632      	mov	r2, r6
 8006d44:	463b      	mov	r3, r7
 8006d46:	4640      	mov	r0, r8
 8006d48:	4649      	mov	r1, r9
 8006d4a:	f7f9 faa7 	bl	800029c <__adddf3>
 8006d4e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006d52:	4602      	mov	r2, r0
 8006d54:	460b      	mov	r3, r1
 8006d56:	4640      	mov	r0, r8
 8006d58:	4649      	mov	r1, r9
 8006d5a:	f7f9 fa9d 	bl	8000298 <__aeabi_dsub>
 8006d5e:	4632      	mov	r2, r6
 8006d60:	463b      	mov	r3, r7
 8006d62:	f7f9 fa9b 	bl	800029c <__adddf3>
 8006d66:	ed9d 7b08 	vldr	d7, [sp, #32]
 8006d6a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006d6e:	ed8a 7b00 	vstr	d7, [sl]
 8006d72:	e76e      	b.n	8006c52 <__kernel_rem_pio2+0x50a>
 8006d74:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006d78:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8006d7c:	4640      	mov	r0, r8
 8006d7e:	4632      	mov	r2, r6
 8006d80:	463b      	mov	r3, r7
 8006d82:	4649      	mov	r1, r9
 8006d84:	f7f9 fa8a 	bl	800029c <__adddf3>
 8006d88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	460b      	mov	r3, r1
 8006d90:	4640      	mov	r0, r8
 8006d92:	4649      	mov	r1, r9
 8006d94:	f7f9 fa80 	bl	8000298 <__aeabi_dsub>
 8006d98:	4632      	mov	r2, r6
 8006d9a:	463b      	mov	r3, r7
 8006d9c:	f7f9 fa7e 	bl	800029c <__adddf3>
 8006da0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006da4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006da8:	ed84 7b00 	vstr	d7, [r4]
 8006dac:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006db0:	e755      	b.n	8006c5e <__kernel_rem_pio2+0x516>
 8006db2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006db6:	f7f9 fa71 	bl	800029c <__adddf3>
 8006dba:	3d01      	subs	r5, #1
 8006dbc:	e759      	b.n	8006c72 <__kernel_rem_pio2+0x52a>
 8006dbe:	9b01      	ldr	r3, [sp, #4]
 8006dc0:	9a01      	ldr	r2, [sp, #4]
 8006dc2:	601d      	str	r5, [r3, #0]
 8006dc4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8006dc8:	605c      	str	r4, [r3, #4]
 8006dca:	609f      	str	r7, [r3, #8]
 8006dcc:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8006dd0:	60d3      	str	r3, [r2, #12]
 8006dd2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006dd6:	6110      	str	r0, [r2, #16]
 8006dd8:	6153      	str	r3, [r2, #20]
 8006dda:	e728      	b.n	8006c2e <__kernel_rem_pio2+0x4e6>
 8006ddc:	41700000 	.word	0x41700000
 8006de0:	3e700000 	.word	0x3e700000
 8006de4:	00000000 	.word	0x00000000

08006de8 <__kernel_sin>:
 8006de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dec:	ed2d 8b04 	vpush	{d8-d9}
 8006df0:	eeb0 8a41 	vmov.f32	s16, s2
 8006df4:	eef0 8a61 	vmov.f32	s17, s3
 8006df8:	ec55 4b10 	vmov	r4, r5, d0
 8006dfc:	b083      	sub	sp, #12
 8006dfe:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006e02:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8006e06:	9001      	str	r0, [sp, #4]
 8006e08:	da06      	bge.n	8006e18 <__kernel_sin+0x30>
 8006e0a:	ee10 0a10 	vmov	r0, s0
 8006e0e:	4629      	mov	r1, r5
 8006e10:	f7f9 feaa 	bl	8000b68 <__aeabi_d2iz>
 8006e14:	2800      	cmp	r0, #0
 8006e16:	d051      	beq.n	8006ebc <__kernel_sin+0xd4>
 8006e18:	4622      	mov	r2, r4
 8006e1a:	462b      	mov	r3, r5
 8006e1c:	4620      	mov	r0, r4
 8006e1e:	4629      	mov	r1, r5
 8006e20:	f7f9 fbf2 	bl	8000608 <__aeabi_dmul>
 8006e24:	4682      	mov	sl, r0
 8006e26:	468b      	mov	fp, r1
 8006e28:	4602      	mov	r2, r0
 8006e2a:	460b      	mov	r3, r1
 8006e2c:	4620      	mov	r0, r4
 8006e2e:	4629      	mov	r1, r5
 8006e30:	f7f9 fbea 	bl	8000608 <__aeabi_dmul>
 8006e34:	a341      	add	r3, pc, #260	; (adr r3, 8006f3c <__kernel_sin+0x154>)
 8006e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e3a:	4680      	mov	r8, r0
 8006e3c:	4689      	mov	r9, r1
 8006e3e:	4650      	mov	r0, sl
 8006e40:	4659      	mov	r1, fp
 8006e42:	f7f9 fbe1 	bl	8000608 <__aeabi_dmul>
 8006e46:	a33f      	add	r3, pc, #252	; (adr r3, 8006f44 <__kernel_sin+0x15c>)
 8006e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e4c:	f7f9 fa24 	bl	8000298 <__aeabi_dsub>
 8006e50:	4652      	mov	r2, sl
 8006e52:	465b      	mov	r3, fp
 8006e54:	f7f9 fbd8 	bl	8000608 <__aeabi_dmul>
 8006e58:	a33c      	add	r3, pc, #240	; (adr r3, 8006f4c <__kernel_sin+0x164>)
 8006e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e5e:	f7f9 fa1d 	bl	800029c <__adddf3>
 8006e62:	4652      	mov	r2, sl
 8006e64:	465b      	mov	r3, fp
 8006e66:	f7f9 fbcf 	bl	8000608 <__aeabi_dmul>
 8006e6a:	a33a      	add	r3, pc, #232	; (adr r3, 8006f54 <__kernel_sin+0x16c>)
 8006e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e70:	f7f9 fa12 	bl	8000298 <__aeabi_dsub>
 8006e74:	4652      	mov	r2, sl
 8006e76:	465b      	mov	r3, fp
 8006e78:	f7f9 fbc6 	bl	8000608 <__aeabi_dmul>
 8006e7c:	a337      	add	r3, pc, #220	; (adr r3, 8006f5c <__kernel_sin+0x174>)
 8006e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e82:	f7f9 fa0b 	bl	800029c <__adddf3>
 8006e86:	9b01      	ldr	r3, [sp, #4]
 8006e88:	4606      	mov	r6, r0
 8006e8a:	460f      	mov	r7, r1
 8006e8c:	b9eb      	cbnz	r3, 8006eca <__kernel_sin+0xe2>
 8006e8e:	4602      	mov	r2, r0
 8006e90:	460b      	mov	r3, r1
 8006e92:	4650      	mov	r0, sl
 8006e94:	4659      	mov	r1, fp
 8006e96:	f7f9 fbb7 	bl	8000608 <__aeabi_dmul>
 8006e9a:	a325      	add	r3, pc, #148	; (adr r3, 8006f30 <__kernel_sin+0x148>)
 8006e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea0:	f7f9 f9fa 	bl	8000298 <__aeabi_dsub>
 8006ea4:	4642      	mov	r2, r8
 8006ea6:	464b      	mov	r3, r9
 8006ea8:	f7f9 fbae 	bl	8000608 <__aeabi_dmul>
 8006eac:	4602      	mov	r2, r0
 8006eae:	460b      	mov	r3, r1
 8006eb0:	4620      	mov	r0, r4
 8006eb2:	4629      	mov	r1, r5
 8006eb4:	f7f9 f9f2 	bl	800029c <__adddf3>
 8006eb8:	4604      	mov	r4, r0
 8006eba:	460d      	mov	r5, r1
 8006ebc:	ec45 4b10 	vmov	d0, r4, r5
 8006ec0:	b003      	add	sp, #12
 8006ec2:	ecbd 8b04 	vpop	{d8-d9}
 8006ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eca:	4b1b      	ldr	r3, [pc, #108]	; (8006f38 <__kernel_sin+0x150>)
 8006ecc:	ec51 0b18 	vmov	r0, r1, d8
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	f7f9 fb99 	bl	8000608 <__aeabi_dmul>
 8006ed6:	4632      	mov	r2, r6
 8006ed8:	ec41 0b19 	vmov	d9, r0, r1
 8006edc:	463b      	mov	r3, r7
 8006ede:	4640      	mov	r0, r8
 8006ee0:	4649      	mov	r1, r9
 8006ee2:	f7f9 fb91 	bl	8000608 <__aeabi_dmul>
 8006ee6:	4602      	mov	r2, r0
 8006ee8:	460b      	mov	r3, r1
 8006eea:	ec51 0b19 	vmov	r0, r1, d9
 8006eee:	f7f9 f9d3 	bl	8000298 <__aeabi_dsub>
 8006ef2:	4652      	mov	r2, sl
 8006ef4:	465b      	mov	r3, fp
 8006ef6:	f7f9 fb87 	bl	8000608 <__aeabi_dmul>
 8006efa:	ec53 2b18 	vmov	r2, r3, d8
 8006efe:	f7f9 f9cb 	bl	8000298 <__aeabi_dsub>
 8006f02:	a30b      	add	r3, pc, #44	; (adr r3, 8006f30 <__kernel_sin+0x148>)
 8006f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f08:	4606      	mov	r6, r0
 8006f0a:	460f      	mov	r7, r1
 8006f0c:	4640      	mov	r0, r8
 8006f0e:	4649      	mov	r1, r9
 8006f10:	f7f9 fb7a 	bl	8000608 <__aeabi_dmul>
 8006f14:	4602      	mov	r2, r0
 8006f16:	460b      	mov	r3, r1
 8006f18:	4630      	mov	r0, r6
 8006f1a:	4639      	mov	r1, r7
 8006f1c:	f7f9 f9be 	bl	800029c <__adddf3>
 8006f20:	4602      	mov	r2, r0
 8006f22:	460b      	mov	r3, r1
 8006f24:	4620      	mov	r0, r4
 8006f26:	4629      	mov	r1, r5
 8006f28:	f7f9 f9b6 	bl	8000298 <__aeabi_dsub>
 8006f2c:	e7c4      	b.n	8006eb8 <__kernel_sin+0xd0>
 8006f2e:	bf00      	nop
 8006f30:	55555549 	.word	0x55555549
 8006f34:	3fc55555 	.word	0x3fc55555
 8006f38:	3fe00000 	.word	0x3fe00000
 8006f3c:	5acfd57c 	.word	0x5acfd57c
 8006f40:	3de5d93a 	.word	0x3de5d93a
 8006f44:	8a2b9ceb 	.word	0x8a2b9ceb
 8006f48:	3e5ae5e6 	.word	0x3e5ae5e6
 8006f4c:	57b1fe7d 	.word	0x57b1fe7d
 8006f50:	3ec71de3 	.word	0x3ec71de3
 8006f54:	19c161d5 	.word	0x19c161d5
 8006f58:	3f2a01a0 	.word	0x3f2a01a0
 8006f5c:	1110f8a6 	.word	0x1110f8a6
 8006f60:	3f811111 	.word	0x3f811111

08006f64 <fabs>:
 8006f64:	ec51 0b10 	vmov	r0, r1, d0
 8006f68:	ee10 2a10 	vmov	r2, s0
 8006f6c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006f70:	ec43 2b10 	vmov	d0, r2, r3
 8006f74:	4770      	bx	lr
	...

08006f78 <floor>:
 8006f78:	ec51 0b10 	vmov	r0, r1, d0
 8006f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f80:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8006f84:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8006f88:	2e13      	cmp	r6, #19
 8006f8a:	ee10 5a10 	vmov	r5, s0
 8006f8e:	ee10 8a10 	vmov	r8, s0
 8006f92:	460c      	mov	r4, r1
 8006f94:	dc32      	bgt.n	8006ffc <floor+0x84>
 8006f96:	2e00      	cmp	r6, #0
 8006f98:	da14      	bge.n	8006fc4 <floor+0x4c>
 8006f9a:	a333      	add	r3, pc, #204	; (adr r3, 8007068 <floor+0xf0>)
 8006f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa0:	f7f9 f97c 	bl	800029c <__adddf3>
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	f7f9 fdbe 	bl	8000b28 <__aeabi_dcmpgt>
 8006fac:	b138      	cbz	r0, 8006fbe <floor+0x46>
 8006fae:	2c00      	cmp	r4, #0
 8006fb0:	da57      	bge.n	8007062 <floor+0xea>
 8006fb2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8006fb6:	431d      	orrs	r5, r3
 8006fb8:	d001      	beq.n	8006fbe <floor+0x46>
 8006fba:	4c2d      	ldr	r4, [pc, #180]	; (8007070 <floor+0xf8>)
 8006fbc:	2500      	movs	r5, #0
 8006fbe:	4621      	mov	r1, r4
 8006fc0:	4628      	mov	r0, r5
 8006fc2:	e025      	b.n	8007010 <floor+0x98>
 8006fc4:	4f2b      	ldr	r7, [pc, #172]	; (8007074 <floor+0xfc>)
 8006fc6:	4137      	asrs	r7, r6
 8006fc8:	ea01 0307 	and.w	r3, r1, r7
 8006fcc:	4303      	orrs	r3, r0
 8006fce:	d01f      	beq.n	8007010 <floor+0x98>
 8006fd0:	a325      	add	r3, pc, #148	; (adr r3, 8007068 <floor+0xf0>)
 8006fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd6:	f7f9 f961 	bl	800029c <__adddf3>
 8006fda:	2200      	movs	r2, #0
 8006fdc:	2300      	movs	r3, #0
 8006fde:	f7f9 fda3 	bl	8000b28 <__aeabi_dcmpgt>
 8006fe2:	2800      	cmp	r0, #0
 8006fe4:	d0eb      	beq.n	8006fbe <floor+0x46>
 8006fe6:	2c00      	cmp	r4, #0
 8006fe8:	bfbe      	ittt	lt
 8006fea:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8006fee:	fa43 f606 	asrlt.w	r6, r3, r6
 8006ff2:	19a4      	addlt	r4, r4, r6
 8006ff4:	ea24 0407 	bic.w	r4, r4, r7
 8006ff8:	2500      	movs	r5, #0
 8006ffa:	e7e0      	b.n	8006fbe <floor+0x46>
 8006ffc:	2e33      	cmp	r6, #51	; 0x33
 8006ffe:	dd0b      	ble.n	8007018 <floor+0xa0>
 8007000:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007004:	d104      	bne.n	8007010 <floor+0x98>
 8007006:	ee10 2a10 	vmov	r2, s0
 800700a:	460b      	mov	r3, r1
 800700c:	f7f9 f946 	bl	800029c <__adddf3>
 8007010:	ec41 0b10 	vmov	d0, r0, r1
 8007014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007018:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800701c:	f04f 33ff 	mov.w	r3, #4294967295
 8007020:	fa23 f707 	lsr.w	r7, r3, r7
 8007024:	4207      	tst	r7, r0
 8007026:	d0f3      	beq.n	8007010 <floor+0x98>
 8007028:	a30f      	add	r3, pc, #60	; (adr r3, 8007068 <floor+0xf0>)
 800702a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800702e:	f7f9 f935 	bl	800029c <__adddf3>
 8007032:	2200      	movs	r2, #0
 8007034:	2300      	movs	r3, #0
 8007036:	f7f9 fd77 	bl	8000b28 <__aeabi_dcmpgt>
 800703a:	2800      	cmp	r0, #0
 800703c:	d0bf      	beq.n	8006fbe <floor+0x46>
 800703e:	2c00      	cmp	r4, #0
 8007040:	da02      	bge.n	8007048 <floor+0xd0>
 8007042:	2e14      	cmp	r6, #20
 8007044:	d103      	bne.n	800704e <floor+0xd6>
 8007046:	3401      	adds	r4, #1
 8007048:	ea25 0507 	bic.w	r5, r5, r7
 800704c:	e7b7      	b.n	8006fbe <floor+0x46>
 800704e:	2301      	movs	r3, #1
 8007050:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007054:	fa03 f606 	lsl.w	r6, r3, r6
 8007058:	4435      	add	r5, r6
 800705a:	4545      	cmp	r5, r8
 800705c:	bf38      	it	cc
 800705e:	18e4      	addcc	r4, r4, r3
 8007060:	e7f2      	b.n	8007048 <floor+0xd0>
 8007062:	2500      	movs	r5, #0
 8007064:	462c      	mov	r4, r5
 8007066:	e7aa      	b.n	8006fbe <floor+0x46>
 8007068:	8800759c 	.word	0x8800759c
 800706c:	7e37e43c 	.word	0x7e37e43c
 8007070:	bff00000 	.word	0xbff00000
 8007074:	000fffff 	.word	0x000fffff

08007078 <scalbn>:
 8007078:	b570      	push	{r4, r5, r6, lr}
 800707a:	ec55 4b10 	vmov	r4, r5, d0
 800707e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007082:	4606      	mov	r6, r0
 8007084:	462b      	mov	r3, r5
 8007086:	b99a      	cbnz	r2, 80070b0 <scalbn+0x38>
 8007088:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800708c:	4323      	orrs	r3, r4
 800708e:	d036      	beq.n	80070fe <scalbn+0x86>
 8007090:	4b39      	ldr	r3, [pc, #228]	; (8007178 <scalbn+0x100>)
 8007092:	4629      	mov	r1, r5
 8007094:	ee10 0a10 	vmov	r0, s0
 8007098:	2200      	movs	r2, #0
 800709a:	f7f9 fab5 	bl	8000608 <__aeabi_dmul>
 800709e:	4b37      	ldr	r3, [pc, #220]	; (800717c <scalbn+0x104>)
 80070a0:	429e      	cmp	r6, r3
 80070a2:	4604      	mov	r4, r0
 80070a4:	460d      	mov	r5, r1
 80070a6:	da10      	bge.n	80070ca <scalbn+0x52>
 80070a8:	a32b      	add	r3, pc, #172	; (adr r3, 8007158 <scalbn+0xe0>)
 80070aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ae:	e03a      	b.n	8007126 <scalbn+0xae>
 80070b0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80070b4:	428a      	cmp	r2, r1
 80070b6:	d10c      	bne.n	80070d2 <scalbn+0x5a>
 80070b8:	ee10 2a10 	vmov	r2, s0
 80070bc:	4620      	mov	r0, r4
 80070be:	4629      	mov	r1, r5
 80070c0:	f7f9 f8ec 	bl	800029c <__adddf3>
 80070c4:	4604      	mov	r4, r0
 80070c6:	460d      	mov	r5, r1
 80070c8:	e019      	b.n	80070fe <scalbn+0x86>
 80070ca:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80070ce:	460b      	mov	r3, r1
 80070d0:	3a36      	subs	r2, #54	; 0x36
 80070d2:	4432      	add	r2, r6
 80070d4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80070d8:	428a      	cmp	r2, r1
 80070da:	dd08      	ble.n	80070ee <scalbn+0x76>
 80070dc:	2d00      	cmp	r5, #0
 80070de:	a120      	add	r1, pc, #128	; (adr r1, 8007160 <scalbn+0xe8>)
 80070e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80070e4:	da1c      	bge.n	8007120 <scalbn+0xa8>
 80070e6:	a120      	add	r1, pc, #128	; (adr r1, 8007168 <scalbn+0xf0>)
 80070e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80070ec:	e018      	b.n	8007120 <scalbn+0xa8>
 80070ee:	2a00      	cmp	r2, #0
 80070f0:	dd08      	ble.n	8007104 <scalbn+0x8c>
 80070f2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80070f6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80070fa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80070fe:	ec45 4b10 	vmov	d0, r4, r5
 8007102:	bd70      	pop	{r4, r5, r6, pc}
 8007104:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007108:	da19      	bge.n	800713e <scalbn+0xc6>
 800710a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800710e:	429e      	cmp	r6, r3
 8007110:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8007114:	dd0a      	ble.n	800712c <scalbn+0xb4>
 8007116:	a112      	add	r1, pc, #72	; (adr r1, 8007160 <scalbn+0xe8>)
 8007118:	e9d1 0100 	ldrd	r0, r1, [r1]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d1e2      	bne.n	80070e6 <scalbn+0x6e>
 8007120:	a30f      	add	r3, pc, #60	; (adr r3, 8007160 <scalbn+0xe8>)
 8007122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007126:	f7f9 fa6f 	bl	8000608 <__aeabi_dmul>
 800712a:	e7cb      	b.n	80070c4 <scalbn+0x4c>
 800712c:	a10a      	add	r1, pc, #40	; (adr r1, 8007158 <scalbn+0xe0>)
 800712e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d0b8      	beq.n	80070a8 <scalbn+0x30>
 8007136:	a10e      	add	r1, pc, #56	; (adr r1, 8007170 <scalbn+0xf8>)
 8007138:	e9d1 0100 	ldrd	r0, r1, [r1]
 800713c:	e7b4      	b.n	80070a8 <scalbn+0x30>
 800713e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007142:	3236      	adds	r2, #54	; 0x36
 8007144:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007148:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800714c:	4620      	mov	r0, r4
 800714e:	4b0c      	ldr	r3, [pc, #48]	; (8007180 <scalbn+0x108>)
 8007150:	2200      	movs	r2, #0
 8007152:	e7e8      	b.n	8007126 <scalbn+0xae>
 8007154:	f3af 8000 	nop.w
 8007158:	c2f8f359 	.word	0xc2f8f359
 800715c:	01a56e1f 	.word	0x01a56e1f
 8007160:	8800759c 	.word	0x8800759c
 8007164:	7e37e43c 	.word	0x7e37e43c
 8007168:	8800759c 	.word	0x8800759c
 800716c:	fe37e43c 	.word	0xfe37e43c
 8007170:	c2f8f359 	.word	0xc2f8f359
 8007174:	81a56e1f 	.word	0x81a56e1f
 8007178:	43500000 	.word	0x43500000
 800717c:	ffff3cb0 	.word	0xffff3cb0
 8007180:	3c900000 	.word	0x3c900000

08007184 <_init>:
 8007184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007186:	bf00      	nop
 8007188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800718a:	bc08      	pop	{r3}
 800718c:	469e      	mov	lr, r3
 800718e:	4770      	bx	lr

08007190 <_fini>:
 8007190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007192:	bf00      	nop
 8007194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007196:	bc08      	pop	{r3}
 8007198:	469e      	mov	lr, r3
 800719a:	4770      	bx	lr
